
Option Strict On
Option Explicit On

Imports System.Xml
Imports System.Reflection
Imports HttpMultipartParser
Imports Xunit

'
Namespace Contensive.Core
    Public Class coreClass
        Implements IDisposable
        '
        '======================================================================
        '   see _readMe.txt for project details
        '   all this key/access work is just groundwork, not the final solution. This is just to insure there is a solution.
        '------------------------------------------------------------------------
        '   objects passed by constructor - do not dispose
        '------------------------------------------------------------------------
        '
        Private cp As CPClass                                   ' constructor -- top-level cp
        '
        ' ----- shared globals
        '
        Public serverConfig As serverConfigClass
        Public clusterConfig As clusterConfigClass
        Public Property appConfig As appConfigClass             ' configuration loaded during construction
        Public Property appStatus As applicationStatusEnum      ' status of application
        '
        ' application storage
        '
        Private deleteOnDisposeFileList As New List(Of String)              ' tmp file list of files that need to be deleted during dispose
        Public Const www_requestRootPath As String = "/"
        '
        ' if this instance is a webRole, retain pointer for callbacks
        '
        Public iisContext As System.Web.HttpContext
        '
        '===================================================================================================
        ''' <summary>
        ''' menuFlyout
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property menuFlyout As coreMenuFlyoutClass
            Get
                If (_menuFlyout Is Nothing) Then
                    _menuFlyout = New coreMenuFlyoutClass(Me)
                End If
                Return _menuFlyout
            End Get
        End Property
        Private _menuFlyout As coreMenuFlyoutClass
        '
        '===================================================================================================
        ''' <summary>
        ''' userProperty
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property userProperty As corePropertyCacheClass
            Get
                If (_userProperty Is Nothing) Then
                    _userProperty = New corePropertyCacheClass(Me, PropertyTypeMember)
                End If
                Return _userProperty
            End Get
        End Property
        Private _userProperty As corePropertyCacheClass
        '
        '===================================================================================================
        ''' <summary>
        ''' visitorProperty
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property visitorProperty As corePropertyCacheClass
            Get
                If (_visitorProperty Is Nothing) Then
                    _visitorProperty = New corePropertyCacheClass(Me, PropertyTypeVisitor)
                End If
                Return _visitorProperty
            End Get
        End Property
        Private _visitorProperty As corePropertyCacheClass
        '
        '===================================================================================================
        ''' <summary>
        ''' visitProperty
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property visitProperty As corePropertyCacheClass
            Get
                If (_visitProperty Is Nothing) Then
                    _visitProperty = New corePropertyCacheClass(Me, PropertyTypeVisit)
                End If
                Return _visitProperty
            End Get
        End Property
        Private _visitProperty As corePropertyCacheClass
        '
        '===================================================================================================
        ''' <summary>
        ''' webServer
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property webServer As coreWebServerClass
            Get
                If (_webServer Is Nothing) Then
                    _webServer = New coreWebServerClass(Me)
                End If
                Return _webServer
            End Get
        End Property
        Private _webServer As coreWebServerClass
        '
        '===================================================================================================
        ''' <summary>
        ''' security object
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property security() As coreSecurityClass
            Get
                If (_security Is Nothing) Then
                    _security = New coreSecurityClass(Me, appConfig.privateKey)
                End If
                Return _security
            End Get
        End Property
        Private _security As coreSecurityClass = Nothing
        '
        '===================================================================================================
        ''' <summary>
        ''' docProperties object
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property docProperties() As coreDocPropertiesClass
            Get
                If (_doc Is Nothing) Then
                    _doc = New coreDocPropertiesClass(Me)
                End If
                Return _doc
            End Get
        End Property
        Private _doc As coreDocPropertiesClass = Nothing
        '
        '===================================================================================================
        ''' <summary>
        ''' appRootFiles object
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property appRootFiles() As coreFileSystemClass
            Get
                If (_appRootFiles Is Nothing) Then
                    If clusterConfig.isLocal Then
                        '
                        ' local server -- everything is ephemeral
                        '
                        _appRootFiles = New coreFileSystemClass(Me, clusterConfig.isLocal, coreFileSystemClass.fileSyncModeEnum.noSync, serverConfig.clusterPath & appConfig.appRootFilesPath)
                    Else
                        '
                        ' cluster mode - each filesystem is configured accordingly
                        '
                        _appRootFiles = New coreFileSystemClass(Me, clusterConfig.isLocal, coreFileSystemClass.fileSyncModeEnum.activeSync, serverConfig.clusterPath & appConfig.appRootFilesPath)
                    End If
                End If
                Return _appRootFiles
            End Get
        End Property
        Private _appRootFiles As coreFileSystemClass = Nothing
        '
        '===================================================================================================
        ''' <summary>
        ''' serverFiles object
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property serverFiles() As coreFileSystemClass
            Get
                If (_serverFiles Is Nothing) Then
                    If clusterConfig.isLocal Then
                        '
                        ' local server -- everything is ephemeral
                        '
                        _serverFiles = New coreFileSystemClass(Me, clusterConfig.isLocal, coreFileSystemClass.fileSyncModeEnum.noSync, "")
                    Else
                        '
                        ' cluster mode - each filesystem is configured accordingly
                        '
                        _serverFiles = New coreFileSystemClass(Me, clusterConfig.isLocal, coreFileSystemClass.fileSyncModeEnum.noSync, "")
                    End If
                End If
                Return _serverFiles
            End Get
        End Property
        Private _serverFiles As coreFileSystemClass = Nothing
        '
        '===================================================================================================
        ''' <summary>
        ''' privateFiles object
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property privateFiles() As coreFileSystemClass
            Get
                If (_privateFiles Is Nothing) Then
                    If clusterConfig.isLocal Then
                        '
                        ' local server -- everything is ephemeral
                        '
                        _privateFiles = New coreFileSystemClass(Me, clusterConfig.isLocal, coreFileSystemClass.fileSyncModeEnum.noSync, serverConfig.clusterPath & appConfig.privateFilesPath)
                    Else
                        '
                        ' cluster mode - each filesystem is configured accordingly
                        '
                        _privateFiles = New coreFileSystemClass(Me, clusterConfig.isLocal, coreFileSystemClass.fileSyncModeEnum.passiveSync, serverConfig.clusterPath & appConfig.privateFilesPath)
                    End If
                End If
                Return _privateFiles
            End Get
        End Property
        Private _privateFiles As coreFileSystemClass = Nothing
        '
        '===================================================================================================
        ''' <summary>
        ''' cdnFiles object
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property cdnFiles() As coreFileSystemClass
            Get
                If (_cdnFiles Is Nothing) Then
                    If clusterConfig.isLocal Then
                        '
                        ' local server -- everything is ephemeral
                        '
                        _cdnFiles = New coreFileSystemClass(Me, clusterConfig.isLocal, coreFileSystemClass.fileSyncModeEnum.noSync, serverConfig.clusterPath & appConfig.cdnFilesPath)
                    Else
                        '
                        ' cluster mode - each filesystem is configured accordingly
                        '
                        _cdnFiles = New coreFileSystemClass(Me, clusterConfig.isLocal, coreFileSystemClass.fileSyncModeEnum.passiveSync, serverConfig.clusterPath & appConfig.cdnFilesPath)
                    End If
                End If
                Return _cdnFiles
            End Get
        End Property
        Private _cdnFiles As coreFileSystemClass = Nothing
        '
        '===================================================================================================
        ''' <summary>
        ''' addonCache object
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property addonCache() As coreAddonCacheClass
            Get
                If (_addonCache Is Nothing) Then
                    _addonCache = New coreAddonCacheClass(Me)
                End If
                Return _addonCache
            End Get
        End Property
        Private _addonCache As coreAddonCacheClass = Nothing
        '
        '===================================================================================================
        ''' <summary>
        ''' siteProperties object
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property domains() As coreDomainsClass
            Get
                If (_domains Is Nothing) Then
                    _domains = New coreDomainsClass(Me)
                End If
                Return _domains
            End Get
        End Property
        Private _domains As coreDomainsClass = Nothing
        '
        '===================================================================================================
        ''' <summary>
        ''' siteProperties object
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property user() As coreUserClass
            Get
                If (_user Is Nothing) Then
                    _user = New coreUserClass(Me)
                End If
                Return _user
            End Get
        End Property
        Private _user As coreUserClass = Nothing
        '
        '===================================================================================================
        ''' <summary>
        ''' JSON serialize/deserialize client
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property json() As System.Web.Script.Serialization.JavaScriptSerializer
            Get
                If (_json Is Nothing) Then
                    _json = New System.Web.Script.Serialization.JavaScriptSerializer
                End If
                Return _json
            End Get
        End Property
        Private _json As System.Web.Script.Serialization.JavaScriptSerializer
        '
        '===================================================================================================
        ''' <summary>
        ''' siteProperties object
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property siteProperties() As coreSitePropertiesClass
            Get
                If (_siteProperties Is Nothing) Then
                    _siteProperties = New coreSitePropertiesClass(Me)
                End If
                Return _siteProperties
            End Get
        End Property
        Private _siteProperties As coreSitePropertiesClass = Nothing
        '
        '===================================================================================================
        ''' <summary>
        ''' returns the cache object.
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property workflow() As coreWorkflowClass
            Get
                If (_workflow Is Nothing) Then
                    _workflow = New coreWorkflowClass(Me)
                End If
                Return _workflow
            End Get
        End Property
        Private _workflow As coreWorkflowClass = Nothing
        '
        '===================================================================================================
        ''' <summary>
        ''' returns the cache object.
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public ReadOnly Property cache() As coreCacheClass
            Get
                If (_cache Is Nothing) Then
                    _cache = New coreCacheClass(Me)
                End If
                Return _cache
            End Get
        End Property
        Private _cache As coreCacheClass = Nothing
        '
        '===================================================================================================
        ''' <summary>
        ''' returns the clusterServices object.  This property is public, but the constuctor is not. This property may not be available for appAccess (to limit access to only  this app). 
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>_cluster created during constructor.</remarks>
        Public ReadOnly Property cluster() As coreClusterClass
            Get
                If (_cluster Is Nothing) Then
                    _cluster = New coreClusterClass(Me)
                End If
                Return _cluster
            End Get
        End Property
        Private _cluster As coreClusterClass
        '
        '===================================================================================================
        '
        Public ReadOnly Property metaData As coreMetaDataClass
            Get
                If _metaData Is Nothing Then
                    _metaData = New coreMetaDataClass(Me)
                End If
                Return _metaData
            End Get
        End Property
        Private _metaData As coreMetaDataClass = Nothing
        '
        '===================================================================================================
        ''' <summary>
        ''' returns the appServices object. This property is public, but the constuctor is not.
        ''' </summary>
        ''' <value></value>
        ''' <returns></returns>
        ''' <remarks>_app created duirng init(), after cp.context() is loaded</remarks>
        Public ReadOnly Property db As coreDbClass
            Get
                If (_db Is Nothing) And (Not String.IsNullOrEmpty(appConfig.name)) Then
                    _db = New coreDbClass(Me, appConfig.name)
                End If
                Return _db
            End Get
        End Property
        Private _db As coreDbClass
        '
        '===================================================================================================
        ' document being constructed
        '
        Public docOpen As Boolean = False                   ' when true, you can write to the output stream
        Friend docExceptionList As List(Of String)

        '
        '-----------------------------------------------------------------------
        ' responseBuffer, legacy system for holding values 'written' instead of concatinated in return arguments
        '-----------------------------------------------------------------------
        '
        Public docBufferEnabled As Boolean = True          ' when true (default), stream is buffered until page is done
        Public _docBuffer As String = ""                   ' if any method calls writeAltBuffer, string concatinates here. If this is not empty at exit, it is used instead of returned string
        Public _docBufferRedirect As String = ""
        Public _docBufferContentType As String = ""
        Public _docBufferCookies As String = ""
        Public _docBufferResponseHeader As String = ""
        Public _docBufferResponseStatus As String = ""
        '
        '-----------------------------------------------------------------------
        '   legacy mainClass arguments
        '   REFACTOR - organize and rename
        '-----------------------------------------------------------------------
        '
        Private Structure NameValuePrivateType
            Dim Name As String
            Dim Value As String
        End Structure
        '
        Const pageManager_quickEdit_fpo = "<quickeditor>"
        Private pageManager_quickEdit_copy As String = ""
        '
        ' local cache for loading editor addon json list
        '
        Private pageManager_Private_FieldEditorList As String = ""
        Private pageManager_Private_FieldEditorList_Loaded As Boolean = False
        '
        Private pageManager_Private_ServerDomainCrossList As String = ""
        Private pageManager_Private_ServerDomainCrossList_Loaded As Boolean = False
        '
        ' Public view bubble editors
        '
        Private pageManager_HelpViewerButtonID As String = ""
        Public pageManager_EditWrapperCnt As Integer = 0
        '
        Public main_Private_LegacySiteSites_Loaded As Boolean = False
        '
        Public main_optionString As String = ""
        Public main_FilterInput As String = ""
        '
        '-----------------------------------------------------------------------
        '   Menu System variables
        '-----------------------------------------------------------------------
        '
        Private menu_MenuSystemCloseCount As Integer = 0            ' see main_GetMenuClose, incremented each time a menu is closed
        '
        '-----------------------------------------------------------------------
        ' ----- Member Functionality
        '-----------------------------------------------------------------------
        '
        Public web_MemberAction As Integer = 0              ' action to be performed during init
        Public main_MemberButton As String = ""            ' button pressed from previous form
        '
        Public main_AdminMessage As String = ""          ' For more information message
        '
        'Public main_WebClientVersion As String = ""       ' set in class initialize
        'Public main_ContentServerVersion As String = ""  ' from init
        '
        Public main_Private_StateString_In As String = ""    ' main_StateString from the incoming QS - Used to carry main_VisitId when cookies dont work (JSForms for example)
        Public main_Private_StateString_Out As String = ""   ' main_StateString to be set in outbound QS when needed - Used to carry main_VisitId when cookies dont work (JSForms for example)
        '
        Public visit_initialized As Boolean = False                ' true when visit has been initialized
        '
        Public visit_Id As Integer = 0                      ' Index into the visits table
        Public visit_name As String = ""                  '
        Public visit_startDateValue As Integer = 0          ' Long Integer representing date
        Public visit_startTime As Date = Date.MinValue            ' Date/Time when visit started
        Public visit_lastTime As Date = Date.MinValue                ' The date/time when the last page was created
        Public visit_cookieSupport As Boolean = False        ' true if this visit has cookie support
        Public visit_pages As Integer = 0                   ' how many pages have been viewed this visit
        Public visit_referer As String = ""               ' the referer to this site
        Public visit_refererHost As String = ""           '   derived during init
        Public visit_refererPathPage As String = ""       '   derived during init
        Public visit_loginAttempts As Integer = 0           ' number of times this visit/visitor has attempted member-login this visit
        Public visit_isAuthenticated As Boolean = False
        Public visit_browserIsIE As Boolean = False          ' if detail includes msie
        Public visit_browserIsNS As Boolean = False          ' if detail or detailtail is netscape
        Public visit_browserVersion As String = ""        ' attempt to main_Get main_version
        Public visit_browserIsWindows As Boolean = False    ' if any browser detail includes "windows"
        Public visit_browserIsMac As Boolean = False        ' if any browser deail includes "mac"
        Public visit_browserIsLinux As Boolean = False      ' not sure
        Public visit_browserIsMobile As Boolean = False     ' if a WAP Mobile device
        Public visit_excludeFromAnalytics As Boolean = False ' if true, this visit is excluded from all reporting, like page hit notification, graphic, etc.
        Public visit_isBot As Boolean = False               '
        Public visit_isBadBot As Boolean = False            '
        '
        ' see main_VisitorForceBrowserMobile
        '
        Public visit_stateOK As Boolean = False             ' if false, page is out of state (sequence)
        'Public main_VisitMemberID As Integer = 0               ' MemberID for the current visit (memberid=0 means untracked guest)
        Public main_VisitTimeToLastHit As Integer = 0          ' seconds from first hit to last hit
        '
        '-----------------------------------------------------------------------
        ' ----- visitor (computer) values
        '-----------------------------------------------------------------------
        '
        Public visitor_id As Integer = 0                    ' Index into the visitor table
        Public visitor_Name As String = ""                ' The name used by the last member identity users name
        Public visitor_memberID As Integer = 0              ' the last member account this visitor used (memberid=0 means untracked guest)
        Public visitor_orderID As Integer = 0               ' the current shopping cart (non-complete order)
        Public visitor_new As Boolean = False               ' stored in visit record - Is this the first visit for this visitor
        Public visitor_forceBrowserMobile As Integer = 0           ' 0 = not set -- use Browser detect each time, 1 = Force Mobile, 2 = Force not Mobile
        '
        '-----------------------------------------------------------------------
        ' ----- Help Subsystem
        '-----------------------------------------------------------------------
        '
        Private pageManager_HelpCodeCount As Integer = 0
        Private pageManager_HelpCodeSize As Integer = 0
        Private pageManager_HelpCodes As String()
        Private pageManager_HelpCaptions As String()
        '
        ' Count of Help Dialogs
        '
        Private pageManager_HelpDialogCnt As Integer = 0
        '
        '-----------------------------------------------------------------------
        ' ----- appTimer
        '   
        '-----------------------------------------------------------------------
        '
        Private constructorTickCount As Integer = 0
        Private main_TestPointIndent As Integer = 0
        '
        ' Tracing - Debugging
        '
        Public allowDebugLog As Boolean = False                             ' turn on in script -- use to write /debug.log in content files for whatever is needed
        Private profileLogIsOpen As Boolean = False
        '
        Public main_BlockNotAvailableMessage As Boolean = False             ' if false and contensive has an error, a Site Not Available message is presented
        Public main_PageStartTime As Date                                   ' set in constructor
        Public blockExceptionReporting As Boolean = False                   ' used so error reporting can not call itself
        Public main_LoadFault As Boolean = False                            ' An error preventing operation
        Public main_ForceUpgrade As Boolean = False                         ' no longer supported
        ' Public main_ForceTrap As Boolean = False                            ' if true, causes a main_ReportError when page closes
        Public main_PageErrorCount As Integer = 0                           ' Read Only, set by CSv main_ClosePage
        'Private main_SqlPageStartTime As String = ""                        ' set in constructor
        Public main_iPage_ErrorCount As Integer = 0                        ' Total error count on this page (used as a flag to call IncrementError)
        Public main_iUserError As String = ""                              ' User Error String
        Public main_PageErrorWithoutCsv As Boolean = False  ' if true, the error occurred before Csv was available and main_TrapLogMessage needs to be saved and popedup
        'Private main_TrapLogFilename As String = ""       ' Filename for current traplog
        Public main_TrapLogMessage As String = ""        ' The content of the current traplog (keep for popups if no Csv)
        Public web_PageExcludeFromAnalytics As Boolean = False    ' For this page - true for remote methods and ajax
        '   main_PageExcludeFromAnalytics - if true, increment the page field in the visit record
        '       false for remote methods and ajax functions
        '       true for real pages, and HardCodedPages that are like pages
        Public main_ClosePageCounter As Integer = 0
        Public web_BlockClosePageCopyright As Boolean = False ' if true, block the copyright message
        Public main_BlockClosePageLink As Boolean = False      ' if true,block the href to contensive
        '
        '
        ' used to provide a source for Dbtransaction logs
        '
        ''Private profileMethodStack() As String
        ' Private profileMethodStackPtr As Integer = 0
        'Private profileMethodStackSize As Integer = 0
        '
        ' ------------------------------------------------------------------------
        ' ----- Storage that applies only to this one page
        ' ------------------------------------------------------------------------
        '
        Public main_PageTestPointPrinting As Boolean = False    ' if true, send main_TestPoint messages to the stream
        Public main_ClosePageHTML As String = ""             ' Anything that needs to be written to the Page during main_GetClosePage
        '
        Public main_testPointMessage As String = ""          '
        '
        '------------------------------------------------------------------------
        ' Site configuration values calculated for use internally
        '------------------------------------------------------------------------
        '
        '
        Public main_ServerLink As String = ""                 ' The current URL, from protocol to end of quesrystring
        'Public web.requestLinkSource As String = ""           ' The main_ServerLink, except when LinkAlias, then this is the original URL
        Public web_requestVirtualFilePath As String = ""          ' The Virtual path for the site (host+main_ServerVirtualPath+"/" is site URI)
        'Private main_defaultDomainList As String = ""         ' the domain list from the application manager,
        '   The comma separated list of valid domains from the Contensive Server
        Public main_ServerDomainPrimary As String = ""        ' The first entry in the main_defaultDomainList
        '
        Public main_ServerDomain As String = ""               ' This is the proper domain for the site (may not always match the current SERVER_NAME
        '   A - members.eatturkey.com
        '   B - members.eatturkey.com
        Public web_requestPath As String = ""                 ' The path part of the current URI
        '   A - /ntf/thing/
        '   B - /thing/
        Public web_requestPage As String = ""                 ' The page part of the current URI
        '   A - index.asp
        '   B - index.asp
        'Public web_requestAppPath As String = ""              ' The path from the AppRootPath of the current URI (working.Kma.net/ntf/index.asp is thing/)
        '   A - thing/
        '   B - thing/
        'Public app.siteProperty_publicFileContentPathPrefix As String = ""             ' The path to the sites file storage
        '   A - /ntf/files/
        '   B - /ntf/files/
        ' v5, , used for both file save/read path and url, between ./public and contentFilepathPage (table/field/etc)
        '       - stored in site property
        '      - for legacy compatibility, /appName/files/ - because many sites have this hardcoded into the urls
        '      - for new sites, /contentFiles/
        Public web_requestSecureURLRoot As String = ""        ' The URL to the root of the secure area for this site

        Public main_ServerFormOriginal As String = ""        ' Original String from an HTML form request - includes passwords
        '
        Public web_ServerFormActionURL As String = ""        ' The Action for all internal forms, if not set, default
        '
        'Public app.siteProperty_ServerPageDefault As String = ""          ' Set from site property during init, the page assumed for URLs with no page given
        '
        Public pageManager_printVersion As Boolean = False
        '
        Public web_requestContentWatchPrefix As String = ""   ' The different between the URL and the main_ContentWatch Pathpage
        '
        Public web_requestProtocol As String = ""             ' Set in InitASPEnvironment, http or https
        ' To set, the main_defaultDomainList (in Application Manager) should have the primary domain first, then include * as a domain name
        ' if false, any domain used that is not in the domain list causes a redirect to the first domain name
        '
        '-----------------------------------------------------------------------
        '   Physical machine properties, set in InitASPEnvironment
        '-----------------------------------------------------------------------
        '
        Public main_AppPath As String = ""                    ' The path to the application, used for cclib-path, etc.
        '
        '-----------------------------------------------------------------------
        '   Link Forward publics, exposed so handling page can print error message
        '-----------------------------------------------------------------------
        '
        Public web_LinkForwardSource As String = ""          ' main_ServerPathPage -- set during init
        Public web_LinkForwardError As String = ""           ' always 404
        '
        '-----------------------------------------------------------------------
        '   QueryString, Form and cookie Processing variables
        '-----------------------------------------------------------------------
        '
        Public main_JavaStreamHolder() As String
        Public main_JavaStreamSize As Integer = 0
        Public main_JavaStreamCount As Integer = 0
        Const main_JavaStreamChunk = 100
        Public web_OutStreamDevice As Integer = 0
        Public Const main_OutStreamStandard = 0
        Public Const web_OutStreamJavaScript = 1
        Public main_IsStreamWritten As Boolean = False       ' true when anything has been writeAltBuffered.
        '
        '-----------------------------------------------------------------------
        ' ----- Setup Properties
        '-----------------------------------------------------------------------
        '
        'Public main_ApplicationName As String = "" ' ----- do not use ----- use appEnvironment.name
        'Public main_ApplicationStatus as integer = 0           ' set in init(), application status
        'Private main_appNameCookiePrefix As String = ""      ' added to cookie to prevent cross-site confusion.
        Private Const main_cookieNameVisit = "visit"
        Private Const main_cookieNameVisitor = "visitor"
        '
        Public main_ImportXMLFile As String = ""      ' filename of XML import file
        Public main_ExportXMLFile As String = ""      ' filename of XML export file
        '
        '-----------------------------------------------------------------------
        ' ----- Compatibility
        '-----------------------------------------------------------------------
        '
        Public web_requestPageReferer As String = ""                    ' replaced by main_ServerReferrer
        Public web_requestReferer As String = ""
        'Private main_OptionKeyString As String = ""
        Private main_OptionKeyLicenseType As Integer = 0
        Private main_OptionKeyTraceTimer As Boolean = False
        '
        '------------------------------------------------------------------------
        ' ----- Configuration values set before the Init() call in the Page Code
        '------------------------------------------------------------------------
        '
        Public main_LoginIconFilename As String = ""     ' Set to the icon used for Public Site Login
        '
        Private main_ServerPageSecureTouched_Local As Boolean = False   ' if true, main_ServerPageSecure_Local has been set
        Private main_ServerPageSecure_Local As Boolean = False          ' if true, the current page was delivered on a secure link
        Public main_ReadStreamFormBlock As Boolean = False               ' When set true with rb=true, all request.form and binary reads are blocked
        '
        '------------------------------------------------------------------------
        ' ----- JSPage handling (JavaScript Page) - these are Add-ons
        '       called from <script language=javascript src="AggrFunction.asp?RequestJSForm=1"></script>
        '------------------------------------------------------------------------
        '
        Public main_ReadStreamJSProcess As Boolean = False             ' When true, the Request is coming from the process of a JS form (aggregate scripts)
        '                                                   '       1) store the QS and Form
        '       2) redirect to the referrer
        Public web_ReadStreamJSForm As Boolean = False                  ' When true, the request comes from a browser handling a JSPage script line
        '       Stream is set up from
        '           1) the referrer
        '           2) QS or Form from the last ProcessJSForm call
        '       The stream delivers javascript that writes the stream out
        '       !! main_GetClosePage is requred to deliver the javascript
        '
        '------------------------------------------------------------------------
        '
        Private _RefreshQueryString As String = ""      ' the querystring required to return to the current state (perform a refresh)
        Public main_AllowCookielessDetection As Boolean = False
        '
        '------------------------------------------------------------------------
        ' ----- Automatic redirects
        '------------------------------------------------------------------------
        '
        Private main_RedirectContentID As Integer = 0
        Private main_RedirectRecordID As Integer = 0
        '
        '----- testing
        '
        Private main_iFormInputWidthDefault As Integer = 0
        '
        '------------------------------------------------------------------------
        '   Icons used for resource Library
        '   Initialized in Class Initialize, copied to ResourceLibrary during Init
        '------------------------------------------------------------------------
        '
        Public main_IconFileDefault As String = ""
        Public main_IconFolderClosed As String = ""
        Public main_IconFolderOpen As String = ""
        Public main_IconFolderUp As String = ""
        '
        '------------------------------------------------------------------------
        ' ----- Meta Content variables
        '------------------------------------------------------------------------
        '
        Public main_MetaContent_Set As Boolean = False         ' flag to detect if main_Getpage called after main_Gethead
        Public main_MetaContent_Title As String = ""
        Public main_MetaContent_Description As String = ""
        Public main_MetaContent_OtherHeadTags As String = ""
        Public main_MetaContent_KeyWordList As String = ""
        Public main_MetaContent_NoFollow As Boolean = False   ' when set, Meta no follow is added
        Public main_MetaContent_StyleSheetTags As String = ""
        Public main_MetaContent_TemplateStyleSheetTag As String = ""
        Public main_MetaContent_SharedStyleIDList As String = ""
        '
        '------------------------------------------------------------------------
        ' ----- Rendered values - this represents what was used to render the current image
        '------------------------------------------------------------------------
        '
        Public main_Private_SiteStructure As String = ""
        Public main_Private_SiteStructure_LocalLoaded As Boolean = False
        ' First character is the delimiter (shown here as comma)
        Private Const main_NavStruc_Delimiter = 0            ' ,Descriptor,ID,ParentID,MenuHeadline,Name,Link,TemplateID,AllowInMenus crlf
        Private Const main_NavStruc_Descriptor = 1           ' Descriptors:0 = RootPage, 1 = Parent Page, 2 = Current Page, 3 = Child Page
        Private Const main_NavStruc_Descriptor_RootPage = 0
        Private Const main_NavStruc_Descriptor_ParentPage = 1
        Private Const main_NavStruc_Descriptor_CurrentPage = 2
        Private Const main_NavStruc_Descriptor_ChildPage = 3
        Private Const main_NavStruc_Id = 2
        Private Const main_NavStruc_ParentId = 3
        Private Const main_NavStruc_MenuHeadline = 4
        Private Const main_NavStruc_Name = 5
        Private Const main_NavStruc_Link = 6
        Private Const main_NavStruc_TemplateId = 7
        Private Const main_NavStruc_allowInMenu = 8
        '
        Public main_PageContent As String = ""                    ' The page's content at the OnPageEndEvent - used to let OnPageStart and OnPageEnd Add-ons change the content
        Public main_ContentPageStructure As String = ""           ' deprecated name for main_RenderedNavigationStructure
        '
        Private pageManager_LandingPageID As Integer = 0                              ' Set from Site Property (use main_GetLandingPageID)
        Private pageManager_LandingPageID_Loaded As Boolean = False                   '   true when pageManager_LandingPageID is loaded
        Private pageManager_LandingPageName As String = ""                          ' Set from pageManager_LandingPageID (use main_GetLandingPageName)
        Private pageManager_LandingLink As String = ""                              ' Default Landing page - managed through main_GetLandingLink()
        '
        ' Section storate - When found, the information about the current section is stored here
        '
        Private pageManager_TemplateReason As String = ""                           ' a message that explains why this template was selected
        Private pageManager_TemplateName As String = ""                             ' Name of the template
        Private pageManager_TemplateLink As String = ""                             ' Link this template requires - redirect caused if this is not the current link
        Private pageManager_TemplateBody As String = ""                             ' Body field of the TemplateID
        Public pageManager_TemplateBodyTag As String = ""                          ' BodyTag - from Template record, if blank, use TemplateDefaultBodyTag
        Private pageManager_SectionMenuLinkDefault As String = ""
        '
        Private Const pageManager_BlockMessageDefault = "<p>The content on this page has restricted access. If you have a username and password for this system, <a href=""?method=login"" rel=""nofollow"">Click Here</a>. For more information, please contact the administrator.</p>"
        '
        ' Content Page storate - not always used in section page calls
        '
        'Private pageManager_ContentID as integer = 0                                  ' Always available after page hit
        'Private pageManager_ContentName As String = ""                              ' Always available after page hit
        'Private pageManager_RootPageName As String = ""                             ' only used as a marker to test if a page was preloaded with the Preload call
        'Private pageManager_OrderByClause As String = ""
        'Private pageManager_AllowChildPageList As Boolean
        'Private pageManager_AllowReturnList As Boolean
        'Private pageManager_ContentPage As String = ""                              ' ContentPage created previously from above values
        '
        ' storage used during redirect
        '
        Private pageManager_RedirectLink As String = ""                             ' If there is a problem, a redirect is forced
        Private pageManager_RedirectReason As String = ""                           ' reason for redirect
        Private pageManager_RedirectBecausePageNotFound As Boolean = False            ' if true, redirect will go through a 404 so bots will not follow
        Private pageManager_RedirectSourcePageID As Integer = 0                       ' the pageid of the page with this issue, 0 if not a page problem
        '
        '===================================================================================================================
        '   Rendering Cache
        '   - public main_GetChildPageList: loadRenderCache
        '   - public main_GetContentPage: main_GetHtmlBody_GetSection_GetContent: main_GetHtmlBody_GetSection_GetContentBox: loadRenderCache
        '   - public main_GetContentPageArchive: main_GetHtmlBody_GetSection_GetContent: main_GetHtmlBody_GetSection_GetContentBox: loadRenderCache
        '   - public main_init: main_Init_PrintHardCodedPage: main_GetHtmlBody_GetSection_GetContent: main_GetHtmlBody_GetSection_GetContentBox: loadRenderCache
        '
        '===================================================================================================================
        '
        Public main_RenderedPageID As Integer = 0                   ' The current page's id
        Public main_RenderedPageName As String = ""               ' The current page's name
        Public main_RenderedSectionID As Integer = 0                ' The current page's section id
        Public main_RenderedSectionName As String = ""            ' The current Section's name
        Public main_RenderedTemplateID As Integer = 0               ' The current template's Id
        Public main_RenderedTemplateName As String = ""           ' The current template's name
        Public main_RenderedNavigationStructure As String = ""    ' Public string describing the current page
        '
        Private main_RenderedParentID As Integer = 0               '
        '
        Private main_RenderCache_Loaded As Boolean = False                               ' true after main_loadRenderCache
        '
        Private main_RenderCache_CurrentPage_PCCPtr As Integer = 0
        Private main_RenderCache_CurrentPage_ContentId As Integer = 0                        '
        Private main_RenderCache_CurrentPage_ContentName As String = ""                   ' set during LoadContent_CurrentPage
        Private main_RenderCache_CurrentPage_IsRenderingMode As Boolean = False             ' true if tools panel rendering is on
        Private main_RenderCache_CurrentPage_IsQuickEditing As Boolean = False              ' true if tools panel is on, and user can author current page
        Private main_RenderCache_CurrentPage_IsEditing As Boolean = False                   ' true if tools panel is on
        Private main_RenderCache_CurrentPage_IsAuthoring As Boolean = False                ' true if either editing or quickediting
        Private main_RenderCache_CurrentPage_IsRootPage As Boolean = False                  ' true after LoadContent if the current page is the root page
        '
        Private main_RenderCache_ParentBranch_PCCPtrCnt As Integer = 0
        Private main_RenderCache_ParentBranch_PCCPtrs As Integer()
        '
        Private main_RenderCache_ChildBranch_PCCPtrCnt As Integer = 0
        Private main_RenderCache_ChildBranch_PCCPtrs As Integer()
        '


        '
        Private Const main_BlockSourceDefaultMessage = 0
        Private Const main_BlockSourceCustomMessage = 1
        Private Const main_BlockSourceLogin = 2
        Private Const main_BlockSourceRegistration = 3
        '

        ''
        '' ===== child branch page cache =====
        ''

        Private Const main_FieldDelimiter = " , "
        Private Const main_LineDelimiter = " ,, "
        '
        ' Tabs storage
        '
        Private main_TabObject As coreMenuTabClass
        Private html_ComboTabObject As coreMenuComboTabClass
        Private main_LiveTabObject As coreMenuLiveTabClass
        '
        Private Const main_IPosType = 0
        Private Const main_IPosCaption = 1
        Private Const main_IPosRequired = 2
        Private Const main_IPosMax = 2       ' value checked for the line before decoding
        Private Const main_IPosPeopleField = 3
        Private Const main_IPosGroupName = 3
        '
        Private Structure main_FormPagetype_InstType
            Dim Type As Integer
            Dim Caption As String
            Dim REquired As Boolean
            Dim PeopleField As String
            Dim GroupName As String
        End Structure
        '
        Private Structure main_FormPagetype
            Dim PreRepeat As String
            Dim PostRepeat As String
            Dim RepeatCell As String
            Dim AddGroupNameList As String
            Dim AuthenticateOnFormProcess As Boolean
            Dim Inst() As main_FormPagetype_InstType
        End Structure
        '
        '
        '
        Private main_CheckListCnt As Integer = 0                    ' cnt of the main_GetFormInputCheckList calls - used for javascript
        '
        ' ----------------------------------------------------------------------------------------
        '   values collected from add-ons as the page progresses
        ' ----------------------------------------------------------------------------------------
        '
        Private main_page_IncludedAddonIDList As String = ""
        '
        Private main_OnLoadJavascript As String = ""
        Private main_endOfBodyJavascript As String = ""           ' javascript that goes at the end of the close page
        Private main_endOfBodyString As String = ""
        '
        ' block of js code that goes into a script tag
        '
        Private Structure main_HeadScriptType
            Dim IsLink As Boolean
            Dim Text As String
            Dim addedByMessage As String
        End Structure
        Private main_HeadScriptCnt As Integer = 0
        Private main_HeadScripts() As main_HeadScriptType
        '
        ' Page Bake Header
        '
        Private Const main_BakeHeadDelimiter = "#####MultilineFlag#####"
        '
        ' Count of how many main_GetFormInputDate calendars have been placed
        '
        Private main_InputDateCnt As Integer = 0
        '
        Private main_AdminWarning As String = ""                                      ' Message - when set displays in an admin hint box in the page
        Private main_AdminWarningPageID As Integer = 0                                  ' PageID that goes with the warning
        Private main_AdminWarningSectionID As Integer = 0                               ' PageID that goes with the warning
        '
        ' Cache the input selects (admin uses the same ones over and over)
        '
        Private Structure main_InputSelectCacheType
            Dim SelectRaw As String
            Dim ContentName As String
            Dim Criteria As String
            Dim CurrentValue As String
        End Structure
        Dim main_InputSelectCacheCnt As Integer = 0
        Dim main_InputSelectCache() As main_InputSelectCacheType
        '
        Private main_FormInputTextCnt As Integer = 0
        '
        '========================================================================================================================
        '   Internal cache (for content used to run the system)
        '========================================================================================================================
        '
        ' ----- Link Alias store for lookups and reverse lookups
        '
        Private Const cache_linkAlias_cacheName = "cache_linkAlias"
        Private cache_linkAlias As String(,)
        Private cache_linkAliasCnt As Integer = 0
        Private cache_linkAlias_NameIndex As coreKeyPtrIndexClass
        Private cache_linkAlias_PageIdQSSIndex As coreKeyPtrIndexClass
        '
        ' ----- Site Section Cache
        '
        Private Const pageManager_cache_siteSection_cacheName = "cache_siteSection"
        Private cache_siteSection As String(,)
        Private pageManager_cache_siteSection_rows As Integer = 0
        Private pageManager_cache_siteSection_IDIndex As coreKeyPtrIndexClass
        Private pageManager_cache_siteSection_RootPageIDIndex As coreKeyPtrIndexClass
        Private pageManager_cache_siteSection_NameIndex As coreKeyPtrIndexClass
        '
        ' ----- Template Content store
        '
        Private Const pageManager_cache_pageTemplate_cacheName = "cache_pageTemplate"
        Private cache_pageTemplate As String(,)
        Private pageManager_cache_pageTemplate_rows As Integer = 0
        Private pageManager_cache_pageTemplate_contentIdindex As coreKeyPtrIndexClass
        '
        ' ----- Page Content store (old names for compatibility)
        '
        'Public main_pccData As Object
        Public _pageManager_cache_pageContent_rows As Integer = 0
        Public cache_pageContent As String(,)
        Public _pageManager_cache_pageContent_needsReload As Boolean = False
        Public pageManager_cache_pageContent_idIndex As coreKeyPtrIndexClass
        Public pageManager_cache_pageContent_parentIdIndex As coreKeyPtrIndexClass
        Public pageManager_cache_pageContent_nameIndex As coreKeyPtrIndexClass
        '
        ' ----- cache styleAddonRules
        '
        Public cache_addonStyleRules As coreCacheKeyPtrClass
        'Public Class styleAddonRuleClass
        '    Public addonId As Integer
        '    Public styleId As Integer
        'End Class
        'Public Class cache_sharedStylesAddonRulesClass
        '    Public rule As List(Of styleAddonRuleClass)
        '    Public addonIdIndex As keyPtrIndexClass
        'End Class
        'Private cache_styleAddonRules As New cache_sharedStylesAddonRulesClass
        '
        ' ----- addonIncludeRules
        '
        <Serializable()>
        Public Class addonIncludeRulesClass
            Public item As String(,)
            Public itemCnt As Integer = 0
            Public addonIdIndex As coreKeyPtrIndexClass
        End Class
        Private cache_addonIncludeRules As addonIncludeRulesClass
        '
        'Private cache_addonIncludeRules.item As String(,)
        'Private cache_addonIncludeRules.itemCnt As Integer = 0
        'Private cache_addonIncludeRules.addonIdIndex As keyPtrIndexClass
        '
        ' ----- libraryFiles
        '
        Private cache_libraryFiles As String(,)
        Private cache_libraryFilesCnt As Integer = 0
        Private cache_libraryFilesIdIndex As coreKeyPtrIndexClass
        '
        ' ----- linkForwward
        '
        Private cache_linkForward As String = ""
        '
        '========================================================================================================================
        '
        '========================================================================================================================
        ' should have been addonTypeEnum
        '
        Public Enum addonContextEnum
            ' these should have been addonContextPage, etc.
            ContextPage = 1
            ContextAdmin = 2
            ContextTemplate = 3
            contextEmail = 4
            ContextRemoteMethod = 5
            ContextOnNewVisit = 6
            ContextOnPageEnd = 7
            ContextOnPageStart = 8
            ContextEditor = 9
            ContextHelpUser = 10
            ContextHelpAdmin = 11
            ContextHelpDeveloper = 12
            ContextOnContentChange = 13
            ContextFilter = 14
            ContextSimple = 15
            ContextOnBodyStart = 16
            ContextOnBodyEnd = 17
        End Enum
        '
        ' should have been userTypeEnum
        ' only for main_GetFormInputWysiwig - to be deprecated anyway
        Private Enum main_EditorUserScopeEnum
            ' should have been userTypeAdministrator, etc
            Administrator = 1
            ContentManager = 2
            PublicUser = 3
        End Enum
        '
        ' should have been contentTypeEnum
        Private Enum main_EditorContentScopeEnum
            ' should have been contentTypePage
            Page = 1
            pagetemplate = 2
            Email = 3
            EmailTemplate = 4
        End Enum
        '
        Private main_PleaseWaitStarted As Boolean = False
        ''
        '' file systems
        ''
        'Public Property serverFiles As coreFileSystemClass           ' files written directly to the local server
        ''Public Property appRootFiles As coreFileSystemClass         ' wwwRoot path for the app server, both local and scale modes
        'Public Property privateFiles As coreFileSystemClass         ' path not available to web interface, local: physcial storage location, scale mode mirror location
        'Public Property cdnFiles As coreFileSystemClass             ' file uploads etc. Local mode this should point to appRoot folder (or a virtual folder in appRoot). Scale mode it goes to an s3 mirror
        '
        ' SF Resize Algorithms
        '
        Public Enum csv_SfImageResizeAlgorithms
            Box = 0
            Triangle = 1
            Hermite = 2
            Bell = 3
            BSpline = 4
            Lanczos3 = 5
            Mitchell = 6
            Stretch = 7
        End Enum
        '
        '
        Private csv_DynamicMenuACSelect As String = ""
        Private csv_DynamicFormACSelect As String = ""
        ''
        ''------------------------------------------------------------------------
        ''   SQL Timeouts
        ''------------------------------------------------------------------------
        ''
        'Private csv_SQLTimeout As Integer
        'Private csv_SlowSQLThreshholdMSec As Integer
        ''
        ''------------------------------------------------------------------------
        '' ----- Table Schema caching to speed up update
        ''------------------------------------------------------------------------
        ''
        'Private Structure app.tableSchemaClass
        '    Dim TableName As String
        '    Dim Dirty As Boolean
        '    Dim ColumnCount As Integer
        '    Dim ColumnName() As String
        '    Dim IndexCount As Integer
        '    Dim IndexName() As String
        '    Dim IndexFieldName() As String
        'End Structure
        'Private app.tableSchemaCount As Integer
        'Private app.tableSchema() As app.tableSchemaClass
        '
        '------------------------------------------------------------------------
        ' ----- Debugging
        '------------------------------------------------------------------------
        '
        ' ##### this was removed, but I put it back because we -forgot- that csv_ClearBake was required, and we spent too
        '       much time figuring out why a change to a record did not clear the bake. An argument was added to
        '       app.csv_SaveCSRecord to block the csv_ClearBake. If someone needs to prevent the clearing, this needs to be set
        'Private Const app.csv_AllowAutocsv_ClearContentTimeStamp = True    ' Trial removal - put back

        '
        Public csv_ConnectionHandleLocal As Integer = 0              ' Local storage for connection handle established when appServices opened
        Public csv_ConnectionID As Integer = 0                     ' Random number (semi) unique to this hit
        '
        ' app.config.urlencoder is a string from the licence system used to encode cookies
        '
        'Private app.config.urlencoderLocal As String
        'Private app.siteProperty_ServerPageDefault As String
        '
        '================================================================================
        '   (NOT thread safe)
        '   a list of addons that have already been executed during this csv-lifetime.
        '   - used to prevent javascript and styles from being added to cpCoreClass twice
        '================================================================================
        '
        Private addonsRunOnThisPageIdList As New List(Of Integer)
        'Private csv_ExecuteAddon_AddonsRunOnThisPageIdList As String = ""
        '
        '================================================================================
        '   (NOT thread safe)
        '   a list of addons currently running.
        '       - appended each time an addon is run
        '       - append removed when the addon exits
        '================================================================================
        '
        Private addonsCurrentlyRunningIdList As New List(Of Integer)
        'Private csv_ExecuteAddon_AddonsCurrentlyRunningIdList As String = ""
        ''
        '' deprecated - here for compatibiity
        ''
        'Structure csv_DataSourceConnType
        '    Dim Conn As Connection
        '    Dim IsOpen As Boolean
        '    Dim Type As Integer
        'End Structure
        ''
        ''------------------------------------------------------------------------
        '' ----- app.csv_ContentSet Storage
        ''------------------------------------------------------------------------
        ''
        ''Const csv_DefaultPageSize = 9999
        '''
        'Private app.csv_ContentSet() As ContentSetType2
        'Public app.csv_ContentSetCount As Integer       ' The number of elements being used
        'Public app.csv_ContentSetSize As Integer        ' The number of current elements in the array
        'Const app.csv_ContentSetChunk = 50              ' How many are added at a time
        ''
        '' when true, all app.db_csOpen, etc, will be setup, but not return any data (app.csv_IsCSOK false)
        '' this is used to generate the app.csv_ContentSet.Source so we can run a app.csv_GetContentRows without first opening a recordset
        ''
        'Private csv_OpenCSWithoutRecords As Boolean
        '
        '------------------------------------------------------------------------
        ' ----- Build Version
        '------------------------------------------------------------------------
        '
        '  Private csv_Private_DataBuildVersion As String = ""          ' From ccSetup, set to ccLib version strin. If not matched, randomize BuildKey
        '
        '------------------------------------------------------------------------
        ' ----- Style Sheets
        '------------------------------------------------------------------------
        '
        Private Structure csv_stylesheetCacheType
            Dim templateId As Integer
            Dim EmailID As Integer
            Dim StyleSheet As String
        End Structure
        Private csv_stylesheetCache() As csv_stylesheetCacheType
        Private csv_stylesheetCacheCnt As Integer
        'Private Private_StyleSheet_Loaded As Boolean
        'Private Private_StyleSheet As String
        '
        'Private Private_StyleSheetProcessed_Loaded As Boolean
        'Private Private_StyleSheetProcessed As String
        '
        '------------------------------------------------------------------------
        ' ----- Database Upgrade Flag
        '       (mimicked as Public Property)
        '------------------------------------------------------------------------
        '
        'Private csv_UpgradeInProgressLocal As Boolean    ' When true, currently upgrading (concurancy issue)
        'Private new_loadCdefCache_loadContentEngineContentEngineInProcess As Boolean
        '
        '------------------------------------------------------------------------
        '   Sort Method temp storage
        '------------------------------------------------------------------------
        '
        'Private structure csv_SortMethodsType
        '    Id as integer
        '    Method As String
        'end  structure
        ''

        ''
        ''------------------------------------------------------------------------
        '' ----- Stream
        ''       This storage controls the csv_WriteStream method
        ''------------------------------------------------------------------------
        ''
        'Private csv_StreamListSize As Integer          ' size of csv_StreamList()
        'Private web_StreamListCount As Integer         ' valid entries in csv_StreamList
        'Private web_StreamList() As String        ' Set with csv_OpenStream/csv_CloseStream - if non-empty, writes stream appends here
        '
        ' ----- ContentField Type
        '       Stores information about fields in a content set
        '
        Private Structure ContentSetWriteCacheType
            Dim Name As String
            Dim Caption As String
            Dim ValueVariant As Object
            Dim fieldType As Integer
            Dim Changed As Boolean                  ' If true, the next app.csv_SaveCSRecord will save this field
        End Structure

        '
        ' ----- app.csv_ContentSet Type
        '       Stores pointers to open recordsets of content being used by the page
        '
        Private Structure ContentSetType2
            Dim IsOpen As Boolean                   ' If true, it is in use
            Dim LastUsed As Date                    ' The date/time this app.csv_ContentSet was last used
            Dim Updateable As Boolean               ' Can not update an app.csv_OpenCSSQL because Fields are not accessable
            Dim NewRecord As Boolean                ' true if it was created here
            'ContentPointer as integer              ' Pointer to the content for this Set
            Dim ContentName As String
            Dim CDef As coreMetaDataClass.CDefClass
            Dim OwnerMemberID As Integer               ' ID of the member who opened the app.csv_ContentSet
            '
            ' Workflow editing modes
            '
            Dim WorkflowAuthoringMode As Boolean    ' if true, these records came from the AuthoringTable, else ContentTable
            Dim WorkflowEditingRequested As Boolean ' if true, the CS was opened requesting WorkflowEditingMode
            Dim WorkflowEditingMode As Boolean      ' if true, the current record can be edited, else just rendered (effects EditBlank and app.csv_SaveCSRecord)
            '
            ' ----- Write Cache
            '
            Dim writeCacheChanged As Boolean          ' if true, writeCache contains changes
            Dim writeCache() As ContentSetWriteCacheType ' array of fields buffered for this set
            Dim writeCacheSize As Integer                ' the total number of fields in the row
            Dim writeCacheCount As Integer               ' the number of field() values to write
            Dim IsModified As Boolean               ' Set when CS is opened and if a save happens
            '
            ' ----- Recordset used to retrieve the results
            '
            'dim dt as datatable                        ' The Recordset
            'RSOpen As Boolean                   ' true if the recordset is open
            'EOF As Boolean                      ' if true, Row is empty and at end of records
            ' ##### new way 4/19/2004
            '   readCache stores only the current row
            '   RS holds all other rows
            '   app.csv_GetCSRow returns the readCache
            '   app.csv_NextCSRecord saves the difference between the readCache and the writeCache, and movesnext, inc ResultachePointer
            '   csv_LoadreadCache stores the current RS row to the readCache
            '
            '
            ' ##### old way
            ' Storage for the RecordSet results (future)
            '       Result - refers to the entire set of rows the the SQL (Source) returns
            '       readCache - the block of records currently stored in member (readCacheTop to readCacheTop+PageSize-1)
            '       readCache is initially loaded with PageSize records, starting on page PageNumber
            '       app.csv_NextCSRecord increments readCacheRowPtr
            '           If readCacheRowPtr > readCacheRowCnt-1 then csv_LoadreadCache
            '       EOF true if ( readCacheRowPtr > readCacheRowCnt-1 ) and ( readCacheRowCnt < PageSize )
            '
            Dim Source As String                    ' Holds the SQL that created the result set
            Dim DataSource As String                ' The Datasource of the SQL that created the result set
            Dim PageSize As Integer                    ' Number of records in a cache page
            Dim PageNumber As Integer                  ' The Page that this result starts with
            '
            ' ----- Read Cache
            '
            Dim fieldNames() As String       ' 1-D array of the result field names
            Dim ResultColumnCount As Integer           ' number of columns in the fieldNames and readCache
            'deprecated, but leave here for the test - useMultiRowCache
            Dim ResultEOF As Boolean                ' readCache is at the last record
            '
            ' ----- Read Cache
            '
            Dim readCache As String(,)            ' 2-D array of the result rows/columns
            Dim readCacheRowCnt As Integer         ' number of rows in the readCache
            Dim readCacheRowPtr As Integer         ' Pointer to the current result row, first row is 0, BOF is -1
            '
            ' converted array to dictionary - Dim FieldPointer As Integer                ' Used for GetFirstField, GetNextField, etc
            '
            Dim SelectTableFieldList As String      ' comma delimited list of all fields selected, in the form table.field
            'Rows as object                     ' getRows read during csv_InitContentSetResult
        End Structure
        ''
        '' $$$$$ remove this after testing - just for binary compatibility
        ''
        'public structure app.csv_ContentSetType
        '    IsOpen As Boolean                   ' If true, it is in use
        '    LastUsed As Date = New Date().MinValue                    ' The date/time this app.csv_ContentSet was last used
        '    Updateable As Boolean               ' Can not update an app.csv_OpenCSSQL because Fields are not accessable
        '    NewRecord As Boolean                ' true if it was created here
        '    'ContentPointer as integer              ' Pointer to the content for this Set
        '    ContentName As String
        '    CDef As CDefType
        '    OwnerMemberID as integer               ' ID of the member who opened the app.csv_ContentSet
        '    '
        '    ' Workflow editing modes
        '    '
        '    WorkflowAuthoringMode As Boolean    ' if true, these records came from the AuthoringTable, else ContentTable
        '    WorkflowEditingRequested As Boolean ' if true, the CS was opened requesting WorkflowEditingMode
        '    WorkflowEditingMode As Boolean      ' if true, the current record can be edited, else just rendered (effects EditBlank and app.csv_SaveCSRecord)
        '    '
        '    ' ----- Write Cache
        '    '
        '    RowCacheChanged As Boolean          ' if true, RowCache contains changes
        '    RowCache() As app.csv_ContentSetRowCacheType ' array of fields buffered for this set
        '    RowCacheSize as integer                ' the total number of fields in the row
        '    RowCacheCount as integer               ' the number of field() values to write
        '    IsModified As Boolean               ' Set when CS is opened and if a save happens
        '    '
        '    ' ----- Recordset used to retrieve the results
        '    '
        '    RS as datatable                        ' The Recordset
        '    'RSOpen As Boolean                   ' true if the recordset is open
        '    'EOF As Boolean                      ' if true, Row is empty and at end of records
        '    ' ##### new way 4/19/2004
        '    '   ResultCache stores only the current row
        '    '   RS holds all other rows
        '    '   app.csv_GetCSRow returns the ResultCache
        '    '   app.csv_NextCSRecord saves the difference between the ResultCache and the RowCache, and movesnext, inc ResultachePointer
        '    '   csv_LoadResultCache stores the current RS row to the ResultCache
        '    '
        '    '
        '    ' ##### old way
        '    ' Storage for the RecordSet results (future)
        '    '       Result - refers to the entire set of rows the the SQL (Source) returns
        '    '       ResultCache - the block of records currently stored in member (ResultCacheTop to ResultCacheTop+PageSize-1)
        '    '       ResultCache is initially loaded with PageSize records, starting on page PageNumber
        '    '       app.csv_NextCSRecord increments ResultCachePointer
        '    '           If ResultCachePointer > ResultCacheRowCount-1 then csv_LoadResultCache
        '    '       EOF true if ( ResultCachePointer > ResultCacheRowCount-1 ) and ( ResultCacheRowCount < PageSize )
        '    '
        '    Source As String                    ' Holds the SQL that created the result set
        '    DataSource As String                ' The Datasource of the SQL that created the result set
        '    PageSize as integer                    ' Number of records in a cache page
        '    PageNumber as integer                  ' The Page that this result starts with
        '    '
        '    ' ----- Read Cache
        '    '
        '    fieldNames() As String       ' 1-D array of the result field names
        '    ResultColumnCount as integer           ' number of columns in the fieldNames and ResultCacheValues
        '    ResultEOF As Boolean                ' Resultcache is at the last record
        '    ResultCacheValues() as object      ' 2-D array of the result rows/columns
        '    ResultCacheRowCount as integer         ' number of rows in the ResultCacheValues
        '    ResultCachePointer as integer          ' Pointer to the current result row, if 0, this is BOF
        '    '
        '    FieldPointer as integer                ' Used for GetFirstField, GetNextField, etc
        '    '
        '    SelectTableFieldList As String      ' comma delimited list of all fields selected, in the form table.field
        'end  structure
        '
        ' Cache for csv_CreateSQLTable, to keep one instance of CS from creating the same table many times
        '
        Private csv_CreateSQLTable_CreatedList As String = ""
        '
        ' Storage for csv_GetDefaultValue() and \cclib\Config\DefaultValues.txt file
        '
        Private DefaultValues As String = ""
        Private DefaultValueArray() As String
        Private DefaultValueArrayCnt As Integer
        '
        ' Email Block List - these are people who have asked to not have email sent to them from this site
        '   Loaded ondemand by csv_GetEmailBlockList
        '
        Private email_BlockList_Local As String = ""
        Private email_BlockList_LocalLoaded As Boolean
        '
        ' Attributes collected while composing content -
        '   These need to be added to the page or email after the content is complete.
        '   pages - after each encode content call, get these and add them into the page
        '   email - after the email is encoded, add these in
        '

        Private web_EncodeContent_JavascriptOnLoad_Cnt As Integer
        Private web_EncodeContent_JavascriptOnLoad() As String
        '
        Private web_EncodeContent_JSFilename_Cnt As Integer
        Private web_EncodeContent_JSFilename() As String
        '
        Private web_EncodeContent_JavascriptBodyEnd_cnt As Integer
        Private web_EncodeContent_JavascriptBodyEnd() As String
        '
        Private web_EncodeContent_StyleFilenames_Cnt As Integer
        Private web_EncodeContent_StyleFilenames() As String
        '
        Private web_EncodeContent_HeadTags As String = ""
        '
        ' storage moved here from main - if addon move to csv is successful, this will stay
        '
        Private pageManager_PageAddonCnt As Integer = 0
        ''
        '' ----- Get a DataSource ID from its Name
        ''       If it is not found, -1 is returned (for system datasource)
        ''
        'Public Function csv_GetDataSourceID(ByVal DataSourceName As String) As Integer
        '    Return app.csv_GetDataSourceID(DataSourceName)
        'End Function
        ''
        '' ----- Get a DataSource type (SQL Server, etc) from its Name
        ''
        'Public Function app.csv_GetDataSourceType(ByVal DataSourceName As String) As Integer
        '    Return app.csv_GetDataSourceType(DataSourceName)
        'End Function
        '    On Error GoTo ErrorTrap: 'Const Tn = "MethodName-026": 'Dim th as integer: th = profileLogMethodEnter(Tn)
        '    '
        '    Dim DataSourcePointer as integer
        '    '
        '            DataSourcePointer = app.csv_GetDataSourcePointer(DataSourceName)
        '    If app.dataSources.length > 0 Then
        '                If Not app.DataSourceConnectionObjs(DataSourcePointer).IsOpen Then
        '                    Call app.csv_OpenDataSource(DataSourceName, 30)
        '                End If
        '                csv_GetDataSourceType = app.DataSourceConnectionObjs(DataSourcePointer).Type
        '    End If
        '    '
        '    Exit Function
        '    '
        '    ' ----- Error Trap
        '    '
        'ErrorTrap:
        '    Call csv_HandleClassTrapError(Err.Number, Err.Source, Err.Description, "csv_GetDataSourceType", True)
        'End Function
        ''
        '' ----- Get a DataSource default cursor location
        ''
        'Private Function csv_GetDataSourceDefaultCursorLocation(DataSourceName As String) as integer
        '    On Error GoTo ErrorTrap: 'Const Tn = "GetDataSourceDefaultCursorLocation": 'Dim th as integer: th = profileLogMethodEnter(Tn)
        '    '
        '    Dim DataSourcePointer as integer
        '    '
        '            DataSourcePointer = app.csv_GetDataSourcePointer(DataSourceName)
        '    If app.dataSources.length > 0 Then
        '                If Not app.DataSourceConnectionObjs(DataSourcePointer).IsOpen Then
        '                    Call app.csv_OpenDataSource(DataSourceName, 30)
        '                End If
        '                csv_GetDataSourceDefaultCursorLocation = app.DataSourceConnectionObjs(DataSourcePointer).DefaultCursorLocation
        '    End If
        '    '
        '    Exit Function
        '    '
        '    ' ----- Error Trap
        '    '
        'ErrorTrap:
        '    Call csv_HandleClassTrapError(Err.Number, Err.Source, Err.Description, "csv_GetDataSourceDefaultCursorLocation", True)
        'End Function

        '
        '========================================================================
        ' Get a tables first ContentID from Tablename
        '========================================================================
        '
        Public Function db_GetContentIDByTablename(TableName As String) As Integer
            On Error GoTo ErrorTrap 'Const Tn = "MethodName-028" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim MethodName As String
            Dim SQL As String
            Dim CS As Integer
            '
            MethodName = "csv_GetContentIDByTablename"
            '
            db_GetContentIDByTablename = -1
            If TableName <> "" Then
                SQL = "select ContentControlID from " & TableName & " where contentcontrolid is not null order by contentcontrolid;"
                CS = db.db_openCsSql_rev("Default", SQL, 1, 1)
                If db.cs_Ok(CS) Then
                    db_GetContentIDByTablename = db.cs_getInteger(CS, "ContentControlID")
                End If
                Call db.cs_Close(CS)
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, MethodName, True)
        End Function
        '
        '========================================================================
        ' app.csv_DeleteTableRecord
        '========================================================================
        '
        Public Sub db_DeleteTableRecordChunks(ByVal DataSourceName As String, ByVal TableName As String, ByVal Criteria As String, Optional ByVal ChunkSize As Integer = 1000, Optional ByVal MaxChunkCount As Integer = 1000)
            On Error GoTo ErrorTrap 'Const Tn = "MethodName-029" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim PreviousCount As Integer
            Dim CurrentCount As Integer
            Dim LoopCount As Integer
            Dim SQL As String
            Dim iChunkSize As Integer
            Dim iChunkCount As Integer
            'dim dt as datatable
            Dim DataSourceType As Integer
            '
            DataSourceType = db.db_GetDataSourceType(DataSourceName)
            If (DataSourceType <> DataSourceTypeODBCSQLServer) And (DataSourceType <> DataSourceTypeODBCAccess) Then
                '
                ' If not SQL server, just delete them
                '
                Call db.db_DeleteTableRecords(DataSourceName, TableName, Criteria)
            Else
                '
                ' ----- Clear up to date for the properties
                '
                iChunkSize = ChunkSize
                If iChunkSize = 0 Then
                    iChunkSize = 1000
                End If
                iChunkCount = MaxChunkCount
                If iChunkCount = 0 Then
                    iChunkCount = 1000
                End If
                '
                ' Get an initial count and allow for timeout
                '
                PreviousCount = -1
                LoopCount = 0
                CurrentCount = 0
                SQL = "select count(*) as RecordCount from " & TableName & " where " & Criteria
                Dim dt As DataTable
                dt = db.executeSql(SQL)
                If dt.Rows.Count > 0 Then
                    CurrentCount = EncodeInteger(dt.Rows(0).Item(0))
                End If
                Do While (CurrentCount <> 0) And (PreviousCount <> CurrentCount) And (LoopCount < iChunkCount)
                    If db.db_GetDataSourceType(DataSourceName) = DataSourceTypeODBCMySQL Then
                        SQL = "delete from " & TableName & " where id in (select ID from " & TableName & " where " & Criteria & " limit " & iChunkSize & ")"
                    Else
                        SQL = "delete from " & TableName & " where id in (select top " & iChunkSize & " ID from " & TableName & " where " & Criteria & ")"
                    End If
                    Call db.executeSql(SQL, DataSourceName)
                    PreviousCount = CurrentCount
                    SQL = "select count(*) as RecordCount from " & TableName & " where " & Criteria
                    dt = db.executeSql(SQL)
                    If dt.Rows.Count > 0 Then
                        CurrentCount = EncodeInteger(dt.Rows(0).Item(0))
                    End If
                    LoopCount = LoopCount + 1
                Loop
                If (CurrentCount <> 0) And (PreviousCount = CurrentCount) Then
                    '
                    ' records did not delete
                    '
                    Call Err.Raise(ignoreInteger, "dll", "Error deleting record chunks. No records were deleted and the process was not complete.")
                ElseIf (LoopCount >= iChunkCount) Then
                    '
                    ' records did not delete
                    '
                    Call Err.Raise(ignoreInteger, "dll", "Error deleting record chunks. The maximum chunk count was exceeded while deleting records.")
                End If
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "app.csv_DeleteTableRecordChunks", True)
        End Sub
        '
        '========================================================================
        ' Get a string that can be used in the where criteria of a SQL statement
        ' opening the content pointed to by the content pointer. This criteria
        ' will include both the content, and its child contents.
        '========================================================================
        '
        Public Function db_GetContentControlCriteria(ByVal ContentName As String) As String
            On Error GoTo ErrorTrap 'Const Tn = "MethodName-032" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim MethodName As String
            Dim CDef As coreMetaDataClass.CDefClass
            '
            MethodName = "csv_GetContentControlCriteria"
            '
            CDef = metaData.getCdef(ContentName)
            db_GetContentControlCriteria = CDef.ContentControlCriteria
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, MethodName, True)
        End Function
        '
        '=============================================================================
        '   Update the content fields for all definitions that match this table
        '=============================================================================
        '
        Public Sub db_CreateContentFieldsFromSQLTable(ByVal DataSourceName As String, ByVal TableName As String)
            On Error GoTo ErrorTrap 'Const Tn = "MethodName-036" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            'Dim RSTargetTable as datatable
            ''Dim RSContent as datatable
            'Dim RSContentField as datatable
            '
            Dim SQL As String
            Dim DateAdded As Date = Date.MinValue
            Dim CreateKey As Integer
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim ContentID As Integer
            Dim BlankRecordID As Integer
            Dim MethodName As String
            Dim ContentName As String
            Dim TableFieldName As String
            ' Dim StateOfAllowContentAutoLoad As Boolean
            '
            MethodName = "csv_CreateContentFieldsFromSQLTable"
            '
            'StateOfAllowContentAutoLoad = app.AllowContentAutoLoad
            'app.AllowContentAutoLoad = False
            '
            ' ----- Get the content definition (must already be created)
            '
            SQL = "SELECT ccContent.Name AS ContentName, ccTables.Name AS TableName, ccContent.ID AS ContentID" _
                & " FROM ccContent LEFT JOIN ccTables ON ccContent.ContentTableID = ccTables.ID" _
                & " WHERE ccTables.Name=" & db.encodeSQLText(TableName) & ";"
            Const dtColumnContentName As Integer = 0
            Const dtColumnTableName As Integer = 1
            Const dtColumnContentId As Integer = 2
            '
            Dim dt As DataTable
            dt = db.executeSql(SQL)
            If dt.Rows.Count = 0 Then
                Call handleLegacyError25(MethodName, ("No Content Definition could be found for records in table [" & TableName & "]"))
            Else
                '
                '----------------------------------------------------------------
                ' Read in a record from the table to get fields
                '----------------------------------------------------------------
                '
                SQL = db.db_GetSQLSelect("default", TableName, , , , , 1)
                'If csv_GetDataSourceType(DataSourceName) = DataSourceTypeODBCMySQL Then
                '    SQL = "select * from " & TableName & " limit 1"
                'Else
                '    SQL = "select top 1 * from " & TableName & ";"
                'End If
                Dim dtTargetTable As DataTable = db.executeSql(SQL, DataSourceName)
                If dtTargetTable.Rows.Count = 0 Then
                    '
                    ' --- no records were found, add a blank if we can
                    '
                    DateAdded = DateTime.Now()
                    CreateKey = getRandomLong()
                    SQL = "INSERT INTO " & TableName & " (CreateKey,DateAdded" _
                        & ")VALUES(" _
                        & " " & db.encodeSQLNumber(CreateKey) _
                        & "," & db.encodeSQLDate(DateAdded) _
                        & ");"
                    Call db.executeSql(SQL, DataSourceName)
                    SQL = db.db_GetSQLSelect("default", TableName, "ID", "DateAdded=" & db.encodeSQLDate(DateAdded) & " AND CreateKey=" & db.encodeSQLNumber(CreateKey))
                    dtTargetTable = db.executeSql(SQL, DataSourceName)
                    If dtTargetTable.Rows.Count = 0 Then
                        Call handleLegacyError25(MethodName, ("Could not locate a new re   cord added to table [" & TableName & "]"))
                    Else
                        BlankRecordID = EncodeInteger(dtTargetTable.Rows(0).Item("id"))
                    End If
                    SQL = db.db_GetSQLSelect("default", TableName, , , , , 1)
                    dtTargetTable = db.executeSql(SQL, DataSourceName)
                    If dtTargetTable.Rows.Count = 0 Then
                        Call handleLegacyError25(MethodName, ("Could not open a record to table [" & TableName & "]."))
                    End If
                Else
                    '
                    '-----------------------------------------------------------
                    ' --- Create the ccFields record for each content
                    '-----------------------------------------------------------
                    '
                    For Each dr As DataRow In dtTargetTable.Rows
                        'dr.Columns("")
                        ContentName = EncodeText(dt(dtColumnContentName))
                        ContentID = EncodeInteger(dt(dtColumnContentId))
                        For Each dc As DataColumn In dtTargetTable.Rows
                            TableFieldName = dc.ColumnName
                            SQL = "SELECT * FROM ccFields where (ContentID=" & ContentID & ")and(name=" & db.encodeSQLText(TableFieldName) & ")"
                            Dim dtField As DataTable = db.executeSql(SQL, "Default")
                            If dtField.Rows.Count = 0 Then
                                Call db.db_CreateContentFieldFromTableField(ContentName, dc.ColumnName, EncodeInteger(dc.DataType))
                                'Call db_CreateContentFieldFromTableField(ContentName, dc.ColumnName, EncodeInteger(dc.DataType))
                            End If
                        Next
                    Next
                End If
            End If
            '
            ' ----- Load CDef
            '
            If (Not db.UpgradeInProgress) Then
                cache.invalidateAll()
                metaData.clear()
            End If
            'app.AllowContentAutoLoad = StateOfAllowContentAutoLoad
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, MethodName, True)
        End Sub

        '
        '========================================================================
        '   Get Content Definitions in XML format
        '========================================================================
        '
        Public Function db_GetXMLContentDefinition3(Optional ByVal ContentName As String = "", Optional ByVal IncludeBaseFields As Boolean = False) As String
            On Error GoTo ErrorTrap 'Const Tn = "MethodName-046" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim MethodName As String
            Dim XML As coreXmlToolsClass
            '
            MethodName = "csv_GetXMLContentDefinition3"
            '
            XML = New coreXmlToolsClass(Me)
            db_GetXMLContentDefinition3 = XML.GetXMLContentDefinition3(ContentName, IncludeBaseFields)
            XML = Nothing
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            XML = Nothing
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, MethodName, True)
        End Function


        '
        '========================================================================
        ' ----- Get FieldDescritor from FieldType
        '========================================================================
        '
        Public Function db_GetSQLAlterColumnType(ByVal DataSourceName As String, ByVal fieldType As Integer) As String
            Return db.db_GetSQLAlterColumnType(DataSourceName, fieldType)
        End Function
        '        '
        '========================================================================
        ' ----- Get FieldType from ADO Field Type
        '========================================================================
        '
        Private Function db_GetFieldTypeByADOType(ByVal ADOFieldType As Integer) As Integer
            Return db.db_GetFieldTypeIdByADOType(ADOFieldType)
        End Function
        '
        '========================================================================
        ' Check for a table in a datasource
        '   if the table is missing, create the table and the core fields
        '       if NoAutoIncrement is false or missing, the ID field is created as an auto incremenet
        '       if NoAutoIncrement is true, ID is created an an long
        '   if the table is present, check all core fields
        '========================================================================
        '
        Public Sub db_CreateSQLTable(ByVal DataSourceName As String, ByVal TableName As String, Optional ByVal AllowAutoIncrement As Boolean = True)
            Call db.db_CreateSQLTable(DataSourceName, TableName, AllowAutoIncrement)
        End Sub

        '
        '========================================================================
        '   Delete a table field from a table
        '======================================================================
        Public Sub db_DeleteTable(ByVal DataSourceName As String, ByVal TableName As String)
            db.db_DeleteTable(DataSourceName, TableName)
        End Sub
        '
        '========================================================================
        '   Delete a table field from a table
        '========================================================================
        '
        Public Sub db_DeleteTableField(ByVal DataSourceName As String, ByVal TableName As String, ByVal FieldName As String)
            Call db.db_DeleteTableField(DataSourceName, TableName, FieldName)
        End Sub
        '
        '========================================================================
        ' Create an index on a table
        '
        '   Fieldnames is  a comma delimited list of fields
        '========================================================================
        '
        Public Sub db_CreateSQLIndex(ByVal DataSourceName As String, ByVal TableName As String, ByVal IndexName As String, ByVal FieldNames As String)
            Call db.db_CreateSQLIndex(DataSourceName, TableName, IndexName, FieldNames)
        End Sub
        '
        '======================================================================================
        '   Mimicks a local
        '======================================================================================
        '
        Public Property csv_UpgradeInProgress() As Boolean
            Get
                csv_UpgradeInProgress = False
                If Not (_db Is Nothing) Then
                    csv_UpgradeInProgress = db.UpgradeInProgress
                End If
            End Get
            Set(ByVal value As Boolean)
                If Not (_db Is Nothing) Then
                    db.UpgradeInProgress = value
                End If
                'csv_UpgradeInProgressLocal = InProgress

            End Set
            'csv_UpgradeInProgress = csv_UpgradeInProgressLocal
        End Property
        '
        '==================================================================================================
        ' ----- Remove this record from all watch lists
        '       Mark permanent if the content is being deleted. non-permanent otherwise
        '==================================================================================================
        '
        Public Sub csv_DeleteContentTracking(ByVal ContentName As String, ByVal RecordID As Integer, ByVal Permanent As Boolean)
            On Error GoTo ErrorTrap 'Const Tn = "MethodName-098" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim ContentID As Integer
            '
            ' ----- remove all ContentWatchListRules (uncheck the watch lists in admin)
            '
            ContentID = metaData.getContentId(ContentName)
            Call db.db_DeleteContentRules(ContentID, RecordID)
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "csv_DeleteContentTracking", True)
        End Sub
        '
        'Public Function sendEmail(ByVal ToAddress As String, ByVal FromAddress As String, ByVal SubjectMessage As String, ByVal BodyMessage As String, Optional ByVal ResultLogFilename As String = "", Optional ByVal Immediate As Boolean = False, Optional ByVal HTML As Boolean = True) As String
        '    sendEmail = sendEmail3(ToAddress, FromAddress, SubjectMessage, BodyMessage, "", "", ResultLogFilename, Immediate, HTML, 0)
        'End Function
        ''
        ''========================================================================
        ''   Sends an email
        ''    Returns blank if all OK
        ''   Returns a string with the error if there was a problem
        ''========================================================================
        ''
        'Public Function sendEmail2(ByVal ToAddress As String, ByVal FromAddress As String, ByVal SubjectMessage As String, ByVal BodyMessage As String, ByVal BounceAddress As String, ByVal ReplyToAddress As String, Optional ByVal ResultLogFilename As String = "", Optional ByVal Immediate As Boolean = False, Optional ByVal HTML As Boolean = False, Optional emailIdForLog As Integer = 0) As String
        '    sendEmail2 = sendEmail3(ToAddress, FromAddress, SubjectMessage, BodyMessage, BounceAddress, ReplyToAddress, ResultLogFilename, Immediate, HTML, 0)
        'End Function
        '
        '====================================================================================================
        ''' <summary>
        ''' Send Email
        ''' </summary>
        ''' <param name="ToAddress"></param>
        ''' <param name="FromAddress"></param>
        ''' <param name="SubjectMessage"></param>
        ''' <param name="BodyMessage"></param>
        ''' <param name="BounceAddress"></param>
        ''' <param name="ReplyToAddress"></param>
        ''' <param name="ResultLogFilename"></param>
        ''' <param name="isImmediate"></param>
        ''' <param name="isHTML"></param>
        ''' <param name="emailIdOrZeroForLog"></param>
        ''' <returns>OK if send is successful, otherwise returns the principle issue as a user error.</returns>
        Public Function email_send3(ByVal ToAddress As String, ByVal FromAddress As String, ByVal SubjectMessage As String, ByVal BodyMessage As String, ByVal BounceAddress As String, ByVal ReplyToAddress As String, ByVal ResultLogFilename As String, ByVal isImmediate As Boolean, ByVal isHTML As Boolean, ByVal emailIdOrZeroForLog As Integer) As String
            Dim returnStatus As String = ""
            Try
                '
                Dim htmlBody As String
                Dim rootUrl As String
                Dim EmailHandler As New coreSmtpHandlerClass(Me)
                Dim iResultLogPathPage As String
                Dim WarningMsg As String = ""
                Dim CSLog As Integer
                '
                If ToAddress = "" Then
                    ' block
                ElseIf (InStr(1, ToAddress, "@") = 0) Or (InStr(1, ToAddress, ".") = 0) Then
                    ' block
                ElseIf FromAddress = "" Then
                    ' block
                ElseIf (InStr(1, FromAddress, "@") = 0) Or (InStr(1, FromAddress, ".") = 0) Then
                    ' block
                ElseIf 0 <> vbInstr(1, getEmailBlockList_InternalOnly, vbCrLf & ToAddress & vbCrLf, vbTextCompare) Then
                    '
                    ' They are in the block list
                    '
                    returnStatus = "Recipient has blocked this email"
                Else
                    '
                    iResultLogPathPage = ResultLogFilename
                    '
                    ' Test for from-address / to-address matches
                    '
                    If vbLCase(FromAddress) = vbLCase(ToAddress) Then
                        FromAddress = siteProperties.getText("EmailFromAddress", "")
                        If FromAddress = "" Then
                            '
                            '
                            '
                            FromAddress = ToAddress
                            WarningMsg = "The from-address matches the to-address. This email was sent, but may be blocked by spam filtering."
                        ElseIf vbLCase(FromAddress) = vbLCase(ToAddress) Then
                            '
                            '
                            '
                            WarningMsg = "The from-address matches the to-address. This email was sent, but may be blocked by spam filtering."
                        Else
                            '
                            '
                            '
                            WarningMsg = "The from-address matches the to-address. The from-address was changed to " & FromAddress & " to prevent it from being blocked by spam filtering."
                        End If
                    End If
                    '
                    If isHTML Then
                        '
                        ' Fix links for HTML send
                        '
                        rootUrl = "http://" & appConfig.domainList(0) & "/"
                        BodyMessage = ConvertLinksToAbsolute(BodyMessage, rootUrl)
                        '
                        ' compose body
                        '
                        htmlBody = "" _
                            & "<html>" _
                            & "<head>" _
                            & "<Title>" & SubjectMessage & "</Title>" _
                            & "<Base href=""" & rootUrl & """ >" _
                            & "</head>" _
                            & "<body class=""ccBodyEmail"">" _
                            & "<Base href=""" & rootUrl & """ >" _
                            & BodyMessage _
                            & "</body>" _
                            & "</html>"
                        returnStatus = EmailHandler.sendEmail5(ToAddress, FromAddress, SubjectMessage, BodyMessage, BounceAddress, ReplyToAddress, iResultLogPathPage, siteProperties.getText("SMTPServer", "SMTP.YourServer.Com"), isImmediate, isHTML, "")
                    Else
                        returnStatus = EmailHandler.sendEmail5(ToAddress, FromAddress, SubjectMessage, BodyMessage, BounceAddress, ReplyToAddress, iResultLogPathPage, siteProperties.getText("SMTPServer", "SMTP.YourServer.Com"), isImmediate, isHTML, "")
                    End If
                    If (returnStatus = "") Then
                        returnStatus = WarningMsg
                    End If
                    '
                    ' ----- Log the send
                    '
                    If True Then
                        CSLog = db.cs_insertRecord("Email Log", 0)
                        If db.cs_Ok(CSLog) Then
                            Call db.cs_set(CSLog, "Name", "System Email Send " & CStr(Now()))
                            Call db.cs_set(CSLog, "LogType", EmailLogTypeImmediateSend)
                            Call db.cs_set(CSLog, "SendStatus", returnStatus)
                            Call db.cs_set(CSLog, "toaddress", ToAddress)
                            Call db.cs_set(CSLog, "fromaddress", FromAddress)
                            Call db.cs_set(CSLog, "Subject", SubjectMessage)
                            If emailIdOrZeroForLog <> 0 Then
                                Call db.cs_set(CSLog, "emailid", emailIdOrZeroForLog)
                            End If
                        End If
                        Call db.cs_Close(CSLog)
                    End If
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return returnStatus
        End Function
        '        '
        '        '========================================================================
        '        '   Returns an application link correctly filtered for the Siteproperty Domain
        '        '========================================================================
        '        '
        '        Public Function filterDomainName(ByVal Link As String) As String
        '            On Error GoTo ErrorTrap 'Const Tn = "MethodName-102" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
        '            '
        '            Dim EndPosition As Integer
        '            Dim linkprotocol As String = ""
        '            Dim LinkHost As String = ""
        '            Dim LinkPath As String = ""
        '            Dim LinkPage As String = ""
        '            Dim LinkQueryString As String = ""
        '            Dim MethodName As String = "csv_FilterDomainName"
        '            Dim csv_DomainName As String
        '            '
        '            'MethodName = "csv_FilterDomainName"
        '            '
        '            filterDomainName = Link
        '            csv_DomainName = appConfig.domainList(0)
        '            If vbInstr(1, csv_DomainName, ",") <> 0 Then
        '                csv_DomainName = Mid(csv_DomainName, 1, vbInstr(1, csv_DomainName, ",") - 1)
        '            End If
        '            '
        '            ' ----- set the Links Host to the Site Property Domain for consistancy with Spider
        '            '
        '            Call SeparateURL(Link, linkprotocol, LinkHost, LinkPath, LinkPage, LinkQueryString)
        '            '
        '            filterDomainName = linkprotocol & csv_DomainName & LinkPath & LinkPage & LinkQueryString
        '            '
        '            Exit Function
        '            '
        'ErrorTrap:
        '            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, MethodName, True)
        '        End Function
        '        '
        '        '========================================================================
        '        '
        '        '========================================================================
        '        '
        '        Public Sub web_OpenStream(ByVal Filename As String)
        '            On Error GoTo ErrorTrap 'Const Tn = "csv_OpenStream" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
        '            '
        '            Dim MethodName As String
        '            '
        '            MethodName = "csv_OpenStream"
        '            '
        '            If web_StreamListCount >= csv_StreamListSize Then
        '                csv_StreamListSize = csv_StreamListSize + 1
        '                ReDim Preserve web_StreamList(csv_StreamListSize)
        '            End If
        '            web_StreamList(web_StreamListCount) = Filename
        '            web_StreamListCount = web_StreamListCount + 1
        '            '
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, MethodName, True)
        '        End Sub
        '        '
        '        '========================================================================
        '        '
        '        '========================================================================
        '        '
        '        Public Sub web_CloseStream()
        '            On Error GoTo ErrorTrap 'Const Tn = "MethodName-130" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
        '            '
        '            Dim MethodName As String
        '            '
        '            MethodName = "csv_CloseStream"
        '            '
        '            If web_StreamListCount > 0 Then
        '                web_StreamListCount = web_StreamListCount - 1
        '            End If
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, MethodName, True)
        '        End Sub
        '        '
        '        '========================================================================
        '        '
        '        '========================================================================
        '        '
        '        Public Sub log_TestPoint2(ByVal Message As String)
        '            On Error GoTo ErrorTrap 'Const Tn = "MethodName-132" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
        '            '
        '            Dim ElapsedTime As Double
        '            Dim MethodName As String
        '            'Dim iMessage As String
        '            '
        '            MethodName = "csv_TestPoint"
        '            '
        '            '
        '            ' ----- If not Pagecsv_TestPointLogging, exit right away
        '            '
        '            If web_StreamListCount > 0 Then
        '                ElapsedTime = (GetTickCount) / 1000
        '                Message = Format((ElapsedTime), "0000000.000") & " - " & Message
        '            End If
        '            '
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, MethodName, True)
        '        End Sub
        '
        ' Get the applications root path (ServerAppcsv_RootPath to WebClient)
        '
        Public ReadOnly Property app_rootWebPath() As String
            Get
                app_rootWebPath = www_requestRootPath
            End Get
        End Property
        '
        '   Get the Initialized Domain Name
        '
        Public ReadOnly Property app_domainList() As String
            Get
                app_domainList = appConfig.domainList(0)
            End Get


        End Property
        '
        '========================================================================
        '   Returns true if the field exists in the table
        '========================================================================
        '
        Public Function db_IsSQLTableField(ByVal DataSourceName As String, ByVal TableName As String, ByVal FieldName As String) As Boolean
            Return db.db_IsSQLTableField(DataSourceName, TableName, FieldName)
        End Function
        '
        '========================================================================
        '   Returns true if the table exists
        '========================================================================
        '
        Public Function db_IsSQLTable(ByVal DataSourceName As String, ByVal TableName As String) As Boolean
            Return db.db_IsSQLTable(DataSourceName, TableName)
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Public Sub pageManager_cache_pageContent_clear()
            On Error GoTo ErrorTrap 'Const Tn = "pageManager_cache_pageContent_clear" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            pageManager_cache_pageContent_rows = 0
            cache_pageContent = Nothing
            Call cache.setKey(pageManager_cache_pageContent_cacheName, cache_pageContent)
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "pageManager_cache_pageContent_clear", True)
        End Sub


        '=================================================================================
        ' Returns a pointer into the app.tableSchema() array for the table that matches
        '=================================================================================
        '
        Public Function db_GetConnectionString(ByVal DataSourceName As String) As String
            db_GetConnectionString = ""
            Try
                Dim Pointer As Integer
                '
                If Not (_db Is Nothing) Then
                    If vbUCase(DataSourceName) = "DEFAULT" Then
                        db_GetConnectionString = db.DefaultConnectionString
                    Else
                        Pointer = db.db_GetDataSourcePointer(DataSourceName)
                        If Pointer >= 0 Then
                            db_GetConnectionString = db.dataSources(Pointer).odbcConnectionString
                        End If
                    End If
                End If
            Catch ex As Exception
                Call handleExceptionAndRethrow(ex)
            End Try
        End Function
        '
        '=============================================================================
        '   Verify an Admin Menu Entry
        '       Entries are unique by their name and their Parent
        '=============================================================================
        '
        Public Sub admin_CreateAdminMenu2(ByVal ParentName As String, ByVal EntryName As String, ByVal ContentName As String, ByVal LinkPage As String, ByVal SortOrder As String, Optional ByVal AdminOnly As Boolean = False, Optional ByVal DeveloperOnly As Boolean = False, Optional ByVal NewWindow As Boolean = False)
            Call admin_VerifyAdminMenu(ParentName, EntryName, ContentName, LinkPage, SortOrder, AdminOnly, DeveloperOnly, NewWindow, True)
        End Sub
        '
        '=============================================================================
        '   Verify an Admin Menu Entry
        '       Entries are unique by their name
        '=============================================================================
        '
        Public Sub admin_VerifyAdminMenu(ByVal ParentName As String, ByVal EntryName As String, ByVal ContentName As String, ByVal LinkPage As String, ByVal SortOrder As String, Optional ByVal AdminOnly As Boolean = False, Optional ByVal DeveloperOnly As Boolean = False, Optional ByVal NewWindow As Boolean = False, Optional ByVal Active As Boolean = True)
            Dim builder As New coreBuilderClass(Me)
            Call builder.admin_VerifyMenuEntry(ParentName, EntryName, ContentName, LinkPage, SortOrder, AdminOnly, DeveloperOnly, NewWindow, Active, "Menu Entries", "")
        End Sub
        '
        '========================================================================
        '   deprecated - see csv_EncodeActiveContent_Internal
        '========================================================================
        '
        Public Function html_EncodeActiveContent4(ByVal Source As String, ByVal PeopleID As Integer, ByVal ContextContentName As String, ByVal ContextRecordID As Integer, ByVal ContextContactPeopleID As Integer, ByVal AddLinkEID As Boolean, ByVal EncodeCachableTags As Boolean, ByVal EncodeImages As Boolean, ByVal EncodeEditIcons As Boolean, ByVal EncodeNonCachableTags As Boolean, ByVal AddAnchorQuery As String, ByVal ProtocolHostString As String, ByVal IsEmailContent As Boolean, ByVal AdminURL As String) As String
            html_EncodeActiveContent4 = html_EncodeActiveContent_Internal(Source, PeopleID, ContextContentName, ContextRecordID, ContextContactPeopleID, AddLinkEID, EncodeCachableTags, EncodeImages, EncodeEditIcons, EncodeNonCachableTags, AddAnchorQuery, ProtocolHostString, IsEmailContent, AdminURL, user.isAuthenticated)
        End Function
        '
        '========================================================================
        '   see csv_EncodeActiveContent_Internal
        '========================================================================
        '
        Public Function html_EncodeActiveContent5(ByVal Source As String, ByVal PeopleID As Integer, ByVal ContextContentName As String, ByVal ContextRecordID As Integer, ByVal ContextContactPeopleID As Integer, ByVal AddLinkEID As Boolean, ByVal EncodeCachableTags As Boolean, ByVal EncodeImages As Boolean, ByVal EncodeEditIcons As Boolean, ByVal EncodeNonCachableTags As Boolean, ByVal AddAnchorQuery As String, ByVal ProtocolHostString As String, ByVal IsEmailContent As Boolean, ByVal AdminURL As String, ByVal personalizationIsAuthenticated As Boolean, ByVal Context As addonContextEnum) As String
            html_EncodeActiveContent5 = html_EncodeActiveContent_Internal(Source, PeopleID, ContextContentName, ContextRecordID, ContextContactPeopleID, AddLinkEID, EncodeCachableTags, EncodeImages, EncodeEditIcons, EncodeNonCachableTags, AddAnchorQuery, ProtocolHostString, IsEmailContent, AdminURL, user.isAuthenticated, Context)
        End Function
        '
        '========================================================================
        '   encode (execute) all {% -- %} commands
        '========================================================================
        '
        Public Function html_executeContentCommands(ByVal nothingObject As Object, ByVal Source As String, ByVal Context As addonContextEnum, ByVal personalizationPeopleId As Integer, ByVal personalizationIsAuthenticated As Boolean, ByRef Return_ErrorMessage As String) As String
            Dim returnValue As String = ""
            Try
                Dim LoopPtr As Integer
                Dim LayoutEngineOptionString As String
                Dim contentCmd As New coreContentCmdClass(Me)
                '
                returnValue = Source
                LoopPtr = 0
                Do While (LoopPtr < 10) And ((InStr(1, returnValue, contentReplaceEscapeStart) <> 0))
                    returnValue = contentCmd.ExecuteCmd(returnValue, Context, personalizationPeopleId, personalizationIsAuthenticated)
                    LoopPtr = LoopPtr + 1
                Loop
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return returnValue
        End Function
        '
        '========================================================================
        ' csv_EncodeActiveContent_Internal
        '       ...
        '       AllowLinkEID    Boolean, if yes, the EID=000... string is added to all links in the content
        '                       Use this for email so links will include the members longin.
        '
        '       Some Active elements can not be replaced here because they incorporate content from  the wbeclient.
        '       For instance the Aggregate Function Objects. These elements create
        '       <!-- FPO1 --> placeholders in the content, and commented instructions, one per line, at the top of the content
        '       Replacement instructions
        '       <!-- Replace FPO1,AFObject,ObjectName,OptionString -->
        '           Aggregate Function Object, ProgramID=ObjectName, Optionstring=Optionstring
        '       <!-- Replace FPO1,AFObject,ObjectName,OptionString -->
        '           Aggregate Function Object, ProgramID=ObjectName, Optionstring=Optionstring
        '
        ' Tag descriptions:
        '
        '   primary methods
        '
        '   <Ac Type="Date">
        '   <Ac Type="Member" Field="Name">
        '   <Ac Type="Organization" Field="Name">
        '   <Ac Type="Visitor" Field="Name">
        '   <Ac Type="Visit" Field="Name">
        '   <Ac Type="Contact" Member="PeopleID">
        '       displays a For More info block of copy
        '   <Ac Type="Feedback" Member="PeopleID">
        '       displays a feedback note block
        '   <Ac Type="ChildList" Name="ChildListName">
        '       displays a list of child blocks that reference this CHildList Element
        '   <Ac Type="Language" Name="All|English|Spanish|etc.">
        '       blocks content to next language tag to eveyone without this PeopleLanguage
        '   <Ac Type="Image" Record="" Width="" Height="" Alt="" Align="">
        '   <AC Type="Download" Record="" Alt="">
        '       renders as an anchored download icon, with the alt tag
        '       the rendered anchor points back to the root/index, which increments the resource's download count
        '
        '   During Editing, AC tags are converted (Encoded) to EditIcons
        '       these are image tags with AC information stored in the ID attribute
        '       except AC-Image, which are converted into the actual image for editing
        '       during the edit save, the EditIcons are converted (Decoded) back
        '
        '   Remarks
        '
        '   First <Member.FieldName> encountered opens the Members Table, etc.
        '       ( does <OpenTable name="Member" Tablename="ccMembers" ID=(current PeopleID)> )
        '   The copy is divided into Blocks, starting at every tag and running to the next tag.
        '   BlockTag()  The tag without the braces found
        '   BlockCopy() The copy following the tag up to the next tag
        '   BlockLabel()    the string identifier for the block
        '   BlockCount  the total blocks in the message
        '   BlockPointer    the current block being examined
        '========================================================================
        '
        Public Function html_EncodeActiveContent_Internal(ByVal Source As String, ByVal personalizationPeopleId As Integer, ByVal ContextContentName As String, ByVal ContextRecordID As Integer, ByVal moreInfoPeopleId As Integer, ByVal AddLinkEID As Boolean, ByVal EncodeCachableTags As Boolean, ByVal EncodeImages As Boolean, ByVal EncodeEditIcons As Boolean, ByVal EncodeNonCachableTags As Boolean, ByVal AddAnchorQuery As String, ByVal ProtocolHostString As String, ByVal IsEmailContent As Boolean, ByVal AdminURL As String, ByVal personalizationIsAuthenticated As Boolean, Optional ByVal context As addonContextEnum = addonContextEnum.ContextPage) As String
            On Error GoTo ErrorTrap 'Const Tn = "EncodeActiveContent_Internal" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim pairNames As Object
            Dim i As Integer
            Dim pairName As String
            Dim pairValue As String
            Dim ValueVariant As Object
            Dim posNextStart As Integer
            Dim posArgOpen As Integer
            Dim posArgClose As Integer
            Dim posBraceOpen As Integer
            Dim posBraceClose As Integer
            Dim contentCmd As String
            Dim contentCmdArgs As String
            Dim contentCmdResult As String
            Dim Item As Object
            Dim AddonName As String
            'Dim contentCmdArgJSON As Object
            Dim isJSON As Boolean
            Dim LayoutErrorMessage As String
            Dim LayoutEngineOptionString As String
            Dim ACGuid As String
            Dim Wrapper As String
            Dim AddonFound As Boolean
            Dim ACNameCaption As String
            Dim GroupIDList As String
            Dim IDControlString As String
            Dim IconIDControlString As String
            Dim Criteria As String
            Dim AddonContentName As String
            Dim SelectList As String
            Dim CSFields As Integer
            Dim IconWidth As Integer
            Dim IconHeight As Integer
            Dim IconSprites As Integer
            Dim AddonIsInline As Boolean
            Dim IconAlt As String
            Dim IconTitle As String
            Dim IconImg As String
            ''dim buildversion As String
            Dim Cmd As String
            Dim TextName As String
            Dim SortFieldList As String
            Dim ListName As String
            Dim SortDirection As String
            Dim AllowGroupAccess As Boolean
            Dim LoopPtr As Integer
            Dim SrcOptionSelector As String
            Dim ResultOptionSelector As String
            Dim ContentName As String
            Dim SrcOptionList As String
            Dim Pos As Integer
            Dim list As String
            Dim FnArgList As String
            Dim FnArgs() As String
            Dim FnArgCnt As Integer
            Dim ContentCriteria As String
            Dim RecordName As String
            Dim REsultOptionValue As String
            Dim SrcOptionValueSelector As String
            Dim InstanceOptionValue As String
            Dim ResultOptionListHTMLEncoded As String
            Dim UCaseACName As String
            Dim IconFilename As String
            Dim FilenameSegment As String
            Dim EndPos1 As Integer
            Dim EndPos2 As Integer
            Dim LinkSplit() As String
            Dim LinkCnt As Integer
            Dim LinkPtr As Integer
            Dim TableSplit() As String
            Dim TableName As String
            Dim FieldName As String
            Dim RecordID As Integer
            Dim SQL As String
            Dim SaveChanges As Boolean
            Dim NextPosSpace As Integer
            Dim NextPosQuote As Integer
            Dim LinkEndPos As Integer
            Dim NewLink As String
            Dim EndPos As Integer
            Dim Ptr As Integer
            Dim FilePrefixSegment As String
            Dim ElementPointer As Integer
            Dim ListCount As Integer
            Dim CSVisitor As Integer
            Dim CSVisit As Integer
            Dim CSChildList As Integer
            Dim CSVisitorSet As Boolean
            Dim CSVisitSet As Boolean
            'Dim ContextContentName As String
            'Dim ContextRecordID as integer
            Dim ElementTag As String
            Dim ElementName As String
            Dim ACType As String
            Dim ACField As String
            Dim ACName As String
            Dim ACBullet As Boolean
            'Dim moreInfoPeopleId as integer
            Dim Copy As String
            Dim LinkLabel As String
            Dim Overview As String
            'Dim CSContext as integer
            Dim KmaHTML As coreHtmlParseClass
            Dim AttributeCount As Integer
            Dim AttributePointer As Integer
            Dim Name As String
            Dim Value As String
            Dim JoinCriteria As String
            Dim CS As Integer
            'Dim FormattingContentID as integer
            Dim ACAttrRecordID As Integer
            Dim ACAttrWidth As Integer
            Dim ACAttrHeight As Integer
            Dim ACAttrAlt As String
            Dim ACAttrBorder As Integer
            Dim ACAttrLoop As Integer
            Dim ACAttrVSpace As Integer
            Dim ACAttrHSpace As Integer
            Dim Filename As String
            Dim ACAttrAlign As String
            Dim ProcessAnchorTags As Boolean
            Dim ProcessACTags As Boolean
            Dim SelectFieldList As String
            Dim ACLanguageName As String
            Dim Stream As coreFastStringClass
            Dim AnchorQuery As String
            '
            Dim CSOrganization As Integer
            Dim CSOrganizationSet As Boolean
            '
            Dim CSPeople As Integer
            Dim CSPeopleSet As Boolean
            '
            Dim CSlanguage As Integer
            Dim PeopleLanguageSet As Boolean
            Dim PeopleLanguage As String
            Dim UcasePeopleLanguage As String
            '
            Dim serverFilePath As String
            Dim ReplaceCount As Integer
            Dim ReplaceInstructions As String
            '
            Dim Link As String
            Dim NotUsedID As Integer
            Dim CSInstance As Integer
            Dim addonOptionString As String
            Dim AddonOptionStringHTMLEncoded As String
            Dim ProgramID As String
            Dim AggrObject As Object
            '    Dim OptionString As String
            '    Dim Options() As String
            '    Dim OptionCnt as integer
            '    Dim OptionPtr as integer
            '    Dim OptionPair() As String
            '    Dim OptionName As String
            '    Dim OptionValue As String
            Dim SrcOptions() As String
            Dim SrcOptionCnt As Integer
            Dim SrcOptionPtr As Integer
            Dim SrcOptionPair() As String
            Dim SrcOptionName As String
            Dim SrcOptionValue As String

            Dim FormCount As Integer
            Dim FormInputCount As Integer
            Dim CDef As coreMetaDataClass.CDefClass
            Dim FieldList As String
            Dim ProcessResourceLibraryLinks As Boolean
            'Dim ContentFilesLinkPrefix As String
            'Dim ResourceLibraryLinkPrefix As String
            Dim TestChr As String
            Dim ACInstanceID As String
            Dim ParseError As Boolean
            Dim PosStart As Integer
            Dim PosEnd As Integer
            Dim AllowGroups As String
            Dim TemplateBodyContent As String
            Dim workingContent As String
            Dim NewName As String
            '
            'BuildVersion = app.dataBuildVersion
            '
            workingContent = Source
            'TemplateBodyContent = TemplateCaseOnly_Content
            'If TemplateBodyContent <> "" Then
            '    TemplateBodyContent = TemplateBodyContent
            'End If
            '
            ' Fixup Anchor Query (additional AddonOptionString pairs to add to the end)
            '
            If AddLinkEID And (personalizationPeopleId <> 0) Then
                AnchorQuery = AnchorQuery & "&EID=" & security.encodeToken(EncodeInteger(personalizationPeopleId), Now())
            End If
            '
            If AddAnchorQuery <> "" Then
                AnchorQuery = AnchorQuery & "&" & AddAnchorQuery
            End If
            '
            If AnchorQuery <> "" Then
                AnchorQuery = Mid(AnchorQuery, 2)
            End If
            '
            ' ----- xml contensive process instruction
            '
            'TemplateBodyContent
            'Pos = vbInstr(1, TemplateBodyContent, "<?contensive", vbTextCompare)
            'If Pos > 0 Then
            '    '
            '    ' convert template body if provided - this is the content that replaces the content box addon
            '    '
            '    TemplateBodyContent = Mid(TemplateBodyContent, Pos)
            '    LayoutEngineOptionString = "data=" & encodeNvaArgument(TemplateBodyContent)
            '    TemplateBodyContent = csv_ExecuteActiveX("aoPrimitives.StructuredDataClass", "Structured Data Engine", nothing, LayoutEngineOptionString, "data=(structured data)", LayoutErrorMessage)
            'End If
            Pos = vbInstr(1, workingContent, "<?contensive", vbTextCompare)
            If Pos > 0 Then
                Throw New ApplicationException("Structured xml data commands are no longer supported")
                ''
                '' convert content if provided
                ''
                'workingContent = Mid(workingContent, Pos)
                'LayoutEngineOptionString = "data=" & encodeNvaArgument(workingContent)
                'Dim structuredData As New core_primitivesStructuredDataClass(Me)
                'workingContent = structuredData.execute()
                'workingContent = csv_ExecuteActiveX("aoPrimitives.StructuredDataClass", "Structured Data Engine", LayoutEngineOptionString, "data=(structured data)", LayoutErrorMessage)
            End If
            '
            ' Special Case
            ' Convert <!-- STARTGROUPACCESS 10,11,12 --> format to <AC type=GROUPACCESS AllowGroups="10,11,12">
            ' Convert <!-- ENDGROUPACCESS --> format to <AC type=GROUPACCESSEND>
            '
            PosStart = vbInstr(1, workingContent, "<!-- STARTGROUPACCESS ", vbTextCompare)
            If PosStart > 0 Then
                PosEnd = vbInstr(PosStart, workingContent, "-->")
                If PosEnd > 0 Then
                    AllowGroups = Mid(workingContent, PosStart + 22, PosEnd - PosStart - 23)
                    workingContent = Mid(workingContent, 1, PosStart - 1) & "<AC type=""" & ACTypeAggregateFunction & """ name=""block text"" querystring=""allowgroups=" & AllowGroups & """>" & Mid(workingContent, PosEnd + 3)
                End If
            End If
            '
            PosStart = vbInstr(1, workingContent, "<!-- ENDGROUPACCESS ", vbTextCompare)
            If PosStart > 0 Then
                PosEnd = vbInstr(PosStart, workingContent, "-->")
                If PosEnd > 0 Then
                    workingContent = Mid(workingContent, 1, PosStart - 1) & "<AC type=""" & ACTypeAggregateFunction & """ name=""block text end"" >" & Mid(workingContent, PosEnd + 3)
                End If
            End If
            '
            ' ----- Special case -- if any of these are in the source, this is legacy. Convert them to icons,
            '       and they will be converted to AC tags when the icons are saved
            '
            If EncodeEditIcons Then
                '
                ' replace {{content}} with <AC contentbox>
                ' replace {{DYNAMICMENU?menu=menu Name}} with <ac dynamic menu>
                '
                IconIDControlString = "AC," & ACTypeTemplateContent & "," & NotUsedID & "," & ACName & ","
                IconImg = GetAddonIconImg(AdminURL, 52, 64, 0, False, IconIDControlString, "/cclib/images/ACTemplateContentIcon.gif", serverFilePath, "Template Page Content", "Renders as [Template Page Content]", "", 0)
                workingContent = vbReplace(workingContent, "{{content}}", IconImg, 1, 99, vbTextCompare)
                'WorkingContent = vbReplace(WorkingContent, "{{content}}", "<img ACInstanceID=""" & ACInstanceID & """ onDblClick=""window.parent.OpenAddonPropertyWindow(this);"" alt=""Add-on"" title=""Rendered as the Template Page Content"" id=""AC," & ACTypeTemplateContent & "," & NotUsedID & "," & ACName & ","" src=""/cclib/images/ACTemplateContentIcon.gif"" WIDTH=52 HEIGHT=64>", 1, -1, vbTextCompare)
                '
                ' replace all other {{...}}
                '
                LoopPtr = 0
                Pos = 1
                Do While Pos > 0 And LoopPtr < 100
                    Pos = vbInstr(Pos, workingContent, "{{" & ACTypeDynamicMenu, vbTextCompare)
                    If Pos > 0 Then
                        addonOptionString = ""
                        PosStart = Pos
                        If PosStart <> 0 Then
                            'PosStart = PosStart + 2 + Len(ACTypeDynamicMenu)
                            PosEnd = vbInstr(PosStart, workingContent, "}}", vbTextCompare)
                            If PosEnd <> 0 Then
                                Cmd = Mid(workingContent, PosStart + 2, PosEnd - PosStart - 2)
                                Pos = vbInstr(1, Cmd, "?")
                                If Pos <> 0 Then
                                    addonOptionString = decodeHtml(Mid(Cmd, Pos + 1))
                                End If
                                TextName = csv_GetAddonOptionStringValue("menu", addonOptionString)
                                '
                                addonOptionString = "Menu=" & TextName & "[" & csv_GetDynamicMenuACSelect() & "]&NewMenu="
                                AddonOptionStringHTMLEncoded = html_EncodeHTML("Menu=" & TextName & "[" & csv_GetDynamicMenuACSelect() & "]&NewMenu=")
                                '
                                IconIDControlString = "AC," & ACTypeDynamicMenu & "," & NotUsedID & "," & ACName & "," & AddonOptionStringHTMLEncoded
                                IconImg = GetAddonIconImg(AdminURL, 52, 52, 0, False, IconIDControlString, "/cclib/images/ACDynamicMenuIcon.gif", serverFilePath, "Dynamic Menu", "Renders as [Dynamic Menu]", "", 0)
                                workingContent = Mid(workingContent, 1, PosStart - 1) & IconImg & Mid(workingContent, PosEnd + 2)
                            End If
                        End If
                    End If
                Loop
            End If
            '
            ' Test early if this needs to run at all
            '
            ProcessACTags = ((EncodeCachableTags Or EncodeNonCachableTags Or EncodeImages Or EncodeEditIcons)) And (InStr(1, workingContent, "<AC ", vbTextCompare) <> 0)
            ProcessAnchorTags = (AnchorQuery <> "") And (InStr(1, workingContent, "<A ", vbTextCompare) <> 0)
            If (workingContent <> "") And (ProcessAnchorTags Or ProcessACTags) Then
                '
                ' ----- Load the Active Elements
                '
                KmaHTML = New coreHtmlParseClass(Me)
                Call KmaHTML.Load(workingContent)
                '
                ' ----- Execute and output elements
                '
                ElementPointer = 0
                If KmaHTML.ElementCount > 0 Then
                    ElementPointer = 0
                    workingContent = ""
                    serverFilePath = ProtocolHostString & "/" & appConfig.name & "/files/"
                    Stream = New coreFastStringClass
                    Do While ElementPointer < KmaHTML.ElementCount
                        Copy = KmaHTML.Text(ElementPointer)
                        If KmaHTML.IsTag(ElementPointer) Then
                            ElementTag = vbUCase(KmaHTML.TagName(ElementPointer))
                            ACName = KmaHTML.ElementAttribute(ElementPointer, "NAME")
                            UCaseACName = vbUCase(ACName)
                            Select Case ElementTag
                                Case "FORM"
                                    '
                                    ' Form created in content
                                    ' EncodeEditIcons -> remove the
                                    '
                                    If EncodeNonCachableTags Then
                                        FormCount = FormCount + 1
                                        '
                                        ' 5/14/2009 - DM said it is OK to remove UserResponseForm Processing
                                        ' however, leave this one because it is needed to make current forms work.
                                        '
                                        If (InStr(1, Copy, "contensiveuserform=1", vbTextCompare) <> 0) Or (InStr(1, Copy, "contensiveuserform=""1""", vbTextCompare) <> 0) Then
                                            '
                                            ' if it has "contensiveuserform=1" in the form tag, remove it from the form and add the hidden that makes it work
                                            '
                                            Copy = vbReplace(Copy, "ContensiveUserForm=1", "", 1, 99, vbTextCompare)
                                            Copy = vbReplace(Copy, "ContensiveUserForm=""1""", "", 1, 99, vbTextCompare)
                                            If Not EncodeEditIcons Then
                                                Copy = Copy & "<input type=hidden name=ContensiveUserForm value=1>"
                                            End If
                                        End If
                                    End If
                                Case "INPUT"
                                    If EncodeNonCachableTags Then
                                        FormInputCount = FormInputCount + 1
                                    End If
                                Case "A"
                                    If (AnchorQuery <> "") Then
                                        '
                                        ' ----- Add ?eid=0000 to all anchors back to the same site so emails
                                        '       can be sent that will automatically log the person in when they
                                        '       arrive.
                                        '
                                        AttributeCount = KmaHTML.ElementAttributeCount(ElementPointer)
                                        If AttributeCount > 0 Then
                                            Copy = "<A "
                                            For AttributePointer = 0 To AttributeCount - 1
                                                Name = KmaHTML.ElementAttributeName(ElementPointer, AttributePointer)
                                                Value = KmaHTML.ElementAttributeValue(ElementPointer, AttributePointer)
                                                If vbUCase(Name) = "HREF" Then
                                                    Dim linkDomain As String
                                                    Dim linkprotocol As String
                                                    Link = Value
                                                    'linkProtocol = ""
                                                    'linkDomain = ""
                                                    Pos = vbInstr(1, Link, "://")
                                                    If Pos > 0 Then
                                                        'linkProtocol = Left(Link, Pos + 2)
                                                        Link = Mid(Link, Pos + 3)
                                                        Pos = vbInstr(1, Link, "/")
                                                        If Pos > 0 Then
                                                            Link = Left(Link, Pos - 1)
                                                            'Link = Mid(Link, Pos + 1)
                                                        End If
                                                    End If
                                                    If (Link = "") Or (InStr(1, "," & appConfig.domainList(0) & ",", "," & Link & ",", vbTextCompare) <> 0) Then
                                                        'If vbInstr(1, app.config.domainList(0), Value, vbTextCompare) <> 0 Then
                                                        '
                                                        ' ----- link is for this site
                                                        '
                                                        '    If vbInstr(1, Value, "/") <> 0 Then
                                                        '        '
                                                        '        ' ----- link contains a slash
                                                        '        '
                                                        If Right(Value, 1) = "?" Then
                                                            '
                                                            ' Ends in a questionmark, must be Dwayne (?)
                                                            '
                                                            Value = Value & AnchorQuery
                                                        ElseIf vbInstr(1, Value, "mailto:", vbTextCompare) <> 0 Then
                                                            '
                                                            ' catch mailto
                                                            '
                                                            'Value = Value & AnchorQuery
                                                        ElseIf vbInstr(1, Value, "?") = 0 Then
                                                            '
                                                            ' No questionmark there, add it
                                                            '
                                                            Value = Value & "?" & AnchorQuery
                                                        Else
                                                            '
                                                            ' Questionmark somewhere, add new value with amp;
                                                            '
                                                            Value = Value & "&" & AnchorQuery
                                                        End If
                                                        '    End If
                                                    End If
                                                End If
                                                Copy = Copy & " " & Name & "=""" & Value & """"
                                            Next
                                            Copy = Copy & ">"
                                        End If
                                    End If
                                Case "AC"
                                    '
                                    ' ----- decode all AC tags
                                    '
                                    ListCount = 0
                                    ACType = KmaHTML.ElementAttribute(ElementPointer, "TYPE")
                                    ' if ACInstanceID=0, it can not create settings link in edit mode. ACInstanceID is added during edit save.
                                    ACInstanceID = KmaHTML.ElementAttribute(ElementPointer, "ACINSTANCEID")
                                    ACGuid = KmaHTML.ElementAttribute(ElementPointer, "GUID")
                                    Select Case vbUCase(ACType)
                                        Case ACTypeEnd
                                            '
                                            ' End Tag - Personalization
                                            '       This tag causes an end to the all tags, like Language
                                            '       It is removed by with EncodeEditIcons (on the way to the editor)
                                            '       It is added to the end of the content with Decode(activecontent)
                                            '
                                            If EncodeEditIcons Then
                                                Copy = ""
                                            ElseIf EncodeNonCachableTags Then
                                                Copy = "<!-- Language ANY -->"
                                            End If
                                        Case ACTypeDate
                                            '
                                            ' Date Tag
                                            '
                                            If EncodeEditIcons Then
                                                IconIDControlString = "AC," & ACTypeDate
                                                IconImg = GetAddonIconImg(AdminURL, 0, 0, 0, True, IconIDControlString, "", serverFilePath, "Current Date", "Renders as [Current Date]", ACInstanceID, 0)
                                                Copy = IconImg
                                                'Copy = "<img ACInstanceID=""" & ACInstanceID & """ alt=""Add-on"" title=""Rendered as the current date"" ID=""AC," & ACTypeDate & """ src=""/cclib/images/ACDate.GIF"">"
                                            ElseIf EncodeNonCachableTags Then
                                                Copy = DateTime.Now.ToString
                                            End If
                                        Case ACTypeMember, ACTypePersonalization
                                            '
                                            ' Member Tag works regardless of authentication
                                            ' cm must be sure not to reveal anything
                                            '
                                            ACField = vbUCase(KmaHTML.ElementAttribute(ElementPointer, "FIELD"))
                                            If ACField = "" Then
                                                ' compatibility for old personalization type
                                                ACField = csv_GetAddonOptionStringValue("FIELD", KmaHTML.ElementAttribute(ElementPointer, "QUERYSTRING"))
                                            End If
                                            FieldName = EncodeInitialCaps(ACField)
                                            If (FieldName = "") Then
                                                FieldName = "Name"
                                            End If
                                            If EncodeEditIcons Then
                                                Select Case vbUCase(FieldName)
                                                    Case "FIRSTNAME"
                                                        '
                                                        IconIDControlString = "AC," & ACType & "," & FieldName
                                                        IconImg = GetAddonIconImg(AdminURL, 0, 0, 0, True, IconIDControlString, "", serverFilePath, "User's First Name", "Renders as [User's First Name]", ACInstanceID, 0)
                                                        Copy = IconImg
                                                        '
                                                    Case "LASTNAME"
                                                        '
                                                        IconIDControlString = "AC," & ACType & "," & FieldName
                                                        IconImg = GetAddonIconImg(AdminURL, 0, 0, 0, True, IconIDControlString, "", serverFilePath, "User's Last Name", "Renders as [User's Last Name]", ACInstanceID, 0)
                                                        Copy = IconImg
                                                        '
                                                    Case Else
                                                        '
                                                        IconIDControlString = "AC," & ACType & "," & FieldName
                                                        IconImg = GetAddonIconImg(AdminURL, 0, 0, 0, True, IconIDControlString, "", serverFilePath, "User's " & FieldName, "Renders as [User's " & FieldName & "]", ACInstanceID, 0)
                                                        Copy = IconImg
                                                        '
                                                End Select
                                            ElseIf EncodeNonCachableTags Then
                                                If personalizationPeopleId <> 0 Then
                                                    If vbUCase(FieldName) = "EID" Then
                                                        Copy = security.encodeToken(personalizationPeopleId, Now())
                                                    Else
                                                        If Not CSPeopleSet Then
                                                            CSPeople = db.db_OpenCSContentRecord("People", personalizationPeopleId)
                                                            CSPeopleSet = True
                                                        End If
                                                        If db.cs_Ok(CSPeople) And db.db_IsCSFieldSupported(CSPeople, FieldName) Then
                                                            Copy = db.db_GetCSLookup(CSPeople, FieldName)
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        Case ACTypeChildList
                                            '
                                            ' Child List
                                            '
                                            ListName = EncodeText((KmaHTML.ElementAttribute(ElementPointer, "name")))

                                            If EncodeEditIcons Then
                                                IconIDControlString = "AC," & ACType & ",," & ACName
                                                IconImg = GetAddonIconImg(AdminURL, 0, 0, 0, True, IconIDControlString, "", serverFilePath, "List of Child Pages", "Renders as [List of Child Pages]", ACInstanceID, 0)
                                                Copy = IconImg
                                            ElseIf EncodeCachableTags Then
                                                '
                                                ' Handle in webclient
                                                '
                                                ' removed sort method because all child pages are read in together in the order set by the parent - improve this later
                                                Copy = "{{" & ACTypeChildList & "?name=" & encodeNvaArgument(ListName) & "}}"
                                            End If
                                        Case ACTypeContact
                                            '
                                            ' Formatting Tag
                                            '
                                            If EncodeEditIcons Then
                                                '
                                                IconIDControlString = "AC," & ACType
                                                IconImg = GetAddonIconImg(AdminURL, 0, 0, 0, True, IconIDControlString, "", serverFilePath, "Contact Information Line", "Renders as [Contact Information Line]", ACInstanceID, 0)
                                                Copy = IconImg
                                                '
                                                'Copy = "<img ACInstanceID=""" & ACInstanceID & """ alt=""Add-on"" title=""Rendered as a line of text with contact information for this record's primary contact"" id=""AC," & ACType & """ src=""/cclib/images/ACContact.GIF"">"
                                            ElseIf EncodeCachableTags Then
                                                If moreInfoPeopleId <> 0 Then
                                                    Copy = pageManager_getMoreInfoHtml(moreInfoPeopleId)
                                                End If
                                            End If
                                        Case ACTypeFeedback
                                            '
                                            ' Formatting tag - change from information to be included after submission
                                            '
                                            If EncodeEditIcons Then
                                                '
                                                IconIDControlString = "AC," & ACType
                                                IconImg = GetAddonIconImg(AdminURL, 0, 0, 0, False, IconIDControlString, "", serverFilePath, "Feedback Form", "Renders as [Feedback Form]", ACInstanceID, 0)
                                                Copy = IconImg
                                                '
                                                'Copy = "<img ACInstanceID=""" & ACInstanceID & """ alt=""Add-on"" title=""Rendered as a feedback form, sent to this record's primary contact."" id=""AC," & ACType & """ src=""/cclib/images/ACFeedBack.GIF"">"
                                            ElseIf EncodeNonCachableTags Then
                                                If (moreInfoPeopleId <> 0) And (ContextContentName <> "") And (ContextRecordID <> 0) Then
                                                    Copy = FeedbackFormNotSupportedComment
                                                End If
                                            End If
                                        Case ACTypeLanguage
                                            '
                                            ' Personalization Tag - block languages not from the visitor
                                            '
                                            ACLanguageName = vbUCase(KmaHTML.ElementAttribute(ElementPointer, "NAME"))
                                            If EncodeEditIcons Then
                                                Select Case vbUCase(ACLanguageName)
                                                    Case "ANY"
                                                        '
                                                        IconIDControlString = "AC," & ACType & ",," & ACLanguageName
                                                        IconImg = GetAddonIconImg(AdminURL, 0, 0, 0, True, IconIDControlString, "", serverFilePath, "All copy following this point is rendered, regardless of the member's language setting", "Renders as [Begin Rendering All Languages]", ACInstanceID, 0)
                                                        Copy = IconImg
                                                        '
                                                        'Copy = "<img ACInstanceID=""" & ACInstanceID & """ alt=""All copy following this point is rendered, regardless of the member's language setting"" id=""AC," & ACType & ",," & ACLanguageName & """ src=""/cclib/images/ACLanguageAny.GIF"">"
                                                        'Case "ENGLISH", "FRENCH", "GERMAN", "PORTUGEUESE", "ITALIAN", "SPANISH", "CHINESE", "HINDI"
                                                        '   Copy = "<img ACInstanceID=""" & ACInstanceID & """ alt=""All copy following this point is rendered if the member's language setting matchs [" & ACLanguageName & "]"" id=""AC," & ACType & ",," & ACLanguageName & """ src=""/cclib/images/ACLanguage" & ACLanguageName & ".GIF"">"
                                                    Case Else
                                                        '
                                                        IconIDControlString = "AC," & ACType & ",," & ACLanguageName
                                                        IconImg = GetAddonIconImg(AdminURL, 0, 0, 0, True, IconIDControlString, "", serverFilePath, "All copy following this point is rendered if the member's language setting matchs [" & ACLanguageName & "]", "Begin Rendering for language [" & ACLanguageName & "]", ACInstanceID, 0)
                                                        Copy = IconImg
                                                        '
                                                        'Copy = "<img ACInstanceID=""" & ACInstanceID & """ alt=""All copy following this point is rendered if the member's language setting matchs [" & ACLanguageName & "]"" id=""AC," & ACType & ",," & ACLanguageName & """ src=""/cclib/images/ACLanguageOther.GIF"">"
                                                End Select
                                            ElseIf EncodeNonCachableTags Then
                                                If personalizationPeopleId = 0 Then
                                                    PeopleLanguage = "any"
                                                Else
                                                    If Not PeopleLanguageSet Then
                                                        If Not CSPeopleSet Then
                                                            CSPeople = db.db_OpenCSContentRecord("people", personalizationPeopleId)
                                                            CSPeopleSet = True
                                                        End If
                                                        CSlanguage = db.db_OpenCSContentRecord("Languages", db.cs_getInteger(CSPeople, "LanguageID"), , , , "Name")
                                                        If db.cs_Ok(CSlanguage) Then
                                                            PeopleLanguage = db.cs_getText(CSlanguage, "name")
                                                        End If
                                                        Call db.cs_Close(CSlanguage)
                                                        PeopleLanguageSet = True
                                                    End If
                                                End If
                                                UcasePeopleLanguage = vbUCase(PeopleLanguage)
                                                If UcasePeopleLanguage = "ANY" Then
                                                    '
                                                    ' This person wants all the languages, put in language marker and continue
                                                    '
                                                    Copy = "<!-- Language " & ACLanguageName & " -->"
                                                ElseIf (ACLanguageName <> UcasePeopleLanguage) And (ACLanguageName <> "ANY") Then
                                                    '
                                                    ' Wrong language, remove tag, skip to the end, or to the next language tag
                                                    '
                                                    Copy = ""
                                                    ElementPointer = ElementPointer + 1
                                                    Do While ElementPointer < KmaHTML.ElementCount
                                                        ElementTag = vbUCase(KmaHTML.TagName(ElementPointer))
                                                        If (ElementTag = "AC") Then
                                                            ACType = vbUCase(KmaHTML.ElementAttribute(ElementPointer, "TYPE"))
                                                            If (ACType = ACTypeLanguage) Then
                                                                ElementPointer = ElementPointer - 1
                                                                Exit Do
                                                            ElseIf (ACType = ACTypeEnd) Then
                                                                Exit Do
                                                            End If
                                                        End If
                                                        ElementPointer = ElementPointer + 1
                                                    Loop
                                                Else
                                                    '
                                                    ' Right Language, remove tag
                                                    '
                                                    Copy = ""
                                                End If
                                            End If
                                        Case ACTypeAggregateFunction
                                            '
                                            ' ----- Add-on
                                            '
                                            NotUsedID = 0
                                            AddonOptionStringHTMLEncoded = KmaHTML.ElementAttribute(ElementPointer, "QUERYSTRING")
                                            addonOptionString = decodeHtml(AddonOptionStringHTMLEncoded)
                                            If IsEmailContent Then
                                                '
                                                ' Addon - for email
                                                '
                                                If EncodeNonCachableTags Then
                                                    '
                                                    ' Only hardcoded Add-ons can run in Emails
                                                    '
                                                    Select Case vbLCase(ACName)
                                                        Case "block text"
                                                            '
                                                            ' Email is always considered authenticated bc they need their login credentials to get the email.
                                                            ' Allowed to see the content that follows if you are authenticated, admin, or in the group list
                                                            ' This must be done out on the page because the csv does not know about authenticated
                                                            '
                                                            Copy = ""
                                                            GroupIDList = csv_GetAddonOptionStringValue("AllowGroups", addonOptionString)
                                                            If (Not user.isMemberOfGroupIdList(personalizationPeopleId, True, GroupIDList, True)) Then
                                                                '
                                                                ' Block content if not allowed
                                                                '
                                                                ElementPointer = ElementPointer + 1
                                                                Do While ElementPointer < KmaHTML.ElementCount
                                                                    ElementTag = vbUCase(KmaHTML.TagName(ElementPointer))
                                                                    If (ElementTag = "AC") Then
                                                                        ACType = vbUCase(KmaHTML.ElementAttribute(ElementPointer, "TYPE"))
                                                                        If (ACType = ACTypeAggregateFunction) Then
                                                                            If vbLCase(KmaHTML.ElementAttribute(ElementPointer, "name")) = "block text end" Then
                                                                                Exit Do
                                                                            End If
                                                                        End If
                                                                    End If
                                                                    ElementPointer = ElementPointer + 1
                                                                Loop
                                                            End If
                                                        Case "block text end"
                                                            '
                                                            ' always remove end tags because the block text did not remove it
                                                            '
                                                            Copy = ""
                                                        Case Else
                                                            '
                                                            ' all other add-ons, pass out to cpCoreClass to process
                                                            '
                                                            Copy = executeAddon(0, ACName, AddonOptionStringHTMLEncoded, addonContextEnum.contextEmail, "", 0, "", ACInstanceID, False, 0, "", True, Nothing, "", Nothing, "", personalizationPeopleId, personalizationIsAuthenticated)
                                                            'Copy = "" _
                                                            '    & "" _
                                                            '    & "<!-- ADDON " _
                                                            '    & """" & ACName & """" _
                                                            '    & ",""" & AddonOptionStringHTMLEncoded & """" _
                                                            '    & ",""" & ACInstanceID & """" _
                                                            '    & ",""" & ACGuid & """" _
                                                            '    & " -->" _
                                                            '    & ""
                                                    End Select
                                                End If
                                            Else
                                                '
                                                ' Addon - for web
                                                '

                                                If EncodeEditIcons Then
                                                    '
                                                    ' Get IconFilename, update the optionstring, and execute optionstring replacement functions
                                                    '
                                                    AddonContentName = "Add-ons"
                                                    If True Then
                                                        SelectList = "Name,Link,ID,ArgumentList,ObjectProgramID,IconFilename,IconWidth,IconHeight,IconSprites,IsInline,ccGuid"
                                                    End If
                                                    If ACGuid <> "" Then
                                                        Criteria = "ccguid=" & db.encodeSQLText(ACGuid)
                                                    Else
                                                        Criteria = "name=" & db.encodeSQLText(UCaseACName)
                                                    End If
                                                    CS = db.csOpen(AddonContentName, Criteria, "Name,ID", , , , , SelectList)
                                                    If db.cs_Ok(CS) Then
                                                        AddonFound = True
                                                        ' ArgumentList comes in already encoded
                                                        IconFilename = db.db_GetCS(CS, "IconFilename")
                                                        SrcOptionList = db.db_GetCS(CS, "ArgumentList")
                                                        IconWidth = db.cs_getInteger(CS, "IconWidth")
                                                        IconHeight = db.cs_getInteger(CS, "IconHeight")
                                                        IconSprites = db.cs_getInteger(CS, "IconSprites")
                                                        AddonIsInline = db.cs_getBoolean(CS, "IsInline")
                                                        ACGuid = db.cs_getText(CS, "ccGuid")
                                                        IconAlt = ACName
                                                        IconTitle = "Rendered as the Add-on [" & ACName & "]"
                                                    Else
                                                        Select Case vbLCase(ACName)
                                                            Case "block text"
                                                                IconFilename = ""
                                                                SrcOptionList = AddonOptionConstructor_ForBlockText
                                                                IconWidth = 0
                                                                IconHeight = 0
                                                                IconSprites = 0
                                                                AddonIsInline = True
                                                                ACGuid = ""
                                                            Case "block text end"
                                                                IconFilename = ""
                                                                SrcOptionList = ""
                                                                IconWidth = 0
                                                                IconHeight = 0
                                                                IconSprites = 0
                                                                AddonIsInline = True
                                                                ACGuid = ""
                                                            Case Else
                                                                IconFilename = ""
                                                                SrcOptionList = ""
                                                                IconWidth = 0
                                                                IconHeight = 0
                                                                IconSprites = 0
                                                                AddonIsInline = False
                                                                IconAlt = "Unknown Add-on [" & ACName & "]"
                                                                IconTitle = "Unknown Add-on [" & ACName & "]"
                                                                ACGuid = ""
                                                        End Select
                                                    End If
                                                    Call db.cs_Close(CS)
                                                    '
                                                    ' Build AddonOptionStringHTMLEncoded from SrcOptionList (for names), itself (for current settings), and SrcOptionList (for select options)
                                                    '
                                                    If (InStr(1, SrcOptionList, "wrapper", vbTextCompare) = 0) Then
                                                        If AddonIsInline Then
                                                            SrcOptionList = SrcOptionList & vbCrLf & AddonOptionConstructor_Inline
                                                        Else
                                                            SrcOptionList = SrcOptionList & vbCrLf & AddonOptionConstructor_Block
                                                        End If
                                                    End If
                                                    If SrcOptionList = "" Then
                                                        ResultOptionListHTMLEncoded = ""
                                                    Else
                                                        ResultOptionListHTMLEncoded = ""
                                                        REsultOptionValue = ""
                                                        SrcOptionList = vbReplace(SrcOptionList, vbCrLf, vbCr)
                                                        SrcOptionList = vbReplace(SrcOptionList, vbLf, vbCr)
                                                        SrcOptions = Split(SrcOptionList, vbCr)
                                                        For Ptr = 0 To UBound(SrcOptions)
                                                            SrcOptionName = SrcOptions(Ptr)
                                                            Dim LoopPtr2 As Integer

                                                            LoopPtr2 = 0
                                                            Do While (Len(SrcOptionName) > 1) And (Mid(SrcOptionName, 1, 1) = vbTab) And (LoopPtr2 < 100)
                                                                SrcOptionName = Mid(SrcOptionName, 2)
                                                                LoopPtr2 = LoopPtr2 + 1
                                                            Loop
                                                            SrcOptionValueSelector = ""
                                                            SrcOptionSelector = ""
                                                            Pos = vbInstr(1, SrcOptionName, "=")
                                                            If Pos > 0 Then
                                                                SrcOptionValueSelector = Mid(SrcOptionName, Pos + 1)
                                                                SrcOptionName = Mid(SrcOptionName, 1, Pos - 1)
                                                                SrcOptionSelector = ""
                                                                Pos = vbInstr(1, SrcOptionValueSelector, "[")
                                                                If Pos <> 0 Then
                                                                    SrcOptionSelector = Mid(SrcOptionValueSelector, Pos)
                                                                End If
                                                            End If
                                                            ' all Src and Instance vars are already encoded correctly
                                                            If SrcOptionName <> "" Then
                                                                ' since AddonOptionString is encoded, InstanceOptionValue will be also
                                                                InstanceOptionValue = csv_GetAddonOptionStringValue(SrcOptionName, addonOptionString)
                                                                'InstanceOptionValue = csv_GetAddonOption(SrcOptionName, AddonOptionString)
                                                                ResultOptionSelector = pageManager_GetAddonSelector(SrcOptionName, encodeNvaArgument(InstanceOptionValue), SrcOptionSelector)
                                                                'ResultOptionSelector = csv_GetAddonSelector(SrcOptionName, InstanceOptionValue, SrcOptionValueSelector)
                                                                ResultOptionListHTMLEncoded = ResultOptionListHTMLEncoded & "&" & ResultOptionSelector
                                                            End If
                                                        Next
                                                        If ResultOptionListHTMLEncoded <> "" Then
                                                            ResultOptionListHTMLEncoded = Mid(ResultOptionListHTMLEncoded, 2)
                                                        End If
                                                    End If
                                                    ACNameCaption = vbReplace(ACName, """", "")
                                                    ACNameCaption = html_EncodeHTML(ACNameCaption)
                                                    IDControlString = "AC," & ACType & "," & NotUsedID & "," & encodeNvaArgument(ACName) & "," & ResultOptionListHTMLEncoded & "," & ACGuid
                                                    Copy = GetAddonIconImg(AdminURL, IconWidth, IconHeight, IconSprites, AddonIsInline, IDControlString, IconFilename, serverFilePath, IconAlt, IconTitle, ACInstanceID, 0)
                                                ElseIf EncodeNonCachableTags Then
                                                    '
                                                    ' Add-on Experiment - move all processing to the Webclient
                                                    ' just pass the name and arguments back in th FPO
                                                    ' HTML encode and quote the name and AddonOptionString
                                                    '
                                                    Copy = "" _
                                                        & "" _
                                                        & "<!-- ADDON " _
                                                        & """" & ACName & """" _
                                                        & ",""" & AddonOptionStringHTMLEncoded & """" _
                                                        & ",""" & ACInstanceID & """" _
                                                        & ",""" & ACGuid & """" _
                                                        & " -->" _
                                                        & ""
                                                End If
                                                '
                                            End If
                                        Case ACTypeImage
                                            '
                                            ' ----- Image Tag, substitute image placeholder with the link from the REsource Library Record
                                            '
                                            If EncodeImages Then
                                                Copy = ""
                                                ACAttrRecordID = EncodeInteger(KmaHTML.ElementAttribute(ElementPointer, "RECORDID"))
                                                ACAttrWidth = EncodeInteger(KmaHTML.ElementAttribute(ElementPointer, "WIDTH"))
                                                ACAttrHeight = EncodeInteger(KmaHTML.ElementAttribute(ElementPointer, "HEIGHT"))
                                                ACAttrAlt = EncodeText(KmaHTML.ElementAttribute(ElementPointer, "ALT"))
                                                ACAttrBorder = EncodeInteger(KmaHTML.ElementAttribute(ElementPointer, "BORDER"))
                                                ACAttrLoop = EncodeInteger(KmaHTML.ElementAttribute(ElementPointer, "LOOP"))
                                                ACAttrVSpace = EncodeInteger(KmaHTML.ElementAttribute(ElementPointer, "VSPACE"))
                                                ACAttrHSpace = EncodeInteger(KmaHTML.ElementAttribute(ElementPointer, "HSPACE"))
                                                ACAttrAlign = EncodeText(KmaHTML.ElementAttribute(ElementPointer, "ALIGN"))
                                                '
                                                Dim Attr As String
                                                Dim lfPtr As Integer
                                                Dim lfFilename As String
                                                Dim lfWidth As Integer
                                                Dim lfHeight As Integer
                                                Call cache_libraryFiles_loadIfNeeded()
                                                lfPtr = cache_libraryFilesIdIndex.getPtr(CStr(ACAttrRecordID))
                                                If lfPtr >= 0 Then
                                                    lfFilename = EncodeText(cache_libraryFiles(LibraryFilesCache_filename, lfPtr))
                                                    lfWidth = EncodeInteger(cache_libraryFiles(LibraryFilesCache_width, lfPtr))
                                                    lfHeight = EncodeInteger(cache_libraryFiles(LibraryFilesCache_height, lfPtr))
                                                    'CS = app.db_csOpen("Library Files", "ID=" & encodeSQLNumber(ACAttrRecordID), , , , , , "Filename,AltText,Width,Height")
                                                    'If app.csv_IsCSOK(CS) Then
                                                    'Filename = app.csv_GetCSField(CS, "FileName")
                                                    If Filename <> "" Then
                                                        Filename = lfFilename
                                                        'Filename = vbReplace(Filename, " ", "%20")
                                                        Filename = vbReplace(Filename, "\", "/")
                                                        Filename = EncodeURL(Filename)
                                                        Copy = Copy & "<img ID=""AC,IMAGE,," & ACAttrRecordID & """ src=""" & csv_getVirtualFileLink(serverFilePath, Filename) & """"
                                                        '
                                                        If ACAttrWidth = 0 Then
                                                            ACAttrWidth = lfWidth
                                                            'ACAttrWidth = app.csv_GetCSInteger(CS, "Width")
                                                        End If
                                                        If ACAttrWidth <> 0 Then
                                                            Copy = Copy & " width=""" & ACAttrWidth & """"
                                                        End If
                                                        '
                                                        If ACAttrHeight = 0 Then
                                                            ACAttrHeight = lfHeight
                                                            'ACAttrHeight = app.csv_GetCSInteger(CS, "Height")
                                                        End If
                                                        If ACAttrHeight <> 0 Then
                                                            Copy = Copy & " height=""" & ACAttrHeight & """"
                                                        End If
                                                        '
                                                        If ACAttrVSpace <> 0 Then
                                                            Copy = Copy & " vspace=""" & ACAttrVSpace & """"
                                                        End If
                                                        '
                                                        If ACAttrHSpace <> 0 Then
                                                            Copy = Copy & " hspace=""" & ACAttrHSpace & """"
                                                        End If
                                                        '
                                                        If ACAttrAlt <> "" Then
                                                            Copy = Copy & " alt=""" & ACAttrAlt & """"
                                                        End If
                                                        '
                                                        If ACAttrAlign <> "" Then
                                                            Copy = Copy & " align=""" & ACAttrAlign & """"
                                                        End If
                                                        '
                                                        ' no, 0 is an important value
                                                        'If ACAttrBorder <> 0 Then
                                                        Copy = Copy & " border=""" & ACAttrBorder & """"
                                                        '    End If
                                                        '
                                                        If ACAttrLoop <> 0 Then
                                                            Copy = Copy & " loop=""" & ACAttrLoop & """"
                                                        End If
                                                        '

                                                        Attr = EncodeText(KmaHTML.ElementAttribute(ElementPointer, "STYLE"))
                                                        If Attr <> "" Then
                                                            Copy = Copy & " style=""" & Attr & """"
                                                        End If
                                                        '
                                                        Attr = EncodeText(KmaHTML.ElementAttribute(ElementPointer, "CLASS"))
                                                        If Attr <> "" Then
                                                            Copy = Copy & " class=""" & Attr & """"
                                                        End If
                                                        '
                                                        Copy = Copy & ">"
                                                    End If
                                                    'End If
                                                    'Call app.csv_CloseCS(CS)
                                                End If
                                            End If
                                            '
                                            '
                                        Case ACTypeDownload
                                            '
                                            ' ----- substitute and anchored download image for the AC-Download tag
                                            '
                                            ACAttrRecordID = EncodeInteger(KmaHTML.ElementAttribute(ElementPointer, "RECORDID"))
                                            ACAttrAlt = EncodeText(KmaHTML.ElementAttribute(ElementPointer, "ALT"))
                                            '
                                            If EncodeEditIcons Then
                                                '
                                                ' Encoding the edit icons for the active editor form
                                                '
                                                IconIDControlString = "AC," & ACTypeDownload & ",," & ACAttrRecordID
                                                IconImg = GetAddonIconImg(AdminURL, 16, 16, 0, True, IconIDControlString, "/cclib/images/IconDownload3.gif", serverFilePath, "Download Icon with a link to a resource", "Renders as [Download Icon with a link to a resource]", ACInstanceID, 0)
                                                Copy = IconImg
                                                '
                                                'Copy = "<img ACInstanceID=""" & ACInstanceID & """ alt=""Renders as a download icon"" id=""AC," & ACTypeDownload & ",," & ACAttrRecordID & """ src=""/cclib/images/IconDownload3.GIF"">"
                                            ElseIf EncodeImages Then
                                                '
                                                Dim libraryFilePtr As Integer
                                                If ACAttrAlt = "" Then
                                                    Call cache_libraryFiles_loadIfNeeded()
                                                    libraryFilePtr = cache_libraryFilesIdIndex.getPtr(CStr(ACAttrRecordID))
                                                    If libraryFilePtr >= 0 Then
                                                        ACAttrAlt = EncodeText(cache_libraryFiles(LibraryFilesCache_alttext, libraryFilePtr))
                                                    End If
                                                End If
                                                '                                        CS = app.db_csOpenRecord("Library Files", ACAttrRecordID, , , , "Filename,AltText")
                                                '                                        If app.csv_IsCSOK(CS) Then
                                                '                                            If ACAttrAlt = "" Then
                                                '                                                ACAttrAlt = encodeText(app.csv_GetCSText(CS, "AltText"))
                                                '                                            End If
                                                '                                        End If
                                                '                                        Call app.csv_CloseCS(CS)
                                                '
                                                Copy = "<a href=""" & ProtocolHostString & www_requestRootPath & siteProperties.serverPageDefault & "?" & RequestNameDownloadID & "=" & ACAttrRecordID & """ target=""_blank""><img src=""" & ProtocolHostString & "/cclib/images/IconDownload3.gif"" width=""16"" height=""16"" border=""0"" alt=""" & ACAttrAlt & """></a>"
                                            End If
                                        Case ACTypeTemplateContent
                                            '
                                            ' ----- Create Template Content
                                            '
                                            'ACName = vbUCase(KmaHTML.ElementAttribute(ElementPointer, "NAME"))
                                            AddonOptionStringHTMLEncoded = ""
                                            addonOptionString = ""
                                            NotUsedID = 0
                                            If EncodeEditIcons Then
                                                '
                                                IconIDControlString = "AC," & ACType & "," & NotUsedID & "," & ACName & "," & AddonOptionStringHTMLEncoded
                                                IconImg = GetAddonIconImg(AdminURL, 52, 64, 0, False, IconIDControlString, "/cclib/images/ACTemplateContentIcon.gif", serverFilePath, "Template Page Content", "Renders as the Template Page Content", ACInstanceID, 0)
                                                Copy = IconImg
                                                '
                                                'Copy = "<img ACInstanceID=""" & ACInstanceID & """ onDblClick=""window.parent.OpenAddonPropertyWindow(this);"" alt=""Add-on"" title=""Rendered as the Template Page Content"" id=""AC," & ACType & "," & NotUsedID & "," & ACName & "," & AddonOptionStringHTMLEncoded & """ src=""/cclib/images/ACTemplateContentIcon.gif"" WIDTH=52 HEIGHT=64>"
                                            ElseIf EncodeNonCachableTags Then
                                                '
                                                ' Add in the Content
                                                '
                                                Copy = fpoContentBox
                                                'Copy = TemplateBodyContent
                                                'Copy = "{{" & ACTypeTemplateContent & "}}"
                                            End If
                                        Case ACTypeTemplateText
                                            '
                                            ' ----- Create Template Content
                                            '
                                            'ACName = vbUCase(KmaHTML.ElementAttribute(ElementPointer, "NAME"))
                                            AddonOptionStringHTMLEncoded = KmaHTML.ElementAttribute(ElementPointer, "QUERYSTRING")
                                            addonOptionString = decodeHtml(AddonOptionStringHTMLEncoded)
                                            NotUsedID = 0
                                            If EncodeEditIcons Then
                                                '
                                                IconIDControlString = "AC," & ACType & "," & NotUsedID & "," & ACName & "," & AddonOptionStringHTMLEncoded
                                                IconImg = GetAddonIconImg(AdminURL, 52, 52, 0, False, IconIDControlString, "/cclib/images/ACTemplateTextIcon.gif", serverFilePath, "Template Text", "Renders as a Template Text Box", ACInstanceID, 0)
                                                Copy = IconImg
                                                '
                                                'Copy = "<img ACInstanceID=""" & ACInstanceID & """ onDblClick=""window.parent.OpenAddonPropertyWindow(this);"" alt=""Add-on"" title=""Rendered as Template Text"" id=""AC," & ACType & "," & NotUsedID & "," & ACName & "," & AddonOptionStringHTMLEncoded & """ src=""/cclib/images/ACTemplateTextIcon.gif"" WIDTH=52 HEIGHT=52>"
                                            ElseIf EncodeNonCachableTags Then
                                                '
                                                ' Add in the Content Page
                                                '
                                                '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                'test - encoding changed
                                                NewName = csv_GetAddonOptionStringValue("new", addonOptionString)
                                                'NewName = decodeResponseVariable(getSimpleNameValue("new", AddonOptionString, "", "&"))
                                                TextName = csv_GetAddonOptionStringValue("name", addonOptionString)
                                                'TextName = getSimpleNameValue("name", AddonOptionString)
                                                If TextName = "" Then
                                                    TextName = "Default"
                                                End If
                                                Copy = "{{" & ACTypeTemplateText & "?name=" & encodeNvaArgument(TextName) & "&new=" & encodeNvaArgument(NewName) & "}}"
                                                ' ***** can not add it here, if a web hit, it must be encoded from the web client for aggr objects
                                                'Copy = csv_GetContentCopy(TextName, "Copy Content", "", personalizationpeopleId)
                                            End If
                                        Case ACTypeDynamicMenu
                                            '
                                            ' ----- Create Template Menu
                                            '
                                            'ACName = KmaHTML.ElementAttribute(ElementPointer, "NAME")
                                            AddonOptionStringHTMLEncoded = KmaHTML.ElementAttribute(ElementPointer, "QUERYSTRING")
                                            addonOptionString = decodeHtml(AddonOptionStringHTMLEncoded)
                                            '
                                            ' test for illegal characters (temporary patch to get around not addonencoding during the addon replacement
                                            '
                                            Pos = vbInstr(1, addonOptionString, "menunew=", vbTextCompare)
                                            If Pos > 0 Then
                                                NewName = Mid(addonOptionString, Pos + 8)
                                                Dim IsOK As Boolean
                                                IsOK = (NewName = encodeNvaArgument(NewName))
                                                If Not IsOK Then
                                                    addonOptionString = Left(addonOptionString, Pos - 1) & "MenuNew=" & encodeNvaArgument(NewName)
                                                End If
                                            End If
                                            NotUsedID = 0
                                            If EncodeEditIcons Then
                                                If vbInstr(1, AddonOptionStringHTMLEncoded, "menu=", vbTextCompare) <> 0 Then
                                                    '
                                                    ' Dynamic Menu
                                                    '
                                                    '!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
                                                    ' test - encoding changed
                                                    TextName = csv_GetAddonOptionStringValue("menu", addonOptionString)
                                                    'TextName = csv_GetAddonOption("Menu", AddonOptionString)
                                                    '
                                                    IconIDControlString = "AC," & ACType & "," & NotUsedID & "," & ACName & ",Menu=" & TextName & "[" & csv_GetDynamicMenuACSelect() & "]&NewMenu="
                                                    IconImg = GetAddonIconImg(AdminURL, 52, 52, 0, False, IconIDControlString, "/cclib/images/ACDynamicMenuIcon.gif", serverFilePath, "Dynamic Menu", "Renders as a Dynamic Menu", ACInstanceID, 0)
                                                    Copy = IconImg
                                                    '
                                                    'Copy = "<img ACInstanceID=""" & ACInstanceID & """ onDblClick=""window.parent.OpenAddonPropertyWindow(this);"" alt=""Add-on"" title=""Rendered as a Dynamic Menu"" id=""AC," & ACType & "," & NotUsedID & "," & ACName & ",Menu=" & TextName & "[" & csv_GetDynamicMenuACSelect & "]&NewMenu="" src=""/cclib/images/ACDynamicMenuIcon.gif"" WIDTH=52 HEIGHT=52>"
                                                Else
                                                    '
                                                    ' Old Dynamic Menu - values are stored in the icon
                                                    '
                                                    IconIDControlString = "AC," & ACType & "," & NotUsedID & "," & ACName & "," & AddonOptionStringHTMLEncoded
                                                    IconImg = GetAddonIconImg(AdminURL, 52, 52, 0, False, IconIDControlString, "/cclib/images/ACDynamicMenuIcon.gif", serverFilePath, "Dynamic Menu", "Renders as a Dynamic Menu", ACInstanceID, 0)
                                                    Copy = IconImg
                                                    '
                                                    'Copy = "<img onDblClick=""window.parent.OpenAddonPropertyWindow(this);"" alt=""Add-on"" title=""Rendered as a Dynamic Menu"" id=""AC," & ACType & "," & NotUsedID & "," & ACName & "," & AddonOptionStringHTMLEncoded & """ src=""/cclib/images/ACDynamicMenuIcon.gif"" WIDTH=52 HEIGHT=52>"
                                                End If
                                            ElseIf EncodeNonCachableTags Then
                                                '
                                                ' Add in the Content Pag
                                                '
                                                Copy = "{{" & ACTypeDynamicMenu & "?" & addonOptionString & "}}"
                                            End If
                                        Case ACTypeWatchList
                                            '
                                            ' ----- Formatting Tag
                                            '
                                            '
                                            ' Content Watch replacement
                                            '   served by the web client because the
                                            '
                                            'UCaseACName = vbUCase(Trim(KmaHTML.ElementAttribute(ElementPointer, "NAME")))
                                            'ACName = encodeInitialCaps(UCaseACName)
                                            AddonOptionStringHTMLEncoded = KmaHTML.ElementAttribute(ElementPointer, "QUERYSTRING")
                                            addonOptionString = decodeHtml(AddonOptionStringHTMLEncoded)
                                            If EncodeEditIcons Then
                                                '
                                                IconIDControlString = "AC," & ACType & "," & NotUsedID & "," & ACName & "," & AddonOptionStringHTMLEncoded
                                                IconImg = GetAddonIconImg(AdminURL, 109, 10, 0, True, IconIDControlString, "/cclib/images/ACWatchList.gif", serverFilePath, "Watch List", "Renders as the Watch List [" & ACName & "]", ACInstanceID, 0)
                                                Copy = IconImg
                                                '
                                                'Copy = "<img ACInstanceID=""" & ACInstanceID & """ onDblClick=""window.parent.OpenAddonPropertyWindow(this);"" alt=""Add-on"" title=""Rendered as the Watch List [" & ACName & "]"" id=""AC," & ACType & "," & NotUsedID & "," & ACName & "," & AddonOptionStringHTMLEncoded & """ src=""/cclib/images/ACWatchList.GIF"">"
                                            ElseIf EncodeNonCachableTags Then
                                                '
                                                Copy = "{{" & ACTypeWatchList & "?" & addonOptionString & "}}"
                                            End If
                                    End Select
                            End Select
                        End If
                        '
                        ' ----- Output the results
                        '
                        Stream.Add(Copy)
                        ElementPointer = ElementPointer + 1
                    Loop
                End If
                workingContent = Stream.Text
                '
                ' Add Contensive User Form if needed
                '
                If FormCount = 0 And FormInputCount > 0 Then
                End If
                workingContent = ReplaceInstructions & workingContent
                If CSPeopleSet Then
                    Call db.cs_Close(CSPeople)
                End If
                If CSOrganizationSet Then
                    Call db.cs_Close(CSOrganization)
                End If
                If CSVisitorSet Then
                    Call db.cs_Close(CSVisitor)
                End If
                If CSVisitSet Then
                    Call db.cs_Close(CSVisit)
                End If
                KmaHTML = Nothing
            End If
            html_EncodeActiveContent_Internal = workingContent
            '
            ' ----- Done
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            KmaHTML = Nothing
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "csv_EncodeActiveContent_Internal", True)
        End Function
        '
        '
        '
        Public Function pageManager_getMoreInfoHtml(ByVal PeopleID As Integer) As String
            On Error GoTo ErrorTrap 'Const Tn = "MethodName-183" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim CS As Integer
            Dim ContactName As String
            Dim ContactPhone As String
            Dim ContactEmail As String
            Dim MethodName As String
            Dim Copy As String
            '
            Copy = ""
            CS = db.db_OpenCSContentRecord("People", PeopleID, , , , "Name,Phone,Email")
            If db.cs_Ok(CS) Then
                ContactName = (db.cs_getText(CS, "Name"))
                ContactPhone = (db.cs_getText(CS, "Phone"))
                ContactEmail = (db.cs_getText(CS, "Email"))
                If ContactName <> "" Then
                    Copy = Copy & "For more information, please contact " & ContactName
                    If ContactEmail = "" Then
                        If ContactPhone <> "" Then
                            Copy = Copy & " by phone at " & ContactPhone
                        End If
                    Else
                        Copy = Copy & " by <A href=""mailto:" & ContactEmail & """>email</A>"
                        If ContactPhone <> "" Then
                            Copy = Copy & " or by phone at " & ContactPhone
                        End If
                    End If
                    Copy = Copy
                Else
                    If ContactEmail = "" Then
                        If ContactPhone <> "" Then
                            Copy = Copy & "For more information, please call " & ContactPhone
                        End If
                    Else
                        Copy = Copy & "For more information, please <A href=""mailto:" & ContactEmail & """>email</A>"
                        If ContactPhone <> "" Then
                            Copy = Copy & ", or call " & ContactPhone
                        End If
                        Copy = Copy
                    End If
                End If
            End If
            Call db.cs_Close(CS)
            '
            pageManager_getMoreInfoHtml = Copy
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "csv_getMoreInfoHtml", True)
        End Function
        '
        '========================================================================
        '   Decodes ActiveContent and EditIcons into <AC tags
        '       Detect IMG tags
        '           If IMG ID attribute is "AC,IMAGE,recordid", convert to AC Image tag
        '           If IMG ID attribute is "AC,DOWNLOAD,recordid", convert to AC Download tag
        '           If IMG ID attribute is "AC,ACType,ACFieldName,ACInstanceName,QueryStringArguments,AddonGuid", convert it to generic AC tag
        '   ACInstanceID - used to identify an AC tag on a page. Each instance of an AC tag must havea unique ACinstanceID
        '========================================================================
        '
        Public Function html_DecodeActiveContent(ByVal SourceCopy As String) As String
            On Error GoTo ErrorTrap 'Const Tn = "MethodName-184" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim recordUpdateSql As String
            Dim libraryFilePtr As Integer
            Dim imageNewLink As String
            Dim ACQueryString As String
            Dim ACGuid As String
            Dim ACIdentifier As String
            Dim RecordFilename As String
            Dim RecordFilenameNoExt As String
            Dim RecordFilenameExt As String
            Dim Ptr As Integer
            Dim ACInstanceID As String
            'Dim GUIDGenerator As guidClass
            Dim FieldSelected As String
            Dim QSHTMLEncoded As String
            Dim Pos As Integer
            Dim ImageSrcOriginal As String
            Dim VirtualFilePathBad As String
            Dim AllowGroups As String
            Dim Paths() As String
            Dim ImageVirtualFilename As String
            Dim ImageFilename As String
            Dim ImageFilenameExt As String
            Dim ImageFilenameNoExt As String
            Dim ImageFilenameNoAltSizeNoExt As String
            Dim ImageFilenameAltSize As String
            Dim SizeTest() As String
            Dim Styles() As String
            Dim StyleName As String
            Dim StyleValue As String
            Dim StyleValueInt As Integer
            Dim Style() As String
            Dim ImageVirtualFilePath As String
            Dim CS As Integer
            Dim RecordVirtualFilename As String
            Dim RecordWidth As Integer
            Dim RecordHeight As Integer
            Dim RecordAltSizeList As String
            Dim ImageAltSize As String
            Dim NewImageFilename As String
            '
            Dim MethodName As String
            Dim DHTML As New coreHtmlParseClass(Me)
            Dim ElementPointer As Integer
            Dim ElementCount As Integer
            Dim AttributeCount As Integer
            Dim AttributePointer As Integer
            Dim Id As String
            Dim ACType As String
            Dim ACSubType As String
            Dim ACFieldName As String
            Dim ACArgument0 As String
            Dim ACInstanceName As String
            Dim CursorPosition As Integer

            Dim PositionTagStart As Integer
            Dim PositionTagEnd As Integer
            Dim PositionAltStart As Integer
            Dim PositionAltEnd As Integer
            '
            'Dim AltText As String
            Dim ImageLink As String
            Dim RecordID As Integer
            Dim RecordIDPosition As Integer
            Dim ImageWidthText As String
            Dim ImageHeightText As String
            '
            Dim ImageWidth As Integer
            Dim ImageHeight As Integer
            '
            Dim ElementText As String
            Dim ImageID As String
            Dim ImageSrc As String
            Dim ImageAlt As String
            Dim ImageVSpace As Integer
            Dim ImageHSpace As Integer
            Dim ImageAlign As String
            Dim ImageBorder As String
            Dim ImageLoop As String
            Dim ImageStyle As String
            Dim IMageStyleArray As String()
            Dim ImageStyleArrayCount As Integer
            Dim ImageStyleArrayPointer As Integer
            Dim ImageStylePair As String
            Dim PositionColon As Integer
            Dim ImageStylePairName As String
            Dim ImageStylePairValue As String
            Dim Stream As coreFastStringClass
            Dim ImageIDArray As String()
            Dim ImageIDArrayCount As Integer
            Dim ImageIDArrayPointer As Integer
            Dim QueryString As String
            Dim QSSplit() As String
            Dim QSPtr As Integer
            Dim serverFilePath As String
            Dim ImageAllowSFResize As Boolean
            Dim sf As coreImageEditClass
            '
            html_DecodeActiveContent = SourceCopy
            If html_DecodeActiveContent <> "" Then
                '
                ' leave this in to make sure old <acform tags are converted back
                ' new editor deals with <form, so no more converting
                '
                html_DecodeActiveContent = vbReplace(html_DecodeActiveContent, "<ACFORM>", "<FORM>")
                html_DecodeActiveContent = vbReplace(html_DecodeActiveContent, "<ACFORM ", "<FORM ")
                html_DecodeActiveContent = vbReplace(html_DecodeActiveContent, "</ACFORM>", "</form>")
                html_DecodeActiveContent = vbReplace(html_DecodeActiveContent, "</ACFORM ", "</FORM ")
                If DHTML.Load(html_DecodeActiveContent) Then
                    html_DecodeActiveContent = ""
                    ElementCount = DHTML.ElementCount
                    If ElementCount > 0 Then
                        '
                        ' ----- Locate and replace IMG Edit icons with AC tags
                        '
                        Stream = New coreFastStringClass
                        For ElementPointer = 0 To ElementCount - 1
                            ElementText = DHTML.Text(ElementPointer)
                            If DHTML.IsTag(ElementPointer) Then
                                Select Case vbUCase(DHTML.TagName(ElementPointer))
                                    Case "FORM"
                                        '
                                        ' User created form - add the attribute "Contensive=1"
                                        '
                                        ' 5/14/2009 - DM said it is OK to remove UserResponseForm Processing
                                        'ElementText = vbReplace(ElementText, "<FORM", "<FORM ContensiveUserForm=1 ", vbTextCompare)
                                    Case "IMG"
                                        AttributeCount = DHTML.ElementAttributeCount(ElementPointer)

                                        If AttributeCount > 0 Then
                                            ImageID = DHTML.ElementAttribute(ElementPointer, "id")
                                            ImageSrcOriginal = DHTML.ElementAttribute(ElementPointer, "src")
                                            VirtualFilePathBad = appConfig.name & "/files/"
                                            serverFilePath = "/" & VirtualFilePathBad
                                            If Left(LCase(ImageSrcOriginal), Len(VirtualFilePathBad)) = vbLCase(VirtualFilePathBad) Then
                                                '
                                                ' if the image is from the virtual file path, but the editor did not include the root path, add it
                                                '
                                                ElementText = vbReplace(ElementText, VirtualFilePathBad, "/" & VirtualFilePathBad, 1, 99, vbTextCompare)
                                                ImageSrcOriginal = vbReplace(ImageSrcOriginal, VirtualFilePathBad, "/" & VirtualFilePathBad, 1, 99, vbTextCompare)
                                            End If
                                            ImageSrc = decodeHtml(ImageSrcOriginal)
                                            ImageSrc = DecodeURL(ImageSrc)
                                            '
                                            ' problem with this case is if the addon icon image is from another site.
                                            ' not sure how it happened, but I do not think the src of an addon edit icon
                                            ' should be able to prevent the addon from executing.
                                            '
                                            ACIdentifier = ""
                                            ACType = ""
                                            ACFieldName = ""
                                            ACInstanceName = ""
                                            ACGuid = ""
                                            ImageIDArrayCount = 0
                                            If 0 <> vbInstr(1, ImageID, ",") Then
                                                ImageIDArray = Split(ImageID, ",")
                                                ImageIDArrayCount = UBound(ImageIDArray) + 1
                                                If ImageIDArrayCount > 5 Then
                                                    For Ptr = 5 To ImageIDArrayCount - 1
                                                        ACGuid = ImageIDArray(Ptr)
                                                        If (Left(ACGuid, 1) = "{") And (Right(ACGuid, 1) = "}") Then
                                                            '
                                                            ' this element is the guid, go with it
                                                            '
                                                            Exit For
                                                        ElseIf (ACGuid = "") And (Ptr = (ImageIDArrayCount - 1)) Then
                                                            '
                                                            ' this is the last element, leave it as the guid
                                                            '
                                                            Exit For
                                                        Else
                                                            '
                                                            ' not a valid guid, add it to element 4 and try the next
                                                            '
                                                            ImageIDArray(4) = ImageIDArray(4) & "," & ACGuid
                                                            ACGuid = ""
                                                        End If
                                                    Next
                                                End If
                                                If (ImageIDArrayCount > 1) Then
                                                    ACIdentifier = vbUCase(ImageIDArray(0))
                                                    ACType = ImageIDArray(1)
                                                    If ImageIDArrayCount > 2 Then
                                                        ACFieldName = ImageIDArray(2)
                                                        If ImageIDArrayCount > 3 Then
                                                            ACInstanceName = ImageIDArray(3)
                                                            If ImageIDArrayCount > 4 Then
                                                                ACQueryString = ImageIDArray(4)
                                                                'If ImageIDArrayCount > 5 Then
                                                                '    ACGuid = ImageIDArray(5)
                                                                'End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                            If ACIdentifier = "AC" Then
                                                If True Then
                                                    If True Then
                                                        '
                                                        ' ----- Process AC Tag
                                                        '
                                                        ACInstanceID = DHTML.ElementAttribute(ElementPointer, "ACINSTANCEID")
                                                        If ACInstanceID = "" Then
                                                            'GUIDGenerator = New guidClass
                                                            ACInstanceID = Guid.NewGuid().ToString
                                                            'ACInstanceID = Guid.NewGuid.ToString()
                                                        End If
                                                        ElementText = ""
                                                        '----------------------------- change to ACType
                                                        Select Case vbUCase(ACType)
                                                            Case "IMAGE"
                                                                '
                                                                ' ----- AC Image, Decode Active Images to Resource Library references
                                                                '
                                                                If ImageIDArrayCount >= 4 Then
                                                                    RecordID = EncodeInteger(ACInstanceName)
                                                                    ImageWidthText = DHTML.ElementAttribute(ElementPointer, "WIDTH")
                                                                    ImageHeightText = DHTML.ElementAttribute(ElementPointer, "HEIGHT")
                                                                    ImageAlt = html_EncodeHTML(DHTML.ElementAttribute(ElementPointer, "Alt"))
                                                                    ImageVSpace = EncodeInteger(DHTML.ElementAttribute(ElementPointer, "vspace"))
                                                                    ImageHSpace = EncodeInteger(DHTML.ElementAttribute(ElementPointer, "hspace"))
                                                                    ImageAlign = DHTML.ElementAttribute(ElementPointer, "Align")
                                                                    ImageBorder = DHTML.ElementAttribute(ElementPointer, "BORDER")
                                                                    ImageLoop = DHTML.ElementAttribute(ElementPointer, "LOOP")
                                                                    ImageStyle = DHTML.ElementAttribute(ElementPointer, "STYLE")

                                                                    If ImageStyle <> "" Then
                                                                        '
                                                                        ' ----- Process styles, which override attributes
                                                                        '
                                                                        IMageStyleArray = Split(ImageStyle, ";")
                                                                        ImageStyleArrayCount = UBound(IMageStyleArray) + 1
                                                                        For ImageStyleArrayPointer = 0 To ImageStyleArrayCount - 1
                                                                            ImageStylePair = Trim(IMageStyleArray(ImageStyleArrayPointer))
                                                                            PositionColon = vbInstr(1, ImageStylePair, ":")
                                                                            If PositionColon > 1 Then
                                                                                ImageStylePairName = Trim(Mid(ImageStylePair, 1, PositionColon - 1))
                                                                                ImageStylePairValue = Trim(Mid(ImageStylePair, PositionColon + 1))
                                                                                Select Case vbUCase(ImageStylePairName)
                                                                                    Case "WIDTH"
                                                                                        ImageStylePairValue = vbReplace(ImageStylePairValue, "px", "")
                                                                                        ImageWidthText = ImageStylePairValue
                                                                                    Case "HEIGHT"
                                                                                        ImageStylePairValue = vbReplace(ImageStylePairValue, "px", "")
                                                                                        ImageHeightText = ImageStylePairValue
                                                                                End Select
                                                                                'If vbInstr(1, ImageStylePair, "WIDTH", vbTextCompare) = 1 Then
                                                                                '    End If
                                                                            End If
                                                                        Next
                                                                    End If
                                                                    ElementText = "<AC type=""IMAGE"" ACInstanceID=""" & ACInstanceID & """ RecordID=""" & RecordID & """ Style=""" & ImageStyle & """ Width=""" & ImageWidthText & """ Height=""" & ImageHeightText & """ VSpace=""" & ImageVSpace & """ HSpace=""" & ImageHSpace & """ Alt=""" & ImageAlt & """ Align=""" & ImageAlign & """ Border=""" & ImageBorder & """ Loop=""" & ImageLoop & """>"
                                                                End If
                                                            Case ACTypeDownload
                                                                '
                                                                ' AC Download
                                                                '
                                                                If ImageIDArrayCount >= 4 Then
                                                                    RecordID = EncodeInteger(ACInstanceName)
                                                                    ElementText = "<AC type=""DOWNLOAD"" ACInstanceID=""" & ACInstanceID & """ RecordID=""" & RecordID & """>"
                                                                End If
                                                            Case ACTypeDate
                                                                '
                                                                ' Date
                                                                '
                                                                ElementText = "<AC type=""" & ACTypeDate & """>"
                                                            Case ACTypeVisit, ACTypeVisitor, ACTypeMember, ACTypeOrganization, ACTypePersonalization
                                                                '
                                                                ' Visit, etc
                                                                '
                                                                ElementText = "<AC type=""" & ACType & """ ACInstanceID=""" & ACInstanceID & """ field=""" & ACFieldName & """>"
                                                            Case ACTypeChildList, ACTypeLanguage
                                                                '
                                                                ' ChildList, Language
                                                                '
                                                                If ACInstanceName = "0" Then
                                                                    ACInstanceName = getRandomLong().ToString()
                                                                End If
                                                                ElementText = "<AC type=""" & ACType & """ name=""" & ACInstanceName & """ ACInstanceID=""" & ACInstanceID & """>"
                                                            Case ACTypeAggregateFunction
                                                                '
                                                                ' Function
                                                                '
                                                                QueryString = ""
                                                                If ACQueryString <> "" Then
                                                                    ' I added this because single stepping through it I found it split on the & in &amp;
                                                                    ' I had added an Add-on and was saving
                                                                    ' I find it VERY odd that this could be the case
                                                                    '
                                                                    QSHTMLEncoded = EncodeText(ACQueryString)
                                                                    QueryString = decodeHtml(QSHTMLEncoded)
                                                                    QSSplit = Split(QueryString, "&")
                                                                    For QSPtr = 0 To UBound(QSSplit)
                                                                        Pos = vbInstr(1, QSSplit(QSPtr), "[")
                                                                        If Pos > 0 Then
                                                                            QSSplit(QSPtr) = Mid(QSSplit(QSPtr), 1, Pos - 1)
                                                                        End If
                                                                        QSSplit(QSPtr) = html_EncodeHTML(QSSplit(QSPtr))
                                                                    Next
                                                                    QueryString = Join(QSSplit, "&")
                                                                End If
                                                                ElementText = "<AC type=""" & ACType & """ name=""" & ACInstanceName & """ ACInstanceID=""" & ACInstanceID & """ querystring=""" & QueryString & """ guid=""" & ACGuid & """>"
                                                            Case ACTypeContact, ACTypeFeedback
                                                                '
                                                                ' Contact and Feedback
                                                                '
                                                                ElementText = "<AC type=""" & ACType & """ ACInstanceID=""" & ACInstanceID & """>"
                                                            Case ACTypeTemplateContent, ACTypeTemplateText
                                                                '
                                                                '
                                                                '
                                                                QueryString = ""
                                                                If ImageIDArrayCount > 4 Then
                                                                    QueryString = EncodeText(ImageIDArray(4))
                                                                    QSSplit = Split(QueryString, "&")
                                                                    For QSPtr = 0 To UBound(QSSplit)
                                                                        QSSplit(QSPtr) = html_EncodeHTML(QSSplit(QSPtr))
                                                                    Next
                                                                    QueryString = Join(QSSplit, "&")

                                                                End If
                                                                ElementText = "<AC type=""" & ACType & """ name=""" & ACInstanceName & """ ACInstanceID=""" & ACInstanceID & """ querystring=""" & QueryString & """>"
                                                            Case ACTypeDynamicMenu
                                                                '
                                                                ' Dynamic Menu - if they added a new menu with MenuNew, create it, and remove it from tag
                                                                '
                                                                QueryString = ""
                                                                If ImageIDArrayCount > 4 Then
                                                                    QueryString = EncodeText(ImageIDArray(4))
                                                                    QueryString = decodeHtml(QueryString)
                                                                    QueryString = html_DecodeActiveContent_ProcessDynamicMenu(QueryString)
                                                                    QSSplit = Split(QueryString, "&")
                                                                    For QSPtr = 0 To UBound(QSSplit)
                                                                        QSSplit(QSPtr) = html_EncodeHTML(QSSplit(QSPtr))
                                                                    Next
                                                                    QueryString = Join(QSSplit, "&")
                                                                End If
                                                                If True Then
                                                                    '
                                                                    ' convert to new menu type
                                                                    '
                                                                    Pos = vbInstr(1, QueryString, "[")
                                                                    If Pos > 0 Then
                                                                        QueryString = Mid(QueryString, 1, Pos - 1)
                                                                    End If

                                                                    QueryString = vbReplace(QueryString, "menu=", "Menu Name=", 1, 99, vbTextCompare) & "&Create New Menu="
                                                                    ElementText = "<AC type=""" & ACTypeAggregateFunction & """ name=""Dynamic Menu"" ACInstanceID=""" & ACInstanceID & """ querystring=""" & QueryString & """ guid=""" & ACGuid & """>"
                                                                Else
                                                                    ElementText = "<AC type=""" & ACType & """ name=""" & ACInstanceName & """ ACInstanceID=""" & ACInstanceID & """ querystring=""" & QueryString & """>"
                                                                End If
                                                            Case ACTypeDynamicForm
                                                                '
                                                                ' Dynamic Form
                                                                '
                                                                QueryString = ""
                                                                If ImageIDArrayCount > 4 Then
                                                                    QueryString = EncodeText(ImageIDArray(4))
                                                                    QueryString = decodeHtml(QueryString)
                                                                    QSSplit = Split(QueryString, "&")
                                                                    For QSPtr = 0 To UBound(QSSplit)
                                                                        QSSplit(QSPtr) = html_EncodeHTML(QSSplit(QSPtr))
                                                                    Next
                                                                    QueryString = Join(QSSplit, "&")
                                                                End If
                                                                ElementText = "<AC type=""" & ACType & """ name=""" & ACInstanceName & """ ACInstanceID=""" & ACInstanceID & """ querystring=""" & QueryString & """>"
                                                            Case ACTypeWatchList
                                                                '
                                                                ' Watch List
                                                                '
                                                                QueryString = ""
                                                                If ImageIDArrayCount > 4 Then
                                                                    QueryString = EncodeText(ImageIDArray(4))
                                                                    QueryString = decodeHtml(QueryString)
                                                                    QSSplit = Split(QueryString, "&")
                                                                    For QSPtr = 0 To UBound(QSSplit)
                                                                        QSSplit(QSPtr) = html_EncodeHTML(QSSplit(QSPtr))
                                                                    Next
                                                                    QueryString = Join(QSSplit, "&")
                                                                End If
                                                                ElementText = "<AC type=""" & ACType & """ name=""" & ACInstanceName & """ ACInstanceID=""" & ACInstanceID & """ querystring=""" & QueryString & """>"
                                                            Case ACTypeRSSLink
                                                                '
                                                                ' RSS Link
                                                                '
                                                                QueryString = ""
                                                                If ImageIDArrayCount > 4 Then
                                                                    QueryString = EncodeText(ImageIDArray(4))
                                                                    QueryString = decodeHtml(QueryString)
                                                                    QSSplit = Split(QueryString, "&")
                                                                    For QSPtr = 0 To UBound(QSSplit)
                                                                        QSSplit(QSPtr) = html_EncodeHTML(QSSplit(QSPtr))
                                                                    Next
                                                                    QueryString = Join(QSSplit, "&")
                                                                End If
                                                                ElementText = "<AC type=""" & ACType & """ name=""" & ACInstanceName & """ ACInstanceID=""" & ACInstanceID & """ querystring=""" & QueryString & """>"
                                                            Case Else
                                                                '
                                                                ' All others -- added querystring from element(4) to all others to cover the group access AC object
                                                                '
                                                                QueryString = ""
                                                                If ImageIDArrayCount > 4 Then
                                                                    QueryString = EncodeText(ImageIDArray(4))
                                                                    QueryString = decodeHtml(QueryString)
                                                                    QSSplit = Split(QueryString, "&")
                                                                    For QSPtr = 0 To UBound(QSSplit)
                                                                        QSSplit(QSPtr) = html_EncodeHTML(QSSplit(QSPtr))
                                                                    Next
                                                                    QueryString = Join(QSSplit, "&")
                                                                End If
                                                                ElementText = "<AC type=""" & ACType & """ name=""" & ACInstanceName & """ ACInstanceID=""" & ACInstanceID & """ field=""" & ACFieldName & """ querystring=""" & QueryString & """>"
                                                        End Select
                                                    End If
                                                End If
                                            ElseIf vbInstr(1, ImageSrc, "cclibraryfiles", vbTextCompare) <> 0 Then
                                                ImageAllowSFResize = siteProperties.getBoolean("ImageAllowSFResize", True)
                                                If ImageAllowSFResize And True Then
                                                    '
                                                    ' if it is a real image, check for resize
                                                    '
                                                    Pos = vbInstr(1, ImageSrc, "cclibraryfiles", vbTextCompare)
                                                    If Pos <> 0 Then
                                                        ImageVirtualFilename = Mid(ImageSrc, Pos)
                                                        Paths = Split(ImageVirtualFilename, "/")
                                                        If UBound(Paths) > 2 Then
                                                            If vbLCase(Paths(1)) = "filename" Then
                                                                RecordID = EncodeInteger(Paths(2))
                                                                If RecordID <> 0 Then
                                                                    ImageFilename = Paths(3)
                                                                    ImageVirtualFilePath = vbReplace(ImageVirtualFilename, ImageFilename, "")
                                                                    Pos = InStrRev(ImageFilename, ".")
                                                                    If Pos > 0 Then
                                                                        ImageFilenameExt = Mid(ImageFilename, Pos + 1)
                                                                        ImageFilenameNoExt = Mid(ImageFilename, 1, Pos - 1)
                                                                        Pos = InStrRev(ImageFilenameNoExt, "-")
                                                                        If Pos > 0 Then
                                                                            '
                                                                            ' ImageAltSize should be set from the width and height of the img tag,
                                                                            ' NOT from the actual width and height of the image file
                                                                            ' NOT from the suffix of the image filename
                                                                            ' ImageFilenameAltSize is used when the image has been resized, then 'reset' was hit
                                                                            '  on the properties dialog before the save. The width and height come from this suffix
                                                                            '
                                                                            ImageFilenameAltSize = Mid(ImageFilenameNoExt, Pos + 1)
                                                                            SizeTest = Split(ImageFilenameAltSize, "x")
                                                                            If UBound(SizeTest) <> 1 Then
                                                                                ImageFilenameAltSize = ""
                                                                            Else
                                                                                If vbIsNumeric(SizeTest(0)) And vbIsNumeric(SizeTest(1)) Then
                                                                                    ImageFilenameNoExt = Mid(ImageFilenameNoExt, 1, Pos - 1)
                                                                                    'RecordVirtualFilenameNoExt = Mid(RecordVirtualFilename, 1, Pos - 1)
                                                                                Else
                                                                                    ImageFilenameAltSize = ""
                                                                                End If
                                                                            End If
                                                                            'ImageFilenameNoExt = Mid(ImageFilenameNoExt, 1, Pos - 1)
                                                                        End If
                                                                        If vbInstr(1, sfImageExtList, ImageFilenameExt, vbTextCompare) <> 0 Then
                                                                            '
                                                                            ' Determine ImageWidth and ImageHeight
                                                                            '
                                                                            ImageStyle = DHTML.ElementAttribute(ElementPointer, "style")
                                                                            ImageWidth = EncodeInteger(DHTML.ElementAttribute(ElementPointer, "width"))
                                                                            ImageHeight = EncodeInteger(DHTML.ElementAttribute(ElementPointer, "height"))
                                                                            If ImageStyle <> "" Then
                                                                                Styles = Split(ImageStyle, ";")
                                                                                For Ptr = 0 To UBound(Styles)
                                                                                    Style = Split(Styles(Ptr), ":")
                                                                                    If UBound(Style) > 0 Then
                                                                                        StyleName = vbLCase(Trim(Style(0)))
                                                                                        If StyleName = "width" Then
                                                                                            StyleValue = vbLCase(Trim(Style(1)))
                                                                                            StyleValue = vbReplace(StyleValue, "px", "")
                                                                                            StyleValueInt = EncodeInteger(StyleValue)
                                                                                            If StyleValueInt > 0 Then
                                                                                                ImageWidth = StyleValueInt
                                                                                            End If
                                                                                        ElseIf StyleName = "height" Then
                                                                                            StyleValue = vbLCase(Trim(Style(1)))
                                                                                            StyleValue = vbReplace(StyleValue, "px", "")
                                                                                            StyleValueInt = EncodeInteger(StyleValue)
                                                                                            If StyleValueInt > 0 Then
                                                                                                ImageHeight = StyleValueInt
                                                                                            End If
                                                                                        End If
                                                                                    End If
                                                                                Next
                                                                            End If
                                                                            '
                                                                            ' Get the record values
                                                                            '
                                                                            recordUpdateSql = ""
                                                                            Call cache_libraryFiles_loadIfNeeded()
                                                                            libraryFilePtr = cache_libraryFilesIdIndex.getPtr(CStr(RecordID))
                                                                            'CS = app.db_csOpenRecord("Library Files", RecordID)
                                                                            If libraryFilePtr < 0 Then
                                                                                'If Not app.csv_IsCSOK(CS) Then
                                                                                '
                                                                                ' record is no longer available - remove the image as well
                                                                                '
                                                                                ElementText = ""
                                                                            Else
                                                                                RecordVirtualFilename = EncodeText(cache_libraryFiles(LibraryFilesCache_filename, libraryFilePtr))
                                                                                'RecordVirtualFilename = app.csv_GetCS(CS, "filename")
                                                                                RecordWidth = EncodeInteger(cache_libraryFiles(LibraryFilesCache_width, libraryFilePtr))
                                                                                'RecordWidth = app.csv_GetCSInteger(CS, "width")
                                                                                RecordHeight = EncodeInteger(cache_libraryFiles(LibraryFilesCache_height, libraryFilePtr))
                                                                                'RecordHeight = app.csv_GetCSInteger(CS, "height")
                                                                                RecordAltSizeList = EncodeText(cache_libraryFiles(LibraryFilesCache_altsizelist, libraryFilePtr))
                                                                                'RecordAltSizeList = app.csv_GetCS(CS, "altsizelist")
                                                                                RecordFilename = RecordVirtualFilename
                                                                                Pos = InStrRev(RecordVirtualFilename, "/")
                                                                                If Pos > 0 Then
                                                                                    RecordFilename = Mid(RecordVirtualFilename, Pos + 1)
                                                                                End If
                                                                                RecordFilenameExt = ""
                                                                                RecordFilenameNoExt = RecordFilename
                                                                                Pos = InStrRev(RecordFilenameNoExt, ".")
                                                                                If Pos > 0 Then
                                                                                    RecordFilenameExt = Mid(RecordFilenameNoExt, Pos + 1)
                                                                                    RecordFilenameNoExt = Mid(RecordFilenameNoExt, 1, Pos - 1)
                                                                                End If
                                                                                '
                                                                                ' if recordwidth or height are missing, get them from the file
                                                                                '
                                                                                If RecordWidth = 0 Or RecordHeight = 0 Then
                                                                                    sf = New coreImageEditClass
                                                                                    On Error Resume Next
                                                                                    If sf.load(csv_getPhysicalFilename(ImageVirtualFilename)) Then
                                                                                        RecordWidth = sf.width
                                                                                        RecordHeight = sf.height
                                                                                        recordUpdateSql = recordUpdateSql & ",width=" & RecordWidth & ",height=" & RecordHeight
                                                                                        cache_libraryFiles(LibraryFilesCache_width, libraryFilePtr) = CStr(RecordWidth)
                                                                                        cache_libraryFiles(LibraryFilesCache_width, libraryFilePtr) = CStr(RecordHeight)
                                                                                    End If
                                                                                    Call sf.Dispose()
                                                                                    sf = Nothing
                                                                                End If
                                                                                '
                                                                                ' continue only if we have record width and height
                                                                                '
                                                                                If RecordWidth <> 0 And RecordHeight <> 0 Then
                                                                                    '
                                                                                    ' set ImageWidth and ImageHeight if one of them is missing
                                                                                    '
                                                                                    If (ImageWidth = RecordWidth) And (ImageHeight = 0) Then
                                                                                        '
                                                                                        ' Image only included width, set default height
                                                                                        '
                                                                                        ImageHeight = RecordHeight
                                                                                    ElseIf (ImageHeight = RecordHeight) And (ImageWidth = 0) Then
                                                                                        '
                                                                                        ' Image only included height, set default width
                                                                                        '
                                                                                        ImageWidth = RecordWidth
                                                                                    ElseIf (ImageHeight = 0) And (ImageWidth = 0) Then
                                                                                        '
                                                                                        ' Image has no width or height, default both
                                                                                        ' This happens when you hit 'reset' on the image properties dialog
                                                                                        '
                                                                                        On Error Resume Next
                                                                                        sf = New coreImageEditClass
                                                                                        If sf.load(csv_getPhysicalFilename(ImageVirtualFilename)) Then
                                                                                            ImageWidth = sf.width
                                                                                            ImageHeight = sf.height
                                                                                        End If
                                                                                        Call sf.Dispose()
                                                                                        sf = Nothing
                                                                                        On Error GoTo ErrorTrap
                                                                                        If (ImageHeight = 0) And (ImageWidth = 0) Then
                                                                                            Pos = vbInstr(1, ImageFilenameAltSize, "x")
                                                                                            If Pos <> 0 Then
                                                                                                ImageWidth = EncodeInteger(Mid(ImageFilenameAltSize, 1, Pos - 1))
                                                                                                ImageHeight = EncodeInteger(Mid(ImageFilenameAltSize, Pos + 1))
                                                                                            End If
                                                                                        End If
                                                                                        If ImageHeight = 0 And ImageWidth = 0 Then
                                                                                            ImageHeight = RecordHeight
                                                                                            ImageWidth = RecordWidth
                                                                                        End If
                                                                                    End If
                                                                                    '
                                                                                    ' Set the ImageAltSize to what was requested from the img tag
                                                                                    ' if the actual image is a few rounding-error pixels off does not matter
                                                                                    ' if either is 0, let altsize be 0, set real value for image height/width
                                                                                    '
                                                                                    ImageAltSize = CStr(ImageWidth) & "x" & CStr(ImageHeight)
                                                                                    '
                                                                                    ' determine if we are OK, or need to rebuild
                                                                                    '
                                                                                    If (RecordVirtualFilename = (ImageVirtualFilePath & ImageFilename)) And ((RecordWidth = ImageWidth) Or (RecordHeight = ImageHeight)) Then
                                                                                        '
                                                                                        ' OK
                                                                                        ' this is the raw image
                                                                                        ' image matches record, and the sizes are the same
                                                                                        '
                                                                                        RecordVirtualFilename = RecordVirtualFilename
                                                                                    ElseIf (RecordVirtualFilename = ImageVirtualFilePath & ImageFilenameNoExt & "." & ImageFilenameExt) And (InStr(1, RecordAltSizeList, ImageAltSize, vbTextCompare) <> 0) Then
                                                                                        '
                                                                                        ' OK
                                                                                        ' resized image, and altsize is in the list - go with resized image name
                                                                                        '
                                                                                        NewImageFilename = ImageFilenameNoExt & "-" & ImageAltSize & "." & ImageFilenameExt
                                                                                        ' images included in email have spaces that must be converted to "%20" or they 404
                                                                                        imageNewLink = EncodeURL(csv_getVirtualFileLink(serverFilePath, ImageVirtualFilePath) & NewImageFilename)
                                                                                        ElementText = vbReplace(ElementText, ImageSrcOriginal, html_EncodeHTML(imageNewLink))
                                                                                    ElseIf (RecordWidth < ImageWidth) Or (RecordHeight < ImageHeight) Then
                                                                                        '
                                                                                        ' OK
                                                                                        ' reize image larger then original - go with it as is
                                                                                        '
                                                                                        ' images included in email have spaces that must be converted to "%20" or they 404
                                                                                        ElementText = vbReplace(ElementText, ImageSrcOriginal, html_EncodeHTML(EncodeURL(csv_getVirtualFileLink(serverFilePath, RecordVirtualFilename))))
                                                                                    Else
                                                                                        '
                                                                                        ' resized image - create NewImageFilename (and add new alt size to the record)
                                                                                        '
                                                                                        If RecordWidth = ImageWidth And RecordHeight = ImageHeight Then
                                                                                            '
                                                                                            ' set back to Raw image untouched, use the record image filename
                                                                                            '
                                                                                            ElementText = ElementText
                                                                                            'ElementText = vbReplace(ElementText, ImageVirtualFilename, RecordVirtualFilename)
                                                                                        Else
                                                                                            '
                                                                                            ' Raw image filename in content, but it is resized, switch to an alternate size
                                                                                            '
                                                                                            NewImageFilename = RecordFilename
                                                                                            If (ImageWidth = 0) Or (ImageHeight = 0) Or (InStr(1, vbCrLf & RecordAltSizeList & vbCrLf, vbCrLf & ImageAltSize & vbCrLf) = 0) Then
                                                                                                '
                                                                                                ' Alt image has not been built
                                                                                                '
                                                                                                sf = New coreImageEditClass
                                                                                                If Not sf.load(csv_getPhysicalFilename(RecordVirtualFilename)) Then
                                                                                                    '
                                                                                                    ' image load failed, use raw filename
                                                                                                    '
                                                                                                    handleLegacyError3(appConfig.name, "Error while loading image to resize, [" & RecordVirtualFilename & "]", "dll", "cpCoreClass", "DecodeAciveContent", Err.Number, Err.Source, Err.Description, False, True, "")
                                                                                                    Err.Clear()
                                                                                                    NewImageFilename = ImageFilename
                                                                                                Else
                                                                                                    '
                                                                                                    '
                                                                                                    '
                                                                                                    RecordWidth = sf.width
                                                                                                    RecordHeight = sf.height
                                                                                                    If ImageWidth = 0 Then
                                                                                                        '
                                                                                                        '
                                                                                                        '
                                                                                                        sf.height = ImageHeight
                                                                                                    ElseIf ImageHeight = 0 Then
                                                                                                        '
                                                                                                        '
                                                                                                        '
                                                                                                        sf.width = ImageWidth
                                                                                                    ElseIf RecordHeight = ImageHeight Then
                                                                                                        '
                                                                                                        ' change the width
                                                                                                        '
                                                                                                        sf.width = ImageWidth
                                                                                                    Else
                                                                                                        '
                                                                                                        ' change the height
                                                                                                        '
                                                                                                        sf.height = ImageHeight
                                                                                                    End If
                                                                                                    '
                                                                                                    ' if resized only width or height, set the other
                                                                                                    '
                                                                                                    If ImageWidth = 0 Then
                                                                                                        ImageWidth = sf.width
                                                                                                        ImageAltSize = CStr(ImageWidth) & "x" & CStr(ImageHeight)
                                                                                                    End If
                                                                                                    If ImageHeight = 0 Then
                                                                                                        ImageHeight = sf.height
                                                                                                        ImageAltSize = CStr(ImageWidth) & "x" & CStr(ImageHeight)
                                                                                                    End If
                                                                                                    '
                                                                                                    ' set HTML attributes so image properties will display
                                                                                                    '
                                                                                                    If vbInstr(1, ElementText, "height=", vbTextCompare) = 0 Then
                                                                                                        ElementText = vbReplace(ElementText, ">", " height=""" & ImageHeight & """>")
                                                                                                    End If
                                                                                                    If vbInstr(1, ElementText, "width=", vbTextCompare) = 0 Then
                                                                                                        ElementText = vbReplace(ElementText, ">", " width=""" & ImageWidth & """>")
                                                                                                    End If
                                                                                                    '
                                                                                                    ' Save new file
                                                                                                    '
                                                                                                    NewImageFilename = RecordFilenameNoExt & "-" & ImageAltSize & "." & RecordFilenameExt
                                                                                                    Call sf.save(csv_getPhysicalFilename(ImageVirtualFilePath & NewImageFilename))
                                                                                                    '
                                                                                                    ' Update image record
                                                                                                    '
                                                                                                    RecordAltSizeList = RecordAltSizeList & vbCrLf & ImageAltSize
                                                                                                    recordUpdateSql = recordUpdateSql & ",altsizelist=" & db.encodeSQLText(RecordAltSizeList)
                                                                                                    'Call app.csv_SetCS(CS, "altsizelist", RecordAltSizeList)
                                                                                                End If
                                                                                                '
                                                                                            End If
                                                                                            '
                                                                                            ' Change the image src to the AltSize
                                                                                            '
                                                                                            ElementText = vbReplace(ElementText, ImageSrcOriginal, html_EncodeHTML(EncodeURL(csv_getVirtualFileLink(serverFilePath, ImageVirtualFilePath) & NewImageFilename)))
                                                                                        End If
                                                                                    End If
                                                                                End If
                                                                            End If
                                                                            If recordUpdateSql <> "" Then
                                                                                recordUpdateSql = Mid(recordUpdateSql, 2)
                                                                                Call db.executeSql("update cclibraryfiles set " & recordUpdateSql & " where id=" & RecordID)
                                                                            End If
                                                                            'Call app.csv_CloseCS(CS)
                                                                        End If
                                                                    End If
                                                                End If
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                End Select
                            End If
                            Stream.Add(ElementText)
                        Next
                    End If
                    html_DecodeActiveContent = Stream.Text
                End If
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "csv_DecodeActiveContent", True)
        End Function
        '
        '========================================================================
        ' ----- Decode Content
        '========================================================================
        '
        Public Function html_DecodeContent2(ByVal Source As String) As String
            On Error GoTo ErrorTrap 'Const Tn = "MethodName-186" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            ' ----- Do Active Content Conversion
            '
            html_DecodeContent2 = Source
            If (html_DecodeContent2 <> "") Then
                html_DecodeContent2 = html_DecodeActiveContent(Source)
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "csv_DecodeContent", True)
        End Function
        '
        '=============================================================
        '
        '=============================================================
        '
        Public Function db_GetRecordID(ByVal ContentName As String, ByVal RecordName As String) As Integer
            Return db.getRecordID(ContentName, RecordName)
        End Function
        '
        '=============================================================
        '
        '=============================================================
        '
        Public Function db_GetRecordName(ByVal ContentName As String, ByVal RecordID As Integer) As String
            Return db.db_GetRecordName(ContentName, RecordID)
        End Function
        '
        '=============================================================
        '
        '=============================================================
        '
        Public Function metaData_IsContentFieldSupported(ByVal ContentName As String, ByVal FieldName As String) As Boolean
            Return db.metaData_IsContentFieldSupported(ContentName, FieldName)
        End Function
        '
        '
        '
        Public Sub tasks_RequestTask(ByVal Command As String, ByVal SQL As String, ByVal ExportName As String, ByVal Filename As String, ByVal RequestedByMemberID As Integer)
            On Error GoTo ErrorTrap 'Const Tn = "RequestTask" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim CS As Integer
            Dim TaskName As String

            '
            If ExportName = "" Then
                TaskName = CStr(Now()) & " snapshot of unnamed data"
            Else
                TaskName = CStr(Now()) & " snapshot of " & vbLCase(ExportName)
            End If
            CS = db.cs_insertRecord("Tasks", RequestedByMemberID)
            If db.cs_Ok(CS) Then
                Call db.db_GetCSFilename(CS, "Filename", Filename)
                Call db.cs_set(CS, "Name", TaskName)
                Call db.cs_set(CS, "Command", Command)
                Call db.cs_set(CS, "SQLQuery", SQL)
            End If
            Call db.cs_Close(CS)
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "csv_RequestTask", True)
        End Sub
        '
        '========================================================================
        '   Open a content set with the current whats new list
        '========================================================================
        '
        Public Function db_csOpenWatchList(ByVal ListName As String, ByVal SortFieldList As String, ByVal ActiveOnly As Boolean, ByVal PageSize As Integer, ByVal PageNumber As Integer) As Integer
            On Error GoTo ErrorTrap 'Const Tn = "OpenCSContentWatchList" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim SQL As String
            'Dim SortFieldList As String
            'Dim iActiveOnly As Boolean
            Dim MethodName As String
            'Dim ListName As String
            Dim CS As Integer
            '
            'SortFieldList = Trim(encodeMissingText(SortFieldList, ""))
            'SortFieldList = encodeMissingText(SortFieldList, "DateAdded")
            If SortFieldList = "" Then
                SortFieldList = "DateAdded"
            End If
            'iActiveOnly = encodeMissingText(ActiveOnly, True)
            'ListName = Trim(EncodeText(ListName))
            '
            MethodName = "db_csOpenWatchList( " & ListName & ", " & SortFieldList & ", " & ActiveOnly & " )"
            '
            ' ----- Add tablename to the front of SortFieldList fieldnames
            '
            SortFieldList = " " & vbReplace(SortFieldList, ",", " , ") & " "
            SortFieldList = vbReplace(SortFieldList, " ID ", " ccContentWatch.ID ")
            SortFieldList = vbReplace(SortFieldList, " Link ", " ccContentWatch.Link ")
            SortFieldList = vbReplace(SortFieldList, " LinkLabel ", " ccContentWatch.LinkLabel ")
            SortFieldList = vbReplace(SortFieldList, " SortOrder ", " ccContentWatch.SortOrder ")
            SortFieldList = vbReplace(SortFieldList, " DateAdded ", " ccContentWatch.DateAdded ")
            SortFieldList = vbReplace(SortFieldList, " ContentID ", " ccContentWatch.ContentID ")
            SortFieldList = vbReplace(SortFieldList, " RecordID ", " ccContentWatch.RecordID ")
            SortFieldList = vbReplace(SortFieldList, " ModifiedDate ", " ccContentWatch.ModifiedDate ")
            '
            SQL = "SELECT ccContentWatch.ID AS ID, ccContentWatch.Link as Link, ccContentWatch.LinkLabel as LinkLabel, ccContentWatch.SortOrder as SortOrder, ccContentWatch.DateAdded as DateAdded, ccContentWatch.ContentID as ContentID, ccContentWatch.RecordID as RecordID, ccContentWatch.ModifiedDate as ModifiedDate" _
                & " FROM (ccContentWatchLists LEFT JOIN ccContentWatchListRules ON ccContentWatchLists.ID = ccContentWatchListRules.ContentWatchListID) LEFT JOIN ccContentWatch ON ccContentWatchListRules.ContentWatchID = ccContentWatch.ID" _
                & " WHERE (((ccContentWatchLists.Name)=" & db.encodeSQLText(ListName) & ")" _
                    & "AND ((ccContentWatchLists.Active)<>0)" _
                    & "AND ((ccContentWatchListRules.Active)<>0)" _
                    & "AND ((ccContentWatch.Active)<>0)" _
                    & "AND (ccContentWatch.Link is not null)" _
                    & "AND (ccContentWatch.LinkLabel is not null)" _
                    & "AND ((ccContentWatch.WhatsNewDateExpires is null)or(ccContentWatch.WhatsNewDateExpires>" & db.encodeSQLDate(Now) & "))" _
                    & ")" _
                & " ORDER BY " & SortFieldList & ";"
            db_csOpenWatchList = db.db_openCsSql_rev("Default", SQL)
            If Not db.cs_Ok(db_csOpenWatchList) Then
                '
                ' Check if listname exists
                '
                CS = db.csOpen("Content Watch Lists", "name=" & db.encodeSQLText(ListName), "ID", , , , , "ID")
                If Not db.cs_Ok(CS) Then
                    Call db.cs_Close(CS)
                    CS = db.cs_insertRecord("Content Watch Lists", 0)
                    If db.cs_Ok(CS) Then
                        Call db.cs_set(CS, "name", ListName)
                    End If
                End If
                Call db.cs_Close(CS)
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "db_csOpenWatchList", True)
        End Function
        '        '
        '        '=============================================================================
        '        '   Return just the copy from a content page
        '        '=============================================================================
        '        '
        '        Public Function csv_TextDeScramble(ByVal Copy As String) As String
        '            On Error GoTo ErrorTrap : 'Const Tn = "TextDeScramble" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
        '            '
        '            Dim CS As Integer
        '            Dim CPtr As Integer
        '            Dim C As String
        '            Dim CValue As Integer
        '            Dim crc As Integer
        '            Dim ModAnswer As String
        '            Dim Source As String
        '            Dim Base As Integer
        '            Const CMin = 32
        '            Const CMax = 126
        '            '
        '            ' assume this one is not converted
        '            '
        '            Source = Copy
        '            Base = 50
        '            '
        '            ' First characger must be _
        '            ' Second character is the scramble version 'a' is the starting system
        '            '
        '            If Mid(Source, 1, 2) <> "_a" Then
        '                csv_TextDeScramble = Copy
        '            Else
        '                Source = Mid(Source, 3)
        '                '
        '                ' cycle through all characters
        '                '
        '                For CPtr = Len(Source) - 1 To 1 Step -1
        '                    C = Mid(Source, CPtr, 1)
        '                    CValue = Asc(C)
        '                    crc = crc + CValue
        '                    If (CValue < CMin) Or (CValue > CMax) Then
        '                        '
        '                        ' if out of ascii bounds, just leave it in place
        '                        '
        '                    Else
        '                        CValue = CValue - Base
        '                        If CValue < CMin Then
        '                            CValue = CValue + CMax - CMin + 1
        '                        End If
        '                    End If
        '                    csv_TextDeScramble = csv_TextDeScramble & chr(CValue)
        '                Next
        '                '
        '                ' Test mod
        '                '
        '                If CStr(crc Mod 9) <> Mid(Source, Len(Source), 1) Then
        '                    '
        '                    ' Nope - set it back to the input
        '                    '
        '                    csv_TextDeScramble = Copy
        '                End If
        '            End If
        '            '
        '            'csv_TextDeScramble = Mid(Source, 2)
        '            '
        '            Exit Function
        'ErrorTrap:
        '            Call csv_HandleClassTrapError(Err.Number, Err.Source, Err.Description, "csv_TextDeScramble", True)
        '        End Function

        '        '
        '        '=============================================================================
        '        '   Return just the copy from a content page
        '        '=============================================================================
        '        '
        '        Public Function csv_TextScramble(ByVal Copy As String) As String
        '            On Error GoTo ErrorTrap : 'Const Tn = "TextScramble" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
        '            '
        '            Dim CS As Integer
        '            Dim CPtr As Integer
        '            Dim C As String
        '            Dim CValue As Integer
        '            Dim crc As Integer
        '            Dim Base As Integer
        '            Const CMin = 32
        '            Const CMax = 126
        '            '
        '            ' scrambled starts with _
        '            '
        '            Base = 50
        '            For CPtr = 1 To Len(Copy)
        '                C = Mid(Copy, CPtr, 1)
        '                CValue = Asc(C)
        '                If (CValue < CMin) Or (CValue > CMax) Then
        '                    '
        '                    ' if out of ascii bounds, just leave it in place
        '                    '
        '                Else
        '                    CValue = CValue + Base
        '                    If CValue > CMax Then
        '                        CValue = CValue - CMax + CMin - 1
        '                    End If
        '                End If
        '                '
        '                ' CRC is addition of all scrambled characters
        '                '
        '                crc = crc + CValue
        '                '
        '                ' put together backwards
        '                '
        '                csv_TextScramble = chr(CValue) & csv_TextScramble
        '            Next
        '            '
        '            ' Ends with the mod of the CRC and 13
        '            '
        '            csv_TextScramble = "_a" & csv_TextScramble & CStr(crc Mod 9)
        '            '
        '            '
        '            Exit Function
        'ErrorTrap:
        '            Call csv_HandleClassTrapError(Err.Number, Err.Source, Err.Description, "csv_TextScramble", True)
        '        End Function
        '
        '===========================================================================================
        '   Verify the Menu record is there, add it if not
        '   If it is default, add all existing sections to it
        '   If this version is too old, it returns 0
        '===========================================================================================
        '
        Public Function csv_VerifyDynamicMenu(ByVal MenuName As String) As Integer
            On Error GoTo ErrorTrap 'Const Tn = "VerifyDynamicMenu" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim CS As Integer
            Dim CSRule As Integer
            Dim DefaultFound As Boolean
            Dim iMenuName As String
            '
            If True Then
                '
                iMenuName = MenuName
                If iMenuName = "" Then
                    iMenuName = "Default"
                End If
                '
                CS = db.db_openCsSql_rev("default", "select ID from ccDynamicMenus where name=" & db.encodeSQLText(iMenuName))
                If db.cs_Ok(CS) Then
                    csv_VerifyDynamicMenu = db.cs_getInteger(CS, "ID")
                End If
                Call db.cs_Close(CS)
                '
                If csv_VerifyDynamicMenu = 0 Then
                    '
                    ' Add the Menu
                    '
                    CS = db.cs_insertRecord("Dynamic Menus", SystemMemberID)
                    If db.cs_Ok(CS) Then
                        csv_VerifyDynamicMenu = db.cs_getInteger(CS, "ID")
                        Call db.cs_set(CS, "name", iMenuName)
                        If True Then
                            Call db.cs_set(CS, "ccGuid", DefaultDynamicMenuGuid)
                        End If
                    End If
                    Call db.cs_Close(CS)
                    '
                    If vbUCase(iMenuName) = "DEFAULT" Then
                        '
                        ' Adding the Default menu - put all sections into this when it is created
                        '
                        CS = db.csOpen("Site Sections")
                        Do While db.cs_Ok(CS)
                            CSRule = db.cs_insertRecord("Dynamic Menu Section Rules", SystemMemberID)
                            If db.cs_Ok(CSRule) Then
                                Call db.cs_set(CSRule, "DynamicMenuID", csv_VerifyDynamicMenu)
                                Call db.cs_set(CSRule, "SectionID", db.cs_getInteger(CS, "ID"))
                            End If
                            Call db.cs_Close(CSRule)
                            db.db_csGoNext(CS)
                        Loop
                        Call db.cs_Close(CS)
                    End If
                End If
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "csv_VerifyDynamicMenu", True, True)
        End Function
        '
        '===========================================================================================
        '   Verify the Menu record is there, add it if not
        '   If it is default, add all existing sections to it
        '===========================================================================================
        '
        Public Function csv_GetDynamicMenuACSelect() As String
            On Error GoTo ErrorTrap 'Const Tn = "GetCSv_DynamicMenuACSelect" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim CS As Integer
            '
            If True Then
                '
                If csv_DynamicMenuACSelect = "" Then
                    CS = db.csOpen("Dynamic Menus", , "Name", , , , , "Name")
                    If Not db.cs_Ok(CS) Then
                        Call db.cs_Close(CS)
                        Call csv_VerifyDynamicMenu("Default")
                        CS = db.csOpen("Dynamic Menus", , "Name", , , , , "Name")
                    End If
                    Do While db.cs_Ok(CS)
                        If csv_DynamicMenuACSelect <> "" Then
                            csv_DynamicMenuACSelect = csv_DynamicMenuACSelect & "|"
                        End If
                        csv_DynamicMenuACSelect = csv_DynamicMenuACSelect & db.cs_getText(CS, "name")
                        db.db_csGoNext(CS)
                    Loop
                    Call db.cs_Close(CS)
                End If
                csv_GetDynamicMenuACSelect = csv_DynamicMenuACSelect
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "VerifyDefaultDynamicMenu", True, True)
        End Function
        '
        '
        '
        Private Function html_DecodeActiveContent_ProcessDynamicMenu(ByVal QueryString As String) As String
            On Error GoTo ErrorTrap 'Const Tn = "csv_DecodeActiveContent_ProcessDynamicMenu" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim EditTabCaption As String
            Dim ACTags() As String
            Dim TagPtr As Integer
            Dim QSPos As Integer
            Dim QSPosEnd As Integer
            Dim QS As String
            Dim MenuName As String
            Dim StylePrefix As String
            Dim CS As Integer
            Dim IsFound As Boolean
            Dim StyleSheet As String
            'Dim DefaultStyles As String
            'Dim DynamicStyles As String
            'Dim AddStyles As String
            'Dim StyleSplit() As String
            'Dim StylePtr as integer
            'Dim StyleLine As String
            Dim Filename As String
            'Dim NewStyleLine As String
            Dim Menu As String
            Dim MenuNew As String
            '
            QS = QueryString
            If True Then
                If vbInstr(1, QS, "Menu=", vbTextCompare) <> 0 Then
                    '
                    ' New menu
                    '
                    Menu = csv_GetAddonOption("Menu", QS)
                    MenuNew = csv_GetAddonOption("NewMenu", QS)
                    If MenuNew <> "" Then
                        '
                        ' Add a new Menu
                        '
                        Menu = MenuNew
                        Call csv_VerifyDynamicMenu(Menu)
                    End If
                    '
                    ' fixup the tag so next encode it pulls a new list of Dynamic Menus
                    '
                    QS = "Menu=" & Menu
                ElseIf vbInstr(1, QS, "MenuName=", vbTextCompare) <> 0 Then
                    '
                    ' Old Style Menu Icon
                    '
                    MenuName = csv_GetAddonOption("MenuName", QS)
                    Call csv_VerifyDynamicMenu(MenuName)
                End If
            End If
            html_DecodeActiveContent_ProcessDynamicMenu = QS
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "csv_DecodeActiveContent_ProcessDynamicMenu", True, True)
        End Function
        '
        '=======================================================================================================
        '   return the entire stylesheet for the given templateID and/or EmailID
        '=======================================================================================================
        '
        Public Function html_getStyleSheet2(ByVal ContentType As csv_contentTypeEnum, ByVal templateId As Integer, Optional ByVal EmailID As Integer = 0) As String
            On Error GoTo ErrorTrap 'Const Tn = "getStyleSheet2" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim blockStyles As Boolean
            Dim usedSharedStyleList As String
            Dim EMailTemplateID As Integer
            Dim SQL As String
            Dim CS As Integer
            Dim Filename As String
            'dim dt as datatable
            Dim StyleName As String
            Dim styleId As Integer
            Dim Ptr As Integer
            Dim DefaultStyles As String
            Dim SiteStyles As String
            Dim sharedStyles As String
            Dim templateStyles As String
            Dim emailstyles As String
            '
            For Ptr = 0 To csv_stylesheetCacheCnt - 1
                If (csv_stylesheetCache(Ptr).EmailID = EmailID) And (csv_stylesheetCache(Ptr).EmailID = EmailID) Then
                    html_getStyleSheet2 = csv_stylesheetCache(Ptr).StyleSheet
                    Exit For
                End If
            Next
            If Ptr >= csv_stylesheetCacheCnt Then
                blockStyles = False
                DefaultStyles = pageManager_GetStyleSheetDefault2()
                SiteStyles = "" _
                    & vbCrLf & "/*" _
                    & vbCrLf & "Site Styles" _
                    & vbCrLf & "*/" _
                    & vbCrLf & RemoveStyleTags(cdnFiles.readFile("templates\styles.css"))
                '
                ' shared styles marked AlwaysInclude
                '
                SQL = "select s.name,s.id,s.StyleFilename from ccSharedStyles s where (s.active<>0)and(s.AlwaysInclude<>0)"
                Dim dt As DataTable
                dt = db.executeSql(SQL)
                If dt.Rows.Count > 0 Then
                    For Each row As DataRow In dt.Rows
                        styleId = EncodeInteger(row("id"))
                        StyleName = EncodeText(row("name"))
                        StyleName = vbReplace(StyleName, "*/", "*-/")
                        If (InStr(1, usedSharedStyleList & ",", "," & styleId & ",") = 0) Then
                            usedSharedStyleList = usedSharedStyleList & "," & styleId
                            Filename = EncodeText(row("stylefilename"))
                            If Filename <> "" Then
                                sharedStyles = sharedStyles _
                                    & vbCrLf & "/*" _
                                    & vbCrLf & "Shared Style " & StyleName & " marked always include" _
                                    & vbCrLf & "*/" _
                                    & vbCrLf & RemoveStyleTags(cdnFiles.readFile(Filename))
                            End If
                        End If
                    Next
                End If
                '
                If templateId <> 0 Then
                    '
                    ' template exclusive styles
                    '
                    SQL = "select name,stylesFilename from cctemplates where (id=" & templateId & ")and(stylesFilename is not null)"
                    'Dim dt As DataTable
                    dt = db.executeSql(SQL)
                    If dt.Rows.Count > 0 Then
                        For Each dr As DataRow In dt.Rows
                            Filename = EncodeText(dr("stylesfilename"))
                            StyleName = EncodeText(dr("name"))
                            StyleName = vbReplace(StyleName, "*/", "*-/")
                            If Filename <> "" Then
                                templateStyles = templateStyles _
                                    & vbCrLf & "/*" _
                                    & vbCrLf & "Template Styles" _
                                    & vbCrLf & "*/" _
                                    & vbCrLf & RemoveStyleTags(cdnFiles.readFile(Filename))
                            End If

                        Next
                    End If
                    '
                    ' template shared styles
                    '
                    Dim rs As DataTable

                    SQL = "select s.name,s.id,s.StyleFilename from ccSharedStyles s left join ccSharedStylesTemplateRules r on s.id=r.styleid where (s.active<>0)and(r.templateid=" & templateId & ")and((s.AlwaysInclude=0)or(s.AlwaysInclude is null))"
                    rs = db.executeSql(SQL)
                    If rs.Rows.Count > 0 Then
                        styleId = EncodeInteger(rs.Rows(0).Item("id"))
                        StyleName = EncodeText(rs.Rows(0).Item("name"))
                        StyleName = vbReplace(StyleName, "*/", "*-/")
                        If (InStr(1, usedSharedStyleList & ",", "," & styleId & ",") = 0) Then
                            usedSharedStyleList = usedSharedStyleList & "," & styleId
                            Filename = EncodeText(rs.Rows(0).Item("stylefilename"))
                            If Filename <> "" Then
                                sharedStyles = sharedStyles _
                                    & vbCrLf & "/*" _
                                    & vbCrLf & "Shared Style " & StyleName & " included in template" _
                                    & vbCrLf & "*/" _
                                    & vbCrLf & RemoveStyleTags(cdnFiles.readFile(Filename))
                            End If
                        End If
                    End If
                End If
                '
                If EmailID <> 0 Then
                    '
                    ' email exclusive styles
                    '
                    SQL = "select name,blockSiteStyles,stylesFilename,emailTemplateID from ccemail where id=" & EmailID
                    'Dim dt As DataTable

                    dt = db.executeSql(SQL)
                    If dt.Rows.Count > 0 Then
                        For Each rsDr As DataRow In dt.Rows
                            blockStyles = EncodeBoolean(rsDr("blockSiteStyles"))
                            If Not blockStyles Then
                                EMailTemplateID = EncodeInteger("EmailTemplateID")
                                Filename = EncodeText(rsDr("stylesFilename"))
                                StyleName = EncodeText(rsDr("name"))
                                StyleName = vbReplace(StyleName, "*/", "*-/")
                                If Filename <> "" Then
                                    emailstyles = emailstyles _
                                        & vbCrLf & "/*" _
                                        & vbCrLf & "Email Styles" _
                                        & vbCrLf & "*/" _
                                        & vbCrLf & RemoveStyleTags(cdnFiles.readFile(Filename))
                                End If
                            End If
                        Next
                    End If
                    '
                    ' email shared styles
                    '
                    SQL = "select s.name,s.id,s.StyleFilename from ccSharedStyles s left join ccEmailStyleRules r on s.id=r.sharedstylesid where (s.active<>0)and(r.emailid=" & EmailID & ")and((s.AlwaysInclude=0)or(s.AlwaysInclude is null))"
                    dt = db.executeSql(SQL)
                    For Each rsDr As DataRow In dt.Rows
                        styleId = EncodeInteger(rsDr("id"))
                        StyleName = EncodeText(rsDr("name"))
                        StyleName = vbReplace(StyleName, "*/", "*-/")
                        If (InStr(1, usedSharedStyleList & ",", "," & styleId & ",") = 0) Then
                            usedSharedStyleList = usedSharedStyleList & "," & styleId
                            Filename = EncodeText(rsDr("stylefilename"))
                            If Filename <> "" Then
                                sharedStyles = sharedStyles _
                                    & vbCrLf & "/*" _
                                    & vbCrLf & "Shared Styles included in email" _
                                    & vbCrLf & "*/" _
                                    & vbCrLf & RemoveStyleTags(cdnFiles.readFile(Filename))
                            End If
                        End If
                    Next
                    '
                    If EMailTemplateID <> 0 Then
                        '
                        ' email templates do not have styles (yet, or not at all)
                        '
                    End If
                End If
                '
                ' assemble styles
                '
                If blockStyles Then
                    html_getStyleSheet2 = ""
                Else
                    html_getStyleSheet2 = "" _
                        & DefaultStyles _
                        & SiteStyles _
                        & sharedStyles _
                        & templateStyles _
                        & emailstyles
                    '
                    ' convert ccBodyWeb and ccBodyEmail to body tag on contentType
                    '
                End If
                '
                ' save it in cache in case there are >1 call on this page
                '
                Ptr = csv_stylesheetCacheCnt
                ReDim Preserve csv_stylesheetCache(Ptr)
                csv_stylesheetCacheCnt = csv_stylesheetCacheCnt + 1
                With csv_stylesheetCache(Ptr)
                    .EmailID = EmailID
                    .templateId = templateId
                    .StyleSheet = html_getStyleSheet2
                End With
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "csv_getStyleSheet2", True, False)
        End Function
        '
        '
        '
        Public Function pageManager_GetStyleSheetDefault2() As String
            On Error GoTo ErrorTrap 'Const Tn = "csv_getStyleSheetDefault" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            If siteProperties.getBoolean("Allow CSS Reset") Then
                pageManager_GetStyleSheetDefault2 = pageManager_GetStyleSheetDefault2 _
                    & vbCrLf & "/*" _
                    & vbCrLf & "Reset Styles" _
                    & vbCrLf & "*/" _
                    & vbCrLf & RemoveStyleTags(appRootFiles.readFile("\cclib\styles\ccreset.css"))
            End If
            pageManager_GetStyleSheetDefault2 = pageManager_GetStyleSheetDefault2 _
                & vbCrLf & "/*" _
                & vbCrLf & "Contensive Styles" _
                & vbCrLf & "*/" _
                & vbCrLf & RemoveStyleTags(appRootFiles.readFile("\cclib\styles\" & defaultStyleFilename))
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "csv_getStyleSheetDefault", True, False)
        End Function


        '
        '
        '
        Public Function db_GetDataSourceList() As String
            On Error GoTo ErrorTrap 'Const Tn = "csv_GetDataSourceList" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            'dim dt as datatable
            'Dim Conn As Connection
            Dim DPtr As Integer
            Dim DataSourceName As String
            '
            If db.dataSources.Length > 0 Then
                For DPtr = 0 To db.dataSources.Length - 1
                    db_GetDataSourceList = db_GetDataSourceList _
                        & vbCrLf & db.dataSources(DPtr).NameLower
                Next
                If db_GetDataSourceList <> "" Then
                    db_GetDataSourceList = Mid(db_GetDataSourceList, 3)
                End If
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "csv_GetDataSourceList", True, False)
        End Function
        ''
        '
        '===============================================================================================================================
        '   Get Addon Selector
        '
        '   The addon selector is the string sent out with the content in edit-mode. In the editor, it is converted by javascript
        '   to the popup window that selects instance options. It is in this format:
        '
        '   Select (creates a list of names in a select box, returns the selected name)
        '       name=currentvalue[optionname0:optionvalue0|optionname1:optionvalue1|...]
        '   CheckBox (creates a list of names in checkboxes, and returns the selected names)
        '===============================================================================================================================
        '
        Public Function pageManager_GetAddonSelector(ByVal SrcOptionName As String, ByVal InstanceOptionValue_AddonEncoded As String, ByVal SrcOptionValueSelector As String) As String
            On Error GoTo ErrorTrap 'Const Tn = "GetAddonSelector" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            'ResultOptionSelector = csv_GetAddonSelector(SrcOptionName, InstanceOptionValue_AddonEncoded, SrcOptionValueSelector)
            '
            Const ACFunctionList = "List"
            Const ACFunctionList1 = "selectname"
            Const ACFunctionList2 = "listname"
            Const ACFunctionList3 = "selectcontentname"
            Const ACFunctionListID = "ListID"
            Const ACFunctionListFields = "ListFields"

            '
            Dim CID As Integer
            Dim IsContentList As Boolean
            Dim IsListField As Boolean
            Dim Choice As String
            Dim Choices() As String
            Dim ChoiceCnt As Integer
            Dim Ptr As Integer
            Dim IncludeID As Boolean
            Dim FnLen As Integer
            Dim RecordID As Integer
            Dim CS As Integer
            Dim ContentName As String
            Dim SrcOptionList As String
            Dim Pos As Integer
            Dim list As String
            Dim FnArgList As String
            Dim FnArgs() As String
            Dim FnArgCnt As Integer
            Dim ContentCriteria As String
            Dim RecordName As String
            Dim REsultOptionValue As String
            Dim ResultOptionListHTMLEncoded As String
            Dim SrcSelectorInner As String
            Dim FunctionListNames As String
            Dim SrcSelectorSuffix As String
            Dim Cell(,) As Object
            Dim RowCnt As Integer
            Dim RowPtr As Integer
            'Dim Ptr as integer
            '
            Dim SrcSelector As String
            SrcSelector = Trim(SrcOptionValueSelector)
            '
            SrcSelectorInner = SrcSelector
            Dim PosLeft As Integer
            Dim PosRight As Integer
            PosLeft = vbInstr(1, SrcSelector, "[")
            If PosLeft <> 0 Then
                PosRight = vbInstr(1, SrcSelector, "]")
                If PosRight <> 0 Then
                    If (PosRight < Len(SrcSelector)) Then
                        SrcSelectorSuffix = Mid(SrcSelector, PosRight + 1)
                    End If
                    SrcSelector = Trim(Mid(SrcSelector, PosLeft, PosRight - PosLeft + 1))
                    SrcSelectorInner = Trim(Mid(SrcSelector, 2, Len(SrcSelector) - 2))
                End If
            End If
            list = ""
            '
            ' Break SrcSelectorInner up into individual choices to detect functions
            '

            If SrcSelectorInner <> "" Then
                Choices = Split(SrcSelectorInner, "|")
                ChoiceCnt = UBound(Choices) + 1
                For Ptr = 0 To ChoiceCnt - 1
                    Choice = Choices(Ptr)
                    IsContentList = False
                    IsListField = False
                    '
                    ' List Function (and all the indecision that went along with it)
                    '
                    Pos = 0
                    If Pos = 0 Then
                        Pos = vbInstr(1, Choice, ACFunctionList1 & "(", vbTextCompare)
                        If Pos > 0 Then
                            IsContentList = True
                            IncludeID = False
                            FnLen = Len(ACFunctionList1)
                        End If
                    End If
                    If Pos = 0 Then
                        Pos = vbInstr(1, Choice, ACFunctionList2 & "(", vbTextCompare)
                        If Pos > 0 Then
                            IsContentList = True
                            IncludeID = False
                            FnLen = Len(ACFunctionList2)
                        End If
                    End If
                    If Pos = 0 Then
                        Pos = vbInstr(1, Choice, ACFunctionList3 & "(", vbTextCompare)
                        If Pos > 0 Then
                            IsContentList = True
                            IncludeID = False
                            FnLen = Len(ACFunctionList3)
                        End If
                    End If
                    If Pos = 0 Then
                        Pos = vbInstr(1, Choice, ACFunctionListID & "(", vbTextCompare)
                        If Pos > 0 Then
                            IsContentList = True
                            IncludeID = True
                            FnLen = Len(ACFunctionListID)
                        End If
                    End If
                    If Pos = 0 Then
                        Pos = vbInstr(1, Choice, ACFunctionList & "(", vbTextCompare)
                        If Pos > 0 Then
                            IsContentList = True
                            IncludeID = False
                            FnLen = Len(ACFunctionList)
                        End If
                    End If
                    If Pos = 0 Then
                        Pos = vbInstr(1, Choice, ACFunctionListFields & "(", vbTextCompare)
                        If Pos > 0 Then
                            IsListField = True
                            IncludeID = False
                            FnLen = Len(ACFunctionListFields)
                        End If
                    End If
                    '
                    If Pos > 0 Then
                        '
                        FnArgList = Trim(Mid(Choice, Pos + FnLen))
                        ContentName = ""
                        ContentCriteria = ""
                        If (Left(FnArgList, 1) = "(") And (Right(FnArgList, 1) = ")") Then
                            '
                            ' set ContentName and ContentCriteria from argument list
                            '
                            FnArgList = Mid(FnArgList, 2, Len(FnArgList) - 2)
                            FnArgs = SplitDelimited(FnArgList, ",")
                            FnArgCnt = UBound(FnArgs) + 1
                            If FnArgCnt > 0 Then
                                ContentName = Trim(FnArgs(0))
                                If (Left(ContentName, 1) = """") And (Right(ContentName, 1) = """") Then
                                    ContentName = Trim(Mid(ContentName, 2, Len(ContentName) - 2))
                                ElseIf (Left(ContentName, 1) = "'") And (Right(ContentName, 1) = "'") Then
                                    ContentName = Trim(Mid(ContentName, 2, Len(ContentName) - 2))
                                End If
                            End If
                            If FnArgCnt > 1 Then
                                ContentCriteria = Trim(FnArgs(1))
                                If (Left(ContentCriteria, 1) = """") And (Right(ContentCriteria, 1) = """") Then
                                    ContentCriteria = Trim(Mid(ContentCriteria, 2, Len(ContentCriteria) - 2))
                                ElseIf (Left(ContentCriteria, 1) = "'") And (Right(ContentCriteria, 1) = "'") Then
                                    ContentCriteria = Trim(Mid(ContentCriteria, 2, Len(ContentCriteria) - 2))
                                End If
                            End If
                        End If
                        CS = -1
                        If IsContentList Then
                            '
                            ' ContentList - Open the Content and build the options from the names
                            '
                            If ContentCriteria <> "" Then
                                CS = db.csOpen(ContentName, ContentCriteria, "name", , , , , "ID,Name")
                            Else
                                CS = db.csOpen(ContentName, , "name", , , , , "ID,Name")
                            End If
                        ElseIf IsListField Then
                            '
                            ' ListField
                            '
                            CID = metaData.getContentId(ContentName)
                            If CID > 0 Then
                                CS = db.csOpen("Content Fields", "Contentid=" & CID, "name", , , , , "ID,Name")
                            End If
                        End If

                        If db.cs_Ok(CS) Then
                            Cell = db.db_GetCSRows(CS)
                            RowCnt = UBound(Cell, 2) + 1
                            For RowPtr = 0 To RowCnt - 1
                                '
                                RecordName = EncodeText(Cell(1, RowPtr))
                                RecordName = vbReplace(RecordName, vbCrLf, " ")
                                RecordID = EncodeInteger(Cell(0, RowPtr))
                                If RecordName = "" Then
                                    RecordName = "record " & RecordID
                                ElseIf Len(RecordName) > 50 Then
                                    RecordName = Left(RecordName, 50) & "..."
                                End If
                                RecordName = encodeNvaArgument(RecordName)
                                list = list & "|" & RecordName
                                If IncludeID Then
                                    list = list & ":" & RecordID
                                End If
                            Next
                        End If
                        Call db.cs_Close(CS)
                    Else
                        '
                        ' choice is not a function, just add the choice back to the list
                        '
                        list = list & "|" & Choices(Ptr)
                    End If
                Next
                If list <> "" Then
                    list = Mid(list, 2)
                End If
            End If
            '
            ' Build output string
            '
            'csv_GetAddonSelector = encodeNvaArgument(SrcOptionName)
            pageManager_GetAddonSelector = html_EncodeHTML(encodeNvaArgument(SrcOptionName)) & "="
            If InstanceOptionValue_AddonEncoded <> "" Then
                pageManager_GetAddonSelector = pageManager_GetAddonSelector & html_EncodeHTML(InstanceOptionValue_AddonEncoded)
            End If
            If SrcSelectorSuffix = "" And list = "" Then
                '
                ' empty list with no suffix, return with name=value
                '
            ElseIf vbLCase(SrcSelectorSuffix) = "resourcelink" Then
                '
                ' resource link, exit with empty list
                '
                pageManager_GetAddonSelector = pageManager_GetAddonSelector & "[]ResourceLink"
            Else
                '
                '
                '
                pageManager_GetAddonSelector = pageManager_GetAddonSelector & "[" & list & "]" & SrcSelectorSuffix
            End If
            '
            Exit Function
            '
ErrorTrap:
            handleExceptionAndRethrow(New Exception("Unexpected exception"))
        End Function
        ''
        ''
        ''
        'Public Property app.config.urlencoder() As String
        '    Get
        '        Return app.config.urlencoderLocal

        '    End Get
        '    Set(ByVal value As String)
        '        app.config.urlencoderLocal = value

        '    End Set
        'End Property
        '
        '
        '
        '
        Private Function getEmailBlockList_InternalOnly() As String
            '
            Dim Filename As String
            '
            If Not email_BlockList_LocalLoaded Then
                Filename = "Config\SMTPBlockList_" & appConfig.name & ".txt"
                email_BlockList_Local = cluster.localClusterFiles.readFile(Filename)
                email_BlockList_LocalLoaded = True
            End If
            getEmailBlockList_InternalOnly = email_BlockList_Local
            '
        End Function

        '
        '
        '
        Public Sub email_addToEmailBlockList_InternalOnly(ByVal EmailAddress As String)
            If EmailAddress = "" Then
                '
                ' bad email address
                '
            ElseIf (InStr(1, EmailAddress, "@") = 0) Or (InStr(1, EmailAddress, ".") = 0) Then
                '
                ' bad email address
                '
            ElseIf vbInstr(1, getEmailBlockList_InternalOnly(), vbCrLf & EmailAddress & vbTab, vbTextCompare) <> 0 Then
                '
                ' They are already in the list
                '
            Else
                '
                ' add them to the list
                '
                email_BlockList_Local = getEmailBlockList_InternalOnly() & vbCrLf & EmailAddress & vbTab & Now()
                Call cluster.localClusterFiles.saveFile("Config\SMTPBlockList_" & appConfig.name & ".txt", email_BlockList_Local)
                email_BlockList_LocalLoaded = False
            End If
        End Sub
        '
        '=====================================================================================================
        '   Insert into the ActivityLog
        '=====================================================================================================
        '
        Public Sub log_logActivity(ByVal Message As String, ByVal ByMemberID As Integer, ByVal SubjectMemberID As Integer, ByVal SubjectOrganizationID As Integer, Optional ByVal Link As String = "", Optional ByVal VisitorID As Integer = 0, Optional ByVal VisitID As Integer = 0)
            On Error GoTo ErrorTrap 'Const Tn = "LogActivity2" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim CS As Integer
            '
            CS = db.cs_insertRecord("Activity Log", ByMemberID)
            If db.cs_Ok(CS) Then
                Call db.cs_set(CS, "MemberID", SubjectMemberID)
                Call db.cs_set(CS, "OrganizationID", SubjectOrganizationID)
                Call db.cs_set(CS, "Message", Message)
                Call db.cs_set(CS, "Link", Link)
                Call db.cs_set(CS, "VisitorID", VisitorID)
                Call db.cs_set(CS, "VisitID", VisitID)
            End If
            Call db.cs_Close(CS)
            '
            Exit Sub
            '
ErrorTrap:
            handleExceptionAndRethrow(New Exception("Unexpected exception"))
        End Sub
        '
        '===================================================================================================
        '   Build AddonOptionLists
        '
        '   On entry:
        '       AddonOptionConstructor = the addon-encoded version of the list that comes from the Addon Record
        '           It is crlf delimited and all escape characters converted
        '       AddonOptionString = addonencoded version of the list that comes from the HTML AC tag
        '           that means & delimited
        '
        '   On Exit:
        '       OptionString_ForObjectCall
        '               pass this string to the addon when it is run, crlf delimited name=value pair.
        '               This should include just the name=values pairs, with no selectors
        '               it should include names from both Addon and Instance
        '               If the Instance has a value, include it. Otherwise include Addon value
        '       AddonOptionExpandedConstructor = pass this to the bubble editor to create the the selectr
        '===================================================================================================
        '
        Public Sub csv_BuildAddonOptionLists(ByRef OptionString_ForObjectCall As String, ByRef AddonOptionExpandedConstructor As String, AddonOptionConstructor As String, addonOptionString As String, InstanceID As String, IncludeSettingsBubbleOptions As Boolean)
            On Error GoTo ErrorTrap 'Const Tn = "BuildAddonOptionLists": 'Dim th as integer: th = profileLogMethodEnter(Tn)
            '
            Dim SavePtr As Integer
            Dim InstanceTypes() As String
            Dim InstanceType As String
            Dim ConstructorTypes() As String
            Dim ConstructorType As String
            Dim ConstructorValue As String
            Dim ConstructorSelector As String
            Dim ConstructorName As String
            Dim ConstructorPtr As Integer
            Dim Pos As Integer
            Dim InstanceNameValues() As String
            Dim InstanceNames() As String
            Dim InstanceValues() As String
            Dim InstanceCnt As Integer
            Dim InstanceName As String
            Dim InstanceValue As String
            '
            Dim ConstructorNameValues() As String
            Dim ConstructorNames() As String
            Dim ConstructorSelectors() As String
            Dim ConstructorValues() As String
            '
            Dim IPtr As Integer
            Dim ConstructorCnt As Integer


            ConstructorCnt = 0
            If (AddonOptionConstructor <> "") Then
                '
                ' Initially Build Constructor from AddonOptions
                '
                ConstructorNameValues = Split(AddonOptionConstructor, vbCrLf)
                ConstructorCnt = UBound(ConstructorNameValues) + 1
                ReDim ConstructorNames(ConstructorCnt)
                ReDim ConstructorSelectors(ConstructorCnt)
                ReDim ConstructorValues(ConstructorCnt)
                ReDim ConstructorTypes(ConstructorCnt)
                SavePtr = 0
                For ConstructorPtr = 0 To ConstructorCnt - 1
                    ConstructorName = ConstructorNameValues(ConstructorPtr)
                    ConstructorSelector = ""
                    ConstructorValue = ""
                    ConstructorType = "text"
                    Pos = vbInstr(1, ConstructorName, "=")
                    If Pos > 1 Then
                        ConstructorValue = Mid(ConstructorName, Pos + 1)
                        ConstructorName = Trim(Left(ConstructorName, Pos - 1))
                        Pos = vbInstr(1, ConstructorValue, "[")
                        If Pos > 0 Then
                            ConstructorSelector = Mid(ConstructorValue, Pos)
                            ConstructorValue = Mid(ConstructorValue, 1, Pos - 1)
                        End If
                    End If
                    If ConstructorName <> "" Then
                        'Pos = vbInstr(1, ConstructorName, ",")
                        'If Pos > 1 Then
                        '    ConstructorType = Mid(ConstructorName, Pos + 1)
                        '    ConstructorName = Left(ConstructorName, Pos - 1)
                        'End If

                        ConstructorNames(SavePtr) = ConstructorName
                        ConstructorValues(SavePtr) = ConstructorValue
                        ConstructorSelectors(SavePtr) = ConstructorSelector
                        'ConstructorTypes(ConstructorPtr) = ConstructorType
                        SavePtr = SavePtr + 1
                    End If
                Next
                ConstructorCnt = SavePtr
            End If
            InstanceCnt = 0
            '
            ' Now update the values with Instance - if a name is not found, add it
            '
            If addonOptionString <> "" Then
                '
                InstanceNameValues = Split(addonOptionString, "&")
                InstanceCnt = UBound(InstanceNameValues) + 1
                ReDim InstanceNames(InstanceCnt - 1)
                ReDim InstanceValues(InstanceCnt - 1)

                ReDim InstanceTypes(InstanceCnt - 1)
                SavePtr = 0
                For IPtr = 0 To InstanceCnt - 1
                    InstanceName = InstanceNameValues(IPtr)
                    InstanceValue = ""
                    Pos = vbInstr(1, InstanceName, "=")
                    If Pos > 1 Then
                        InstanceValue = Mid(InstanceName, Pos + 1)
                        InstanceName = Trim(Left(InstanceName, Pos - 1))
                        Pos = vbInstr(1, InstanceValue, "[")
                        If Pos >= 1 Then
                            InstanceValue = Mid(InstanceValue, 1, Pos - 1)
                        End If
                    End If
                    If InstanceName <> "" Then
                        'Pos = vbInstr(1, InstanceName, ",")
                        'If Pos > 1 Then
                        '    InstanceType = Mid(InstanceName, Pos + 1)
                        '    InstanceName = Left(InstanceName, Pos - 1)
                        'End If
                        InstanceNames(SavePtr) = vbLCase(InstanceName)
                        InstanceValues(SavePtr) = InstanceValue
                        'InstanceTypes(IPtr) = InstanceType
                        '
                        ' if the name is not in the Constructor, add it
                        '
                        If ConstructorCnt > 0 Then
                            For ConstructorPtr = 0 To ConstructorCnt - 1
                                If vbLCase(InstanceName) = vbLCase(ConstructorNames(ConstructorPtr)) Then
                                    Exit For
                                End If
                            Next
                        End If
                        If ConstructorPtr >= ConstructorCnt Then
                            '
                            ' not found, add this instance name and value to the Constructor values
                            '
                            ReDim Preserve ConstructorNames(ConstructorCnt)
                            ReDim Preserve ConstructorValues(ConstructorCnt)
                            ReDim Preserve ConstructorSelectors(ConstructorCnt)
                            ConstructorNames(ConstructorCnt) = InstanceName
                            ConstructorValues(ConstructorCnt) = InstanceValue
                            ConstructorCnt = ConstructorCnt + 1
                        Else
                            '
                            ' found, set the ConstructorValue to the instance value
                            '
                            ConstructorValues(ConstructorPtr) = InstanceValue
                        End If
                        SavePtr = SavePtr + 1
                    End If
                Next
            End If
            AddonOptionExpandedConstructor = ""
            '
            ' Build output strings from name and value found
            '
            For ConstructorPtr = 0 To ConstructorCnt - 1
                ConstructorName = ConstructorNames(ConstructorPtr)
                ConstructorValue = ConstructorValues(ConstructorPtr)
                ConstructorSelector = ConstructorSelectors(ConstructorPtr)
                ' here goes nothing!!
                OptionString_ForObjectCall = OptionString_ForObjectCall & ConstructorName & "=" & ConstructorValue & "&"
                'OptionString_ForObjectCall = OptionString_ForObjectCall & csv_DecodeAddonOptionArgument(ConstructorName) & "=" & csv_DecodeAddonOptionArgument(ConstructorValue) & vbCrLf
                If IncludeSettingsBubbleOptions Then
                    AddonOptionExpandedConstructor = AddonOptionExpandedConstructor & vbCrLf & pageManager_GetAddonSelector(ConstructorName, ConstructorValue, ConstructorSelector)
                End If
            Next
            OptionString_ForObjectCall = OptionString_ForObjectCall & "InstanceID=" & InstanceID
            'If OptionString_ForObjectCall <> "" Then
            '    OptionString_ForObjectCall = Mid(OptionString_ForObjectCall, 1, Len(OptionString_ForObjectCall) - 1)
            '    'OptionString_ForObjectCall = Mid(OptionString_ForObjectCall, 1, Len(OptionString_ForObjectCall) - 2)
            'End If
            If AddonOptionExpandedConstructor <> "" Then
                AddonOptionExpandedConstructor = Mid(AddonOptionExpandedConstructor, 3)
            End If

            Exit Sub
            '
ErrorTrap:
            handleExceptionAndRethrow(New Exception("Unexpected exception"))
        End Sub
        '
        '=================================================================================================================
        '   csv_GetAddonOption
        '
        '   returns the value matching a given name in an AddonOptionConstructor
        '
        '   AddonOptionConstructor is a crlf delimited name=value[selector]descriptor list
        '
        '   See cpCoreClass.ExecuteAddon for a full description of:
        '       AddonOptionString
        '       AddonOptionConstructor
        '       AddonOptionNameValueList
        '       AddonOptionExpandedConstructor
        '=================================================================================================================
        '
        Public Function csv_GetAddonOption(OptionName As String, OptionString As String) As String
            On Error GoTo ErrorTrap 'Const Tn = "GetAddonOption": 'Dim th as integer: th = profileLogMethodEnter(Tn)
            '
            Dim WorkingString As String
            Dim iDefaultValue As String
            Dim NameLength As Integer
            Dim ValueStart As Integer
            Dim ValueEnd As Integer
            Dim IsQuoted As Boolean
            Dim Delimiter As String
            Dim Options() As String
            Dim Ptr As Integer
            Dim Pos As Integer
            Dim TestName As String
            Dim TargetName As String
            '
            WorkingString = OptionString
            csv_GetAddonOption = ""
            If WorkingString <> "" Then
                TargetName = vbLCase(OptionName)
                'targetName = vbLCase(encodeNvaArgument(OptionName))
                Options = Split(OptionString, "&")
                'Options = Split(OptionString, vbCrLf)
                For Ptr = 0 To UBound(Options)
                    Pos = vbInstr(1, Options(Ptr), "=")
                    If Pos > 0 Then
                        TestName = vbLCase(Trim(Left(Options(Ptr), Pos - 1)))
                        Do While (TestName <> "") And (Left(TestName, 1) = vbTab)
                            TestName = Trim(Mid(TestName, 2))
                        Loop
                        Do While (TestName <> "") And (Right(TestName, 1) = vbTab)
                            TestName = Trim(Mid(TestName, 1, Len(TestName) - 1))
                        Loop
                        If TestName = TargetName Then
                            csv_GetAddonOption = decodeNvaArgument(Trim(Mid(Options(Ptr), Pos + 1)))
                            'csv_GetAddonOption = Trim(Mid(Options(Ptr), Pos + 1))
                            Exit For
                        End If
                    End If

                Next
            End If
            '
            Exit Function
ErrorTrap:
            handleExceptionAndRethrow(New Exception("Unexpected exception"))
        End Function
        '
        '   Returns the next entry in the array, empty when there are no more
        '
        Public Function csv_GetEncodeContent_JavascriptOnLoad() As String
            On Error GoTo ErrorTrap 'Const Tn = "csv_GetEncodeContent_JavascriptOnLoad": 'Dim th as integer: th = profileLogMethodEnter(Tn)
            '
            Dim Ptr As Integer
            '
            If web_EncodeContent_JavascriptOnLoad_Cnt >= 0 Then
                For Ptr = 0 To web_EncodeContent_JavascriptOnLoad_Cnt - 1
                    If web_EncodeContent_JavascriptOnLoad(Ptr) <> "" Then
                        csv_GetEncodeContent_JavascriptOnLoad = web_EncodeContent_JavascriptOnLoad(Ptr)
                        web_EncodeContent_JavascriptOnLoad(Ptr) = ""
                        Exit For
                    End If
                Next
            End If
            '
            Exit Function
ErrorTrap:
            handleExceptionAndRethrow(New Exception("Unexpected exception"))
        End Function
        '
        '   Returns the next entry in the array, empty when there are no more
        '
        Public Function csv_GetEncodeContent_JavascriptBodyEnd() As String
            On Error GoTo ErrorTrap 'Const Tn = "csv_GetEncodeContent_JavascriptBodyEnd": 'Dim th as integer: th = profileLogMethodEnter(Tn)
            '
            Dim Ptr As Integer
            '
            If web_EncodeContent_JavascriptBodyEnd_cnt >= 0 Then
                For Ptr = 0 To web_EncodeContent_JavascriptBodyEnd_cnt - 1
                    If web_EncodeContent_JavascriptBodyEnd(Ptr) <> "" Then
                        csv_GetEncodeContent_JavascriptBodyEnd = web_EncodeContent_JavascriptBodyEnd(Ptr)
                        web_EncodeContent_JavascriptBodyEnd(Ptr) = ""
                        Exit For
                    End If
                Next
            End If
            '
            Exit Function
ErrorTrap:
            handleExceptionAndRethrow(New Exception("Unexpected exception"))
        End Function
        '
        '   Returns the next entry in the array, empty when there are no more
        '
        Public Function csv_GetEncodeContent_JSFilename() As String
            On Error GoTo ErrorTrap 'Const Tn = "csv_GetEncodeContent_JSFilename": 'Dim th as integer: th = profileLogMethodEnter(Tn)
            '
            Dim Ptr As Integer
            '
            If web_EncodeContent_JSFilename_Cnt >= 0 Then
                For Ptr = 0 To web_EncodeContent_JSFilename_Cnt - 1
                    If web_EncodeContent_JSFilename(Ptr) <> "" Then
                        csv_GetEncodeContent_JSFilename = web_EncodeContent_JSFilename(Ptr)
                        web_EncodeContent_JSFilename(Ptr) = ""
                        Exit For
                    End If
                Next
            End If
            '
            Exit Function
ErrorTrap:
            handleExceptionAndRethrow(New Exception("Unexpected exception"))
        End Function
        '
        '   Returns the next entry in the array, empty when there are no more
        '
        Public Function csv_GetEncodeContent_StyleFilenames() As String
            On Error GoTo ErrorTrap 'Const Tn = "csv_GetEncodeContent_StyleFilenames": 'Dim th as integer: th = profileLogMethodEnter(Tn)
            '
            Dim Ptr As Integer
            '
            If web_EncodeContent_StyleFilenames_Cnt >= 0 Then
                For Ptr = 0 To web_EncodeContent_StyleFilenames_Cnt - 1
                    If web_EncodeContent_StyleFilenames(Ptr) <> "" Then
                        csv_GetEncodeContent_StyleFilenames = web_EncodeContent_StyleFilenames(Ptr)
                        web_EncodeContent_StyleFilenames(Ptr) = ""
                        Exit For
                    End If
                Next
            End If
            '
            Exit Function
ErrorTrap:
            handleExceptionAndRethrow(New Exception("Unexpected exception"))
        End Function
        '
        '========================================================================================================
        ' Returns any head tags picked up during csv_EncodeContent that must be delivered in teh page
        '========================================================================================================
        '
        Public Function web_GetEncodeContent_HeadTags() As String
            '
            web_GetEncodeContent_HeadTags = web_EncodeContent_HeadTags
            web_EncodeContent_HeadTags = ""
            '
        End Function
        '
        '========================================================================================================
        '   Add a block on html to the head
        '       if this is called from cpCoreClass activeContent
        '       probably should find a better place in cpCoreClass to pick it up
        '       or screw it and maybe everything will migrate to one class anyway
        '       this was added to let contentCmdClass in aoPrimitives import an html file
        '       all the others (javascript, css, etc) may be added later if this works
        '========================================================================================================
        '
        Public Sub html_addHeadTags(headTags As String)
            web_EncodeContent_HeadTags = web_EncodeContent_HeadTags & vbCrLf & vbTab & headTags
        End Sub
        '
        ' ----- temp solution to convert error reporting without spending the time right now
        '
        Private Sub handleLegacyError25(MethodName As String, ErrDescription As String)
            Throw New ApplicationException(MethodName & ", " & ErrDescription)
        End Sub
        '
        ' ================================================================================================================
        '   Upgrade old objects in content, and update changed resource library images
        ' ================================================================================================================
        '
        Public Function html_EncodeContentUpgrades(Source As String) As String
            On Error GoTo ErrorTrap 'Const Tn = "EncodeContentUpgrades": 'Dim th as integer: th = profileLogMethodEnter(Tn)
            '
            'Dim hint As String
            Dim RecordVirtualPath As String
            Dim RecordVirtualFilename As String
            Dim RecordFilename As String
            Dim RecordFilenameNoExt As String
            Dim RecordFilenameExt As String
            Dim RecordFilenameAltSize As String
            Dim SizeTest() As String
            Dim RecordAltSizeList As String
            Dim TagPosEnd As Integer
            Dim TagPosStart As Integer
            Dim InTag As Boolean
            Dim Wrapper As String
            Dim AddonFound As Boolean
            Dim ACNameCaption As String
            Dim GroupIDList As String
            Dim IDControlString As String
            Dim IconIDControlString As String
            Dim Criteria As String
            Dim AddonContentName As String
            Dim SelectList As String
            Dim CSFields As Integer
            Dim IconWidth As Integer
            Dim IconHeight As Integer
            Dim IconSprites As Integer
            Dim IconIsInline As Boolean
            Dim IconAlt As String
            Dim IconTitle As String
            Dim IconImg As String
            'dim buildversion As String
            Dim Cmd As String
            Dim TextName As String
            Dim ACInstanceOptionList As String
            Dim SortFieldList As String
            Dim ListName As String
            Dim SortDirection As String
            Dim AllowGroupAccess As Boolean
            Dim LoopPtr As Integer
            Dim SrcOptionSelector As String
            Dim ResultOptionSelector As String
            Dim ContentName As String
            Dim SrcOptionList As String
            Dim Pos As Integer
            Dim list As String
            Dim FnArgList As String
            Dim FnArgs() As String
            Dim FnArgCnt As Integer
            Dim ContentCriteria As String
            Dim RecordName As String
            Dim REsultOptionValue As String
            Dim SrcOptionValueSelector As String
            Dim InstanceOptionValue As String
            Dim ResultOptionListHTMLEncoded As String
            Dim UCaseACName As String
            Dim IconFilename As String
            Dim FilenameSegment As String
            Dim EndPos1 As Integer
            Dim EndPos2 As Integer
            Dim LinkSplit() As String
            Dim LinkCnt As Integer
            Dim LinkPtr As Integer
            Dim TableSplit() As String
            Dim TableName As String
            Dim FieldName As String
            Dim RecordID As Integer
            Dim SQL As String
            Dim SaveChanges As Boolean
            Dim NextPosSpace As Integer
            Dim NextPosQuote As Integer
            Dim LinkEndPos As Integer
            Dim EndPos As Integer
            Dim Ptr As Integer
            Dim FilePrefixSegment As String
            Dim ElementPointer As Integer
            Dim ListCount As Integer
            Dim CSVisitor As Integer
            Dim CSVisit As Integer
            Dim CSChildList As Integer
            Dim CSVisitorSet As Boolean
            Dim CSVisitSet As Boolean
            'Dim ContextContentName As String
            'Dim ContextRecordID as integer
            Dim ElementTag As String
            Dim ElementName As String
            Dim ACType As String
            Dim ACField As String
            Dim ACName As String
            Dim ACBullet As Boolean
            'Dim ContextContactPeopleID as integer
            Dim Copy As String
            Dim LinkLabel As String
            Dim Overview As String
            'Dim CSContext as integer
            Dim KmaHTML As coreHtmlParseClass
            Dim AttributeCount As Integer
            Dim AttributePointer As Integer
            Dim Name As String
            Dim Value As String
            Dim JoinCriteria As String
            Dim CS As Integer
            'Dim FormattingContentID as integer
            Dim ACAttrRecordID As Integer
            Dim ACAttrWidth As Integer
            Dim ACAttrHeight As Integer
            Dim ACAttrAlt As String
            Dim ACAttrBorder As Integer
            Dim ACAttrLoop As Integer
            Dim ACAttrVSpace As Integer
            Dim ACAttrHSpace As Integer
            Dim Filename As String
            Dim ACAttrAlign As String
            Dim ProcessAnchorTags As Boolean
            Dim ProcessACTags As Boolean
            Dim SelectFieldList As String
            Dim ACLanguageName As String
            Dim Stream As coreFastStringClass
            Dim AnchorQuery As String
            '
            Dim CSOrganization As Integer
            Dim CSOrganizationSet As Boolean
            '
            Dim CSPeople As Integer
            Dim CSPeopleSet As Boolean
            '
            Dim CSlanguage As Integer
            Dim PeopleLanguageSet As Boolean
            Dim PeopleLanguage As String
            Dim UcasePeopleLanguage As String
            '
            Dim serverFilePath As String
            Dim ReplaceCount As Integer
            Dim ReplaceInstructions As String
            '
            Dim Link As String
            Dim NotUsedID As Integer
            Dim CSInstance As Integer
            Dim InstanceOptionList As String
            Dim InstanceOptionListHTMLEncoded As String
            Dim ProgramID As String
            Dim AggrObject As Object
            Dim OptionString As String
            Dim Options() As String
            Dim OptionCnt As Integer
            Dim OptionPtr As Integer
            Dim OptionPair() As String
            Dim OptionName As String
            Dim OptionValue As String
            Dim SrcOptions() As String
            Dim SrcOptionCnt As Integer
            Dim SrcOptionPtr As Integer
            Dim SrcOptionPair() As String
            Dim SrcOptionName As String
            Dim SrcOptionValue As String

            Dim FormCount As Integer
            Dim FormInputCount As Integer
            Dim CDef As coreMetaDataClass.CDefClass
            Dim FieldList As String
            Dim ImageAllowUpdate As Boolean
            Dim ContentFilesLinkPrefix As String
            Dim ResourceLibraryLinkPrefix As String
            Dim TestChr As String
            Dim ACInstanceID As String
            Dim ParseError As Boolean
            Dim PosStart As Integer
            Dim PosEnd As Integer
            Dim AllowGroups As String
            '
            ''hint = "csv_EncodeContentUpgrades enter"
            html_EncodeContentUpgrades = Source
            '
            ContentFilesLinkPrefix = "/" & appConfig.name & "/files/"
            ResourceLibraryLinkPrefix = ContentFilesLinkPrefix & "ccLibraryFiles/"
            ImageAllowUpdate = siteProperties.getBoolean("ImageAllowUpdate", True)
            ImageAllowUpdate = ImageAllowUpdate And (InStr(1, Source, ResourceLibraryLinkPrefix, vbTextCompare) <> 0)
            If ImageAllowUpdate Then
                '
                ' ----- Process Resource Library Images (swap in most current file)
                '
                '   There is a better way:
                '   problem with replacing the images is the problem with parsing - too much work to find it
                '   instead, use new replacement tags <ac type=image src="cclibraryfiles/filename/00001" width=0 height=0>
                '
                ''hint = hint & ",010"
                ParseError = False
                LinkSplit = Split(Source, ContentFilesLinkPrefix, , vbTextCompare)
                LinkCnt = UBound(LinkSplit) + 1
                For LinkPtr = 1 To LinkCnt - 1
                    '
                    ' Each LinkSplit(1...) is a segment that would have started with '/appname/files/'
                    ' Next job is to determine if this sement is in a tag (<img src="...">) or in content (&quot...&quote)
                    ' For now, skip the ones in content
                    '
                    ''hint = hint & ",020"
                    TagPosEnd = vbInstr(1, LinkSplit(LinkPtr), ">")
                    TagPosStart = vbInstr(1, LinkSplit(LinkPtr), "<")
                    If TagPosEnd = 0 And TagPosStart = 0 Then
                        '
                        ' no tags found, skip it
                        '
                        InTag = False
                    ElseIf TagPosEnd = 0 Then
                        '
                        ' no end tag, but found a start tag -> in content
                        '
                        InTag = False
                    ElseIf TagPosEnd < TagPosStart Then
                        '
                        ' Found end before start - > in tag
                        '
                        InTag = True
                    Else
                        '
                        ' Found start before end -> in content
                        '
                        InTag = False
                    End If
                    If InTag Then
                        ''hint = hint & ",030"
                        TableSplit = Split(LinkSplit(LinkPtr), "/")
                        If UBound(TableSplit) > 2 Then
                            TableName = TableSplit(0)
                            FieldName = TableSplit(1)
                            RecordID = EncodeInteger(TableSplit(2))
                            FilenameSegment = TableSplit(3)
                            If (LCase(TableName) = "cclibraryfiles") And (LCase(FieldName) = "filename") And (RecordID <> 0) Then
                                Dim lfRecordId As Integer
                                Dim lfPtr As Integer
                                Dim lfFilename As String
                                Dim lfAltSizeList As String
                                Dim lfWidth As Integer
                                Dim lfHeight As Integer
                                '
                                ''hint = hint & ",040"
                                Call cache_libraryFiles_loadIfNeeded()
                                ''hint = hint & ",050"
                                lfPtr = cache_libraryFilesIdIndex.getPtr(CStr(RecordID))
                                If (lfPtr >= 0) Then
                                    ''hint = hint & ",060"
                                    FieldName = "filename"
                                    'SQL = "select filename,altsizelist from " & TableName & " where id=" & RecordID
                                    'CS = app.csv_OpenCSSQL("default", SQL)
                                    'If app.csv_IsCSOK(CS) Then
                                    If True Then
                                        '
                                        ' now figure out how the link is delimited by how it starts
                                        '   go to the left and look for:
                                        '   ' ' - ignore spaces, continue forward until we find one of these
                                        '   '=' - means space delimited (src=/image.jpg), ends in ' ' or '>'
                                        '   '"' - means quote delimited (src="/image.jpg"), ends in '"'
                                        '   '>' - means this is not in an HTML tag - skip it (<B>image.jpg</b>)
                                        '   '<' - means god knows what, but its wrong, skip it
                                        '   '(' - means it is a URL(/image.jpg), go to ')'
                                        '
                                        ' odd cases:
                                        '   URL( /image.jpg) -
                                        '
                                        ''hint = hint & ",070"
                                        RecordVirtualFilename = EncodeText(cache_libraryFiles(LibraryFilesCache_filename, lfPtr))
                                        ''hint = hint & ",071"
                                        RecordAltSizeList = EncodeText(cache_libraryFiles(LibraryFilesCache_altsizelist, lfPtr))
                                        'RecordVirtualFilename = app.csv_GetCS(CS, FieldName)
                                        ''hint = hint & ",072"
                                        If RecordVirtualFilename = EncodeJavascript(RecordVirtualFilename) Then
                                            '
                                            ' The javascript version of the filename must match the filename, since we have no way
                                            ' of differentiating a ligitimate file, from a block of javascript. If the file
                                            ' contains an apostrophe, the original code could have encoded it, but we can not here
                                            ' so the best plan is to skip it
                                            '
                                            ' example:
                                            ' RecordVirtualFilename = "jay/files/cclibraryfiles/filename/000005/test.png"
                                            '
                                            ' RecordFilename = "test.png"
                                            ' RecordFilenameAltSize = "" (does not exist - the record has the raw filename in it)
                                            ' RecordFilenameExt = "png"
                                            ' RecordFilenameNoExt = "test"
                                            '
                                            ' RecordVirtualFilename = "jay/files/cclibraryfiles/filename/000005/test-100x200.png"
                                            ' this is a specail case - most cases to not have the alt size format saved in the filename
                                            ' RecordFilename = "test-100x200.png"
                                            ' RecordFilenameAltSize (does not exist - the record has the raw filename in it)
                                            ' RecordFilenameExt = "png"
                                            ' RecordFilenameNoExt = "test-100x200"
                                            ' this is wrong
                                            '   xRecordFilenameAltSize = "100x200"
                                            '   xRecordFilenameExt = "png"
                                            '   xRecordFilenameNoExt = "test"
                                            '
                                            ''hint = hint & ",080"
                                            Pos = InStrRev(RecordVirtualFilename, "/")
                                            If Pos > 0 Then
                                                RecordVirtualPath = Mid(RecordVirtualFilename, 1, Pos)
                                                RecordFilename = Mid(RecordVirtualFilename, Pos + 1)
                                            End If
                                            Pos = InStrRev(RecordFilename, ".")
                                            If Pos > 0 Then
                                                RecordFilenameExt = vbLCase(Mid(RecordFilename, Pos + 1))
                                                RecordFilenameNoExt = vbLCase(Mid(RecordFilename, 1, Pos - 1))
                                            End If
                                            'Pos = InStrRev(RecordFilenameNoExt, "-")
                                            'If Pos > 0 Then
                                            '    RecordFilenameAltSize = Mid(RecordFilenameNoExt, Pos + 1)
                                            '    SizeTest = Split(RecordFilenameAltSize, "x")
                                            '    If UBound(SizeTest) <> 1 Then
                                            '        RecordFilenameAltSize = ""
                                            '    Else
                                            '        If vbIsNumeric(SizeTest(0)) And vbIsNumeric(SizeTest(1)) Then
                                            '            RecordFilenameNoExt = Mid(RecordFilenameNoExt, 1, Pos - 1)
                                            '            'RecordFilenameNoExt = Mid(RecordFilename, 1, Pos - 1)
                                            '        Else
                                            '            RecordFilenameAltSize = ""
                                            '        End If
                                            '    End If
                                            'End If
                                            'RecordAltSizeList = app.csv_GetCS(CS, "altsizelist")
                                            FilePrefixSegment = LinkSplit(LinkPtr - 1)
                                            If Len(FilePrefixSegment) > 1 Then
                                                '
                                                ' Look into FilePrefixSegment and see if we are in the querystring attribute of an <AC tag
                                                '   if so, the filename may be AddonEncoded and delimited with & (so skip it)
                                                '
                                                ''hint = hint & ",090"
                                                Pos = InStrRev(FilePrefixSegment, "<")
                                                If Pos > 0 Then
                                                    If vbLCase(Mid(FilePrefixSegment, Pos + 1, 3)) <> "ac " Then
                                                        '
                                                        ' look back in the FilePrefixSegment to find the character before the link
                                                        '
                                                        EndPos = 0
                                                        For Ptr = Len(FilePrefixSegment) To 1 Step -1
                                                            TestChr = Mid(FilePrefixSegment, Ptr, 1)
                                                            Select Case TestChr
                                                                Case "="
                                                                    '
                                                                    ' Ends in ' ' or '>', find the first
                                                                    '
                                                                    EndPos1 = vbInstr(1, FilenameSegment, " ")
                                                                    EndPos2 = vbInstr(1, FilenameSegment, ">")
                                                                    If EndPos1 <> 0 And EndPos2 <> 0 Then
                                                                        If EndPos1 < EndPos2 Then
                                                                            EndPos = EndPos1
                                                                        Else
                                                                            EndPos = EndPos2
                                                                        End If
                                                                    ElseIf EndPos1 <> 0 Then
                                                                        EndPos = EndPos1
                                                                    ElseIf EndPos2 <> 0 Then
                                                                        EndPos = EndPos2
                                                                    Else
                                                                        EndPos = 0
                                                                    End If
                                                                    'If EndPos = 0 Then
                                                                    '    ParseError = True
                                                                    '    Exit For
                                                                    'Else
                                                                    '    TableSplit(0) = ""
                                                                    '    TableSplit(1) = ""
                                                                    '    TableSplit(2) = ""
                                                                    '    TableSplit(3) = Mid(FilenameSegment, EndPos)
                                                                    '    LinkSplit(LinkPtr) = encodeURL(RecordVirtualFilename) & Mid(Join(TableSplit, "/"), 4)
                                                                    '    SaveChanges = True
                                                                    'End If
                                                                    Exit For
                                                                Case """"
                                                                    '
                                                                    ' Quoted, ends is '"'
                                                                    '
                                                                    EndPos = vbInstr(1, FilenameSegment, """")
                                                                    'If EndPos <= 0 Then
                                                                    '    ParseError = True
                                                                    '    Exit For
                                                                    'Else
                                                                    '    TableSplit(0) = ""
                                                                    '    TableSplit(1) = ""
                                                                    '    TableSplit(2) = ""
                                                                    '    TableSplit(3) = Mid(FilenameSegment, EndPos)
                                                                    '    LinkSplit(LinkPtr) = encodeURL(RecordVirtualFilename) & Mid(Join(TableSplit, "/"), 4)
                                                                    '    SaveChanges = True
                                                                    'End If
                                                                    Exit For
                                                                Case "("
                                                                    '
                                                                    ' url() style, ends in ')' or a ' '
                                                                    '
                                                                    If vbLCase(Mid(FilePrefixSegment, Ptr, 7)) = "(&quot;" Then
                                                                        EndPos = vbInstr(1, FilenameSegment, "&quot;)")
                                                                    ElseIf vbLCase(Mid(FilePrefixSegment, Ptr, 2)) = "('" Then
                                                                        EndPos = vbInstr(1, FilenameSegment, "')")
                                                                    ElseIf vbLCase(Mid(FilePrefixSegment, Ptr, 2)) = "(""" Then
                                                                        EndPos = vbInstr(1, FilenameSegment, """)")
                                                                    Else
                                                                        EndPos = vbInstr(1, FilenameSegment, ")")
                                                                    End If

                                                                    'If EndPos <= 0 Then
                                                                    '    ParseError = True
                                                                    'Else
                                                                    '    TableSplit(0) = ""
                                                                    '    TableSplit(1) = ""
                                                                    '    TableSplit(2) = ""
                                                                    '    TableSplit(3) = Mid(FilenameSegment, EndPos)
                                                                    '    LinkSplit(LinkPtr) = encodeURL(RecordVirtualFilename) & Mid(Join(TableSplit, "/"), 4)
                                                                    '    SaveChanges = True
                                                                    'End If
                                                                    Exit For
                                                                Case "'"
                                                                    '
                                                                    ' Delimited within a javascript pair of apostophys
                                                                    '
                                                                    EndPos = vbInstr(1, FilenameSegment, "'")
                                                                    'If EndPos <= 0 Then
                                                                    '    ParseError = True
                                                                    '    Exit For
                                                                    'Else
                                                                    '    TableSplit(0) = ""
                                                                    '    TableSplit(1) = ""
                                                                    '    TableSplit(2) = ""
                                                                    '    TableSplit(3) = Mid(FilenameSegment, EndPos)
                                                                    '    LinkSplit(LinkPtr) = encodeURL(RecordVirtualFilename) & Mid(Join(TableSplit, "/"), 4)
                                                                    '    SaveChanges = True
                                                                    'End If
                                                                    Exit For
                                                                Case ">", "<"
                                                                    '
                                                                    ' Skip this link
                                                                    '
                                                                    ParseError = True
                                                                    Exit For
                                                            End Select
                                                        Next
                                                        '
                                                        ' check link
                                                        '
                                                        ''hint = hint & ",100"
                                                        If EndPos = 0 Then
                                                            ''hint = hint & ",110"
                                                            ParseError = True
                                                            'Call app.csv_CloseCS(CS)
                                                            Exit For
                                                        Else
                                                            Dim ImageFilename As String
                                                            Dim SegmentAfterImage As String

                                                            Dim ImageFilenameNoExt As String
                                                            Dim ImageFilenameExt As String
                                                            Dim ImageAltSize As String

                                                            ''hint = hint & ",120"
                                                            SegmentAfterImage = Mid(FilenameSegment, EndPos)
                                                            ImageFilename = DecodeResponseVariable(Mid(FilenameSegment, 1, EndPos - 1))
                                                            ImageFilenameNoExt = ImageFilename
                                                            ImageFilenameExt = ""
                                                            Pos = InStrRev(ImageFilename, ".")
                                                            If Pos > 0 Then
                                                                ImageFilenameNoExt = vbLCase(Mid(ImageFilename, 1, Pos - 1))
                                                                ImageFilenameExt = vbLCase(Mid(ImageFilename, Pos + 1))
                                                            End If
                                                            '
                                                            ' Get ImageAltSize
                                                            '
                                                            ''hint = hint & ",130"
                                                            ImageAltSize = ""
                                                            If ImageFilenameNoExt = RecordFilenameNoExt Then
                                                                '
                                                                ' Exact match
                                                                '
                                                            ElseIf vbInstr(1, ImageFilenameNoExt, RecordFilenameNoExt, vbTextCompare) <> 1 Then
                                                                '
                                                                ' There was a change and the recordfilename is not part of the imagefilename
                                                                '
                                                            Else
                                                                '
                                                                ' the recordfilename is the first part of the imagefilename - Get ImageAltSize
                                                                '
                                                                ImageAltSize = Mid(ImageFilenameNoExt, Len(RecordFilenameNoExt) + 1)
                                                                If Left(ImageAltSize, 1) <> "-" Then
                                                                    ImageAltSize = ""
                                                                Else
                                                                    ImageAltSize = Mid(ImageAltSize, 2)
                                                                    SizeTest = Split(ImageAltSize, "x")
                                                                    If UBound(SizeTest) <> 1 Then
                                                                        ImageAltSize = ""
                                                                    Else
                                                                        If vbIsNumeric(SizeTest(0)) And vbIsNumeric(SizeTest(1)) Then
                                                                            ImageFilenameNoExt = RecordFilenameNoExt
                                                                            'ImageFilenameNoExt = Mid(ImageFilenameNoExt, 1, Pos - 1)
                                                                            'RecordFilenameNoExt = Mid(RecordFilename, 1, Pos - 1)
                                                                        Else
                                                                            ImageAltSize = ""
                                                                        End If
                                                                    End If
                                                                End If
                                                            End If
                                                            '
                                                            ' problem - in the case where the recordfilename = img-100x200, the imagefilenamenoext is img
                                                            '
                                                            ''hint = hint & ",140"
                                                            If (RecordFilenameNoExt <> ImageFilenameNoExt) Or (RecordFilenameExt <> ImageFilenameExt) Then
                                                                '
                                                                ' There has been a change
                                                                '
                                                                Dim NewRecordFilename As String
                                                                Dim ImageHeight As Integer
                                                                Dim ImageWidth As Integer
                                                                NewRecordFilename = RecordVirtualPath & RecordFilenameNoExt & "." & RecordFilenameExt
                                                                '
                                                                ' realtime image updates replace without creating new size - that is for the edit interface
                                                                '
                                                                ' put the New file back into the tablesplit in case there are more then 4 splits
                                                                '
                                                                TableSplit(0) = ""
                                                                TableSplit(1) = ""
                                                                TableSplit(2) = ""
                                                                TableSplit(3) = SegmentAfterImage
                                                                NewRecordFilename = EncodeURL(NewRecordFilename) & Mid(Join(TableSplit, "/"), 4)
                                                                LinkSplit(LinkPtr) = NewRecordFilename
                                                                SaveChanges = True
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                    'Call app.csv_CloseCS(CS)
                                    ''hint = hint & ",900"
                                End If
                            End If
                        End If
                    End If
                    If ParseError Then
                        Exit For
                    End If
                Next
                ''hint = hint & ",910"
                If SaveChanges And (Not ParseError) Then
                    html_EncodeContentUpgrades = Join(LinkSplit, ContentFilesLinkPrefix)
                End If
            End If
            ''hint = hint & ",920"
            If Not ParseError Then
                '
                ' Convert ACTypeDynamicForm to Add-on
                '
                If vbInstr(1, html_EncodeContentUpgrades, "<ac type=""" & ACTypeDynamicForm, vbTextCompare) <> 0 Then
                    html_EncodeContentUpgrades = vbReplace(html_EncodeContentUpgrades, "type=""DYNAMICFORM""", "TYPE=""aggregatefunction""", 1, 99, vbTextCompare)
                    html_EncodeContentUpgrades = vbReplace(html_EncodeContentUpgrades, "name=""DYNAMICFORM""", "name=""DYNAMIC FORM""", 1, 99, vbTextCompare)
                End If
            End If
            ''hint = hint & ",930"
            If ParseError Then
                html_EncodeContentUpgrades = "" _
                    & vbCrLf & "<!-- warning: parsing aborted on ccLibraryFile replacement -->" _
                    & vbCrLf & html_EncodeContentUpgrades _
                    & vbCrLf & "<!-- /warning: parsing aborted on ccLibraryFile replacement -->"
            End If
            '
            ' {{content}} should be <ac type="templatecontent" etc>
            ' the merge is now handled in csv_EncodeActiveContent, but some sites have hand {{content}} tags entered
            '
            ''hint = hint & ",940"
            If vbInstr(1, html_EncodeContentUpgrades, "{{content}}", vbTextCompare) <> 0 Then
                html_EncodeContentUpgrades = vbReplace(html_EncodeContentUpgrades, "{{content}}", "<AC type=""" & ACTypeTemplateContent & """>", 1, 99, vbTextCompare)
            End If
            '
            'Call main_cpcore.testPoint(hint)
            '
            Exit Function
ErrorTrap:
            handleExceptionAndRethrow(New Exception("Unexpected exception"))
            'Call csv_HandleClassTrapError(Err.Number, Err.Source, Err.Description, "unknownMethodNameLegacyCall" & ", hint=[" & hint & "]", True)
        End Function
        '
        '
        '
        Public Sub image_ResizeImage2(SrcFilename As String, DstFilename As String, Width As Integer, Height As Integer, Algorithm As csv_SfImageResizeAlgorithms)
            On Error GoTo ErrorTrap 'Const Tn = "ResizeImage2": 'Dim th as integer: th = profileLogMethodEnter(Tn)
            '
            Dim sf As New coreImageEditClass
            '
            If Width = 0 And Height = 0 Then
                '
                ' error, do nothing but log
                '
                handleLegacyError3(appConfig.name, "Attempt to resize an image to 0,0. This is not allowed.", "dll", "cpCoreClass", "csv_ResizeImage2", ignoreInteger, "", "", False, True, "")
            Else
                If sf.load(SrcFilename) Then
                    If Width = 0 Then
                        sf.width = CInt(Int((sf.width * sf.height) / Height))
                        sf.height = Height
                    ElseIf Height = 0 Then
                        sf.height = CInt(Int((sf.height * sf.width) / Width))
                        sf.width = Width
                    Else
                        sf.height = Height
                        sf.width = Width
                    End If
                    Call sf.save(DstFilename)
                End If
            End If
            '
            Exit Sub
ErrorTrap:
            handleExceptionAndRethrow(New Exception("Unexpected exception"))
        End Sub
        '
        '
        '
        Public Sub image_ResizeImage(SrcFilename As String, DstFilename As String, Width As Integer, Height As Integer)
            Try
                Dim Algorithm As Integer
                '
                Algorithm = EncodeInteger(siteProperties.getText("ImageResizeSFAlgorithm", "5"))
                Call image_ResizeImage2(SrcFilename, DstFilename, Width, Height, DirectCast(Algorithm, csv_SfImageResizeAlgorithms))
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
        End Sub
        '
        '
        '
        Public Function email_getEmailStyles(ByVal EmailID As Integer) As String
            On Error GoTo ErrorTrap 'Const Tn = "getEmailStyles": 'Dim th as integer: th = profileLogMethodEnter(Tn)
            '
            email_getEmailStyles = html_getStyleSheet2(csv_contentTypeEnum.contentTypeEmail, 0, EncodeInteger(EmailID))
            If email_getEmailStyles <> "" Then
                email_getEmailStyles = "" _
                    & vbCrLf & StyleSheetStart _
                    & vbCrLf & email_getEmailStyles _
                    & vbCrLf & StyleSheetEnd
            End If
            '
            '
            Exit Function
ErrorTrap:
            handleExceptionAndRethrow(New Exception("Unexpected exception"))
        End Function
        ''
        ''====================================================================================================
        '''' <summary>
        '''' Serialize an object into a JSON string
        '''' </summary>
        '''' <param name="source"></param>
        '''' <returns></returns>
        'Public Function common_jsonSerialize(source As Object) As String
        '    Try
        '        Dim json As New System.Web.Script.Serialization.JavaScriptSerializer
        '        Return json.Serialize(source)
        '    Catch ex As Exception
        '        handleExceptionAndRethrow(ex)
        '        Return ""
        '    End Try
        'End Function
        ''
        ''====================================================================================================
        '''' <summary>
        '''' Deserialize as JSON string into a generic object
        '''' </summary>
        '''' <param name="Source"></param>
        '''' <returns></returns>
        'Public Function common_jsonDeserialize(Source As String) As Object
        '    Dim returnObj As Object = Nothing
        '    Try
        '        Dim json As New System.Web.Script.Serialization.JavaScriptSerializer
        '        returnObj = json.Deserialize(Of Object)(Source)
        '    Catch ex As Exception
        '        handleExceptionAndRethrow(ex)
        '    End Try
        '    Return returnObj
        'End Function
        '
        '=======================================================================================================
        '   deprecated, use csv_getStyleSheet2
        '=======================================================================================================
        '
        Public Function pageManager_GetStyleSheet2() As String
            pageManager_GetStyleSheet2 = html_getStyleSheet2(0, 0)
        End Function
        '
        '================================================================================================
        '   deprecated, use csv_getStyleSheet2
        '================================================================================================
        '
        Public Function csv_getStyleSheetProcessed() As String
            csv_getStyleSheetProcessed = html_getStyleSheet2(0, 0)
        End Function
        '
        '================================================================================================
        '   deprecated, feature not supported
        '================================================================================================
        '
        Public Function csv_ProcessStyleSheet(Source As String) As String
            csv_ProcessStyleSheet = Source
        End Function
        ''
        ''------------------------------------------------------------------------------------------------------------
        ''   encode an argument to be used in an addonOptionString
        ''       optionstring is "name = value &"
        ''       can be Arg0,Arg1,Arg2,Arg3,Name=Value&Name=Value[Option1|Option2]descriptor
        ''------------------------------------------------------------------------------------------------------------
        ''
        'Public Function encodeNvaArgument(Arg As String) As String
        '    encodeNvaArgument = encodeNvaArgument(Arg)
        'End Function
        ''
        ''------------------------------------------------------------------------------------------------------------
        ''   Decodes an argument parsed from an AddonOptionString for all non-allowed characters
        ''       AddonOptionString is a & delimited string of name=value[selector]descriptor
        ''------------------------------------------------------------------------------------------------------------
        ''
        'Public Function decodeNvaArgument(EncodedArg As String) As String
        '    decodeNvaArgument = decodeNvaArgument(EncodedArg)
        'End Function
        '
        '=================================================================================================================
        '   csv_GetAddonOptionStringValue
        '
        '   gets the value from a list matching the name
        '
        '   InstanceOptionstring is an "AddonEncoded" name=AddonEncodedValue[selector]descriptor&name=value string
        '=================================================================================================================
        '
        Public Function csv_GetAddonOptionStringValue(OptionName As String, addonOptionString As String) As String
            On Error GoTo ErrorTrap
            '
            Dim Pos As Integer
            Dim s As String
            '
            s = getSimpleNameValue(OptionName, addonOptionString, "", "&")
            Pos = vbInstr(1, s, "[")
            If Pos > 0 Then
                s = Left(s, Pos - 1)
            End If
            s = decodeNvaArgument(s)
            '
            csv_GetAddonOptionStringValue = Trim(s)
            '
            Exit Function
ErrorTrap:
            handleLegacyError3("", "", "dll", "ccCommonModule", "csv_GetAddonOptionStringValue", Err.Number, Err.Source, Err.Description, True, False, "")
        End Function
        '
        '================================================================================================
        '   see csv_reportWarning2
        '================================================================================================
        '
        Public Function csv_reportWarning(Name As String, Description As String, generalKey As String, specificKey As String) As String
            Call csv_reportWarning2(Name, Left(Description, 250), "", 0, Description, generalKey, specificKey)
        End Function
        '
        '================================================================================================
        '   Report Warning
        '       A warning is logged in the site warnings log
        '           name - a generic description of the warning
        '               "bad link found on page"
        '           short description - a <255 character cause
        '               "bad link http://thisisabadlink.com"
        '           location - the URL, service or process that caused the problem
        '               "http://goodpageThankHasBadLink.com"
        '           pageid - the record id of the bad page.
        '               "http://goodpageThankHasBadLink.com"
        '           description - a specific description
        '               "link to http://www.this.com/pagename was found on http://www.this.com/About-us"
        '           generalKey - a generic string that describes the warning. the warning report
        '               will display one line for each generalKey (name matches guid)
        '               like "bad link"
        '           specificKey - a string created by the addon logging so it does not continue to log exactly the
        '               same warning over and over. If there are 100 different link not found warnings,
        '               there should be 100 entires with the same guid and name, but 100 different keys. If the
        '               an identical key is found the count increments.
        '               specifickey is like "link to http://www.this.com/pagename was found on http://www.this.com/About-us"
        '           count - the number of times the key was attempted to add. "This error was reported 100 times"
        '================================================================================================
        '
        Public Function csv_reportWarning2(Name As String, shortDescription As String, location As String, PageID As Integer, Description As String, generalKey As String, specificKey As String) As String
            '
            Dim SQL As String
            'dim dt as datatable
            Dim warningId As Integer
            Dim CS As Integer
            '
            warningId = 0
            SQL = "select top 1 ID from ccSiteWarnings" _
                & " where (generalKey=" & db.encodeSQLText(generalKey) & ")" _
                & " and(specificKey=" & db.encodeSQLText(specificKey) & ")" _
                & ""
            Dim dt As DataTable
            dt = db.executeSql(SQL)
            If dt.Rows.Count > 0 Then
                warningId = EncodeInteger(dt.Rows(0).Item("id"))
            End If
            '
            If warningId <> 0 Then
                '
                ' increment count for matching warning
                '
                SQL = "update ccsitewarnings set count=count+1,DateLastReported=" & db.encodeSQLDate(Now()) & " where id=" & warningId
                Call db.executeSql(SQL)
            Else
                '
                ' insert new record
                '
                CS = db.cs_insertRecord("Site Warnings", 0)
                If db.cs_Ok(CS) Then
                    Call db.cs_set(CS, "name", Name)
                    Call db.cs_set(CS, "description", Description)
                    Call db.cs_set(CS, "generalKey", generalKey)
                    Call db.cs_set(CS, "specificKey", specificKey)
                    Call db.cs_set(CS, "count", 1)
                    Call db.cs_set(CS, "DateLastReported", Now())
                    If True Then
                        Call db.cs_set(CS, "shortDescription", shortDescription)
                        Call db.cs_set(CS, "location", location)
                        Call db.cs_set(CS, "pageId", PageID)
                    End If
                End If
                Call db.cs_Close(CS)
            End If
            '
        End Function
        '
        '================================================================================================
        '   csv_reportAlarm
        '       Saves the error message in a file in the Alarms folder, which will set off the server alarm
        '================================================================================================
        '
        Public Sub csv_reportAlarm(Cause As String)
            Call log_appendLog(Cause, "Alarms", "alarm")
        End Sub
        ''
        ''------------------------------------------------------------------------------------------------------------
        ''   encode an argument to be used in a 'name=value&' string
        ''       - ohter characters are reserved to do further parsing, see encodeNvaArgument
        ''------------------------------------------------------------------------------------------------------------
        ''
        'Public Function encodeNvaArgument(Arg As String) As String
        '    encodeNvaArgument = encodeNvaArgument(Arg)
        'End Function
        ''
        ''------------------------------------------------------------------------------------------------------------
        ''   decode an argument that came from parsing a name or value from a 'name=value&' string
        ''       split on '&', then on '=', then decode each of the two arguments from either side
        ''       - other characters are reserved to do further parsing, see encodeNvaArgument
        ''------------------------------------------------------------------------------------------------------------
        ''
        'Public Function decodeNvaArgument(EncodedArg As String) As String
        '    decodeNvaArgument = decodeNvaArgument(EncodedArg)
        'End Function

        '
        '=================================================================================================================================================
        '   csv_addLinkAlias
        '
        '   Link Alias
        '       A LinkAlias name is a unique string that identifies a page on the site.
        '       A page on the site is generated from the PageID, and the QueryStringSuffix
        '       PageID - obviously, this is the ID of the page
        '       QueryStringSuffix - other things needed on the Query to display the correct content.
        '           The Suffix is needed in cases like when an Add-on is embedded in a page. The URL to that content becomes the pages
        '           Link, plus the suffix needed to find the content.
        '
        '       When you make the menus, look up the most recent Link Alias entry with the pageID, and a blank QueryStringSuffix
        '
        '   The Link Alias table no longer needs the Link field.
        '
        '=================================================================================================================================================
        '
        ' +++++ 9/8/2011 4.1.482, added csv_addLinkAlias to csv and changed main to call
        '
        Public Sub app_addLinkAlias(linkAlias As String, PageID As Integer, QueryStringSuffix As String)
            Dim return_ignoreError As String = ""
            Call app_addLinkAlias2(linkAlias, PageID, QueryStringSuffix, True, False, return_ignoreError)
        End Sub
        '
        ' +++++ 9/8/2011 4.1.482, added csv_addLinkAlias to csv and changed main to call
        '
        Public Sub app_addLinkAlias2(linkAlias As String, PageID As Integer, QueryStringSuffix As String, OverRideDuplicate As Boolean, DupCausesWarning As Boolean, ByRef return_WarningMessage As String)
            On Error GoTo ErrorTrap
            '
            Const SafeString = "0123456789abcdefghijklmnopqrstuvwxyz-_/."
            '
            Dim Ptr As Integer
            Dim TestChr As String
            Dim Src As String
            Dim FieldList As String
            Dim LinkAliasPageID As Integer
            Dim PageContentCID As Integer
            Dim WorkingLinkAlias As String
            Dim CS As Integer
            Dim LoopCnt As Integer
            'Dim fs As New fileSystemClass
            Dim FolderCheck As String
            Dim SQL As String
            Dim AllowLinkAlias As Boolean
            'dim buildversion As String
            '
            If (True) Then
                AllowLinkAlias = siteProperties.getBoolean("allowLinkAlias", False)
                WorkingLinkAlias = linkAlias
                If (WorkingLinkAlias <> "") Then
                    '
                    ' remove nonsafe URL characters
                    '
                    Src = WorkingLinkAlias
                    Src = vbReplace(Src, "’", "'")
                    Src = vbReplace(Src, vbTab, " ")
                    WorkingLinkAlias = ""
                    For Ptr = 1 To Len(Src) + 1
                        TestChr = Mid(Src, Ptr, 1)
                        If vbInstr(1, SafeString, TestChr, vbTextCompare) <> 0 Then
                        Else
                            TestChr = vbTab
                        End If
                        WorkingLinkAlias = WorkingLinkAlias & TestChr
                    Next
                    Ptr = 0
                    Do While vbInstr(1, WorkingLinkAlias, vbTab & vbTab) <> 0 And (Ptr < 100)
                        WorkingLinkAlias = vbReplace(WorkingLinkAlias, vbTab & vbTab, vbTab)
                        Ptr = Ptr + 1
                    Loop
                    If Right(WorkingLinkAlias, 1) = vbTab Then
                        WorkingLinkAlias = Mid(WorkingLinkAlias, 1, Len(WorkingLinkAlias) - 1)
                    End If
                    If Left(WorkingLinkAlias, 1) = vbTab Then
                        WorkingLinkAlias = Mid(WorkingLinkAlias, 2)
                    End If
                    WorkingLinkAlias = vbReplace(WorkingLinkAlias, vbTab, "-")
                    If (WorkingLinkAlias <> "") Then
                        '
                        ' Make sure there is not a folder or page in the wwwroot that matches this Alias
                        '
                        If Left(WorkingLinkAlias, 1) <> "/" Then
                            WorkingLinkAlias = "/" & WorkingLinkAlias
                        End If
                        '
                        If vbLCase(WorkingLinkAlias) = vbLCase("/" & appConfig.name) Then
                            '
                            ' This alias points to the cclib folder
                            '
                            If AllowLinkAlias Then
                                return_WarningMessage = "" _
                                    & "The Link Alias being created (" & WorkingLinkAlias & ") can not be used because there is a virtual directory in your website directory that already uses this name." _
                                    & " Please change it to ensure the Link Alias is unique. To set or change the Link Alias, use the Link Alias tab and select a name not used by another page."
                            End If
                        ElseIf vbLCase(WorkingLinkAlias) = "/cclib" Then
                            '
                            ' This alias points to the cclib folder
                            '
                            If AllowLinkAlias Then
                                return_WarningMessage = "" _
                                    & "The Link Alias being created (" & WorkingLinkAlias & ") can not be used because there is a virtual directory in your website directory that already uses this name." _
                                    & " Please change it to ensure the Link Alias is unique. To set or change the Link Alias, use the Link Alias tab and select a name not used by another page."
                            End If
                        ElseIf appRootFiles.pathExists(serverConfig.clusterPath & appConfig.appRootFilesPath & "\" & Mid(WorkingLinkAlias, 2)) Then
                            '
                            ' This alias points to a different link, call it an error
                            '
                            If AllowLinkAlias Then
                                return_WarningMessage = "" _
                                    & "The Link Alias being created (" & WorkingLinkAlias & ") can not be used because there is a folder in your website directory that already uses this name." _
                                    & " Please change it to ensure the Link Alias is unique. To set or change the Link Alias, use the Link Alias tab and select a name not used by another page."
                            End If
                        Else
                            '
                            ' Make sure there is one here for this
                            '
                            If True Then
                                FieldList = "Name,PageID,QueryStringSuffix"
                            Else
                                '
                                ' must be > 33914 to run this routine
                                '
                                FieldList = "Name,PageID,'' as QueryStringSuffix"
                            End If
                            CS = db.csOpen("Link Aliases", "name=" & db.encodeSQLText(WorkingLinkAlias), , , , , , FieldList)
                            If Not db.cs_Ok(CS) Then
                                '
                                ' Alias not found, create a Link Aliases
                                '
                                Call db.cs_Close(CS)
                                CS = db.cs_insertRecord("Link Aliases", 0)
                                If db.cs_Ok(CS) Then
                                    Call db.cs_set(CS, "Name", WorkingLinkAlias)
                                    'Call app.csv_SetCS(CS, "Link", Link)
                                    Call db.cs_set(CS, "Pageid", PageID)
                                    If True Then
                                        Call db.cs_set(CS, "QueryStringSuffix", QueryStringSuffix)
                                    End If
                                End If
                            Else
                                '
                                ' Alias found, verify the pageid & QueryStringSuffix
                                '
                                Dim CurrentLinkAliasID As Integer
                                Dim resaveLinkAlias As Boolean
                                Dim CS2 As Integer
                                LinkAliasPageID = db.cs_getInteger(CS, "pageID")
                                If (db.cs_getText(CS, "QueryStringSuffix").ToLower = QueryStringSuffix.ToLower) And (PageID = LinkAliasPageID) Then
                                    '
                                    ' it maches a current entry for this link alias, if the current entry is not the highest number id,
                                    '   remove it and add this one
                                    '
                                    CurrentLinkAliasID = db.cs_getInteger(CS, "id")
                                    CS2 = db.db_openCsSql_rev("default", "select top 1 id from ccLinkAliases where pageid=" & LinkAliasPageID & " order by id desc")
                                    If db.cs_Ok(CS2) Then
                                        resaveLinkAlias = (CurrentLinkAliasID <> db.cs_getInteger(CS2, "id"))
                                    End If
                                    Call db.cs_Close(CS2)
                                    If resaveLinkAlias Then
                                        Call db.executeSql("delete from ccLinkAliases where id=" & CurrentLinkAliasID)
                                        Call db.cs_Close(CS)
                                        CS = db.cs_insertRecord("Link Aliases", 0)
                                        If db.cs_Ok(CS) Then
                                            Call db.cs_set(CS, "Name", WorkingLinkAlias)
                                            Call db.cs_set(CS, "Pageid", PageID)
                                            If True Then
                                                Call db.cs_set(CS, "QueryStringSuffix", QueryStringSuffix)
                                            End If
                                        End If
                                    End If
                                Else
                                    '
                                    ' Does not match, this is either a change, or a duplicate that needs to be blocked
                                    '
                                    If OverRideDuplicate Then
                                        '
                                        ' change the Link Alias to the new link
                                        '
                                        'Call app.csv_SetCS(CS, "Link", Link)
                                        Call db.cs_set(CS, "Pageid", PageID)
                                        If True Then
                                            Call db.cs_set(CS, "QueryStringSuffix", QueryStringSuffix)
                                        End If
                                    ElseIf AllowLinkAlias Then
                                        '
                                        ' This alias points to a different link, and link aliasing is in use, call it an error (but save record anyway)
                                        '
                                        If DupCausesWarning Then
                                            If LinkAliasPageID = 0 Then '
                                                PageContentCID = metaData.getContentId("Page Content")
                                                return_WarningMessage = "" _
                                                    & "This page has been saved, but the Link Alias could not be created (" & WorkingLinkAlias & ") because it is already in use for another page." _
                                                    & " To use Link Aliasing (friendly page names) for this page, the Link Alias value must be unique on this site. To set or change the Link Alias, clicke the Link Alias tab and select a name not used by another page or a folder in your website."
                                            Else
                                                PageContentCID = metaData.getContentId("Page Content")
                                                return_WarningMessage = "" _
                                                    & "This page has been saved, but the Link Alias could not be created (" & WorkingLinkAlias & ") because it is already in use for another page (<a href=""?af=4&cid=" & PageContentCID & "&id=" & LinkAliasPageID & """>edit</a>)." _
                                                    & " To use Link Aliasing (friendly page names) for this page, the Link Alias value must be unique. To set or change the Link Alias, click the Link Alias tab and select a name not used by another page or a folder in your website."
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                            Call db.cs_Close(CS)
                            Call cache_linkAlias_clear()
                        End If
                    End If
                End If
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "csv_addLinkAlias", True)
        End Sub
        '
        ' To support the special case when the template calls this to encode itself, and the page content has already been rendered.
        '
        Public Function html_encodeContent10(Source As String, personalizationPeopleId As Integer, ContextContentName As String, ContextRecordID As Integer, ContextContactPeopleID As Integer, PlainText As Boolean, AddLinkEID As Boolean, EncodeActiveFormatting As Boolean, EncodeActiveImages As Boolean, EncodeActiveEditIcons As Boolean, EncodeActivePersonalization As Boolean, queryStringForLinkAppend As String, ProtocolHostString As String, IsEmailContent As Boolean, ignore_DefaultWrapperID As Integer, ignore_TemplateCaseOnly_Content As String, Context As addonContextEnum, personalizationIsAuthenticated As Boolean, nothingObject As Object, isEditingAnything As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("EncodeContent9")
            '
            Const StartFlag = "<!-- ADDON"
            Const EndFlag = " -->"
            '
            Dim DoAnotherPass As Boolean
            Dim returnValue As String
            Dim ArgCnt As Integer
            Dim AddonGuid As String
            Dim AddonStatusOK As Boolean
            Dim SortMethodID As Integer
            Dim SortMethod As String
            Dim ACInstanceID As String
            Dim ArgSplit() As String
            Dim AddonName As String
            Dim addonOptionString As String
            Dim LineStart As Integer
            Dim FormSetName As String
            'Dim RecordID as integer
            Dim ContentID As Integer
            'Dim ContentName As String
            'Dim ContactMemberID as integer
            Dim Instruction As String
            Dim LineEnd As Integer
            Dim InstrSplit As Object
            Dim AggrObject As Object
            Dim Copy As String
            Dim OptionString As String
            Dim Wrapper() As String
            Dim Stream As String
            Dim SegmentSplit() As String
            Dim AcCmd As String
            Dim SegmentPrefix As String
            Dim SegmentSuffix As String
            Dim AcCmdSplit() As String
            Dim ACType As String
            'Dim AcCmdArgs As String
            Dim ContentSplit() As String
            Dim ContentSplitCnt As Integer
            Dim Segment As String
            Dim Ptr As Integer
            'Dim ContentFound as integer
            Dim CopyName As String
            'Dim CSContext as integer
            Dim AggregateObjectName As String
            Dim ListName As String
            Dim SortField As String
            Dim SortReverse As Boolean
            Dim ACName As String
            Dim Obj As Object
            Dim hint As String
            Dim AdminURL As String
            '
            Dim converthtmlToText As coreHtmlToTextClass
            Dim Pos As Integer
            Dim LayoutEngineOptionString As String
            Dim LayoutErrorMessage As String
            '
            ' if personalizationPeopleId is 0, set it to the current user
            '
            Dim iPersonalizationPeopleId As Integer
            iPersonalizationPeopleId = personalizationPeopleId
            If iPersonalizationPeopleId = 0 Then
                iPersonalizationPeopleId = user.id
            End If
            '
            returnValue = Source
            'hint = "csv_EncodeContent9 enter"
            If returnValue <> "" Then
                AdminURL = siteProperties.adminURL
                '
                '--------
                ' cut-paste from csv_EncodeContent8
                '--------
                '
                ' ----- Do EncodeCRLF Conversion
                '
                'hint = hint & ",010"
                If siteProperties.getBoolean("ConvertContentCRLF2BR", False) And (Not PlainText) Then
                    returnValue = vbReplace(returnValue, vbCr, "")
                    returnValue = vbReplace(returnValue, vbLf, "<br>")
                End If
                '
                ' ----- Do upgrade conversions (upgrade legacy objects and upgrade old images)
                '
                'hint = hint & ",020"
                returnValue = html_EncodeContentUpgrades(returnValue)
                '
                ' ----- Do Active Content Conversion
                '
                'hint = hint & ",030"
                If (AddLinkEID Or EncodeActiveFormatting Or EncodeActiveImages Or EncodeActiveEditIcons) Then
                    returnValue = html_EncodeActiveContent_Internal(returnValue, iPersonalizationPeopleId, ContextContentName, ContextRecordID, ContextContactPeopleID, AddLinkEID, EncodeActiveFormatting, EncodeActiveImages, EncodeActiveEditIcons, EncodeActivePersonalization, queryStringForLinkAppend, ProtocolHostString, IsEmailContent, AdminURL, personalizationIsAuthenticated, Context)
                End If
                '
                ' ----- Do Plain Text Conversion
                '
                'hint = hint & ",040"
                If PlainText Then
                    converthtmlToText = New coreHtmlToTextClass(Me)
                    returnValue = converthtmlToText.convert(returnValue)
                    converthtmlToText = Nothing
                End If
                '
                ' Process Active Content that must be run here to access webclass objects
                '     parse as {{functionname?querystring}}
                '
                'hint = hint & ",110"
                If (Not EncodeActiveEditIcons) And (InStr(1, returnValue, "{{") <> 0) Then
                    ContentSplit = Split(returnValue, "{{")
                    returnValue = ""
                    ContentSplitCnt = UBound(ContentSplit) + 1
                    Ptr = 0
                    Do While Ptr < ContentSplitCnt
                        'hint = hint & ",200"
                        Segment = ContentSplit(Ptr)
                        If Ptr = 0 Then
                            '
                            ' Add in the non-command text that is before the first command
                            '
                            returnValue = returnValue & Segment
                        ElseIf (Segment <> "") Then
                            If vbInstr(1, Segment, "}}") = 0 Then
                                '
                                ' No command found, return the marker and deliver the Segment
                                '
                                'hint = hint & ",210"
                                returnValue = returnValue & "{{" & Segment
                            Else
                                '
                                ' isolate the command
                                '
                                'hint = hint & ",220"
                                SegmentSplit = Split(Segment, "}}")
                                AcCmd = SegmentSplit(0)
                                SegmentSplit(0) = ""
                                SegmentSuffix = Mid(Join(SegmentSplit, "}}"), 3)
                                If Trim(AcCmd) <> "" Then
                                    '
                                    ' isolate the arguments
                                    '
                                    'hint = hint & ",230"
                                    AcCmdSplit = Split(AcCmd, "?")
                                    ACType = Trim(AcCmdSplit(0))
                                    If UBound(AcCmdSplit) = 0 Then
                                        addonOptionString = ""
                                    Else
                                        addonOptionString = AcCmdSplit(1)
                                        addonOptionString = decodeHtml(addonOptionString)
                                    End If
                                    '
                                    ' execute the command
                                    '
                                    Select Case vbUCase(ACType)
                                        Case ACTypeDynamicForm
                                            '
                                            ' Dynamic Form - run the core addon replacement instead
                                            '
                                            'hint = hint & ",310"
                                            returnValue = returnValue & executeAddon(0, DynamicFormGuid, addonOptionString, addonContextEnum.ContextPage, ContextContentName, ContextRecordID, "", "", False, ignore_DefaultWrapperID, "", AddonStatusOK, Nothing, "", Nothing, "", iPersonalizationPeopleId, personalizationIsAuthenticated)
                                        Case ACTypeChildList
                                            '
                                            ' Child Page List
                                            '
                                            'hint = hint & ",320"
                                            ListName = csv_GetAddonOption("name", addonOptionString)
                                            returnValue = returnValue & main_GetChildPageList(ListName, ContextContentName, ContextRecordID, True)
                                        Case ACTypeTemplateText
                                            '
                                            ' Text Box = copied here from gethtmlbody
                                            '
                                            CopyName = csv_GetAddonOption("new", addonOptionString)
                                            If CopyName = "" Then
                                                CopyName = csv_GetAddonOption("name", addonOptionString)
                                                If CopyName = "" Then
                                                    CopyName = "Default"
                                                End If
                                            End If
                                            returnValue = returnValue & html_GetContentCopy(CopyName, "", iPersonalizationPeopleId, False, personalizationIsAuthenticated)
                                        Case ACTypeDynamicMenu
                                            '
                                            ' Dynamic Menu
                                            '
                                            'hint = hint & ",320"
                                            returnValue = returnValue & pageManager_GetDynamicMenu(addonOptionString, siteProperties.useContentWatchLink)
                                        Case ACTypeWatchList
                                            '
                                            ' Watch List
                                            '
                                            'hint = hint & ",330"
                                            ListName = csv_GetAddonOption("LISTNAME", addonOptionString)
                                            SortField = csv_GetAddonOption("SORTFIELD", addonOptionString)
                                            SortReverse = EncodeBoolean(csv_GetAddonOption("SORTDIRECTION", addonOptionString))
                                            returnValue = returnValue & main_GetWatchList(ListName, SortField, SortReverse)
                                        Case Else
                                            '
                                            ' Unrecognized command - put all the syntax back in
                                            '
                                            'hint = hint & ",340"
                                            returnValue = returnValue & "{{" & AcCmd & "}}"
                                    End Select
                                End If
                                '
                                ' add the SegmentSuffix back on
                                '
                                returnValue = returnValue & SegmentSuffix
                            End If
                        End If
                        '
                        ' Encode into Javascript if required
                        '
                        Ptr = Ptr + 1
                    Loop
                End If
                '
                ' Process Addons
                '   parse as <!-- Addon "Addon Name","OptionString" -->
                '   They are handled here because Addons are written against cpCoreClass, not the Content Server class
                '   ...so Group Email can not process addons 8(
                '   Later, remove the csv routine that translates <ac to this, and process it directly right here
                '   Later, rewrite so addons call csv, not cpCoreClass, so email processing can include addons
                ' (2/16/2010) - move csv_EncodeContent to csv, or wait and move it all to CP
                '    eventually, everything should migrate to csv and/or cp to eliminate the cpCoreClass dependancy
                '    and all add-ons run as processes the same as they run on pages, or as remote methods
                ' (2/16/2010) - if <!-- AC --> has four arguments, the fourth is the addon guid
                '
                If (InStr(1, returnValue, StartFlag) <> 0) Then
                    Do While (InStr(1, returnValue, StartFlag) <> 0)
                        LineStart = vbInstr(1, returnValue, StartFlag)
                        LineEnd = vbInstr(LineStart, returnValue, EndFlag)
                        If LineEnd = 0 Then
                            log_appendLog("csv_EncodeContent9, Addon could not be inserted into content because the HTML comment holding the position is not formated correctly")
                            Exit Do
                        Else
                            AddonName = ""
                            addonOptionString = ""
                            ACInstanceID = ""
                            AddonGuid = ""
                            Copy = Mid(returnValue, LineStart + 11, LineEnd - LineStart - 11)
                            ArgSplit = SplitDelimited(Copy, ",")
                            ArgCnt = UBound(ArgSplit) + 1
                            If ArgSplit(0) <> "" Then
                                AddonName = Mid(ArgSplit(0), 2, Len(ArgSplit(0)) - 2)
                                If ArgCnt > 1 Then
                                    If ArgSplit(1) <> "" Then
                                        addonOptionString = Mid(ArgSplit(1), 2, Len(ArgSplit(1)) - 2)
                                        addonOptionString = decodeHtml(Trim(addonOptionString))
                                    End If
                                    If ArgCnt > 2 Then
                                        If ArgSplit(2) <> "" Then
                                            ACInstanceID = Mid(ArgSplit(2), 2, Len(ArgSplit(2)) - 2)
                                        End If
                                        If ArgCnt > 3 Then
                                            If ArgSplit(3) <> "" Then
                                                AddonGuid = Mid(ArgSplit(3), 2, Len(ArgSplit(3)) - 2)
                                            End If
                                        End If
                                    End If
                                End If
                                ' dont have any way of getting fieldname yet
                                If AddonGuid <> "" Then
                                    Copy = executeAddon(0, AddonGuid, addonOptionString, addonContextEnum.ContextPage, ContextContentName, ContextRecordID, "", ACInstanceID, False, ignore_DefaultWrapperID, ignore_TemplateCaseOnly_Content, AddonStatusOK, Nothing, "", Nothing, "", iPersonalizationPeopleId, personalizationIsAuthenticated)
                                Else
                                    Copy = executeAddon(0, AddonName, addonOptionString, addonContextEnum.ContextPage, ContextContentName, ContextRecordID, "", ACInstanceID, False, ignore_DefaultWrapperID, ignore_TemplateCaseOnly_Content, AddonStatusOK, Nothing, "", Nothing, "", iPersonalizationPeopleId, personalizationIsAuthenticated)
                                End If
                            End If
                        End If
                        returnValue = Mid(returnValue, 1, LineStart - 1) & Copy & Mid(returnValue, LineEnd + 4)
                    Loop
                End If
                '
                ' process out text block comments inserted by addons
                ' remove all content between BlockTextStartMarker and the next BlockTextEndMarker, or end of copy
                ' exception made for the content with just the startmarker because when the AC tag is replaced with
                ' with the marker, encode content is called with the result, which is just the marker, and this
                ' section will remove it
                '
                If (Not isEditingAnything) And (returnValue <> BlockTextStartMarker) Then
                    DoAnotherPass = True
                    Do While (InStr(1, returnValue, BlockTextStartMarker, vbTextCompare) <> 0) And DoAnotherPass
                        LineStart = vbInstr(1, returnValue, BlockTextStartMarker, vbTextCompare)
                        If LineStart = 0 Then
                            DoAnotherPass = False
                        Else
                            LineEnd = vbInstr(LineStart, returnValue, BlockTextEndMarker, vbTextCompare)
                            If LineEnd <= 0 Then
                                DoAnotherPass = False
                                returnValue = Mid(returnValue, 1, LineStart - 1)
                            Else
                                LineEnd = vbInstr(LineEnd, returnValue, " -->")
                                If LineEnd <= 0 Then
                                    DoAnotherPass = False
                                Else
                                    returnValue = Mid(returnValue, 1, LineStart - 1) & Mid(returnValue, LineEnd + 4)
                                    'returnValue = Mid(returnValue, 1, LineStart - 1) & Copy & Mid(returnValue, LineEnd + 4)
                                End If
                            End If
                        End If
                    Loop
                End If
                '
                ' only valid for a webpage
                '
                If True Then
                    '
                    ' Add in EditWrappers for Aggregate scripts and replacements
                    '   This is also old -- used here because csv encode content can create replacements and links, but can not
                    '   insert wrappers. This is all done in GetAddonContents() now. This routine is left only to
                    '   handle old style calls in cache.
                    '
                    'hint = hint & ",500, Adding edit wrappers"
                    If isEditingAnything Then
                        If (InStr(1, returnValue, "<!-- AFScript -->", vbTextCompare) <> 0) Then
                            Call handleLegacyError7("returnValue", "AFScript Style edit wrappers are not supported")
                            Copy = main_GetEditWrapper("Aggregate Script", "##MARKER##")
                            Wrapper = Split(Copy, "##MARKER##")
                            returnValue = vbReplace(returnValue, "<!-- AFScript -->", Wrapper(0), 1, 99, vbTextCompare)
                            returnValue = vbReplace(returnValue, "<!-- /AFScript -->", Wrapper(1), 1, 99, vbTextCompare)
                        End If
                        If (InStr(1, returnValue, "<!-- AFReplacement -->", vbTextCompare) <> 0) Then
                            Call handleLegacyError7("returnValue", "AFReplacement Style edit wrappers are not supported")
                            Copy = main_GetEditWrapper("Aggregate Replacement", "##MARKER##")
                            Wrapper = Split(Copy, "##MARKER##")
                            returnValue = vbReplace(returnValue, "<!-- AFReplacement -->", Wrapper(0), 1, 99, vbTextCompare)
                            returnValue = vbReplace(returnValue, "<!-- /AFReplacement -->", Wrapper(1), 1, 99, vbTextCompare)
                        End If
                    End If
                    '
                    ' Process Feedback form
                    '
                    'hint = hint & ",600, Handle webclient features"
                    If vbInstr(1, returnValue, FeedbackFormNotSupportedComment, vbTextCompare) <> 0 Then
                        returnValue = vbReplace(returnValue, FeedbackFormNotSupportedComment, main_GetFeedbackForm(ContextContentName, ContextRecordID, ContextContactPeopleID), 1, 99, vbTextCompare)
                    End If
                    '
                    ' if call from webpage, push addon js and css out to cpCoreClass
                    '
                    Copy = web_GetEncodeContent_HeadTags()
                    If Copy <> "" Then
                        '
                        ' headtags generated from csv_EncodeContent
                        '
                        Call main_AddHeadTag2(Copy, "embedded content")
                    End If
                    '
                    ' If any javascript or styles were added during encode, pick them up now
                    '
                    Copy = csv_GetEncodeContent_JavascriptBodyEnd()
                    Do While Copy <> ""
                        Call main_AddEndOfBodyJavascript2(Copy, "embedded content")
                        Copy = csv_GetEncodeContent_JavascriptBodyEnd()
                    Loop
                    '
                    ' current
                    '
                    Copy = csv_GetEncodeContent_JSFilename()
                    Do While Copy <> ""
                        If vbInstr(1, Copy, "://") <> 0 Then
                        ElseIf Left(Copy, 1) = "/" Then
                        Else
                            Copy = web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, Copy)
                        End If
                        Call main_AddHeadScriptLink(Copy, "embedded content")
                        Copy = csv_GetEncodeContent_JSFilename()
                    Loop
                    '
                    Copy = csv_GetEncodeContent_JavascriptOnLoad()
                    Do While Copy <> ""
                        Call main_AddOnLoadJavascript2(Copy, "")
                        Copy = csv_GetEncodeContent_JavascriptOnLoad()
                    Loop
                    '
                    Copy = csv_GetEncodeContent_StyleFilenames()
                    Do While Copy <> ""
                        If vbInstr(1, Copy, "://") <> 0 Then
                        ElseIf Left(Copy, 1) = "/" Then
                        Else
                            Copy = web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, Copy)
                        End If
                        Call main_AddStylesheetLink2(Copy, "")
                        Copy = csv_GetEncodeContent_StyleFilenames()
                    Loop
                End If
            End If
            '
            html_encodeContent10 = returnValue
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            If hint <> "" Then
                Call handleLegacyError7("csv_EncodeContent9-" & hint, "Unexpected Trap Error")
            Else
                Call handleLegacyError7("csv_EncodeContent9", "Unexpected Trap Error")
            End If
        End Function
        '  
        '========================================================================
        ''' <summary>
        ''' Send email to a memberId, returns ok if send is successful, otherwise returns the principle issue as a user error.
        ''' </summary>
        ''' <param name="ToMemberID"></param>
        ''' <param name="FromAddress"></param>
        ''' <param name="subject"></param>
        ''' <param name="Body"></param>
        ''' <param name="Immediate"></param>
        ''' <param name="HTML"></param>
        ''' <param name="emailIdOrZeroForLog"></param>
        ''' <param name="template"></param>
        ''' <param name="EmailAllowLinkEID"></param>
        ''' <returns> returns ok if send is successful, otherwise returns the principle issue as a user error</returns>
        Public Function email_sendMemberEmail3(ByVal ToMemberID As Integer, ByVal FromAddress As String, ByVal subject As String, ByVal Body As String, ByVal Immediate As Boolean, ByVal HTML As Boolean, ByVal emailIdOrZeroForLog As Integer, ByVal template As String, ByVal EmailAllowLinkEID As Boolean) As String
            Dim returnStatus As String = ""
            Try
                Dim CS As Integer
                Dim ToAddress As String
                'Dim MethodName As String
                Dim rootUrl As String
                Dim layoutError As String = ""
                Dim subjectEncoded As String
                Dim bodyEncoded As String
                Dim templateEncoded As String
                '
                subjectEncoded = subject
                bodyEncoded = Body
                templateEncoded = template
                '
                CS = db.db_OpenCSContentRecord("People", ToMemberID, , , , "email")
                If db.cs_Ok(CS) Then
                    ToAddress = Trim(db.cs_getText(CS, "email"))
                    If ToAddress = "" Then
                        returnStatus = "The email was not sent because the to-address was blank."
                    ElseIf (InStr(1, ToAddress, "@") = 0) Or (InStr(1, ToAddress, ".") = 0) Then
                        returnStatus = "The email was not sent because the to-address [" & ToAddress & "] was not valid."
                    ElseIf FromAddress = "" Then
                        returnStatus = "The email was not sent because the from-address was blank."
                    ElseIf (InStr(1, FromAddress, "@") = 0) Or (InStr(1, FromAddress, ".") = 0) Then
                        returnStatus = "The email was not sent because the from-address [" & FromAddress & "] was not valid."
                    Else
                        '
                        ' encode subject
                        '
                        subjectEncoded = html_executeContentCommands(Nothing, subjectEncoded, addonContextEnum.contextEmail, ToMemberID, True, layoutError)
                        subjectEncoded = html_encodeContent10(subjectEncoded, ToMemberID, "", 0, 0, False, EmailAllowLinkEID, True, True, False, True, "", "http://" & appConfig.domainList(0), True, 0, "", addonContextEnum.contextEmail, True, Nothing, False)
                        '
                        ' encode Body
                        '
                        bodyEncoded = html_executeContentCommands(Nothing, bodyEncoded, addonContextEnum.contextEmail, ToMemberID, True, layoutError)
                        bodyEncoded = html_encodeContent10(bodyEncoded, ToMemberID, "", 0, 0, False, EmailAllowLinkEID, True, True, False, True, "", "http://" & appConfig.domainList(0), True, 0, "", addonContextEnum.contextEmail, True, Nothing, False)
                        '
                        ' encode template
                        '
                        If (templateEncoded <> "") Then
                            templateEncoded = html_executeContentCommands(Nothing, templateEncoded, addonContextEnum.contextEmail, ToMemberID, True, layoutError)
                            templateEncoded = html_encodeContent10(templateEncoded, ToMemberID, "", 0, 0, False, EmailAllowLinkEID, True, True, False, True, "", "http://" & appConfig.domainList(0), True, 0, "", addonContextEnum.contextEmail, True, Nothing, False)
                            '
                            If (InStr(1, templateEncoded, fpoContentBox) <> 0) Then
                                bodyEncoded = vbReplace(templateEncoded, fpoContentBox, bodyEncoded)
                            Else
                                bodyEncoded = templateEncoded & bodyEncoded
                            End If
                        End If
                        bodyEncoded = vbReplace(bodyEncoded, "#member_id#", ToMemberID.ToString)
                        bodyEncoded = vbReplace(bodyEncoded, "#member_email#", ToAddress)
                        '
                        returnStatus = email_send3(ToAddress, FromAddress, subjectEncoded, bodyEncoded, "", "", "", Immediate, HTML, emailIdOrZeroForLog)
                    End If
                End If
                Call db.cs_Close(CS)
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return returnStatus
        End Function
        '
        '========================================================================
        ' Set the email sql for all members marked to receive the email
        '   Used to send the email and as body on the email test
        '========================================================================
        '
        Public Function email_getGroupEmailSQL(ByVal ToAll As Boolean, ByVal EmailID As Integer) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("getGroupEmailSQL")
            '
            ' converted array to dictionary - Dim FieldPointer As Integer
            '
            email_getGroupEmailSQL = ""
            If ToAll Then
                email_getGroupEmailSQL = "SELECT ccMembers.ID AS ID, ccMembers.Name AS Name, ccMembers.Email AS Email" _
                    & " FROM ccMembers" _
                    & " WHERE ((ccMembers.Email Is Not Null) AND (ccMembers.Active<>0) AND (ccMembers.AllowBulkEmail<>0))" _
                    & " ORDER BY ccMembers.Email,ccMembers.ID"
            Else
                email_getGroupEmailSQL = "SELECT " _
                    & " u.ID AS ID" _
                    & " ,u.Name AS Name" _
                    & " ,u.Email AS Email " _
                    & " " _
                    & " from " _
                    & " (((ccMembers u" _
                    & " left join ccMemberRules mr on mr.memberid=u.id)" _
                    & " left join ccGroups g on g.id=mr.groupid)" _
                    & " left join ccEmailGroups r on r.groupid=g.id)" _
                    & " " _
                    & " where " _
                    & " (r.EmailID=1) " _
                    & " and(r.Active<>0) " _
                    & " and(g.Active<>0) " _
                    & " and(g.AllowBulkEmail<>0) " _
                    & " and(mr.Active<>0) " _
                    & " and(u.Active<>0) " _
                    & " and(u.AllowBulkEmail<>0)" _
                    & " AND((mr.DateExpires is null)OR(mr.DateExpires>'20161205 22:40:58:184')) " _
                    & " " _
                    & " group by " _
                    & " u.ID, u.Name, u.Email " _
                    & " " _
                    & " having ((u.Email Is Not Null) and(u.Email<>'')) " _
                    & " " _
                    & " order by u.Email,u.ID" _
                    & " "
                'csv_getGroupEmailSQL = "SELECT ccMembers.ID AS ID, ccMembers.Name AS Name, ccMembers.Email AS Email" _
                '    & " FROM (ccEmailGroups LEFT JOIN ccGroups ON ccEmailGroups.GroupID = ccGroups.ID) LEFT JOIN (ccMemberRules LEFT JOIN ccMembers ON ccMemberRules.MemberID = ccMembers.ID) ON ccGroups.ID = ccMemberRules.GroupID" _
                '    & " WHERE (((ccEmailGroups.EmailID)=" & EncodeSQLNumber(EmailID) & ") AND (ccEmailGroups.Active<>0) AND (ccGroups.Active<>0) AND (ccGroups.AllowBulkEmail<>0) AND (ccMemberRules.Active<>0) AND (ccMembers.Active<>0) AND ((ccMembers.AllowBulkEmail)<>0))AND((ccMemberRules.DateExpires is null)OR(ccMemberRules.DateExpires>" & EncodeSQLDate(Now()) & "))" _
                '    & " GROUP BY ccMembers.ID, ccMembers.Name, ccMembers.Email" _
                '    & " HAVING (((ccMembers.Email) Is Not Null) and ((ccMembers.Email)<>" & EncodeSQLText("") & "))" _
                '    & " ORDER BY ccMembers.Email,ccMembers.ID"
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError7("csv_getGroupEmailSQL", "Unexpected Trap")
        End Function
        '
        ' ----- Need to test this and make it public
        '
        '   This is what the admin site should call for both test and group email
        '   Making it public lets developers send email that administrators can control
        '
        Public Function csv_SendSystemEmail(ByVal EMailName As String, ByVal AdditionalCopy As String, ByVal AdditionalMemberIDOrZero As Integer) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("SendSystemEmail")
            '
            Dim returnString As String
            Dim isAdmin As Boolean
            Dim iAdditionalMemberID As Integer
            Dim layoutError As String
            Dim emailstyles As String
            Dim EmailRecordID As Integer
            Dim CSPeople As Integer
            Dim CSEmail As Integer
            Dim CSLog As Integer
            Dim EmailToAddress As String
            Dim EmailToName As String
            Dim SQL As String
            Dim EmailFrom As String
            Dim EmailSubjectSource As String
            Dim EmailBodySource As String
            Dim ConfirmBody As String
            Dim EmailAllowLinkEID As Boolean
            Dim EmailToConfirmationMemberID As Integer
            Dim EmailStatusMessage As String
            Dim EMailToMemberID As Integer
            Dim EmailSubject As String
            Dim ClickFlagQuery As String
            Dim EmailBody As String
            Dim EmailStatus As String
            Dim BounceAddress As String
            Dim SelectList As String
            Dim EMailTemplateID As Integer
            Dim EmailTemplate As String
            Dim EmailTemplateSource As String
            Dim CS As Integer
            Dim isValid As Boolean
            '
            returnString = ""
            iAdditionalMemberID = AdditionalMemberIDOrZero
            '
            If True Then
                SelectList = "ID,TestMemberID,FromAddress,Subject,copyfilename,AddLinkEID,AllowSpamFooter,EmailTemplateID"
            Else
                SelectList = "ID,TestMemberID,FromAddress,Subject,copyfilename,AddLinkEID,AllowSpamFooter,0 as EmailTemplateID"
            End If
            CSEmail = db.csOpen("System Email", "name=" & db.encodeSQLText(EMailName), "ID", , , , , SelectList)
            If Not db.cs_Ok(CSEmail) Then
                '
                ' ----- Email was not found
                '
                Call db.cs_Close(CSEmail)
                CSEmail = db.cs_insertRecord("System Email")
                Call db.cs_set(CSEmail, "name", EMailName)
                Call db.cs_set(CSEmail, "Subject", EMailName)
                Call db.cs_set(CSEmail, "FromAddress", siteProperties.getText("EmailAdmin", "webmaster@" & appConfig.domainList(0)))
                'Call app.csv_SetCS(CSEmail, "caption", EmailName)
                Call db.cs_Close(CSEmail)
                Call Err.Raise(ignoreInteger, "dll", "No system email was found with the name [" & EMailName & "]. A new email blank was created but not sent.")
            Else
                '
                ' --- collect values needed for send
                '
                EmailRecordID = db.cs_getInteger(CSEmail, "ID")
                EmailToConfirmationMemberID = db.cs_getInteger(CSEmail, "testmemberid")
                EmailFrom = db.cs_getText(CSEmail, "FromAddress")
                EmailSubjectSource = db.cs_getText(CSEmail, "Subject")
                EmailBodySource = db.db_GetCS(CSEmail, "copyfilename") & AdditionalCopy
                EmailAllowLinkEID = db.cs_getBoolean(CSEmail, "AddLinkEID")
                BounceAddress = siteProperties.getText("EmailBounceAddress", "")
                If BounceAddress = "" Then
                    BounceAddress = EmailFrom
                End If
                EMailTemplateID = db.cs_getInteger(CSEmail, "EmailTemplateID")
                '
                ' Get the Email Template
                '
                If EMailTemplateID <> 0 Then
                    CS = db.db_OpenCSContentRecord("Email Templates", EMailTemplateID)
                    If db.cs_Ok(CS) Then
                        EmailTemplateSource = db.db_GetCS(CS, "BodyHTML")
                    End If
                    Call db.cs_Close(CS)
                End If
                If EmailTemplateSource = "" Then
                    EmailTemplateSource = "<div style=""padding:10px""><ac type=content></div>"
                End If
                '
                ' add styles to the template
                '
                emailstyles = email_getEmailStyles(EmailRecordID)
                EmailTemplateSource = emailstyles & EmailTemplateSource
                '
                ' Spam Footer
                '
                If db.cs_getBoolean(CSEmail, "AllowSpamFooter") Then
                    '
                    ' This field is default true, and non-authorable
                    ' It will be true in all cases, except a possible unforseen exception
                    '
                    EmailTemplateSource = EmailTemplateSource & "<div style=""clear: both;padding:10px;"">" & csv_GetLinkedText("<a href=""" & html_EncodeHTML("http://" & appConfig.domainList(0) & "/" & siteProperties.serverPageDefault & "?" & RequestNameEmailSpamFlag & "=#member_email#") & """>", siteProperties.getText("EmailSpamFooter", DefaultSpamFooter)) & "</div>"
                End If
                '
                ' --- Send message to the additional member
                '
                If iAdditionalMemberID <> 0 Then
                    EmailStatusMessage = EmailStatusMessage & BR & "Primary Recipient:" & BR
                    CSPeople = db.db_OpenCSContentRecord("People", iAdditionalMemberID, , , , "ID,Name,Email")
                    If db.cs_Ok(CSPeople) Then
                        EMailToMemberID = db.cs_getInteger(CSPeople, "ID")
                        EmailToName = db.cs_getText(CSPeople, "name")
                        EmailToAddress = db.cs_getText(CSPeople, "email")
                        If EmailToAddress = "" Then
                            EmailStatusMessage = EmailStatusMessage & "&nbsp;&nbsp;Error: Not Sent to " & EmailToName & " (people #" & EMailToMemberID & ") because their email address was blank." & BR
                        Else
                            EmailStatus = email_sendMemberEmail3(iAdditionalMemberID, EmailFrom, EmailSubjectSource, EmailBodySource, False, True, EmailRecordID, EmailTemplateSource, EmailAllowLinkEID)
                            If EmailStatus = "" Then
                                EmailStatus = "ok"
                            End If
                            EmailStatusMessage = EmailStatusMessage & "&nbsp;&nbsp;Sent to " & EmailToName & " at " & EmailToAddress & ", Status = " & EmailStatus & BR
                        End If
                    End If
                    Call db.cs_Close(CSPeople)
                End If
                '
                ' --- Send message to everyone selected
                '
                EmailStatusMessage = EmailStatusMessage & BR & "Recipients in selected System Email groups:" & BR
                SQL = email_getGroupEmailSQL(False, EmailRecordID)
                CSPeople = db.db_openCsSql_rev("default", SQL)
                Do While db.cs_Ok(CSPeople)
                    EMailToMemberID = db.cs_getInteger(CSPeople, "ID")
                    EmailToName = db.cs_getText(CSPeople, "name")
                    EmailToAddress = db.cs_getText(CSPeople, "email")
                    If EmailToAddress = "" Then
                        EmailStatusMessage = EmailStatusMessage & "&nbsp;&nbsp;Not Sent to " & EmailToName & ", people #" & EMailToMemberID & " because their email address was blank." & BR
                    Else
                        EmailStatus = email_sendMemberEmail3(EMailToMemberID, EmailFrom, EmailSubjectSource, EmailBodySource, False, True, EmailRecordID, EmailTemplateSource, EmailAllowLinkEID)
                        If EmailStatus = "" Then
                            EmailStatus = "ok"
                        End If
                        EmailStatusMessage = EmailStatusMessage & "&nbsp;&nbsp;Sent to " & EmailToName & " at " & EmailToAddress & ", Status = " & EmailStatus & BR
                        Call db.db_csGoNext(CSPeople)
                    End If
                Loop
                Call db.cs_Close(CSPeople)
                '
                ' --- Send the completion message to the administrator
                '
                If EmailToConfirmationMemberID = 0 Then
                    ' AddUserError ("No confirmation email was sent because no confirmation member was selected")
                Else
                    '
                    ' get the confirmation info
                    '
                    isValid = False
                    CSPeople = db.db_OpenCSContentRecord("people", EmailToConfirmationMemberID)
                    If db.cs_Ok(CSPeople) Then
                        isValid = db.cs_getBoolean(CSPeople, "active")
                        EMailToMemberID = db.cs_getInteger(CSPeople, "ID")
                        EmailToName = db.cs_getText(CSPeople, "name")
                        EmailToAddress = db.cs_getText(CSPeople, "email")
                        isAdmin = db.cs_getBoolean(CSPeople, "admin")
                    End If
                    Call db.cs_Close(CSPeople)
                    '
                    If Not isValid Then
                        'returnString = "Administrator: The confirmation email was not sent because the confirmation email person is not selected or inactive, " & EmailStatus
                    Else
                        '
                        ' Encode the body
                        '
                        EmailBody = EmailBodySource & ""
                        '
                        ' Encode the template
                        '
                        EmailTemplate = EmailTemplateSource
                        '
                        EmailSubject = EmailSubjectSource
                        '
                        ConfirmBody = ConfirmBody & "<div style=""padding:10px;"">" & BR
                        ConfirmBody = ConfirmBody & "The follow System Email was sent." & BR
                        ConfirmBody = ConfirmBody & "" & BR
                        ConfirmBody = ConfirmBody & "If this email includes personalization, each email sent was personalized to it's recipient. This confirmation has been personalized to you." & BR
                        ConfirmBody = ConfirmBody & "" & BR
                        ConfirmBody = ConfirmBody & "Subject: " & EmailSubject & BR
                        ConfirmBody = ConfirmBody & "From: " & EmailFrom & BR
                        ConfirmBody = ConfirmBody & "Bounces return to: " & BounceAddress & BR
                        ConfirmBody = ConfirmBody & "Body:" & BR
                        ConfirmBody = ConfirmBody & "<div style=""clear:all"">----------------------------------------------------------------------</div>" & BR
                        ConfirmBody = ConfirmBody & EmailBody & BR
                        ConfirmBody = ConfirmBody & "<div style=""clear:all"">----------------------------------------------------------------------</div>" & BR
                        ConfirmBody = ConfirmBody & "--- recipient list ---" & BR
                        ConfirmBody = ConfirmBody & EmailStatusMessage & BR
                        ConfirmBody = ConfirmBody & "--- end of list ---" & BR
                        ConfirmBody = ConfirmBody & "</div>"
                        '
                        EmailStatus = email_sendMemberEmail3(EmailToConfirmationMemberID, EmailFrom, "System Email confirmation from " & appConfig.domainList(0), ConfirmBody, False, True, EmailRecordID, "", False)
                        If isAdmin And (EmailStatus <> "") Then
                            returnString = "Administrator: There was a problem sending the confirmation email, " & EmailStatus
                        End If
                    End If
                End If
                '
                ' ----- Done
                '
                Call db.cs_Close(CSPeople)
            End If
            Call db.cs_Close(CSEmail)
            '
            csv_SendSystemEmail = returnString
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError7("csv_SendSystemEmail", "Unexpected Trap")
        End Function
        '
        '
        '
        Public Function csv_GetLinkedText(ByVal AnchorTag As String, ByVal AnchorText As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetLinkedText")
            '
            Dim UcaseAnchorText As String
            Dim LinkPosition As Integer
            Dim MethodName As String
            Dim iAnchorTag As String
            Dim iAnchorText As String
            '
            MethodName = "csv_GetLinkedText"
            '
            csv_GetLinkedText = ""
            iAnchorTag = EncodeText(AnchorTag)
            iAnchorText = EncodeText(AnchorText)
            UcaseAnchorText = vbUCase(iAnchorText)
            If (iAnchorTag <> "") And (iAnchorText <> "") Then
                LinkPosition = InStrRev(UcaseAnchorText, "<LINK>", -1)
                If LinkPosition = 0 Then
                    csv_GetLinkedText = iAnchorTag & iAnchorText & "</a>"
                Else
                    csv_GetLinkedText = iAnchorText
                    LinkPosition = InStrRev(UcaseAnchorText, "</LINK>", -1)
                    Do While LinkPosition > 1
                        csv_GetLinkedText = Mid(csv_GetLinkedText, 1, LinkPosition - 1) & "</a>" & Mid(csv_GetLinkedText, LinkPosition + 7)
                        LinkPosition = InStrRev(UcaseAnchorText, "<LINK>", LinkPosition - 1)
                        If LinkPosition <> 0 Then
                            csv_GetLinkedText = Mid(csv_GetLinkedText, 1, LinkPosition - 1) & iAnchorTag & Mid(csv_GetLinkedText, LinkPosition + 6)
                        End If
                        LinkPosition = InStrRev(UcaseAnchorText, "</LINK>", LinkPosition)
                    Loop
                End If
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError7(MethodName, "Unexpected Trap")
            '
        End Function
        '
        '========================================================================
        '   convert a virtual file into a Link usable on the website:
        '       convert all \ to /
        '       if it includes "://", leave it along
        '       if it starts with "/", it is already root relative, leave it alone
        '       else (if it start with a file or a path), add the serverFilePath
        '========================================================================
        '
        Public Function csv_getVirtualFileLink(ByVal serverFilePath As String, ByVal virtualFile As String) As String
            Dim returnLink As String
            '
            returnLink = virtualFile
            returnLink = vbReplace(returnLink, "\", "/")
            If vbInstr(1, returnLink, "://") <> 0 Then
                '
                ' icon is an Absolute URL - leave it
                '
            ElseIf Left(returnLink, 1) = "/" Then
                '
                ' icon is Root Relative, leave it
                '
            Else
                '
                ' icon is a virtual file, add the serverfilepath
                '
                returnLink = serverFilePath & returnLink
            End If
            csv_getVirtualFileLink = returnLink
        End Function
        '
        '========================================================================
        '   convert a resource file into a filename that can be read with app.csv_ReadFile()
        '       convert all / to \
        '       if it includes "://", it is a root file
        '       if it starts with "/", it is already root relative
        '       else (if it start with a file or a path), add the serverFilePath
        '========================================================================
        '
        Public Function csv_getPhysicalFilename(ByVal VirtualFilename As String) As String
            Return convertCdnUrlToCdnPathFilename(VirtualFilename)
        End Function
        '
        '========================================================================
        '   42private
        '
        ' ----- Process Member Actions (called only from Init)
        '========================================================================
        '
        Private Sub main_ProcessFormMyProfile()
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("ProcessFormMyProfile")
            '
            'If Not (true) Then Exit Sub
            '
            Dim CSMember As Integer
            Dim CS As Integer
            Dim TopicCount As Integer
            Dim TopicPointer As Integer
            Dim TopicID As Integer
            Dim TopicRulesCID As Integer
            Dim Panel As String
            Dim MethodName As String
            Dim CreatePathBlock As Boolean
            Dim AllowChange As Boolean
            Dim PathID As Integer
            Dim Filename As String
            Dim Button As String
            Dim GroupCount As Integer
            Dim GroupPointer As Integer
            Dim CSPointer As Integer
            Dim CDef As coreMetaDataClass.CDefClass
            Dim ContentName As String
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim FieldName As String
            Dim FieldValue As String
            Dim CSTest As Integer
            Dim PeopleCID As Integer
            Dim ErrorMessage As String = ""
            Dim ErrorCode As Integer
            Dim FirstName As String
            Dim LastName As String
            Dim Newusername As String
            Dim NewPassword As String
            '
            MethodName = "main_ProcessFormMyProfile"
            '
            ' ----- Check if new username is allowed
            '
            Button = docProperties.getText("Button")
            If (Button = ButtonSave) Then
                AllowChange = True
                PeopleCID = main_GetContentID("People")
                Newusername = docProperties.getText("username")
                NewPassword = docProperties.getText("password")
                If Newusername = "" Then
                    '
                    ' Sest to blank
                    '
                    AllowChange = True
                ElseIf vbUCase(Newusername) <> vbUCase(user.username) Then
                    '
                    ' ----- username changed, check if change is allowed
                    '
                    If Not user.isNewLoginOK(Newusername, NewPassword, ErrorMessage, ErrorCode) Then
                        error_AddUserError(ErrorMessage)
                        AllowChange = False
                    End If
                End If
                If AllowChange Then
                    CSMember = db.csOpen("people", "id=" & db.encodeSQLNumber(user.id))
                    If Not db.cs_Ok(CSMember) Then
                        Call error_AddUserError("There was a problem locating your account record. No changes were saved.")
                        ' if user error, it goes back to the hardcodedpage
                        'LegacyInterceptPageSN = LegacyInterceptPageSNMyProfile
                    Else
                        '
                        ' Check for unique violations first
                        '
                        ContentName = metaData.getContentNameByID(db.cs_getInteger(CSMember, "ContentControlID"))
                        If ContentName = "" Then
                            Call error_AddUserError("There was a problem locating the information you requested.")
                        Else
                            CDef = metaData.getCdef(ContentName)
                            For Each keyValuePair As KeyValuePair(Of String, coreMetaDataClass.CDefFieldClass) In CDef.fields
                                Dim field As coreMetaDataClass.CDefFieldClass = keyValuePair.Value
                                If field.UniqueName Then
                                    FieldName = field.nameLc
                                    FieldValue = docProperties.getText(FieldName)
                                    If FieldValue <> "" Then
                                        CSTest = db.csOpen(ContentName, "(" & FieldName & "=" & db.encodeSQLText(FieldValue) & ")and(ID<>" & user.id & ")")
                                        If db.cs_Ok(CSTest) Then
                                            Call error_AddUserError("The field '" & FieldName & "' must be unique, and another account has already used '" & FieldValue & "'")
                                        End If
                                        Call db.cs_Close(CSTest)
                                    End If
                                End If
                            Next
                        End If
                        If error_IsUserError() Then
                            ' goes to hardcodedpage on user error
                            'LegacyInterceptPageSN = LegacyInterceptPageSNMyProfile
                        Else
                            '
                            ' Personal Info
                            '
                            FirstName = docProperties.getText("FirstName")
                            LastName = docProperties.getText("LastName")
                            '
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "firstname")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "LastName")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Name")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "email")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "company")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "title")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "address")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "city")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "state")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "zip")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "country")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "phone")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "fax")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "ResumeFilename")
                            '
                            ' Billing Info
                            '
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "BillName")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Billemail")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Billcompany")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Billaddress")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Billcity")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Billstate")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Billzip")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Billcountry")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Billphone")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Billfax")
                            '
                            ' Shiping Info
                            '
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "ShipName")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Shipcompany")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Shipaddress")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Shipcity")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Shipstate")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Shipzip")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Shipcountry")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "Shipphone")
                            '
                            ' Site preferences
                            '
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "username")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "password")
                            Call main_ProcessFormMyProfile_UpdateFieldBoolean(CSMember, "AllowBulkEmail")
                            Call main_ProcessFormMyProfile_UpdateField(CSMember, "LanguageID")

                            If siteProperties.getBoolean("AllowAutoLogin", False) Then
                                Call main_ProcessFormMyProfile_UpdateFieldBoolean(CSMember, "AutoLogin")
                            End If
                            If user.isAuthenticatedContentManager() Then
                                Call main_ProcessFormMyProfile_UpdateFieldBoolean(CSMember, "AllowToolsPanel")
                            End If
                            '
                            ' --- update Topic records
                            '
                            Call main_ProcessCheckList(rnMyProfileTopics, "people", "memberid", "topics", "member topic rules", "memberid", "topicid")
                            '
                            ' --- Update Group Records
                            '
                            Call main_ProcessCheckList("MemberRules", "Members", EncodeText(user.id), "Groups", "Member Rules", "MemberID", "GroupID")
                            '
                            '
                            '
                            If main_PageErrorCount > 0 Then
                                Call error_AddUserError("An error occurred which prevented your information from being saved.")
                                'LegacyInterceptPageSN = LegacyInterceptPageSNMyProfile
                            Else
                                If main_PageErrorCount > 0 Then
                                    Call error_AddUserError("An error occurred while saving your information.")
                                    'LegacyInterceptPageSN = LegacyInterceptPageSNMyProfile
                                End If
                            End If
                        End If
                        Call cache.invalidateTagCommaList("People")
                    End If
                    Call db.cs_Close(CSMember)
                End If
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13(MethodName)
        End Sub
        '
        '========================================================================
        '   42private
        '========================================================================
        '
        Private Sub main_ProcessFormMyProfile_UpdateField(ByVal CSMember As Integer, ByVal FieldName As String)
            On Error GoTo ErrorTrap
            '
            Dim FieldValue As String
            '
            FieldValue = docProperties.getText(FieldName)
            If db.cs_getText(CSMember, FieldName) <> FieldValue Then
                Call log_LogActivity2("profile changed " & FieldName, user.id, user.organizationId)
                Call db.cs_set(CSMember, FieldName, FieldValue)
            End If
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_ProcessFormMyProfile_UpdateField")
        End Sub
        '
        '========================================================================
        '   42private
        '========================================================================
        '
        Private Sub main_ProcessFormMyProfile_UpdateFieldBoolean(ByVal CSMember As Integer, ByVal FieldName As String)
            On Error GoTo ErrorTrap
            '
            Dim FieldValue As Boolean
            '
            FieldValue = main_GetStreamBoolean2(FieldName)
            If db.cs_getBoolean(CSMember, FieldName) <> FieldValue Then
                Call log_LogActivity2("profile changed " & FieldName, user.id, user.organizationId)
                Call db.cs_set(CSMember, FieldName, FieldValue)
            End If
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_ProcessFormMyProfile_UpdateFieldBoolean")
        End Sub
        '
        '===========================================================================================
        '   42legacy
        ' ----- main_RedirectHTTP
        '   This is a compatibility call that requires the HTTP be included, or it will be added.
        '   That means "www.contensive.com" will work, but "index.asp" will not
        '===========================================================================================
        '
        Public Sub main_RedirectHTTP(ByVal Link As String)
            If Not isInStr(1, Link, "://") Then
                Link = web_requestProtocol & Link
            End If
            Call web_Redirect2(Link, "call to main_RedirectHTTP(" & EncodeText(Link) & "), no reason given.", False)
        End Sub
        '
        '===========================================================================================
        '   ----- Redirect without reason - compatibility only
        '===========================================================================================
        '
        Public Sub main_Redirect(ByVal Link As Object)
            Call web_Redirect2(EncodeText(Link), "No explaination provided", False)
        End Sub
        '
        '===========================================================================================
        ' ----- Redirect
        '
        '   Link is where you are going
        '   The Link argument should NOT be encoded. (it should still include spaces)
        '   Link may be '/index.asp', or 'index.asp' or 'http://www.docmc.main_com/index.asp'
        '       ShortLink is '/index.asp'
        '       FullLink is 'http://www.docmc.main_com/index.asp'
        '===========================================================================================
        '
        Public Sub web_Redirect2(ByVal NonEncodedLink As String, ByVal RedirectReason As String, ByVal IsPageNotFound As Boolean)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Redirect2")
            '
            Const rnRedirectCycleFlag = "cycleFlag"
            '
            Dim MethodName As String
            Dim Protocol As String
            Dim ProtocolEnd As String
            Dim EncodedLink As String
            'Dim kmafs As fileSystemClass
            Dim Copy As String
            '
            Dim RedirectLink As String
            Dim PageNotFoundSource As String
            Dim ShortLink As String
            Dim ServerShortLink As String
            Dim FullLink As String
            Dim redirectCycles As Integer
            '
            MethodName = "main_Redirect2(" & NonEncodedLink & "," & RedirectReason & "," & IsPageNotFound & ")"
            If docOpen Then
                redirectCycles = doc_getInteger(rnRedirectCycleFlag)
                '
                ' convert link to a long link on this domain
                '
                If vbLCase(Mid(NonEncodedLink, 1, 4)) = "http" Then
                    FullLink = NonEncodedLink
                Else
                    ShortLink = NonEncodedLink
                    ShortLink = ConvertLinkToShortLink(ShortLink, webServer.requestDomain, web_requestVirtualFilePath)
                    ShortLink = EncodeAppRootPath(ShortLink, web_requestVirtualFilePath, www_requestRootPath, webServer.requestDomain)
                    FullLink = web_requestProtocol & webServer.requestDomain & ShortLink
                End If
                If (NonEncodedLink = "") Then
                    '
                    ' Link is not valid
                    '
                    Call Err.Raise(ignoreInteger, "dll", "Redirect was called with a blank Link. Redirect Reason [" & RedirectReason & "]")
                    Exit Sub
                    '
                    ' changed to main_ServerLinksource because if a redirect is caused by a link forward, and the host page for the iis 404 is
                    ' the same as the destination of the link forward, this throws an error and does not forward. the only case where main_ServerLinksource is different
                    ' then main_ServerLink is the linkfforward/linkalias case.
                    '
                ElseIf (webServer.requestFormString = "") And (webServer.requestLinkSource = FullLink) Then
                    '
                    ' Loop redirect error, throw trap and block redirect to prevent loop
                    '
                    Call Err.Raise(ignoreInteger, "dll", "Redirect was called to the same URL, main_ServerLink is [" & main_ServerLink & "], main_ServerLinkSource is [" & webServer.requestLinkSource & "]. This redirect is only allowed if either the form or querystring has change to prevent cyclic redirects. Redirect Reason [" & RedirectReason & "]")
                    Exit Sub
                ElseIf IsPageNotFound Then
                    '
                    ' Do a PageNotFound then redirect
                    '
                    Call log_appendLogPageNotFound(webServer.requestLinkSource)
                    If ShortLink <> "" Then
                        Call db.executeSql("Update ccContentWatch set link=null where link=" & db.encodeSQLText(ShortLink))
                    End If
                    '
                    If main_PageTestPointPrinting Then
                        '
                        ' Verbose - do not redirect, just print the link
                        '
                        EncodedLink = NonEncodedLink
                        'EncodedLink = encodeURL(NonEncodedLink)
                        'writeAltBuffer("<div style=""padding:20px;border:1px dashed black;background-color:white;color:black;"">" & RedirectReason & "<p>Click to continue the redirect to <a href=" & EncodedLink & ">" & EncodeHTML(NonEncodedLink) & "</a>...</p></div>")
                    Else
                        '
                        Call web_setResponseStatus("404 Not Found")
                        'Call writeAltBuffer("" _
                        '    & "<html>" _
                        '    & "<head>" _
                        '    & "<meta http-equiv=""Refresh"" content=""0; url=" & NonEncodedLink & """>" _
                        '    & "</head>" _
                        '    & "<body>" _
                        '    & "The page you requested could not be found. If you are not automatically forwarded, please click <a href=""" & NonEncodedLink & """>here</a>." _
                        '    & "</body>" _
                        '    & "</html>" _
                        '    & "")
                    End If
                Else

                    '
                    ' Go ahead and redirect
                    '
                    Copy = """" & FormatDateTime(main_PageStartTime, vbGeneralDate) & """,""" & webServer.requestDomain & """,""" & webServer.requestLinkSource & """,""" & NonEncodedLink & """,""" & RedirectReason & """"
                    log_appendLog(Copy, "performance", "redirects")
                    '
                    If main_PageTestPointPrinting Then
                        '
                        ' Verbose - do not redirect, just print the link
                        '

                        EncodedLink = NonEncodedLink
                        'EncodedLink = encodeURL(NonEncodedLink)
                        writeAltBuffer("<div style=""padding:20px;border:1px dashed black;background-color:white;color:black;"">" & RedirectReason & "<p>Click to continue the redirect to <a href=" & EncodedLink & ">" & html_EncodeHTML(NonEncodedLink) & "</a>...</p></div>")
                    Else
                        '
                        ' Redirect now
                        '
                        Call main_ClearStream()
                        EncodedLink = EncodeURL(NonEncodedLink)

                        If (Not iisContext Is Nothing) Then
                            '
                            ' redirect and release application. HOWEVER -- the thread will continue so use responseOpen=false to abort as much activity as possible
                            '
                            iisContext.Response.Redirect(NonEncodedLink, False)
                            iisContext.ApplicationInstance.CompleteRequest()
                        Else
                            _docBufferRedirect = NonEncodedLink
                        End If
                        'responseBufferRedirect = NonEncodedLink
                    End If
                End If
                '
                ' ----- close the output stream
                '
                Call doc_close()
            End If
            '
            ' Edit
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13(MethodName)
        End Sub
        '
        '========================================================================
        ' Stop sending to the HTMLStream
        '========================================================================
        '
        Public Sub doc_close()
            '
            ' 2011/3/11 - just stop future Contensive output, do not end the parent's response object, developer may want to add more
            '
            docOpen = False
        End Sub

        '
        '========================================================================
        '   Write to the HTML stream
        '========================================================================
        ' refactor -- if this conversion goes correctly, all writeStream will mvoe to teh executeRoute which returns the string 
        Public Sub writeAltBuffer(ByVal Message As Object)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("WriteStream")
            '
            If docOpen Then
                Select Case web_OutStreamDevice
                    Case web_OutStreamJavaScript
                        Call main_JavaStream_Add(EncodeText(Message))
                    Case Else

                        If (iisContext IsNot Nothing) Then
                            main_IsStreamWritten = True
                            Call iisContext.Response.Write(EncodeText(Message))
                        Else
                            _docBuffer = _docBuffer & EncodeText(Message)
                        End If
                End Select
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("writeAltBuffer")
        End Sub
        '
        '=============================================================================
        ' Cleans a text file of control characters, allowing only vblf
        '=============================================================================
        '
        Public Function main_RemoveControlCharacters(ByVal DirtyText As Object) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("RemoveControlCharacters")
            '
            Dim Pointer As Integer
            Dim ChrTest As Integer
            Dim MethodName As String
            Dim iDirtyText As String
            '
            MethodName = "main_RemoveControlCharacters"
            '
            iDirtyText = EncodeText(DirtyText)
            main_RemoveControlCharacters = ""
            If (iDirtyText <> "") Then
                main_RemoveControlCharacters = ""
                For Pointer = 1 To Len(iDirtyText)
                    ChrTest = Asc(Mid(iDirtyText, Pointer, 1))
                    If ChrTest >= 32 And ChrTest < 128 Then
                        main_RemoveControlCharacters = main_RemoveControlCharacters & Chr(ChrTest)
                    Else
                        Select Case ChrTest
                            Case 9
                                main_RemoveControlCharacters = main_RemoveControlCharacters & " "
                            Case 10
                                main_RemoveControlCharacters = main_RemoveControlCharacters & vbLf
                        End Select
                    End If
                Next
                '
                ' limit CRLF to 2
                '
                Do While vbInstr(main_RemoveControlCharacters, vbLf & vbLf & vbLf) <> 0
                    main_RemoveControlCharacters = vbReplace(main_RemoveControlCharacters, vbLf & vbLf & vbLf, vbLf & vbLf)
                Loop
                '
                ' limit spaces to 1
                '
                Do While vbInstr(main_RemoveControlCharacters, "  ") <> 0
                    main_RemoveControlCharacters = vbReplace(main_RemoveControlCharacters, "  ", " ")
                Loop
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
        End Function
        '
        '========================================================================
        ' Modify a string to be printed through the HTML stream
        '   convert carriage returns ( 0x10 ) to <br>
        '   remove linefeeds ( 0x13 )
        '========================================================================
        '
        Public Function main_EncodeCRLF(ByVal Source As Object) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("EncodeCRLF")
            '
            Dim iSource As String
            '
            iSource = EncodeText(Source)
            main_EncodeCRLF = ""
            If (iSource <> "") Then
                main_EncodeCRLF = iSource
                main_EncodeCRLF = vbReplace(main_EncodeCRLF, vbCr, "")
                main_EncodeCRLF = vbReplace(main_EncodeCRLF, vbLf, "<br >")
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_EncodeCRLF")
        End Function
        '
        '========================================================================
        '   Encodes characters to be compatibile with HTML
        '   i.e. it converts the equation 5 > 6 to th sequence "5 &gt; 6"
        '
        '   convert carriage returns ( 0x10 ) to <br >
        '   remove linefeeds ( 0x13 )
        '========================================================================
        '
        Public Function main_encodeHTML(ByVal Source As Object) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("encodeHTML")
            '
            main_encodeHTML = html_EncodeHTML(EncodeText(Source))
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("EncodeHTML")
        End Function
        '
        '========================================================================
        '   Convert an HTML source to a text equivelent
        '
        '       converts CRLF to <br>
        '       encodes reserved HTML characters to their equivalent
        '========================================================================
        '
        Public Function html_convertText2HTML(ByVal Source As Object) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("ConvertText2HTML")
            '
            html_convertText2HTML = html_EncodeHTML(EncodeText(Source))
            html_convertText2HTML = main_EncodeCRLF(html_convertText2HTML)
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_ConvertText2HTML")
        End Function
        '
        '========================================================================
        '   11/26/2009 - changed to 'undo' what encodehtml does
        '
        '   it converts the html equivlent "5 &gt; 6" to the he equation 5>6
        '========================================================================
        '
        Public Function main_DecodeHTML(ByVal Source As Object) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("DecodeHTML")
            '
            'If Not (true) Then Exit Function
            '
            main_DecodeHTML = decodeHtml(EncodeText(Source))
            '
            '    '
            '    Dim Decoder As htmlDecodeClass
            '    Dim iSource As String
            '    '
            '    iSource = encodeText(Source)
            '    '
            '    Decoder = New htmlDecodeClass
            '    main_DecodeHTML = Decoder.Decode(iSource)
            '    Decoder = Nothing
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            'Set Decoder = Nothing
            Call handleLegacyError18("main_DecodeHTML")
        End Function
        '
        '========================================================================
        ' ----- Encode Active Content AI
        '========================================================================
        '
        Public Function main_ConvertHTML2Text(ByVal Source As String) As String
            Try
                Dim Decoder As New coreHtmlToTextClass(Me)
                Return Decoder.convert(Source)
            Catch ex As Exception
                Call handleLegacyError18("main_ConvertHTML2Text")
            End Try
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Public Function main_EncodeRequestVariable(Source As String) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("EncodeRequestVariable")
            '
            main_EncodeRequestVariable = EncodeRequestVariable(EncodeText(Source))
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_EncodeRequestVariable")
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Public Function main_EncodeURL(Source As String) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("EncodeURL")
            '
            'If Not (true) Then Exit Function
            '
            main_EncodeURL = EncodeURL(EncodeText(Source))
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_EncodeURL")
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Public Function main_DecodeUrl(ByVal sUrl As String) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("DecodeUrl")
            '
            main_DecodeUrl = DecodeResponseVariable(EncodeText(sUrl))
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("DecodeUrl")
        End Function
        '
        '========================================================================
        '   Test Point
        '       If main_PageTestPointPrinting print a string, value paior
        '========================================================================
        '
        Public Sub testPoint(Message As String)
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("TestPoint")
            '
            Dim ElapsedTime As Single
            Dim iMessage As String
            '
            '
            ' ----- If not main_PageTestPointPrinting, exit right away
            '
            If main_PageTestPointPrinting Then
                '
                ' write to stream
                '
                ElapsedTime = CSng(GetTickCount - constructorTickCount) / 1000
                iMessage = EncodeText(Message)
                iMessage = Format((ElapsedTime), "00.000") & " - " & New String(TestPointTabChr, main_TestPointIndent) & iMessage
                main_testPointMessage = main_testPointMessage & "<nobr>" & iMessage & "</nobr><br >"
                'writeAltBuffer ("<nobr>" & iMessage & "</nobr><br >")
            End If
            If siteProperties.allowTestPointLogging Then
                '
                ' write to debug log in virtual files - to read from a test verbose viewer
                '
                iMessage = EncodeText(Message)
                iMessage = vbReplace(iMessage, vbCrLf, " ")
                iMessage = vbReplace(iMessage, vbCr, " ")
                iMessage = vbReplace(iMessage, vbLf, " ")
                iMessage = FormatDateTime(Now, vbShortTime) & vbTab & Format((ElapsedTime), "00.000") & vbTab & visit_Id & vbTab & iMessage
                '
                Call log_appendLog(iMessage, "", "testPoints_" & appConfig.name)
            End If
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_TestPoint")
        End Sub
        ''
        ''========================================================================
        '' main_RedirectByRecord( iContentName, iRecordID )
        ''   looks up the record
        ''   increments the 'clicks' field and redirects to the 'link' field
        ''   if the record is not found or there is no link, it just returns
        ''   Note: also supports iContentName for pre-2.1 sites
        ''========================================================================
        ''
        'Public Sub main_RedirectByRecord(ByVal ContentName As String, ByVal RecordID As Integer, Optional ByVal FieldName As String = "")
        '    Call main_RedirectByRecord_ReturnStatus(ContentName, RecordID, FieldName)
        'End Sub
        '
        '========================================================================
        ' main_RedirectByRecord( iContentName, iRecordID )
        '   looks up the record
        '   increments the 'clicks' field and redirects to the 'link' field
        '   returns true if the redirect happened OK
        '========================================================================
        '
        Public Function main_RedirectByRecord_ReturnStatus(ByVal ContentName As String, ByVal RecordID As Integer, Optional ByVal FieldName As String = "") As Boolean
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("RedirectByRecord_ReturnStatus")
            '
            'If Not (true) Then Exit Function
            '
            Dim Link As String
            Dim CSPointer As Integer
            Dim MethodName As String
            Dim ContentID As Integer
            Dim CSHost As Integer
            Dim HostContentName As String
            Dim HostRecordID As Integer
            Dim BlockRedirect As Boolean
            Dim iContentName As String
            Dim iRecordID As Integer
            Dim iFieldName As String
            Dim LinkPrefix As String
            Dim EncodedLink As String
            Dim NonEncodedLink As String = ""
            Dim RecordActive As Boolean
            '
            iContentName = EncodeText(ContentName)
            iRecordID = EncodeInteger(RecordID)
            iFieldName = encodeEmptyText(FieldName, "link")
            '
            MethodName = "main_RedirectByRecord_ReturnStatus( " & iContentName & ", " & iRecordID & ", " & encodeEmptyText(FieldName, "(fieldname empty)") & ")"
            '
            main_RedirectByRecord_ReturnStatus = False
            BlockRedirect = False
            CSPointer = db.csOpen(iContentName, "ID=" & iRecordID)
            If db.cs_Ok(CSPointer) Then
                ' 2/18/2008 - EncodeLink change
                '
                ' Assume all Link fields are already encoded -- as this is how they would appear if the admin cut and pasted
                '
                EncodedLink = Trim(db.cs_getText(CSPointer, iFieldName))
                If EncodedLink = "" Then
                    BlockRedirect = True
                Else
                    '
                    ' ----- handle content special cases (prevent redirect to deleted records)
                    '
                    NonEncodedLink = main_DecodeUrl(EncodedLink)
                    Select Case vbUCase(iContentName)
                        Case "CONTENT WATCH"
                            '
                            ' ----- special case
                            '       if this is a content watch record, check the underlying content for
                            '       inactive or expired before redirecting
                            '
                            LinkPrefix = web_requestContentWatchPrefix
                            ContentID = (db.cs_getInteger(CSPointer, "ContentID"))
                            HostContentName = metaData.getContentNameByID(ContentID)
                            If (HostContentName = "") Then
                                '
                                ' ----- Content Watch with a bad ContentID, mark inactive
                                '
                                BlockRedirect = True
                                Call db.cs_set(CSPointer, "active", 0)
                            Else
                                HostRecordID = (db.cs_getInteger(CSPointer, "RecordID"))
                                If HostRecordID = 0 Then
                                    '
                                    ' ----- Content Watch with a bad iRecordID, mark inactive
                                    '
                                    BlockRedirect = True
                                    Call db.cs_set(CSPointer, "active", 0)
                                Else
                                    CSHost = db.csOpen(HostContentName, "ID=" & HostRecordID)
                                    If Not db.cs_Ok(CSHost) Then
                                        '
                                        ' ----- Content Watch host record not found, mark inactive
                                        '
                                        BlockRedirect = True
                                        Call db.cs_set(CSPointer, "active", 0)
                                    End If
                                End If
                                Call db.cs_Close(CSHost)
                            End If
                            If BlockRedirect Then
                                '
                                ' ----- if a content watch record is blocked, delete the content tracking
                                '
                                Call metaData_DeleteContentTracking(HostContentName, HostRecordID, False)
                            End If
                    End Select
                End If
                If Not BlockRedirect Then
                    '
                    ' If link incorrectly includes the LinkPrefix, take it off first, then add it back
                    '
                    NonEncodedLink = ConvertShortLinkToLink(NonEncodedLink, LinkPrefix)
                    If db.db_IsCSFieldSupported(CSPointer, "Clicks") Then
                        Call db.cs_set(CSPointer, "Clicks", (db.db_GetCSNumber(CSPointer, "Clicks")) + 1)
                    End If
                    Call web_Redirect2(LinkPrefix & NonEncodedLink, "Call to " & MethodName & ", no reason given.", False)
                    main_RedirectByRecord_ReturnStatus = True
                End If
            End If
            Call db.cs_Close(CSPointer)
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
        End Function
        '
        '========================================================================
        ' main_Get a string with a Drop Down Select Box, see PrintFormInputSelect
        '========================================================================
        '
        Public Function main_GetFormInputSelect(ByVal MenuName As String, ByVal CurrentValue As Integer, ByVal ContentName As String, Optional ByVal Criteria As String = "", Optional ByVal NoneCaption As String = "", Optional ByVal htmlId As String = "") As String
            main_GetFormInputSelect = main_GetFormInputSelect2(MenuName, CurrentValue, ContentName, Criteria, NoneCaption, htmlId, False, "")
        End Function
        '
        '
        '
        Public Function main_GetFormInputSelect2(ByVal MenuName As String, ByVal CurrentValue As Integer, ByVal ContentName As String, ByVal Criteria As String, ByVal NoneCaption As String, ByVal htmlId As String, ByRef return_IsEmptyList As Boolean, Optional ByVal HtmlClass As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetFormInputSelect2")
            '
            'If Not (true) Then Exit Function
            '
            Const MenuNameFPO = "<MenuName>"
            Const NoneCaptionFPO = "<NoneCaption>"
            '
            Dim CDef As coreMetaDataClass.CDefClass
            'dim dt as datatable
            Dim ContentControlCriteria As String
            Dim LcaseCriteria As String
            Dim CSPointer As Integer
            Dim SelectedFound As Boolean
            Dim RecordID As Integer
            Dim Copy As String
            Dim MethodName As String
            Dim PositionPointer As Integer
            Dim DropDownFieldList As String
            Dim DropDownFieldName() As String
            Dim DropDownDelimiter() As String
            Dim DropDownFieldCount As Integer
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim DropDownPreField As String
            Dim DropDownFieldListLength As Integer
            Dim FieldName As String
            Dim CharAllowed As String
            Dim CharTest As String
            Dim CharPointer As Integer
            Dim AllowedCharacters As String
            'Dim CSContent as integer
            Dim IDFieldPointer As Integer
            Dim FastString As New coreFastStringClass
            '
            Dim RowsArray(,) As String
            Dim RowFieldArray() As String
            Dim RowCnt As Integer
            Dim RowMax As Integer
            Dim ColumnMax As Integer
            Dim RowPointer As Integer
            Dim ColumnPointer As Integer
            Dim DropDownFieldPointer() As Integer
            Dim UcaseFieldName As String
            Dim SortFieldList As String
            Dim SelectListCount As Integer
            Dim SQL As String
            Dim TableName As String
            Dim DataSource As String
            Dim SelectFields As String
            Dim Ptr As Integer
            Dim SelectRaw As String
            Dim CachePtr As Integer
            Dim TagID As String
            Dim CurrentValueText As String
            '
            MethodName = "main_GetFormInputSelect2"
            '
            LcaseCriteria = vbLCase(Criteria)
            return_IsEmptyList = True
            '
            CurrentValueText = CStr(CurrentValue)
            If main_InputSelectCacheCnt > 0 Then
                For CachePtr = 0 To main_InputSelectCacheCnt - 1
                    With main_InputSelectCache(CachePtr)
                        If (.ContentName = ContentName) And (.Criteria = LcaseCriteria) And (.CurrentValue = CurrentValueText) Then
                            SelectRaw = .SelectRaw
                            return_IsEmptyList = False
                            Exit For
                        End If
                    End With
                Next
            End If
            '
            '
            '
            If SelectRaw = "" Then
                '
                ' Build the SelectRaw
                ' Test selection size
                '
                ' This was commented out -- I really do not know why -- seems like the best way
                '
                CDef = metaData.getCdef(ContentName)
                TableName = CDef.ContentTableName
                DataSource = CDef.ContentDataSourceName
                ContentControlCriteria = CDef.ContentControlCriteria
                '
                ' This is what was there
                '
                '        TableName = main_GetContentProperty(ContentName, "ContentTableName")
                '        DataSource = main_GetContentProperty(ContentName, "ContentDataSourceName")
                '        ContentControlCriteria = main_GetContentProperty(ContentName, "ContentControlCriteria")
                '
                SQL = "select count(*) as cnt from " & TableName & " where " & ContentControlCriteria & " AND(editsourceid is null)"
                If LcaseCriteria <> "" Then
                    SQL &= " and " & LcaseCriteria
                End If
                Dim dt As DataTable
                dt = db.executeSql(SQL)
                If dt.Rows.Count > 0 Then
                    RowCnt = EncodeInteger(dt.Rows(0).Item("cnt"))
                End If
                If RowCnt = 0 Then
                    RowMax = -1
                Else
                    return_IsEmptyList = False
                    RowMax = RowCnt - 1
                End If
                '
                If RowCnt > siteProperties.selectFieldLimit Then
                    '
                    ' Selection is too big
                    '
                    Call error_AddUserError("The drop down list for " & ContentName & " called " & MenuName & " is too long to display. The site administrator has been notified and the problem will be resolved shortly. To fix this issue temporarily, go to the admin tab of the Preferences page and set the Select Field Limit larger than " & RowCnt & ".")
                    '                    handleException(New Exception("Legacy error, MethodName=[" & MethodName & "], cause=[" & Cause & "] #" & Err.Number & "," & Err.Source & "," & Err.Description & ""), Cause, 2)

                    handleExceptionAndRethrow(New Exception("Error creating select list from content [" & ContentName & "] called [" & MenuName & "]. Selection of [" & RowCnt & "] records exceeds [" & siteProperties.selectFieldLimit & "], the current Site Property SelectFieldLimit."))
                    main_GetFormInputSelect2 = main_GetFormInputSelect2 & html_GetFormInputHidden(MenuNameFPO, CurrentValue)
                    If CurrentValue = 0 Then
                        main_GetFormInputSelect2 = html_GetFormInputText2(MenuName, "0")
                    Else
                        CSPointer = db_csOpen(ContentName, CurrentValue)
                        If db.cs_Ok(CSPointer) Then
                            main_GetFormInputSelect2 = db.cs_getText(CSPointer, "name") & "&nbsp;"
                        End If
                        Call db.cs_Close(CSPointer)
                    End If
                    main_GetFormInputSelect2 = main_GetFormInputSelect2 & "(Selection is too large to display option list)"
                Else
                    '
                    ' ----- Generate Drop Down Field Names
                    '
                    DropDownFieldList = CDef.DropDownFieldList
                    'DropDownFieldList = main_GetContentProperty(ContentName, "DropDownFieldList")
                    If DropDownFieldList = "" Then
                        DropDownFieldList = "NAME"
                    End If
                    DropDownFieldCount = 0
                    CharAllowed = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
                    DropDownFieldListLength = Len(DropDownFieldList)
                    For CharPointer = 1 To DropDownFieldListLength
                        CharTest = Mid(DropDownFieldList, CharPointer, 1)
                        If vbInstr(1, CharAllowed, CharTest) = 0 Then
                            '
                            ' Character not allowed, delimit Field name here
                            '
                            If (FieldName <> "") Then
                                '
                                ' ----- main_Get new Field Name and save it
                                '
                                If SortFieldList = "" Then
                                    SortFieldList = FieldName
                                End If
                                ReDim Preserve DropDownFieldName(DropDownFieldCount)
                                ReDim Preserve DropDownDelimiter(DropDownFieldCount)
                                DropDownFieldName(DropDownFieldCount) = FieldName
                                DropDownDelimiter(DropDownFieldCount) = CharTest
                                DropDownFieldCount = DropDownFieldCount + 1
                                FieldName = ""
                            Else
                                '
                                ' ----- Save Field Delimiter
                                '
                                If DropDownFieldCount = 0 Then
                                    '
                                    ' ----- Before any field, add to DropDownPreField
                                    '
                                    DropDownPreField = DropDownPreField & CharTest
                                Else
                                    '
                                    ' ----- after a field, add to last DropDownDelimiter
                                    '
                                    DropDownDelimiter(DropDownFieldCount - 1) = DropDownDelimiter(DropDownFieldCount - 1) & CharTest
                                End If
                            End If
                        Else
                            '
                            ' Character Allowed, Put character into fieldname and continue
                            '
                            FieldName = FieldName & CharTest
                        End If
                    Next
                    If FieldName <> "" Then
                        If SortFieldList = "" Then
                            SortFieldList = FieldName
                        End If
                        ReDim Preserve DropDownFieldName(DropDownFieldCount)
                        ReDim Preserve DropDownDelimiter(DropDownFieldCount)
                        DropDownFieldName(DropDownFieldCount) = FieldName
                        DropDownDelimiter(DropDownFieldCount) = ""
                        DropDownFieldCount = DropDownFieldCount + 1
                    End If
                    If DropDownFieldCount = 0 Then
                        handleExceptionAndRethrow(New Exception("No drop down field names found for content [" & ContentName & "]."))
                    Else
                        ReDim DropDownFieldPointer(DropDownFieldCount - 1)
                        SelectFields = "ID"
                        For Ptr = 0 To DropDownFieldCount - 1
                            SelectFields = SelectFields & "," & DropDownFieldName(Ptr)
                        Next
                        '
                        ' ----- Start select box
                        '
                        TagID = ""
                        If htmlId <> "" Then
                            TagID = " ID=""" & htmlId & """"
                        End If
                        Call FastString.Add("<select size=""1"" name=""" & MenuNameFPO & """" & TagID & ">")
                        Call FastString.Add("<option value="""">" & NoneCaptionFPO & "</option>")
                        '
                        ' ----- select values
                        '
                        CSPointer = db.csOpen(ContentName, Criteria, SortFieldList, , , , , SelectFields)
                        If db.cs_Ok(CSPointer) Then
                            Call testPoint("main_GetFormInputSelect2, 10 ContentName=[" & ContentName & "] Criteria=[" & Criteria & "] ")
                            RowsArray = db.db_GetCSRows2(CSPointer)
                            Call testPoint("main_GetFormInputSelect2, 20")
                            'RowFieldArray = app.csv_GetCSRowFields(CSPointer)
                            RowFieldArray = Split(db.db_GetCSSelectFieldList(CSPointer), ",")
                            Call testPoint("main_GetFormInputSelect2, 30")
                            ColumnMax = UBound(RowsArray, 1)
                            Call testPoint("main_GetFormInputSelect2, 40")

                            RowMax = UBound(RowsArray, 2)
                            Call testPoint("main_GetFormInputSelect2, 50")
                            '
                            ' setup IDFieldPointer
                            '
                            UcaseFieldName = "ID"
                            For ColumnPointer = 0 To ColumnMax
                                If UcaseFieldName = vbUCase(RowFieldArray(ColumnPointer)) Then
                                    IDFieldPointer = ColumnPointer
                                    Exit For
                                End If
                            Next
                            '
                            ' setup DropDownFieldPointer()
                            '
                            For FieldPointer = 0 To DropDownFieldCount - 1
                                UcaseFieldName = vbUCase(DropDownFieldName(FieldPointer))
                                For ColumnPointer = 0 To ColumnMax
                                    If UcaseFieldName = vbUCase(RowFieldArray(ColumnPointer)) Then
                                        DropDownFieldPointer(FieldPointer) = ColumnPointer
                                        Exit For
                                    End If
                                Next
                            Next
                            '
                            ' output select
                            '
                            SelectedFound = False
                            For RowPointer = 0 To RowMax
                                RecordID = EncodeInteger(RowsArray(IDFieldPointer, RowPointer))
                                Copy = DropDownPreField
                                For FieldPointer = 0 To DropDownFieldCount - 1
                                    Copy = Copy & RowsArray(DropDownFieldPointer(FieldPointer), RowPointer) & DropDownDelimiter(FieldPointer)
                                Next
                                If Copy = "" Then
                                    Copy = "no name"
                                End If
                                Call FastString.Add(vbCrLf & "<option value=""" & RecordID & """ ")
                                If RecordID = CurrentValue Then
                                    Call FastString.Add("selected")
                                    SelectedFound = True
                                End If
                                If siteProperties.selectFieldWidthLimit <> 0 Then
                                    If Len(Copy) > siteProperties.selectFieldWidthLimit Then
                                        Copy = Left(Copy, siteProperties.selectFieldWidthLimit) & "...+"
                                    End If
                                End If
                                Call FastString.Add(">" & html_EncodeHTML(Copy) & "</option>")
                            Next
                            If Not SelectedFound And (CurrentValue <> 0) Then
                                Call db.cs_Close(CSPointer)
                                If Criteria <> "" Then
                                    Criteria = Criteria & "and"
                                End If
                                Criteria = Criteria & "(id=" & EncodeInteger(CurrentValue) & ")"
                                CSPointer = db.csOpen(ContentName, Criteria, SortFieldList, False, , , , SelectFields)
                                If db.cs_Ok(CSPointer) Then
                                    Call testPoint("main_GetFormInputSelect2, 110")
                                    RowsArray = db.db_GetCSRows2(CSPointer)
                                    Call testPoint("main_GetFormInputSelect2, 120")
                                    RowFieldArray = Split(db.db_GetCSSelectFieldList(CSPointer), ",")
                                    Call testPoint("main_GetFormInputSelect2, 130")
                                    RowMax = UBound(RowsArray, 2)
                                    Call testPoint("main_GetFormInputSelect2, 140")
                                    ColumnMax = UBound(RowsArray, 1)
                                    Call testPoint("main_GetFormInputSelect2, 150")
                                    RecordID = EncodeInteger(RowsArray(IDFieldPointer, 0))
                                    Call testPoint("main_GetFormInputSelect2, 160")
                                    Copy = DropDownPreField
                                    For FieldPointer = 0 To DropDownFieldCount - 1
                                        Copy = Copy & RowsArray(DropDownFieldPointer(FieldPointer), 0) & DropDownDelimiter(FieldPointer)
                                    Next
                                    If Copy = "" Then
                                        Copy = "no name"
                                    End If
                                    Call FastString.Add(vbCrLf & "<option value=""" & RecordID & """ selected")
                                    SelectedFound = True
                                    If siteProperties.selectFieldWidthLimit <> 0 Then
                                        If Len(Copy) > siteProperties.selectFieldWidthLimit Then
                                            Copy = Left(Copy, siteProperties.selectFieldWidthLimit) & "...+"
                                        End If
                                    End If
                                    Call FastString.Add(">" & html_EncodeHTML(Copy) & "</option>")
                                End If
                            End If
                        End If
                        Call FastString.Add("</select>")
                        Call db.cs_Close(CSPointer)
                        SelectRaw = FastString.Text
                    End If
                End If
                '
                ' Save the SelectRaw
                '
                If Not return_IsEmptyList Then
                    CachePtr = main_InputSelectCacheCnt
                    main_InputSelectCacheCnt = main_InputSelectCacheCnt + 1
                    ReDim Preserve main_InputSelectCache(Ptr)
                    ReDim Preserve main_InputSelectCache(CachePtr)
                    main_InputSelectCache(CachePtr).ContentName = ContentName
                    main_InputSelectCache(CachePtr).Criteria = LcaseCriteria
                    main_InputSelectCache(CachePtr).CurrentValue = CurrentValue.ToString
                    main_InputSelectCache(CachePtr).SelectRaw = SelectRaw
                End If
            End If
            '
            SelectRaw = vbReplace(SelectRaw, MenuNameFPO, MenuName)
            SelectRaw = vbReplace(SelectRaw, NoneCaptionFPO, NoneCaption)
            If HtmlClass <> "" Then
                SelectRaw = vbReplace(SelectRaw, "<select ", "<select class=""" & HtmlClass & """")
            End If
            main_GetFormInputSelect2 = SelectRaw
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13(MethodName)
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Public Function main_GetFormInputMemberSelect(ByVal MenuName As String, ByVal CurrentValue As Integer, ByVal GroupID As Integer, Optional ByVal ignore As String = "", Optional ByVal NoneCaption As String = "", Optional ByVal htmlId As String = "") As String
            main_GetFormInputMemberSelect = main_GetFormInputMemberSelect2(MenuName, CurrentValue, GroupID, , NoneCaption, htmlId)
        End Function
        '
        Public Function main_GetFormInputMemberSelect2(ByVal MenuName As String, ByVal CurrentValue As Integer, ByVal GroupID As Integer, Optional ByVal ignore As String = "", Optional ByVal NoneCaption As String = "", Optional ByVal HtmlId As String = "", Optional ByVal HtmlClass As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetFormInputMemberSelect2")
            '
            'If Not (true) Then Exit Function
            '
            Dim LastRecordID As Integer
            Dim MemberRulesTableName As String
            Dim iMenuName As String
            Dim iCurrentValue As Integer
            Dim iNoneCaption As String
            Dim CSPointer As Integer
            Dim SelectedFound As Boolean
            Dim RecordID As Integer
            Dim Copy As String
            Dim MethodName As String
            Dim PositionPointer As Integer
            Dim DropDownFieldList As String
            Dim DropDownFieldName() As String
            Dim DropDownDelimiter() As String
            Dim DropDownFieldCount As Integer
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim DropDownPreField As String
            Dim DropDownFieldListLength As Integer
            Dim FieldName As String
            Dim CharAllowed As String
            Dim CharTest As String
            Dim CharPointer As Integer
            Dim AllowedCharacters As String
            'Dim CSContent as integer
            Dim IDFieldPointer As Integer
            Dim FastString As New coreFastStringClass
            '
            Dim RowsArray As String(,)
            Dim RowFieldArray() As String
            Dim RowMax As Integer
            Dim ColumnMax As Integer
            Dim RowPointer As Integer
            Dim ColumnPointer As Integer
            Dim DropDownFieldPointer() As Integer
            Dim UcaseFieldName As String
            Dim SortFieldList As String
            Dim SelectListCount As Integer
            Dim SQL As String
            Dim PeopleTableName As String
            Dim PeopleDataSource As String
            Dim iCriteria As String
            Dim SelectFields As String
            Dim Ptr As Integer
            Dim SelectRaw As String
            Dim CachePtr As Integer
            Dim TagID As String
            Dim TagClass As String
            Dim OrderByField As String
            '
            Const MenuNameFPO = "<MenuName>"
            Const NoneCaptionFPO = "<NoneCaption>"
            '
            MethodName = "main_GetFormInputMemberSelect2"
            '
            iMenuName = EncodeText(MenuName)
            iCurrentValue = EncodeInteger(CurrentValue)
            iNoneCaption = encodeEmptyText(NoneCaption, "Select One")
            'iCriteria = vbLCase(encodeMissingText(Criteria, ""))
            '
            If main_InputSelectCacheCnt > 0 Then
                For CachePtr = 0 To main_InputSelectCacheCnt - 1
                    With main_InputSelectCache(CachePtr)
                        If (.ContentName = "Group:" & GroupID) And (.Criteria = iCriteria) And (EncodeInteger(.CurrentValue) = iCurrentValue) Then
                            SelectRaw = .SelectRaw
                            Exit For
                        End If
                    End With
                Next
            End If
            '
            '
            '
            If SelectRaw = "" Then
                '
                ' Build the SelectRaw
                ' Test selection size
                '
                PeopleTableName = db_GetContentTablename("people")
                PeopleDataSource = main_GetContentDataSource("People")
                MemberRulesTableName = db_GetContentTablename("Member Rules")
                '
                RowMax = 0
                SQL = "select count(*) as cnt" _
                    & " from ccMemberRules R" _
                    & " inner join ccMembers P on R.MemberID=P.ID" _
                    & " where (P.active<>0)" _
                    & " and (R.GroupID=" & GroupID & ")"
                CSPointer = db.db_openCsSql_rev(PeopleDataSource, SQL)
                If db.cs_Ok(CSPointer) Then
                    RowMax = RowMax + db.cs_getInteger(CSPointer, "cnt")
                End If
                Call db.cs_Close(CSPointer)
                '
                '        SQL = " select count(*) as cnt" _
                '            & " from ccMembers P" _
                '            & " where (active<>0)" _
                '            & " and(( P.admin<>0 )or( P.developer<>0 ))"
                '        CSPointer = app.csv_OpenCSSQL(PeopleDataSource, SQL, memberID)
                '        If app.csv_IsCSOK(CSPointer) Then
                '            RowMax = RowMax + app.csv_GetCSInteger(CSPointer, "cnt")
                '        End If
                '        Call app.db_closeCS(CSPointer)
                '
                If RowMax > siteProperties.selectFieldLimit Then
                    '
                    ' Selection is too big
                    '
                    handleExceptionAndRethrow(New Exception("While building a group members list for group [" & group_GetGroupName(GroupID) & "], too many rows were selected. [" & RowMax & "] records exceeds [" & siteProperties.selectFieldLimit & "], the current Site Property app.SiteProperty_SelectFieldLimit."))
                    main_GetFormInputMemberSelect2 = main_GetFormInputMemberSelect2 & html_GetFormInputHidden(MenuNameFPO, iCurrentValue)
                    If iCurrentValue <> 0 Then
                        CSPointer = db_csOpen("people", iCurrentValue)
                        If db.cs_Ok(CSPointer) Then
                            main_GetFormInputMemberSelect2 = db.cs_getText(CSPointer, "name") & "&nbsp;"
                        End If
                        Call db.cs_Close(CSPointer)
                    End If
                    main_GetFormInputMemberSelect2 = main_GetFormInputMemberSelect2 & "(Selection is too large to display)"
                Else
                    '
                    ' ----- Generate Drop Down Field Names
                    '
                    DropDownFieldList = db_GetContentProperty("people", "DropDownFieldList")
                    If DropDownFieldList = "" Then
                        DropDownFieldList = "NAME"
                    End If
                    DropDownFieldCount = 0
                    CharAllowed = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
                    DropDownFieldListLength = Len(DropDownFieldList)
                    For CharPointer = 1 To DropDownFieldListLength
                        CharTest = Mid(DropDownFieldList, CharPointer, 1)
                        If vbInstr(1, CharAllowed, CharTest) = 0 Then
                            '
                            ' Character not allowed, delimit Field name here
                            '
                            If (FieldName <> "") Then
                                '
                                ' ----- main_Get new Field Name and save it
                                '
                                If SortFieldList = "" Then
                                    SortFieldList = FieldName
                                End If
                                ReDim Preserve DropDownFieldName(DropDownFieldCount)
                                ReDim Preserve DropDownDelimiter(DropDownFieldCount)
                                DropDownFieldName(DropDownFieldCount) = FieldName
                                DropDownDelimiter(DropDownFieldCount) = CharTest
                                DropDownFieldCount = DropDownFieldCount + 1
                                FieldName = ""
                            Else
                                '
                                ' ----- Save Field Delimiter
                                '
                                If DropDownFieldCount = 0 Then
                                    '
                                    ' ----- Before any field, add to DropDownPreField
                                    '
                                    DropDownPreField = DropDownPreField & CharTest
                                Else
                                    '
                                    ' ----- after a field, add to last DropDownDelimiter
                                    '
                                    DropDownDelimiter(DropDownFieldCount - 1) = DropDownDelimiter(DropDownFieldCount - 1) & CharTest
                                End If
                            End If
                        Else
                            '
                            ' Character Allowed, Put character into fieldname and continue
                            '
                            FieldName = FieldName & CharTest
                        End If
                    Next
                    If FieldName <> "" Then
                        If SortFieldList = "" Then
                            SortFieldList = FieldName
                        End If
                        ReDim Preserve DropDownFieldName(DropDownFieldCount)
                        ReDim Preserve DropDownDelimiter(DropDownFieldCount)
                        DropDownFieldName(DropDownFieldCount) = FieldName
                        DropDownDelimiter(DropDownFieldCount) = ""
                        DropDownFieldCount = DropDownFieldCount + 1
                    End If
                    If DropDownFieldCount = 0 Then
                        handleExceptionAndRethrow(New Exception("No drop down field names found for content [" & GroupID & "]."))
                    Else
                        ReDim DropDownFieldPointer(DropDownFieldCount - 1)
                        SelectFields = "P.ID"
                        For Ptr = 0 To DropDownFieldCount - 1
                            SelectFields = SelectFields & ",P." & DropDownFieldName(Ptr)
                        Next
                        '
                        ' ----- Start select box
                        '
                        TagClass = ""
                        If encodeEmptyText(HtmlClass, "") <> "" Then
                            TagClass = " Class=""" & encodeEmptyText(HtmlClass, "") & """"
                        End If
                        '
                        TagID = ""
                        If encodeEmptyText(HtmlId, "") <> "" Then
                            TagID = " ID=""" & encodeEmptyText(HtmlId, "") & """"
                        End If
                        '
                        Call FastString.Add("<select size=""1"" name=""" & MenuNameFPO & """" & TagID & TagClass & ">")
                        Call FastString.Add("<option value="""">" & NoneCaptionFPO & "</option>")
                        '
                        ' ----- select values
                        '
                        If SortFieldList = "" Then
                            SortFieldList = "name"
                        End If
                        SQL = "select " & SelectFields _
                            & " from ccMemberRules R" _
                            & " inner join ccMembers P on R.MemberID=P.ID" _
                            & " where (R.GroupID=" & GroupID & ")" _
                            & " and((R.DateExpires is null)or(R.DateExpires>" & db.encodeSQLDate(Now) & "))" _
                            & " and(P.active<>0)" _
                            & " order by P." & SortFieldList
                        '                SQL = "select " & SelectFields _
                        '                    & " from ccMemberRules R" _
                        '                    & " inner join ccMembers P on R.MemberID=P.ID" _
                        '                    & " where (R.GroupID=" & GroupID & ")" _
                        '                    & " and((R.DateExpires is null)or(R.DateExpires>" & encodeSQLDate(Now) & "))" _
                        '                    & " and(P.active<>0)" _
                        '                    & " union" _
                        '                    & " select P.ID,P.NAME" _
                        '                    & " from ccMembers P" _
                        '                    & " where (active<>0)" _
                        '                    & " and(( P.admin<>0 )or( P.developer<>0 ))" _
                        '                    & " order by P." & SortFieldList
                        CSPointer = db.db_openCsSql_rev(PeopleDataSource, SQL)
                        If db.cs_Ok(CSPointer) Then
                            RowsArray = db.db_GetCSRows(CSPointer)
                            'RowFieldArray = app.csv_GetCSRowFields(CSPointer)
                            RowFieldArray = Split(db.db_GetCSSelectFieldList(CSPointer), ",")
                            RowMax = UBound(RowsArray, 2)
                            ColumnMax = UBound(RowsArray, 1)
                            '
                            ' setup IDFieldPointer
                            '
                            UcaseFieldName = "ID"
                            For ColumnPointer = 0 To ColumnMax
                                If UcaseFieldName = vbUCase(RowFieldArray(ColumnPointer)) Then
                                    IDFieldPointer = ColumnPointer
                                    Exit For
                                End If
                            Next
                            '
                            ' setup DropDownFieldPointer()
                            '
                            For FieldPointer = 0 To DropDownFieldCount - 1
                                UcaseFieldName = vbUCase(DropDownFieldName(FieldPointer))
                                For ColumnPointer = 0 To ColumnMax
                                    If UcaseFieldName = vbUCase(RowFieldArray(ColumnPointer)) Then
                                        DropDownFieldPointer(FieldPointer) = ColumnPointer
                                        Exit For
                                    End If
                                Next
                            Next
                            '
                            ' output select
                            '
                            SelectedFound = False
                            LastRecordID = -1
                            For RowPointer = 0 To RowMax
                                RecordID = EncodeInteger(RowsArray(IDFieldPointer, RowPointer))
                                If RecordID <> LastRecordID Then
                                    Copy = DropDownPreField
                                    For FieldPointer = 0 To DropDownFieldCount - 1
                                        Copy = Copy & RowsArray(DropDownFieldPointer(FieldPointer), RowPointer) & DropDownDelimiter(FieldPointer)
                                    Next
                                    If Copy = "" Then
                                        Copy = "no name"
                                    End If
                                    Call FastString.Add(vbCrLf & "<option value=""" & RecordID & """ ")
                                    If RecordID = iCurrentValue Then
                                        Call FastString.Add("selected")
                                        SelectedFound = True
                                    End If
                                    If siteProperties.selectFieldWidthLimit <> 0 Then
                                        If Len(Copy) > siteProperties.selectFieldWidthLimit Then
                                            Copy = Left(Copy, siteProperties.selectFieldWidthLimit) & "...+"
                                        End If
                                    End If
                                    Call FastString.Add(">" & Copy & "</option>")
                                    LastRecordID = RecordID
                                End If
                            Next
                        End If
                        Call FastString.Add("</select>")
                        Call db.cs_Close(CSPointer)
                        SelectRaw = FastString.Text
                    End If
                End If
                '
                ' Save the SelectRaw
                '
                CachePtr = main_InputSelectCacheCnt
                main_InputSelectCacheCnt = main_InputSelectCacheCnt + 1
                ReDim Preserve main_InputSelectCache(Ptr)
                ReDim Preserve main_InputSelectCache(CachePtr)
                main_InputSelectCache(CachePtr).ContentName = "Group:" & GroupID
                main_InputSelectCache(CachePtr).Criteria = iCriteria
                main_InputSelectCache(CachePtr).CurrentValue = iCurrentValue.ToString
                main_InputSelectCache(CachePtr).SelectRaw = SelectRaw
            End If
            '
            SelectRaw = vbReplace(SelectRaw, MenuNameFPO, iMenuName)
            SelectRaw = vbReplace(SelectRaw, NoneCaptionFPO, iNoneCaption)
            main_GetFormInputMemberSelect2 = SelectRaw
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13(MethodName)
        End Function
        '
        '========================================================================
        '   Legacy
        '========================================================================
        '
        Public Function main_GetFormInputSelectList(ByVal MenuName As String, ByVal CurrentValue As String, ByVal SelectList As String, Optional ByVal NoneCaption As String = "", Optional ByVal htmlId As String = "") As String
            main_GetFormInputSelectList = main_GetFormInputSelectList2(EncodeText(MenuName), EncodeInteger(CurrentValue), EncodeText(SelectList), EncodeText(NoneCaption), EncodeText(htmlId))
        End Function
        '
        '========================================================================
        '   Create a select list from a comma separated list
        '       returns an index into the list list, starting at 1
        '       if an element is blank (,) no option is created
        '========================================================================
        '
        Public Function main_GetFormInputSelectList2(ByVal MenuName As String, ByVal CurrentValue As Integer, ByVal SelectList As String, ByVal NoneCaption As String, ByVal htmlId As String, Optional ByVal HtmlClass As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetFormInputSelectList2")
            '
            Dim FastString As New coreFastStringClass
            Dim lookups() As String
            Dim iSelectList As String
            Dim Ptr As Integer
            Dim RecordID As Integer
            'Dim SelectedFound As Integer
            Dim Copy As String
            Dim TagID As String
            Dim SelectFieldWidthLimit As Integer
            '
            SelectFieldWidthLimit = siteProperties.selectFieldWidthLimit
            If SelectFieldWidthLimit = 0 Then
                SelectFieldWidthLimit = 256
            End If
            '
            'iSelectList = encodeText(SelectList)
            '
            ' ----- Start select box
            '
            Call FastString.Add("<select id=""" & htmlId & """ class=""" & HtmlClass & """ size=""1"" name=""" & MenuName & """>")
            If NoneCaption <> "" Then
                Call FastString.Add("<option value="""">" & NoneCaption & "</option>")
            Else
                Call FastString.Add("<option value="""">Select One</option>")
            End If
            '
            ' ----- select values
            '
            lookups = Split(SelectList, ",")
            For Ptr = 0 To UBound(lookups)
                RecordID = Ptr + 1
                Copy = lookups(Ptr)
                If Copy <> "" Then
                    Call FastString.Add(vbCrLf & "<option value=""" & RecordID & """ ")
                    If RecordID = CurrentValue Then
                        Call FastString.Add("selected")
                        'SelectedFound = True
                    End If
                    If Len(Copy) > SelectFieldWidthLimit Then
                        Copy = Left(Copy, SelectFieldWidthLimit) & "...+"
                    End If
                    Call FastString.Add(">" & Copy & "</option>")
                End If
            Next
            Call FastString.Add("</select>")
            main_GetFormInputSelectList2 = FastString.Text
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_GetFormInputSelectList2")
        End Function
        '
        '========================================================================
        '   Display an icon with a link to the login form/cclib.net/admin area
        '========================================================================
        '
        Public Function main_GetLoginLink() As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetLoginLink")
            '
            'If Not (true) Then Exit Function
            '
            Dim Link As String
            Dim IconFilename As String
            '
            If siteProperties.getBoolean("AllowLoginIcon", True) Then
                main_GetLoginLink = main_GetLoginLink & "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"">"
                main_GetLoginLink = main_GetLoginLink & "<tr><td align=""right"">"
                If user.isAuthenticatedContentManager() Then
                    main_GetLoginLink = main_GetLoginLink & "<a href=""" & html_EncodeHTML(siteProperties.adminURL) & """ target=""_blank"">"
                Else
                    Link = web_requestPage & "?" & web_RefreshQueryString
                    Link = modifyLinkQuery(Link, RequestNameHardCodedPage, HardCodedPageLogin, True)
                    'Link = modifyLinkQuery(Link, RequestNameInterceptpage, LegacyInterceptPageSNLogin, True)
                    main_GetLoginLink = main_GetLoginLink & "<a href=""" & html_EncodeHTML(Link) & """ >"
                End If
                If (main_LoginIconFilename <> "") Then
                    main_GetLoginLink = main_GetLoginLink & "<img alt=""Login"" src=""" & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, main_LoginIconFilename) & """ border=""0"" >"
                Else
                    IconFilename = siteProperties.getText("LoginIconFilename", "/ccLib/images/ccLibLogin.GIF")
                    If vbLCase(Mid(IconFilename, 1, 7)) <> "/cclib/" Then
                        IconFilename = csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, IconFilename)
                    End If
                    main_GetLoginLink = main_GetLoginLink & "<img alt=""Login"" src=""" & IconFilename & """ border=""0"" >"
                End If
                main_GetLoginLink = main_GetLoginLink & "</A>"
                main_GetLoginLink = main_GetLoginLink & "</td></tr></table>"
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_GetLoginLink")
        End Function
        '
        '========================================================================
        '   legacy
        '========================================================================
        '
        Public Function main_GetClosePage(Optional ByVal AllowLogin As Boolean = True, Optional ByVal AllowTools As Boolean = True) As String
            main_GetClosePage = main_GetClosePage3(AllowLogin, AllowTools, False, False)
        End Function
        '
        '========================================================================
        '   legacy
        '========================================================================
        '
        Public Function main_GetClosePage2(AllowLogin As Boolean, AllowTools As Boolean, BlockNonContentExtras As Boolean) As String
            Try
                main_GetClosePage2 = main_GetClosePage3(AllowLogin, AllowTools, False, False)
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
        End Function
        '
        '========================================================================
        '   main_GetClosePage3
        '       Public interface to end the page call
        '       Must be called last on every public page
        '       internally, you can NOT writeAltBuffer( main_GetClosePage3 ) because the stream is closed
        '       call main_GetEndOfBody - main_Gets toolspanel and all html,menuing,etc needed to finish page
        '       optionally calls main_dispose
        '========================================================================
        '
        Public Function main_GetClosePage3(AllowLogin As Boolean, AllowTools As Boolean, BlockNonContentExtras As Boolean, doNotDisposeOnExit As Boolean) As String
            Try
                main_GetClosePage3 = main_GetEndOfBody(AllowLogin, AllowTools, BlockNonContentExtras, False)
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
        End Function
        '
        '
        '
        Public Function main_GetEndOfBody(AllowLogin As Boolean, AllowTools As Boolean, BlockNonContentExtras As Boolean, main_IsAdminSite As Boolean) As String
            Try
                '
                Dim AllowPopupErrors As Boolean
                Dim AllowPopupTraps As Boolean
                Dim Ptr As Integer
                Dim JSCodeAsString As String
                Dim Copy As String
                'Dim ScriptLinks() As String
                'Dim ScriptLink As String
                'Dim Filename As String
                'Dim NoteCriteria As String
                'Dim CSNotes as integer
                Dim ToolsPanel As String
                'Dim LinkPanel As String
                'Dim DebugPanel As String
                'Dim BodyCopy As String
                'Dim Pointer As Integer
                'Dim fs As New fileSystemClass
                Dim RenderTimeString As String
                Dim JS As String
                Dim s As String
                Dim autoPrintText As String
                '
                'Call AppendLog("main_getEndOfBody enter ")
                If True Then
                    '
                    ToolsPanel = ""
                    s = ""
                    RenderTimeString = Format((GetTickCount - constructorTickCount) / 1000, "0.000")
                    '
                    ' ----- Developer debug counters
                    '
                    main_ClosePageCounter = main_ClosePageCounter + 1
                    If webServer.web_InitCounter = 0 Then
                        handleExceptionAndRethrow(New Exception("Page was not initialized properly. Init(...) call may be missing."))
                    End If
                    If webServer.web_InitCounter > 1 Then
                        handleExceptionAndRethrow(New Exception("Page was not initialized properly. Init(...) was called multiple times."))
                    End If
                    If main_ClosePageCounter > 1 Then
                        handleExceptionAndRethrow(New Exception("Page was not closed properly. main_GetEndOfBody was called multiple times."))
                    End If
                    '
                    ' ----- add window.print if this is the Printerversion
                    '
                    If pageManager_printVersion Then
                        autoPrintText = docProperties.getText("AutoPrint")
                        If autoPrintText = "" Then
                            autoPrintText = siteProperties.getText("AllowAutoPrintDialog", "1")
                        End If
                        If EncodeBoolean(autoPrintText) Then
                            Call main_AddOnLoadJavascript2("window.print(); window.close()", "Print Page")
                        End If
                    End If
                    '
                    ' -- print what is needed
                    '
                    If (Not BlockNonContentExtras) And (Not pageManager_printVersion) Then
                        If user.isAuthenticatedContentManager() And user.allowToolsPanel Then
                            If AllowTools Then
                                s = s & main_GetToolsPanel()
                            End If
                        Else
                            If AllowLogin Then
                                s = s & main_GetLoginLink()
                            End If
                        End If
                    End If
                    '
                    ' ----- output the menu system
                    '
                    If Not (menuFlyout Is Nothing) Then
                        s = s & menu_GetClose()
                    End If
                    '
                    ' ----- Popup USER errors
                    '
                    If (Not BlockNonContentExtras) And error_IsUserError() Then
                        AllowPopupErrors = siteProperties.getBoolean("AllowPopupErrors", True)
                        If AllowPopupErrors Then
                            's = s & main_GetPopupMessage("<div style=""margin:20px;"">" & main_GetUserError() & "</div>", 300, 200, False)
                        End If
                    End If
                    '
                    If Not web_BlockClosePageCopyright Then
                        s = s & vbCrLf & vbTab & "<!--" & vbCrLf & vbCrLf & vbTab & "Contensive Framework/" & cp.Version() & ", copyright 1999-2012 Contensive, www.Contensive.com, " & RenderTimeString & vbCrLf & vbCrLf & vbTab & "-->"
                    End If
                    '
                    If Not main_BlockClosePageLink Then
                        s = s & vbCrLf & vbTab & "<a href=""http://www.contensive.com""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""1"" border=""0""></a>"
                    End If
                    '
                    ' ----- popup error if this is a developer
                    '
                    If (Not BlockNonContentExtras) And user.isAuthenticatedDeveloper() Then
                        AllowPopupTraps = siteProperties.getBoolean("AllowPopupTraps", True)
                        If AllowPopupTraps Then
                            If main_PageErrorWithoutCsv Then
                                main_TrapLogMessage = "" _
                                    & "<div style=""padding: 20px;"">" _
                                    & vbReplace(main_TrapLogMessage, vbCrLf, "<br>") _
                                    & "</div>"
                                '  s = s & main_GetPopupMessage(main_TrapLogMessage, 600, 400, True, True)
                            ElseIf (main_PageErrorCount > 0) Then
                                '  s = s & main_GetPopupMessage(main_TrapLogMessage, "", "", "yes")
                            End If
                        End If
                    End If
                    '
                    ' ----- Include any other close page
                    '
                    If Not BlockNonContentExtras Then
                        If main_ClosePageHTML <> "" Then
                            s = s & main_ClosePageHTML
                        End If
                        If main_testPointMessage <> "" Then
                            s = s & "<div class=""ccTestPointMessageCon"">" & main_testPointMessage & "</div>"
                        End If
                    End If
                    '
                    ' ----- Check for javascipt setup, but the appropriate calls are not in this site
                    '
                    JS = ""
                    '
                    ' Add Script Code to Head
                    '
                    If main_HeadScriptCnt > 0 Then
                        For Ptr = 0 To main_HeadScriptCnt - 1
                            With main_HeadScripts(Ptr)
                                If .addedByMessage <> "" Then
                                    JS = JS & vbCrLf & "/* from " & .addedByMessage & " */ "
                                End If
                                If Not .IsLink Then
                                    JSCodeAsString = .Text
                                    JSCodeAsString = vbReplace(JSCodeAsString, "'", "'+""'""+'")
                                    JSCodeAsString = vbReplace(JSCodeAsString, vbCrLf, "\n")
                                    JSCodeAsString = vbReplace(JSCodeAsString, vbCr, "\n")
                                    JSCodeAsString = vbReplace(JSCodeAsString, vbLf, "\n")
                                    JS = JS & vbCrLf & "cj.addHeadScriptCode('" & JSCodeAsString & "');"
                                    'JS = JS & vbCrLf & "cjAddHeadScriptCode('" & JSCodeAsString & "');"
                                Else
                                    JS = JS & vbCrLf & "cj.addHeadScriptLink('" & .Text & "');"
                                    'JS = JS & vbCrLf & "cjAddHeadScriptLink('" & .Text & "');"
                                End If
                            End With
                        Next
                        main_HeadScriptCnt = 0
                    End If
                    '
                    ' ----- Add onload javascript
                    '
                    If (main_OnLoadJavascript <> "") Then
                        JS = JS & vbCrLf & vbTab & "cj.addLoadEvent(function(){" & main_OnLoadJavascript & "});"
                    End If
                    '
                    ' ----- Add any left over style links
                    '
                    Dim headTags As String
                    headTags = ""
                    '
                    If (main_MetaContent_StyleSheetTags <> "") Then
                        headTags = headTags & cr & main_MetaContent_StyleSheetTags
                        'JS = JS & vbCrLf & vbTab & "cjAddHeadTag('" & encodeJavascript(main_MetaContent_StyleSheetTags) & "');"
                        main_MetaContent_StyleSheetTags = ""
                    End If
                    '
                    ' ----- Add any left over shared styles
                    '
                    Dim FileList As String
                    Dim Files() As String
                    Dim Parts() As String
                    If (main_MetaContent_SharedStyleIDList <> "") Then
                        FileList = main_GetSharedStyleFileList(main_MetaContent_SharedStyleIDList, main_IsAdminSite)
                        main_MetaContent_SharedStyleIDList = ""
                        If FileList <> "" Then
                            Files = Split(FileList, vbCrLf)
                            For Ptr = 0 To UBound(Files)
                                If Files(Ptr) <> "" Then
                                    Parts = Split(Files(Ptr) & "<<", "<")
                                    If Parts(1) <> "" Then
                                        headTags = headTags & cr & decodeHtml(Parts(1))
                                    End If
                                    headTags = headTags & cr & "<link rel=""stylesheet"" type=""text/css"" href=""" & web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, Parts(0)) & """ >"
                                    If Parts(2) <> "" Then
                                        headTags = headTags & cr & decodeHtml(Parts(2))
                                    End If
                                    'End If
                                End If
                            Next
                        End If
                    End If
                    '
                    ' ----- Add Member Stylesheet if left over
                    '
                    If user.styleFilename <> "" Then
                        Copy = cdnFiles.readFile(user.styleFilename)
                        headTags = headTags & cr & "<style type=""text/css"">" & Copy & "</style>"
                        'JS = JS & vbCrLf & vbTab & "cjAddHeadTag('<style type=""text/css"">" & Copy & "</style>');"
                        user.styleFilename = ""
                    End If
                    '
                    ' ----- Add any left over head tags
                    '
                    If (main_MetaContent_OtherHeadTags <> "") Then
                        headTags = headTags & cr & main_MetaContent_OtherHeadTags
                        'JS = JS & vbCrLf & vbTab & "cjAddHeadTag('" & encodeJavascript(main_MetaContent_OtherHeadTags) & "');"
                        main_MetaContent_OtherHeadTags = ""
                    End If
                    If (headTags <> "") Then
                        JS = JS & vbCrLf & vbTab & "cj.addHeadTag('" & EncodeJavascript(headTags) & "');"
                        'JS = JS & vbCrLf & vbTab & "cjAddHeadTag('" & encodeJavascript(headTags) & "');"
                    End If
                    '
                    ' ----- Add end of body javascript
                    '
                    If (main_endOfBodyJavascript <> "") Then
                        JS = JS & vbCrLf & main_endOfBodyJavascript
                        main_endOfBodyJavascript = ""
                    End If
                    '
                    ' ----- If javascript stream, output it all now
                    '
                    If (web_OutStreamDevice = web_OutStreamJavaScript) Then
                        '
                        ' This is a js output stream from a <script src=url></script>
                        ' process everything into a var=msg;document.write(var)
                        ' any js from the page should be added to this group
                        '
                        Call writeAltBuffer(s)
                        web_OutStreamDevice = main_OutStreamStandard
                        s = main_JavaStream_Text
                        If JS <> "" Then
                            s = s & vbCrLf & JS
                            JS = ""
                        End If
                    Else
                        '
                        ' This is a standard html write
                        ' any javascript collected should go in a <script tag
                        '
                        If JS <> "" Then
                            s = s _
                                & vbCrLf & "<script Language=""javascript"" type=""text/javascript"">" _
                                & vbCrLf & "if(cj){" _
                                & JS _
                                & vbCrLf & "}" _
                                & vbCrLf & "</script>"
                            JS = ""
                        End If
                    End If
                End If
                '
                ' end-of-body string -- include it without csv because it may have error strings
                '
                If (Not BlockNonContentExtras) And (main_endOfBodyString <> "") Then
                    s = s & main_endOfBodyString
                End If
                '
                main_GetEndOfBody = s
                '
            Catch ex As Exception
                Call handleExceptionAndRethrow(ex)
            End Try
        End Function
        '
        '========================================================================
        ' main_IncrementTableField( TableName, RecordID, Fieldname )
        '========================================================================
        '
        Public Sub main_IncrementTableField(ByVal TableName As String, ByVal RecordID As Integer, ByVal FieldName As String, Optional ByVal DataSourceName As String = "")
            Call db.executeSql("update " & TableName & " set " & FieldName & "=" & FieldName & "+1 where id=" & RecordID, DataSourceName)

            '            On Error GoTo ErrorTrap : ''Dim th as integer : th = profileLogMethodEnter("IncrementTableField")
            '            '
            '            'If Not (true) Then Exit Sub
            '            '
            '            Dim SQL As String
            '            'dim dt as datatable
            '            Dim iDataSourceName As String
            '            Dim RecordValue As Integer
            '            Dim iFieldName As String
            '            Dim iTableName As String
            '            Dim iRecordID As Integer
            '            '
            '            iDataSourceName = EncodeText(main_encodeMissingText(DataSourceName, "Default"))
            '            iFieldName = EncodeText(FieldName)
            '            iTableName = EncodeText(TableName)
            '            iRecordID = encodeInteger(RecordID)
            '            '
            '            SQL = "Select " & iFieldName & " FROM " & iTableName & " where ID=" & iRecordID & ";"
            '            RS = main_OpenRSSQL(iDataSourceName, SQL)
            '            If (isDataTableOk(rs)) Then
            '                If Not rs.rows.count=0 Then
            '                    RecordValue = EncodeInteger(RS(iFieldName)) + 1
            '                    SQL = "Update " & iTableName & " set " & iFieldName & "=" & RecordValue & " where ID=" & iRecordID & ";"
            '                    Call main_ExecuteSQL(iDataSourceName, SQL)
            '                End If
            '                If false Then
            '                    'RS.Close()
            '                End If
            '                'RS = Nothing
            '            End If

            '            Exit Sub
            '            '
            'ErrorTrap:
            '            Call main_HandleClassErrorAndResume_TrapPatch1("main_IncrementTableField")
        End Sub
        '
        '=============================================================================
        '   See main_GetNameValue_Internal
        '=============================================================================
        '
        Public Function main_GetNameValue(Tag As String, Name As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetNameValue")
            '
            'If Not (true) Then Exit Function
            main_GetNameValue = main_GetNameValue_Internal(EncodeText(Tag), EncodeText(Name))
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_GetNameValue")
        End Function
        '
        '=============================================================================
        ' ----- Return the value associated with the name given
        '   NameValueString is a string of Name=Value pairs, separated by spaces or "&"
        '   If Name is not given, returns ""
        '   If Name present but no value, returns true (as if Name=true)
        '   If Name = Value, it returns value
        '=============================================================================
        '
        Public Function main_GetNameValue_Internal(NameValueString As String, Name As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetNameValue_Internal")
            '
            'If Not (true) Then Exit Function
            '
            Dim NameValueStringWorking As String
            Dim UcaseNameValueStringWorking As String
            Dim Position As Integer
            Dim PositionEqual As Integer
            Dim PositionEnd As Integer
            Dim MethodName As String
            Dim pairs() As String
            Dim PairCount As Integer
            Dim PairPointer As Integer
            Dim PairSplit() As String
            '
            MethodName = "main_GetNameValue_Internal"
            '
            If ((NameValueString <> "") And (Name <> "")) Then
                Do While vbInstr(1, NameValueStringWorking, " =") <> 0
                    NameValueStringWorking = vbReplace(NameValueStringWorking, " =", "=")
                Loop
                Do While vbInstr(1, NameValueStringWorking, "= ") <> 0
                    NameValueStringWorking = vbReplace(NameValueStringWorking, "= ", "=")
                Loop
                Do While vbInstr(1, NameValueStringWorking, "& ") <> 0
                    NameValueStringWorking = vbReplace(NameValueStringWorking, "& ", "&")
                Loop
                Do While vbInstr(1, NameValueStringWorking, " &") <> 0
                    NameValueStringWorking = vbReplace(NameValueStringWorking, " &", "&")
                Loop
                NameValueStringWorking = NameValueString & "&"
                UcaseNameValueStringWorking = vbUCase(NameValueStringWorking)
                '
                main_GetNameValue_Internal = ""
                If NameValueStringWorking <> "" Then
                    pairs = Split(NameValueStringWorking, "&")
                    PairCount = UBound(pairs) + 1
                    For PairPointer = 0 To PairCount - 1
                        PairSplit = Split(pairs(PairPointer), "=")
                        If vbUCase(PairSplit(0)) = vbUCase(Name) Then
                            If UBound(PairSplit) > 0 Then
                                main_GetNameValue_Internal = PairSplit(1)
                            End If
                            Exit For
                        End If
                    Next
                End If
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13(MethodName)
        End Function
        '
        '========================================================================
        '   main_GetPanel( Panel, Optional StylePanel, Optional StyleHilite, Optional StyleShadow, Optional Width, Optional Padding, Optional HeightMin) As String
        ' Return a panel with the input as center
        '========================================================================
        '
        Public Function main_GetPanel(ByVal Panel As String, Optional ByVal StylePanel As String = "", Optional ByVal StyleHilite As String = "ccPanelHilite", Optional ByVal StyleShadow As String = "ccPanelShadow", Optional ByVal Width As String = "100%", Optional ByVal Padding As Integer = 5, Optional ByVal HeightMin As Integer = 1) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetPanel")
            '
            'If Not (true) Then Exit Function
            '
            '
            Dim ContentPanelWidth As String
            Dim MethodName As String
            Dim MyStylePanel As String
            Dim MyStyleHilite As String
            Dim MyStyleShadow As String
            Dim MyWidth As String
            Dim MyPadding As String
            Dim MyHeightMin As String
            Dim s As String
            Dim s0 As String
            Dim s1 As String
            Dim s2 As String
            Dim s3 As String
            Dim s4 As String
            Dim contentPanelWidthStyle As String
            '
            MethodName = "main_GetPanelTop"
            '
            MyStylePanel = encodeEmptyText(StylePanel, "ccPanel")
            MyStyleHilite = encodeEmptyText(StyleHilite, "ccPanelHilite")
            MyStyleShadow = encodeEmptyText(StyleShadow, "ccPanelShadow")
            MyWidth = encodeEmptyText(Width, "100%")
            MyPadding = Padding.ToString
            MyHeightMin = HeightMin.ToString
            '
            If vbIsNumeric(MyWidth) Then
                ContentPanelWidth = (CInt(MyWidth) - 2).ToString
                contentPanelWidthStyle = ContentPanelWidth & "px"
            Else
                ContentPanelWidth = "100%"
                contentPanelWidthStyle = ContentPanelWidth
            End If
            '
            '
            '
            s0 = "" _
                & cr & "<td style=""padding:" & MyPadding & "px;vertical-align:top"" class=""" & MyStylePanel & """>" _
                & kmaIndent(EncodeText(Panel)) _
                & cr & "</td>" _
                & ""
            '
            s1 = "" _
                & cr & "<tr>" _
                & kmaIndent(s0) _
                & cr & "</tr>" _
                & ""
            s2 = "" _
                & cr & "<table style=""width:" & contentPanelWidthStyle & ";border:0px;"" class=""" & MyStylePanel & """ cellspacing=""0"">" _
                & kmaIndent(s1) _
                & cr & "</table>" _
                & ""
            s3 = "" _
                & cr & "<td width=""1"" height=""" & MyHeightMin & """ class=""" & MyStyleHilite & """><img alt=""space"" src=""/ccLib/images/spacer.gif"" height=""" & MyHeightMin & """ width=""1"" ></td>" _
                & cr & "<td width=""" & ContentPanelWidth & """ valign=""top"" align=""left"" class=""" & MyStylePanel & """>" _
                & kmaIndent(s2) _
                & cr & "</td>" _
                & cr & "<td width=""1"" class=""" & MyStyleShadow & """><img alt=""space"" src=""/ccLib/images/spacer.gif"" height=""1"" width=""1"" ></td>" _
                & ""
            s4 = "" _
                & cr & "<tr>" _
                & cr2 & "<td colspan=""3"" class=""" & MyStyleHilite & """><img alt=""space"" src=""/ccLib/images/spacer.gif"" height=""1"" width=""" & MyWidth & """ ></td>" _
                & cr & "</tr>" _
                & cr & "<tr>" _
                & kmaIndent(s3) _
                & cr & "</tr>" _
                & cr & "<tr>" _
                & cr2 & "<td colspan=""3"" class=""" & MyStyleShadow & """><img alt=""space"" src=""/ccLib/images/spacer.gif"" height=""1"" width=""" & MyWidth & """ ></td>" _
                & cr & "</tr>" _
                & ""
            main_GetPanel = "" _
                & cr & "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""" & MyWidth & """ class=""" & MyStylePanel & """>" _
                & kmaIndent(s4) _
                & cr & "</table>" _
                & ""

            '-------------------------------------------------------------------------
            '
            '    main_GetPanel = "" _
            '        & cr & main_GetPanelTop(StylePanel, StyleHilite, StyleShadow, Width, Padding, HeightMin) _
            '        & KmaIndent(encodeText(Panel)) _
            '        & cr & main_GetPanelBottom(StylePanel, StyleHilite, StyleShadow, Width, Padding)
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_GetPanel")
        End Function
        '
        '========================================================================
        '   main_GetPanel( Panel, Optional StylePanel, Optional StyleHilite, Optional StyleShadow, Optional Width, Optional Padding, Optional HeightMin) As String
        ' Return a panel with the input as center
        '========================================================================
        '
        Public Function main_GetReversePanel(ByVal Panel As String, Optional ByVal StylePanel As String = "", Optional ByVal StyleHilite As String = "ccPanelShadow", Optional ByVal StyleShadow As String = "ccPanelHilite", Optional ByVal Width As String = "", Optional ByVal Padding As String = "", Optional ByVal HeightMin As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetReversePanel")
            '
            'If Not (true) Then Exit Function
            '
            Dim MyStyleHilite As String
            Dim MyStyleShadow As String
            '
            MyStyleHilite = encodeEmptyText(StyleHilite, "ccPanelShadow")
            MyStyleShadow = encodeEmptyText(StyleShadow, "ccPanelHilite")

            main_GetReversePanel = main_GetPanelTop(StylePanel, MyStyleHilite, MyStyleShadow, Width, Padding, HeightMin) _
                & EncodeText(Panel) _
                & main_GetPanelBottom(StylePanel, MyStyleHilite, MyStyleShadow, Width, Padding)
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_GetReversePanel")
        End Function
        '
        '========================================================================
        ' Return a panel header with the header message reversed out of the left
        '========================================================================
        '
        Public Function main_GetPanelHeader(ByVal HeaderMessage As String, Optional ByVal RightSideMessage As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetPanelHeader")
            '
            Dim iHeaderMessage As String
            Dim iRightSideMessage As String
            Dim Adminui As New coreAdminUIClass(Me)
            '
            'If Not (true) Then Exit Function
            '
            iHeaderMessage = EncodeText(HeaderMessage)
            iRightSideMessage = encodeEmptyText(RightSideMessage, FormatDateTime(main_PageStartTime))
            main_GetPanelHeader = Adminui.GetHeader(iHeaderMessage, iRightSideMessage)
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_GetPanelHeader")
        End Function

        '
        '========================================================================
        ' Prints the top of display panel
        '   Must be closed with PrintPanelBottom
        '========================================================================
        '
        Public Function main_GetPanelTop(Optional ByVal StylePanel As String = "", Optional ByVal StyleHilite As String = "", Optional ByVal StyleShadow As String = "", Optional ByVal Width As String = "", Optional ByVal Padding As String = "", Optional ByVal HeightMin As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetPanelTop")
            '
            'If Not (true) Then Exit Function
            '
            Dim ContentPanelWidth As String
            Dim MethodName As String
            Dim MyStylePanel As String
            Dim MyStyleHilite As String
            Dim MyStyleShadow As String
            Dim MyWidth As String
            Dim MyPadding As String
            Dim MyHeightMin As String
            '
            main_GetPanelTop = ""
            MyStylePanel = encodeEmptyText(StylePanel, "ccPanel")
            MyStyleHilite = encodeEmptyText(StyleHilite, "ccPanelHilite")
            MyStyleShadow = encodeEmptyText(StyleShadow, "ccPanelShadow")
            MyWidth = encodeEmptyText(Width, "100%")
            MyPadding = encodeEmptyText(Padding, "5")
            MyHeightMin = encodeEmptyText(HeightMin, "1")
            MethodName = "main_GetPanelTop"
            If vbIsNumeric(MyWidth) Then
                ContentPanelWidth = (CInt(MyWidth) - 2).ToString
            Else
                ContentPanelWidth = "100%"
            End If
            main_GetPanelTop = main_GetPanelTop _
                & cr & "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""" & MyWidth & """ class=""" & MyStylePanel & """>"
            '
            ' --- top hilite row
            '
            main_GetPanelTop = main_GetPanelTop _
                & cr2 & "<tr>" _
                & cr3 & "<td colspan=""3"" class=""" & MyStyleHilite & """><img alt=""space"" src=""/ccLib/images/spacer.gif"" height=""1"" width=""" & MyWidth & """ ></td>" _
                & cr2 & "</tr>"
            '
            ' --- center row with Panel
            '
            main_GetPanelTop = main_GetPanelTop _
                & cr2 & "<tr>" _
                & cr3 & "<td width=""1"" height=""" & MyHeightMin & """ class=""" & MyStyleHilite & """><img alt=""space"" src=""/ccLib/images/spacer.gif"" height=""" & MyHeightMin & """ width=""1"" ></td>" _
                & cr3 & "<td width=""" & ContentPanelWidth & """ valign=""top"" align=""left"" class=""" & MyStylePanel & """>" _
                & cr4 & "<table border=""0"" cellpadding=""" & MyPadding & """ cellspacing=""0"" width=""" & ContentPanelWidth & """ class=""" & MyStylePanel & """>" _
                & cr5 & "<tr>" _
                & cr6 & "<td valign=""top"" class=""" & MyStylePanel & """><Span class=""" & MyStylePanel & """>"
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        ' Return a panel with the input as center
        '========================================================================
        '
        Public Function main_GetPanelBottom(Optional ByVal StylePanel As String = "", Optional ByVal StyleHilite As String = "", Optional ByVal StyleShadow As String = "", Optional ByVal Width As String = "", Optional ByVal Padding As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetPanelBottom")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            Dim MyStylePanel As String
            Dim MyStyleHilite As String
            Dim MyStyleShadow As String
            Dim MyWidth As String
            Dim MyPadding As String
            '
            MyStylePanel = encodeEmptyText(StylePanel, "ccPanel")
            MyStyleHilite = encodeEmptyText(StyleHilite, "ccPanelHilite")
            MyStyleShadow = encodeEmptyText(StyleShadow, "ccPanelShadow")
            MyWidth = encodeEmptyText(Width, "100%")
            MyPadding = encodeEmptyText(Padding, "5")
            MethodName = "main_GetPanelBottom"
            '
            main_GetPanelBottom = main_GetPanelBottom _
                & cr6 & "</span></td>" _
                & cr5 & "</tr>" _
                & cr4 & "</table>" _
                & cr3 & "</td>" _
                & cr3 & "<td width=""1"" class=""" & MyStyleShadow & """><img alt=""space"" src=""/ccLib/images/spacer.gif"" height=""1"" width=""1"" ></td>" _
                & cr2 & "</tr>" _
                & cr2 & "<tr>" _
                & cr3 & "<td colspan=""3"" class=""" & MyStyleShadow & """><img alt=""space"" src=""/ccLib/images/spacer.gif"" height=""1"" width=""" & MyWidth & """ ></td>" _
                & cr2 & "</tr>" _
                & cr & "</table>"
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Public Function main_GetPanelButtons(ByVal ButtonValueList As String, ByVal ButtonName As String, Optional ByVal PanelWidth As String = "", Optional ByVal PanelHeightMin As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetPanelButtons")
            '
            'If Not (true) Then Exit Function
            '
            Dim iButtonValueList As String
            Dim iButtonName As String
            Dim MethodName As String
            Dim Adminui As New coreAdminUIClass(Me)
            '
            iButtonValueList = EncodeText(ButtonValueList)
            iButtonName = EncodeText(ButtonName)
            '
            MethodName = "main_GetPanelButtons()"
            '
            main_GetPanelButtons = Adminui.GetButtonBar(Adminui.GetButtonsFromList(iButtonValueList, True, True, iButtonName), "")
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
        End Function
        '
        '
        '
        Public Function main_GetPanelRev(ByVal PanelContent As String, Optional ByVal PanelWidth As String = "", Optional ByVal PanelHeightMin As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetPanelRev")
            '
            'If Not (true) Then Exit Function
            '
            main_GetPanelRev = main_GetPanel(PanelContent, "ccPanel", "ccPanelShadow", "ccPanelHilite", PanelWidth, 2, EncodeInteger(PanelHeightMin))
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_GetPanelRev")
        End Function
        '
        '
        '
        Public Function main_GetPanelInput(ByVal PanelContent As String, Optional ByVal PanelWidth As String = "", Optional ByVal PanelHeightMin As String = "1") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetPanelInput")
            '
            'If Not (true) Then Exit Function
            '
            main_GetPanelInput = main_GetPanel(PanelContent, "ccPanelInput", "ccPanelShadow", "ccPanelHilite", PanelWidth, 2, EncodeInteger(PanelHeightMin))
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_GetPanelInput")
        End Function
        '
        '========================================================================
        ' Print the tools panel at the bottom of the page
        '========================================================================
        '
        Public Function main_GetToolsPanel() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetToolsPanel")
            '
            'If Not (true) Then Exit Function
            '
            Dim copyNameValue As String
            Dim CopyName As String
            Dim copyValue As String
            Dim copyNameValueSplit() As String
            Dim VisitMin As Integer
            Dim VisitHrs As Integer
            Dim VisitSec As Integer
            Dim DebugPanel As String
            Dim Copy As String
            Dim CopySplit() As String
            Dim Ptr As Integer
            Dim EditTagID As String
            Dim QuickEditTagID As String
            Dim AdvancedEditTagID As String
            Dim WorkflowTagID As String
            Dim Tag As String
            Dim PathID As Integer
            Dim CS As Integer
            Dim PathsContentID As Integer
            Dim MethodName As String
            Dim TagID As String
            Dim ButtonPanel As String
            Dim ToolsPanel As coreFastStringClass
            Dim OptionsPanel As String
            Dim LinkPanel As coreFastStringClass
            Dim LoginPanel As String
            Dim iValueBoolean As Boolean
            Dim WorkingQueryString As String
            Dim ActionURL As String
            Dim BubbleCopy As String
            Dim AnotherPanel As coreFastStringClass
            Dim ClipBoard As String
            Dim RenderTimeString As String
            Dim Adminui As New coreAdminUIClass(Me)
            Dim ToolsPanelAddonID As Integer
            Dim ShowLegacyToolsPanel As Boolean
            Dim QS As String
            '
            MethodName = "main_GetToolsPanel"
            '
            If user.allowToolsPanel Then
                ShowLegacyToolsPanel = siteProperties.getBoolean("AllowLegacyToolsPanel", True)
                '
                ' --- Link Panel - used for both Legacy Tools Panel, and without it
                '
                LinkPanel = New coreFastStringClass
                LinkPanel.Add(SpanClassAdminSmall)
                LinkPanel.Add("Contensive " & cp.Version() & " | ")
                LinkPanel.Add(FormatDateTime(main_PageStartTime) & " | ")
                LinkPanel.Add("<a class=""ccAdminLink"" target=""_blank"" href=""http://support.Contensive.com/"">Support</A> | ")
                LinkPanel.Add("<a class=""ccAdminLink"" href=""" & html_EncodeHTML(siteProperties.adminURL) & """>Admin Home</A> | ")
                LinkPanel.Add("<a class=""ccAdminLink"" href=""" & html_EncodeHTML("http://" & main_ServerDomain) & """>Public Home</A> | ")
                LinkPanel.Add("<a class=""ccAdminLink"" target=""_blank"" href=""" & html_EncodeHTML(siteProperties.adminURL & "?" & RequestNameHardCodedPage & "=" & HardCodedPageMyProfile) & """>My Profile</A> | ")
                If siteProperties.getBoolean("AllowMobileTemplates", False) Then
                    If visit_browserIsMobile Then
                        QS = web_RefreshQueryString
                        QS = ModifyQueryString(QS, "method", "forcenonmobile")
                        LinkPanel.Add("<a class=""ccAdminLink"" href=""?" & QS & """>Non-Mobile Version</A> | ")
                    Else
                        QS = web_RefreshQueryString
                        QS = ModifyQueryString(QS, "method", "forcemobile")
                        LinkPanel.Add("<a class=""ccAdminLink"" href=""?" & QS & """>Mobile Version</A> | ")
                    End If
                End If
                LinkPanel.Add("</span>")
                '
                If ShowLegacyToolsPanel Then
                    ToolsPanel = New coreFastStringClass
                    WorkingQueryString = ModifyQueryString(web_RefreshQueryString, "ma", "", False)
                    '
                    ' ----- Tools Panel Caption
                    '
                    Dim helpLink As String
                    helpLink = ""
                    'helpLink = main_GetHelpLink("2", "Contensive Tools Panel", BubbleCopy)
                    BubbleCopy = "Use the Tools Panel to enable features such as editing and debugging tools. It also includes links to the admin site, the support site and the My Profile page."
                    main_GetToolsPanel = main_GetToolsPanel & main_GetPanelHeader("Contensive Tools Panel" & helpLink)
                    '
                    ToolsPanel.Add(html_GetFormStart(WorkingQueryString))
                    ToolsPanel.Add(html_GetFormInputHidden("Type", FormTypeToolsPanel))
                    '
                    If True Then
                        '
                        ' ----- Create the Options Panel
                        '
                        'PathsContentID = main_GetContentID("Paths")
                        '                '
                        '                ' Allow Help Links
                        '                '
                        '                iValueBoolean = visitProperty.getboolean("AllowHelpIcon")
                        '                TagID =  "AllowHelpIcon"
                        '                OptionsPanel = OptionsPanel & "" _
                        '                    & CR & "<div class=""ccAdminSmall"">" _
                        '                    & cr2 & "<LABEL for=""" & TagID & """>" & main_GetFormInputCheckBox2(TagID, iValueBoolean, TagID) & "&nbsp;Help</LABEL>" _
                        '                    & CR & "</div>"
                        '
                        EditTagID = "AllowEditing"
                        QuickEditTagID = "AllowQuickEditor"
                        AdvancedEditTagID = "AllowAdvancedEditor"
                        WorkflowTagID = "AllowWorkflowRendering"
                        '
                        ' Edit
                        '
                        helpLink = ""
                        'helpLink = main_GetHelpLink(7, "Enable Editing", "Display the edit tools for basic content, such as pages, copy and sections. ")
                        iValueBoolean = visitProperty.getBoolean("AllowEditing")
                        Tag = html_GetFormInputCheckBox2(EditTagID, iValueBoolean, EditTagID)
                        Tag = vbReplace(Tag, ">", " onClick=""document.getElementById('" & QuickEditTagID & "').checked=false;document.getElementById('" & AdvancedEditTagID & "').checked=false;"">")
                        OptionsPanel = OptionsPanel _
                            & cr & "<div class=""ccAdminSmall"">" _
                            & cr2 & "<LABEL for=""" & EditTagID & """>" & Tag & "&nbsp;Edit</LABEL>" & helpLink _
                            & cr & "</div>"
                        '
                        ' Quick Edit
                        '
                        helpLink = ""
                        'helpLink = main_GetHelpLink(8, "Enable Quick Edit", "Display the quick editor to edit the main page content.")
                        iValueBoolean = visitProperty.getBoolean("AllowQuickEditor")
                        Tag = html_GetFormInputCheckBox2(QuickEditTagID, iValueBoolean, QuickEditTagID)
                        Tag = vbReplace(Tag, ">", " onClick=""document.getElementById('" & EditTagID & "').checked=false;document.getElementById('" & AdvancedEditTagID & "').checked=false;"">")
                        OptionsPanel = OptionsPanel _
                            & cr & "<div class=""ccAdminSmall"">" _
                            & cr2 & "<LABEL for=""" & QuickEditTagID & """>" & Tag & "&nbsp;Quick Edit</LABEL>" & helpLink _
                            & cr & "</div>"
                        '
                        ' Advanced Edit
                        '
                        helpLink = ""
                        'helpLink = main_GetHelpLink(0, "Enable Advanced Edit", "Display the edit tools for advanced content, such as templates and add-ons. Basic content edit tools are also displayed.")
                        iValueBoolean = visitProperty.getBoolean("AllowAdvancedEditor")
                        Tag = html_GetFormInputCheckBox2(AdvancedEditTagID, iValueBoolean, AdvancedEditTagID)
                        Tag = vbReplace(Tag, ">", " onClick=""document.getElementById('" & QuickEditTagID & "').checked=false;document.getElementById('" & EditTagID & "').checked=false;"">")
                        OptionsPanel = OptionsPanel _
                            & cr & "<div class=""ccAdminSmall"">" _
                            & cr2 & "<LABEL for=""" & AdvancedEditTagID & """>" & Tag & "&nbsp;Advanced Edit</LABEL>" & helpLink _
                            & cr & "</div>"
                        '
                        ' Workflow Authoring Render Mode
                        '
                        helpLink = ""
                        'helpLink = main_GetHelpLink(9, "Enable Workflow Rendering", "Control the display of workflow rendering. With workflow rendering enabled, any changes saved to content records that have not been published will be visible for your review.")
                        If siteProperties.allowWorkflowAuthoring Then
                            iValueBoolean = visitProperty.getBoolean("AllowWorkflowRendering")
                            Tag = html_GetFormInputCheckBox2(WorkflowTagID, iValueBoolean, WorkflowTagID)
                            OptionsPanel = OptionsPanel _
                                & cr & "<div class=""ccAdminSmall"">" _
                                & cr2 & "<LABEL for=""" & WorkflowTagID & """>" & Tag & "&nbsp;Render Workflow Authoring Changes</LABEL>" & helpLink _
                                & cr & "</div>"
                        End If
                        helpLink = ""
                        iValueBoolean = visitProperty.getBoolean("AllowDebugging")
                        TagID = "AllowDebugging"
                        Tag = html_GetFormInputCheckBox2(TagID, iValueBoolean, TagID)
                        OptionsPanel = OptionsPanel _
                            & cr & "<div class=""ccAdminSmall"">" _
                            & cr2 & "<LABEL for=""" & TagID & """>" & Tag & "&nbsp;Debug</LABEL>" & helpLink _
                            & cr & "</div>"
                        '
                        ' Create Path Block Row
                        '
                        If user.isAuthenticatedDeveloper() Then
                            TagID = "CreatePathBlock"
                            If siteProperties.allowPathBlocking Then
                                '
                                ' Path blocking allowed
                                '
                                'OptionsPanel = OptionsPanel & SpanClassAdminSmall & "<LABEL for=""" & TagID & """>"
                                CS = db.csOpen("Paths", "name=" & db.encodeSQLText(web_requestPath), , , , , , "ID")
                                If db.cs_Ok(CS) Then
                                    PathID = (db.cs_getInteger(CS, "ID"))
                                End If
                                Call db.cs_Close(CS)
                                If PathID <> 0 Then
                                    '
                                    ' Path is blocked
                                    '
                                    Tag = html_GetFormInputCheckBox2(TagID, True, TagID) & "&nbsp;Path is blocked [" & web_requestPath & "] [<a href=""" & html_EncodeHTML(siteProperties.adminURL & "?af=" & AdminFormEdit & "&id=" & PathID & "&cid=" & main_GetContentID("paths") & "&ad=1") & """ target=""_blank"">edit</a>]</LABEL>"
                                Else
                                    '
                                    ' Path is not blocked
                                    '
                                    Tag = html_GetFormInputCheckBox2(TagID, False, TagID) & "&nbsp;Block this path [" & web_requestPath & "]</LABEL>"
                                End If
                                helpLink = ""
                                'helpLink = main_GetHelpLink(10, "Enable Debugging", "Debugging is a developer only debugging tool. With Debugging enabled, ccLib.TestPoints(...) will print, ErrorTrapping will be displayed, redirections are blocked, and more.")
                                OptionsPanel = OptionsPanel _
                                    & cr & "<div class=""ccAdminSmall"">" _
                                    & cr2 & "<LABEL for=""" & TagID & """>" & Tag & "</LABEL>" & helpLink _
                                    & cr & "</div>"
                            End If
                        End If
                        '
                        ' Buttons
                        '
                        OptionsPanel = OptionsPanel & "" _
                            & cr & "<div class=""ccButtonCon"">" _
                            & cr2 & "<input type=submit name=" & "mb value=""" & ButtonApply & """>" _
                            & cr & "</div>" _
                            & ""
                    End If
                    '
                    ' ----- Create the Login Panel
                    '
                    If Trim(user.name) = "" Then
                        Copy = "You are logged in as member #" & user.id & "."
                    Else
                        Copy = "You are logged in as " & user.name & "."
                    End If
                    LoginPanel = LoginPanel & "" _
                        & cr & "<div class=""ccAdminSmall"">" _
                        & cr2 & Copy & "" _
                        & cr & "</div>"
                    '
                    ' Username
                    '
                    Dim Caption As String
                    If siteProperties.getBoolean("allowEmailLogin", False) Then
                        Caption = "Username&nbsp;or&nbsp;Email"
                    Else
                        Caption = "Username"
                    End If
                    TagID = "Username"
                    LoginPanel = LoginPanel & "" _
                        & cr & "<div class=""ccAdminSmall"">" _
                        & cr2 & "<LABEL for=""" & TagID & """>" & html_GetFormInputText2(TagID, "", 1, 30, TagID, False) & "&nbsp;" & Caption & "</LABEL>" _
                        & cr & "</div>"
                    '
                    ' Username
                    '
                    If siteProperties.getBoolean("allownopasswordLogin", False) Then
                        Caption = "Password&nbsp;(optional)"
                    Else
                        Caption = "Password"
                    End If
                    TagID = "Password"
                    LoginPanel = LoginPanel & "" _
                        & cr & "<div class=""ccAdminSmall"">" _
                        & cr2 & "<LABEL for=""" & TagID & """>" & html_GetFormInputText2(TagID, "", 1, 30, TagID, True) & "&nbsp;" & Caption & "</LABEL>" _
                        & cr & "</div>"
                    '
                    ' Autologin checkbox
                    '
                    If siteProperties.getBoolean("AllowAutoLogin", False) Then
                        If visit_cookieSupport Then
                            TagID = "autologin"
                            LoginPanel = LoginPanel & "" _
                                & cr & "<div class=""ccAdminSmall"">" _
                                & cr2 & "<LABEL for=""" & TagID & """>" & html_GetFormInputCheckBox2(TagID, True, TagID) & "&nbsp;Login automatically from this computer</LABEL>" _
                                & cr & "</div>"
                        End If
                    End If
                    '
                    ' Buttons
                    '
                    LoginPanel = LoginPanel & Adminui.GetButtonBar(Adminui.GetButtonsFromList(ButtonLogin & "," & ButtonLogout, True, True, "mb"), "")
                    '
                    ' ----- assemble tools panel
                    '
                    Copy = "" _
                        & cr & "<td width=""50%"" class=""ccPanelInput"" style=""vertical-align:bottom;"">" _
                        & kmaIndent(LoginPanel) _
                        & cr & "</td>" _
                        & cr & "<td width=""50%"" class=""ccPanelInput"" style=""vertical-align:bottom;"">" _
                        & kmaIndent(OptionsPanel) _
                        & cr & "</td>"
                    Copy = "" _
                        & cr & "<tr>" _
                        & kmaIndent(Copy) _
                        & cr & "</tr>" _
                        & ""
                    Copy = "" _
                        & cr & "<table border=""0"" cellpadding=""3"" cellspacing=""0"" width=""100%"">" _
                        & kmaIndent(Copy) _
                        & cr & "</table>"
                    ToolsPanel.Add(main_GetPanelInput(Copy))
                    ToolsPanel.Add(html_GetFormEnd)
                    main_GetToolsPanel = main_GetToolsPanel & main_GetPanel(ToolsPanel.Text, "ccPanel", "ccPanelHilite", "ccPanelShadow", "100%", 5)
                    '
                    main_GetToolsPanel = main_GetToolsPanel & main_GetPanel(LinkPanel.Text, "ccPanel", "ccPanelHilite", "ccPanelShadow", "100%", 5)
                    '
                    LinkPanel = Nothing
                    ToolsPanel = Nothing
                    AnotherPanel = Nothing
                End If
                '
                ' --- Developer Debug Panel
                '
                If visitProperty.getBoolean("AllowDebugging") Then
                    '
                    ' --- Debug Panel Header
                    '
                    LinkPanel = New coreFastStringClass
                    LinkPanel.Add(SpanClassAdminSmall)
                    'LinkPanel.Add( "WebClient " & main_WebClientVersion & " | "
                    LinkPanel.Add("Contensive " & cp.Version() & " | ")
                    LinkPanel.Add(FormatDateTime(main_PageStartTime) & " | ")
                    LinkPanel.Add("<a class=""ccAdminLink"" target=""_blank"" href=""http: //support.Contensive.com/"">Support</A> | ")
                    LinkPanel.Add("<a class=""ccAdminLink"" href=""" & html_EncodeHTML(siteProperties.adminURL) & """>Admin Home</A> | ")
                    LinkPanel.Add("<a class=""ccAdminLink"" href=""" & html_EncodeHTML("http://" & main_ServerDomain) & """>Public Home</A> | ")
                    LinkPanel.Add("<a class=""ccAdminLink"" target=""_blank"" href=""" & html_EncodeHTML(siteProperties.adminURL & "?" & RequestNameHardCodedPage & "=" & HardCodedPageMyProfile) & """>My Profile</A> | ")
                    LinkPanel.Add("</span>")
                    '
                    '
                    '
                    'DebugPanel = DebugPanel & main_GetPanel(LinkPanel.Text, "ccPanel", "ccPanelHilite", "ccPanelShadow", "100%", "5")
                    '
                    DebugPanel = DebugPanel _
                        & cr & "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"">" _
                        & cr2 & "<tr>" _
                        & cr3 & "<td width=""100"" class=""ccPanel""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100"" height=""1"" ></td>" _
                        & cr3 & "<td width=""100%"" class=""ccPanel""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""1"" ></td>" _
                        & cr2 & "</tr>"
                    '
                    DebugPanel = DebugPanel & main_DebugPanelRow("DOM", "<a class=""ccAdminLink"" href=""/cclib/clientside/DOMViewer.htm"" target=""_blank"">Click</A>")
                    DebugPanel = DebugPanel & main_DebugPanelRow("Trap Errors", html_EncodeHTML(siteProperties.trapErrors.ToString))
                    DebugPanel = DebugPanel & main_DebugPanelRow("Trap Email", html_EncodeHTML(siteProperties.getText("TrapEmail")))
                    DebugPanel = DebugPanel & main_DebugPanelRow("main_ServerLink", html_EncodeHTML(main_ServerLink))
                    DebugPanel = DebugPanel & main_DebugPanelRow("main_ServerDomain", html_EncodeHTML(main_ServerDomain))
                    DebugPanel = DebugPanel & main_DebugPanelRow("main_ServerProtocol", html_EncodeHTML(web_requestProtocol))
                    DebugPanel = DebugPanel & main_DebugPanelRow("main_ServerHost", html_EncodeHTML(webServer.requestDomain))
                    DebugPanel = DebugPanel & main_DebugPanelRow("main_ServerPath", html_EncodeHTML(web_requestPath))
                    DebugPanel = DebugPanel & main_DebugPanelRow("main_ServerPage", html_EncodeHTML(web_requestPage))
                    Copy = ""
                    If webServer.requestQueryString <> "" Then
                        CopySplit = Split(webServer.requestQueryString, "&")
                        For Ptr = 0 To UBound(CopySplit)
                            copyNameValue = CopySplit(Ptr)
                            If copyNameValue <> "" Then
                                copyNameValueSplit = Split(copyNameValue, "=")
                                CopyName = DecodeResponseVariable(copyNameValueSplit(0))
                                copyValue = ""
                                If UBound(copyNameValueSplit) > 0 Then
                                    copyValue = DecodeResponseVariable(copyNameValueSplit(1))
                                End If
                                Copy = Copy & cr & "<br>" & html_EncodeHTML(CopyName & "=" & copyValue)
                            End If
                        Next
                        Copy = Mid(Copy, 8)
                    End If
                    DebugPanel = DebugPanel & main_DebugPanelRow("main_ServerQueryString", Copy)
                    Copy = ""
                    For Each kvp As KeyValuePair(Of String, docPropertiesClass) In docProperties.docPropertiesDict
                        If kvp.Value.IsForm Then
                            Copy = Copy & cr & "<br>" & html_EncodeHTML(kvp.Value.NameValue)
                        End If
                    Next

                    'DebugPanel = DebugPanel & main_DebugPanelRow("ServerForm", Copy)
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Request Path", html_EncodeHTML(web_requestPath))
                    'DebugPanel = DebugPanel & main_DebugPanelRow("CDN Files Path", html_EncodeHTML(appConfig.cdnFilesNetprefix))
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Referrer", html_EncodeHTML(web.requestReferrer))
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Cookies", html_EncodeHTML(web.requestCookieString))
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Visit Id", "<a href=""" & siteProperties.adminURL & "?cid=" & main_GetContentID("visits") & "&af=4&id=" & main_VisitId & """>" & main_VisitId & "</a>")
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Visit Start Date", EncodeText(main_VisitStartDateValue))
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Visit Start Time", EncodeText(main_VisitStartTime))
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Visit Last Time", EncodeText(main_VisitLastTime))
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Visit Cookies Supported", EncodeText(main_VisitCookieSupport))
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Visit Pages", EncodeText(main_VisitPages))
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Visitor ID", "<a href=""" & siteProperties.adminURL & "?cid=" & main_GetContentID("visitors") & "&af=4&id=" & main_VisitorID & """>" & main_VisitorID & "</a>")
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Visitor New", EncodeText(main_VisitorNew))
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Member ID", "<a href=""" & siteProperties.adminURL & "?cid=" & main_GetContentID("people") & "&af=4&id=" & user.userId & """>" & user.userId & "</a>")
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Member Name", html_EncodeHTML(user.userName))
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Member New", EncodeText(user.userIsNew))
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Member Language", user.userLanguage)
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Page", "<a href=""" & siteProperties.adminURL & "?cid=" & main_GetContentID("page content") & "&af=4&id=" & main_RenderedPageID & """>" & main_RenderedPageID & ", " & main_RenderedPageName & "</a>")
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Section", "<a href=""" & siteProperties.adminURL & "?cid=" & main_GetContentID("site sections") & "&af=4&id=" & main_RenderedSectionID & """>" & main_RenderedSectionID & ", " & main_RenderedSectionName & "</a>")
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Template", "<a href=""" & siteProperties.adminURL & "?cid=" & main_GetContentID("page templates") & "&af=4&id=" & main_RenderedTemplateID & """>" & main_RenderedTemplateID & ", " & main_RenderedTemplateName & "</a>")
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Domain", "<a href=""" & siteProperties.adminURL & "?cid=" & main_GetContentID("domains") & "&af=4&id=" & domains.domainDetails.id & """>" & domains.domainDetails.id & ", " & main_ServerDomain & "</a>")
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Template Reason", pageManager_TemplateReason)
                    'DebugPanel = DebugPanel & main_DebugPanelRow("ProcessID", GetProcessID.ToString())
                    'DebugPanel = DebugPanel & main_DebugPanelRow("Krnl ProcessID", encodeText(csv_HostServiceProcessID))
                    DebugPanel = DebugPanel & main_DebugPanelRow("Render Time &gt;= ", Format((GetTickCount - constructorTickCount) / 1000, "0.000") & " sec")
                    If True Then
                        VisitHrs = CInt(main_VisitTimeToLastHit / 3600)
                        VisitMin = CInt(main_VisitTimeToLastHit / 60) - (60 * VisitHrs)
                        VisitSec = main_VisitTimeToLastHit Mod 60
                        DebugPanel = DebugPanel & main_DebugPanelRow("Visit Length", CStr(main_VisitTimeToLastHit) & " sec, (" & VisitHrs & " hrs " & VisitMin & " mins " & VisitSec & " secs)")
                        'DebugPanel = DebugPanel & main_DebugPanelRow("Visit Length", CStr(main_VisitTimeToLastHit) & " sec, (" & Int(main_VisitTimeToLastHit / 60) & " min " & (main_VisitTimeToLastHit Mod 60) & " sec)")
                    End If
                    DebugPanel = DebugPanel & main_DebugPanelRow("Addon Profile", "<hr><ul class=""ccPanel"">" & "<li>tbd</li>" & cr & "</ul>")
                    '
                    DebugPanel = DebugPanel & "</table>"
                    '
                    If ShowLegacyToolsPanel Then
                        '
                        ' Debug Panel as part of legacy tools panel
                        '
                        main_GetToolsPanel = main_GetToolsPanel _
                            & main_GetPanel(DebugPanel, "ccPanel", "ccPanelHilite", "ccPanelShadow", "100%", 5)
                    Else
                        '
                        ' Debug Panel without Legacy Tools panel
                        '
                        main_GetToolsPanel = main_GetToolsPanel _
                            & main_GetPanelHeader("Debug Panel") _
                            & main_GetPanel(LinkPanel.Text) _
                            & main_GetPanel(DebugPanel, "ccPanel", "ccPanelHilite", "ccPanelShadow", "100%", 5)
                    End If
                End If
                main_GetToolsPanel = cr & "<div class=""ccCon"">" & kmaIndent(main_GetToolsPanel) & cr & "</div>"
            End If
            '
            Exit Function
            '
ErrorTrap:
            LinkPanel = Nothing
            ToolsPanel = Nothing
            AnotherPanel = Nothing
            Call handleLegacyError18(MethodName)
        End Function
        '
        '
        '
        Private Function main_DebugPanelRow(Label As String, Value As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("DebugPanelRow")
            '
            'If Not (true) Then Exit Function
            '
            main_DebugPanelRow = cr2 & "<tr><td valign=""top"" class=""ccPanel ccAdminSmall"">" & Label & "</td><td valign=""top"" class=""ccPanel ccAdminSmall"">" & Value & "</td></tr>"
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError13("main_DebugPanelRow")
        End Function
        '        '
        '        '========================================================================
        '        '   Content Watch
        '        '
        '        '   Creates or updates a record in the content watch content. Content Watch
        '        '   contains a record that links
        '        '   Update link entry for content watch record for this content record
        '        '========================================================================
        '        '
        '        Public Sub main_TrackContent(ByVal ContentName As String, ByVal RecordID As Integer)
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("TrackContent")
        '            '
        '            'If Not (true) Then Exit Sub
        '            '
        '            Dim CSPointer As Integer
        '            Dim MethodName As String
        '            Dim iContentName As String
        '            Dim iRecordID As Integer
        '            '
        '            If Not main_GetStreamBoolean2(RequestNameBlockContentTracking) Then
        '                iContentName = EncodeText(ContentName)
        '                iRecordID = EncodeInteger(RecordID)
        '                '
        '                MethodName = "main_TrackContent"
        '                '
        '                CSPointer = main_OpenCSContentRecord2(iContentName, iRecordID)
        '                If Not app.db_IsCSOK(CSPointer) Then
        '                    Call handleLegacyError14(MethodName, "main_TrackContent, Error opening ContentSet from Content/Record [" & iContentName & "/" & EncodeText(iRecordID) & "].")
        '                Else
        '                    Call main_TrackContentSet(CSPointer)
        '                End If
        '            End If
        '            '
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError18(MethodName)
        '            '
        '        End Sub
        '
        '========================================================================
        ' Print a content blocks headline
        '   note - this call includes encoding
        '========================================================================
        '
        Public Function main_GetTitle(ByVal Title As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetTitle")
            '
            'If Not (true) Then Exit Function
            '
            Dim iTitle As String
            '
            iTitle = EncodeText(Title)
            If iTitle <> "" Then
                main_GetTitle = "<p>" & AddSpan(iTitle, "ccHeadline") & "</p>"
            End If
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_GetTitle")
        End Function
        '
        '=============================================================================
        ' Print the See Also listing
        '   ContentName is the name of the parent table
        '   RecordID is the parent RecordID
        '=============================================================================
        '
        Public Function main_GetSeeAlso(ByVal ContentName As String, ByVal RecordID As Integer) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetSeeAlso")
            '
            'If Not (true) Then Exit Function
            '
            Dim SQL As String
            Dim CS As Integer
            Dim SeeAlsoLink As String
            Dim ContentID As Integer
            Dim SeeAlsoCount As Integer
            Dim Copy As String
            Dim MethodName As String
            Dim iContentName As String
            Dim iRecordID As Integer
            Dim IsEditingLocal As Boolean
            '
            iContentName = EncodeText(ContentName)
            iRecordID = EncodeInteger(RecordID)
            '
            MethodName = "main_GetSeeAlso"
            '
            SeeAlsoCount = 0
            If iRecordID > 0 Then
                ContentID = main_GetContentID(iContentName)
                If (ContentID > 0) Then
                    '
                    ' ----- Set authoring only for valid ContentName
                    '
                    IsEditingLocal = user.isEditing(iContentName)
                Else
                    '
                    ' ----- if iContentName was bad, maybe they put table in, no authoring
                    '
                    ContentID = db_GetContentIDByTablename(iContentName)
                End If
                If (ContentID > 0) Then
                    '
                    CS = db.csOpen("See Also", "((active<>0)AND(ContentID=" & ContentID & ")AND(RecordID=" & iRecordID & "))")
                    Do While (db.cs_Ok(CS))
                        SeeAlsoLink = (db.cs_getText(CS, "Link"))
                        If SeeAlsoLink <> "" Then
                            main_GetSeeAlso = main_GetSeeAlso & cr & "<li class=""ccListItem"">"
                            If vbInstr(1, SeeAlsoLink, "://") = 0 Then
                                SeeAlsoLink = web_requestProtocol & SeeAlsoLink
                            End If
                            If IsEditingLocal Then
                                main_GetSeeAlso = main_GetSeeAlso & main_GetRecordEditLink2("See Also", (db.cs_getInteger(CS, "ID")), False, "", user.isEditing("See Also"))
                            End If
                            main_GetSeeAlso = main_GetSeeAlso & "<a href=""" & html_EncodeHTML(SeeAlsoLink) & """ target=""_blank"">" & (db.cs_getText(CS, "Name")) & "</A>"
                            Copy = (db.cs_getText(CS, "Brief"))
                            If Copy <> "" Then
                                main_GetSeeAlso = main_GetSeeAlso & "<br >" & AddSpan(Copy, "ccListCopy")
                            End If
                            SeeAlsoCount = SeeAlsoCount + 1
                            main_GetSeeAlso = main_GetSeeAlso & "</li>"
                        End If
                        db.db_csGoNext(CS)
                    Loop
                    db.cs_Close(CS)
                    '
                    If IsEditingLocal Then
                        SeeAlsoCount = SeeAlsoCount + 1
                        main_GetSeeAlso = main_GetSeeAlso & cr & "<li class=""ccListItem"">" & main_GetRecordAddLink("See Also", "RecordID=" & iRecordID & ",ContentID=" & ContentID) & "</LI>"
                    End If
                End If
                '
                If SeeAlsoCount = 0 Then
                    main_GetSeeAlso = ""
                Else
                    main_GetSeeAlso = "<p>See Also" & cr & "<ul class=""ccList"">" & kmaIndent(main_GetSeeAlso) & cr & "</ul></p>"
                End If
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        ' Print the "for more information, please contact" line
        '
        '========================================================================
        '
        Public Function main_GetMoreInfo(ByVal contactMemberID As Integer) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetMoreInfo")
            '
            'If Not (true) Then Exit Function
            '
            main_GetMoreInfo = pageManager_getMoreInfoHtml(EncodeInteger(contactMemberID))
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_GetMoreInfo")
            '
        End Function
        '
        '========================================================================
        ' ----- prints a link to the feedback popup form
        '
        '   Creates a sub-form that when submitted, is logged by the notes
        '   system (in MembersLib right now). When submitted, it prints a thank you
        '   message.
        '
        '========================================================================
        '
        Public Function main_GetFeedbackForm(ByVal ContentName As String, ByVal RecordID As Integer, ByVal ToMemberID As Integer, Optional ByVal headline As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetFeedbackForm")
            '
            'If Not (true) Then Exit Function
            '
            Dim NoteButton As String
            'Dim NotesfromEmail As String
            Dim Panel As String
            Dim Copy As String
            Dim Filename As String
            'dim dt as datatable
            Dim FeedbackButton As String
            Dim NotesCID As Integer
            Dim NoteID As Integer
            Dim NoteiToMemberID As Integer
            Dim NoteCopy As String
            Dim NoteFromEmail As String
            Dim NoteFromName As String
            Dim NoteContentID As Integer
            Dim NoteiRecordID As Integer
            Dim WhereClause As String
            Dim MethodName As String
            Dim CS As Integer
            Dim iContentName As String
            Dim iRecordID As Integer
            Dim iToMemberID As Integer
            Dim iHeadline As String
            '
            iContentName = EncodeText(ContentName)
            iRecordID = EncodeInteger(RecordID)
            iToMemberID = EncodeInteger(ToMemberID)
            iHeadline = encodeEmptyText(headline, "")
            '
            MethodName = "main_GetFeedbackForm"
            '
            Const FeedbackButtonSubmit = "Submit"
            '
            FeedbackButton = docProperties.getText("fbb")
            Select Case FeedbackButton
                Case FeedbackButtonSubmit
                    '
                    ' ----- form was submitted, save the note, send it and say thanks
                    '
                    NoteFromName = docProperties.getText("NoteFromName")
                    NoteFromEmail = docProperties.getText("NoteFromEmail")
                    '
                    NoteCopy = NoteCopy & "Feedback Submitted" & BR
                    NoteCopy = NoteCopy & "From " & NoteFromName & " at " & NoteFromEmail & BR
                    NoteCopy = NoteCopy & "Replying to:" & BR
                    If iHeadline <> "" Then
                        NoteCopy = NoteCopy & "    Article titled [" & iHeadline & "]" & BR
                    End If
                    NoteCopy = NoteCopy & "    Record [" & iRecordID & "] in Content Definition [" & iContentName & "]" & BR
                    NoteCopy = NoteCopy & BR
                    NoteCopy = NoteCopy & "<b>Comments</b>" & BR
                    '
                    Copy = docProperties.getText("NoteCopy")
                    If (Copy = "") Then
                        NoteCopy = NoteCopy & "[no comments entered]" & BR
                    Else
                        NoteCopy = NoteCopy & main_EncodeCRLF(Copy) & BR
                    End If
                    '
                    NoteCopy = NoteCopy & BR
                    NoteCopy = NoteCopy & "<b>Content on which the comments are based</b>" & BR
                    '
                    CS = db.csOpen(iContentName, "ID=" & iRecordID)
                    Copy = "[the content of this page is not available]" & BR
                    If db.cs_Ok(CS) Then
                        Copy = (db.db_GetCS(CS, "copyFilename"))
                        'Copy = main_EncodeContent5(Copy, user.userid, iContentName, iRecordID, 0, False, False, True, True, False, True, "", "", False, 0)
                    End If
                    NoteCopy = NoteCopy & Copy & BR
                    Call db.cs_Close(CS)
                    '
                    Call email_sendMemberEmail3(iToMemberID, NoteFromEmail, "Feedback Form Submitted", NoteCopy, False, True, 0, "", False)
                    '
                    ' ----- Note sent, say thanks
                    '
                    main_GetFeedbackForm = main_GetFeedbackForm & "<p>Thank you. Your feedback was received.</p>"
                Case Else
                    '
                    ' ----- print the feedback submit form
                    '
                    Panel = "<form Action=""" & web_ServerFormActionURL & "?" & web_RefreshQueryString & """ Method=""post"">"
                    Panel = Panel & "<table border=""0"" cellpadding=""4"" cellspacing=""0"" width=""100%"">"
                    Panel = Panel & "<tr>"
                    Panel = Panel & "<td colspan=""2""><p>Your feedback is welcome</p></td>"
                    Panel = Panel & "</tr><tr>"
                    '
                    ' ----- From Name
                    '
                    Copy = user.name
                    Panel = Panel & "<td align=""right"" width=""100""><p>Your Name</p></td>"
                    Panel = Panel & "<td align=""left""><input type=""text"" name=""NoteFromName"" value=""" & html_EncodeHTML(Copy) & """></span></td>"
                    Panel = Panel & "</tr><tr>"
                    '
                    ' ----- From Email address
                    '
                    Copy = user.email
                    Panel = Panel & "<td align=""right"" width=""100""><p>Your Email</p></td>"
                    Panel = Panel & "<td align=""left""><input type=""text"" name=""NoteFromEmail"" value=""" & html_EncodeHTML(Copy) & """></span></td>"
                    Panel = Panel & "</tr><tr>"
                    '
                    ' ----- Message
                    '
                    Copy = ""
                    Panel = Panel & "<td align=""right"" width=""100"" valign=""top""><p>Feedback</p></td>"
                    Panel = Panel & "<td>" & html_GetFormInputText2("NoteCopy", Copy, 4, 40, "TextArea", False) & "</td>"
                    'Panel = Panel & "<td><textarea ID=""TextArea"" rows=""4"" cols=""40"" name=""NoteCopy"">" & Copy & "</textarea></td>"
                    Panel = Panel & "</tr><tr>"
                    '
                    ' ----- submit button
                    '
                    Panel = Panel & "<td>&nbsp;</td>"
                    Panel = Panel & "<td><input type=""submit"" name=""fbb"" value=""" & FeedbackButtonSubmit & """></td>"
                    Panel = Panel & "</tr></table>"
                    Panel = Panel & "</form>"
                    '
                    main_GetFeedbackForm = Panel
            End Select
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Public Function main_OpenCSWhatsNew(Optional ByVal SortFieldList As String = "", Optional ByVal ActiveOnly As Boolean = True, Optional ByVal PageSize As Integer = 1000, Optional ByVal PageNumber As Integer = 1) As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("OpenCSWhatsNew")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            '
            MethodName = "main_OpenCSWhatsNew"
            '
            main_OpenCSWhatsNew = main_OpenCSContentWatchList("What's New", SortFieldList, ActiveOnly, PageSize, PageNumber)
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        '   Open a content set with the current whats new list
        '========================================================================
        '
        Public Function main_OpenCSContentWatchList(ByVal ListName As String, Optional ByVal SortFieldList As String = "", Optional ByVal ActiveOnly As Boolean = True, Optional ByVal PageSize As Integer = 1000, Optional ByVal PageNumber As Integer = 1) As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("OpenCsContentWatchList")
            '
            'If Not (true) Then Exit Function
            '
            Dim SQL As String
            Dim iSortFieldList As String
            Dim MethodName As String
            Dim CS As Integer
            '
            iSortFieldList = Trim(encodeEmptyText(SortFieldList, ""))
            'iSortFieldList = encodeMissingText(SortFieldList, "DateAdded")
            If iSortFieldList = "" Then
                iSortFieldList = "DateAdded"
            End If
            '
            MethodName = "main_OpenCSContentWatchList( " & ListName & ", " & iSortFieldList & ", " & ActiveOnly & " )"
            '
            ' ----- Add tablename to the front of SortFieldList fieldnames
            '
            iSortFieldList = " " & vbReplace(iSortFieldList, ",", " , ") & " "
            iSortFieldList = vbReplace(iSortFieldList, " ID ", " ccContentWatch.ID ", 1, 99, vbTextCompare)
            iSortFieldList = vbReplace(iSortFieldList, " Link ", " ccContentWatch.Link ", 1, 99, vbTextCompare)
            iSortFieldList = vbReplace(iSortFieldList, " LinkLabel ", " ccContentWatch.LinkLabel ", 1, 99, vbTextCompare)
            iSortFieldList = vbReplace(iSortFieldList, " SortOrder ", " ccContentWatch.SortOrder ", 1, 99, vbTextCompare)
            iSortFieldList = vbReplace(iSortFieldList, " DateAdded ", " ccContentWatch.DateAdded ", 1, 99, vbTextCompare)
            iSortFieldList = vbReplace(iSortFieldList, " ContentID ", " ccContentWatch.ContentID ", 1, 99, vbTextCompare)
            iSortFieldList = vbReplace(iSortFieldList, " RecordID ", " ccContentWatch.RecordID ", 1, 99, vbTextCompare)
            iSortFieldList = vbReplace(iSortFieldList, " ModifiedDate ", " ccContentWatch.ModifiedDate ", 1, 99, vbTextCompare)
            '
            ' ----- Special case
            '
            iSortFieldList = vbReplace(iSortFieldList, " name ", " ccContentWatch.LinkLabel ", 1, 99, vbTextCompare)
            '
            SQL = "SELECT" _
                    & " ccContentWatch.ID AS ID" _
                    & ",ccContentWatch.Link as Link" _
                    & ",ccContentWatch.LinkLabel as LinkLabel" _
                    & ",ccContentWatch.SortOrder as SortOrder" _
                    & ",ccContentWatch.DateAdded as DateAdded" _
                    & ",ccContentWatch.ContentID as ContentID" _
                    & ",ccContentWatch.RecordID as RecordID" _
                    & ",ccContentWatch.ModifiedDate as ModifiedDate" _
                & " FROM (ccContentWatchLists" _
                    & " LEFT JOIN ccContentWatchListRules ON ccContentWatchLists.ID = ccContentWatchListRules.ContentWatchListID)" _
                    & " LEFT JOIN ccContentWatch ON ccContentWatchListRules.ContentWatchID = ccContentWatch.ID" _
                & " WHERE (((ccContentWatchLists.Name)=" & db.encodeSQLText(ListName) & ")" _
                    & "AND ((ccContentWatchLists.Active)<>0)" _
                    & "AND ((ccContentWatchListRules.Active)<>0)" _
                    & "AND ((ccContentWatch.Active)<>0)" _
                    & "AND (ccContentWatch.Link is not null)" _
                    & "AND (ccContentWatch.LinkLabel is not null)" _
                    & "AND ((ccContentWatch.WhatsNewDateExpires is null)or(ccContentWatch.WhatsNewDateExpires>" & db.encodeSQLDate(main_PageStartTime) & "))" _
                    & ")" _
                & " ORDER BY " & iSortFieldList & ";"
            main_OpenCSContentWatchList = db.cs_openSql(SQL, , PageSize, PageNumber)
            If Not db.cs_Ok(main_OpenCSContentWatchList) Then
                '
                ' Check if listname exists
                '
                CS = db.csOpen("Content Watch Lists", "name=" & db.encodeSQLText(ListName), "ID", , , , , "ID")
                If Not db.cs_Ok(CS) Then
                    Call db.cs_Close(CS)
                    CS = db.cs_insertRecord("Content Watch Lists")
                    If db.cs_Ok(CS) Then
                        Call db.cs_set(CS, "name", ListName)
                    End If
                End If
                Call db.cs_Close(CS)
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        ' Print Whats New
        '   Prints a linked list of new content
        '========================================================================
        '
        Public Function main_GetWhatsNew(Optional ByVal SortFieldList As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetWhatsNew")
            '
            'If Not (true) Then Exit Function
            '
            Dim CSPointer As Integer
            Dim ContentID As Integer
            Dim RecordID As Integer
            Dim MethodName As String
            Dim LinkLabel As String
            Dim Link As String
            '
            MethodName = "main_GetWhatsNew"
            '
            CSPointer = main_OpenCSWhatsNew(SortFieldList)
            '
            If db.cs_Ok(CSPointer) Then
                ContentID = main_GetContentID("Content Watch")
                Do While db.cs_Ok(CSPointer)
                    Link = db.cs_getText(CSPointer, "link")
                    LinkLabel = db.cs_getText(CSPointer, "LinkLabel")
                    RecordID = db.cs_getInteger(CSPointer, "ID")
                    If (LinkLabel <> "") Then
                        main_GetWhatsNew = main_GetWhatsNew & cr & "<li class=""ccListItem"">"
                        If (Link <> "") Then
                            main_GetWhatsNew = main_GetWhatsNew & main_GetLinkedText("<a href=""" & html_EncodeHTML(web_requestPage & "?rc=" & ContentID & "&ri=" & RecordID) & """>", LinkLabel)
                        Else
                            main_GetWhatsNew = main_GetWhatsNew & LinkLabel
                        End If
                        main_GetWhatsNew = main_GetWhatsNew & "</li>"
                    End If
                    Call db.db_csGoNext(CSPointer)
                Loop
                main_GetWhatsNew = cr & "<ul class=""ccWatchList"">" & kmaIndent(main_GetWhatsNew) & cr & "</ul>"
            End If
            Call db.cs_Close(CSPointer)
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
        End Function
        ''
        ''========================================================================
        ''   Print the login form in an intercept page
        ''========================================================================
        ''
        'Public Function main_GetLoginPage() As String
        '    main_GetLoginPage = user_GetLoginPage2(False)
        'End Function
        '        '
        '        '========================================================================
        '        ' ----- main_GetJoinForm()
        '        '   Prints the Registration Form
        '        '   If you are already a member, it takes you to the member profile form
        '        '   If the site does not allow open joining, this is blocked.
        '        '========================================================================
        '        '
        '        Public Function main_GetJoinForm() As String
        '            Dim returnHtml As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetJoinForm")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            Dim CS As Integer
        '            Dim CSPeople As Integer
        '            Dim CSUsernameCheck As Integer
        '            Dim JoinButton As String
        '            Dim MethodName As String
        '            Dim Copy As String
        '            Dim GroupIDList As String
        '            Dim FirstName As String
        '            '
        '            MethodName = "main_GetJoinForm"
        '            '
        '            CSPeople = app.db_csOpen("people", "ID=" & user.userid)
        '            If Not app.db_csOk(CSPeople) Then
        '                '
        '                ' ----- could not open people, can not continue
        '                '
        '                Call handleLegacyError14(MethodName, "main_GetJoinForm, could not open the guest identity")
        '            Else
        '                If True Then
        '                    If user.user_isRecognized() And Not user.user_isAuthenticated() Then
        '                        '
        '                        ' ----- Recognized but Not authenticated
        '                        '
        '                        returnHtml = returnHtml & main_GetLoginForm()
        '                    Else
        '                        '
        '                        ' ----- Not authenticated, Guest identity, ask for information.
        '                        '
        '                        Dim QS As String
        '                        FirstName = db.db_GetCSText(CSPeople, "firstName")
        '                        If vbLCase(FirstName) = "guest" Then
        '                            FirstName = ""
        '                        End If
        '                        QS = web_RefreshQueryString
        '                        QS = ModifyQueryString(QS, "S", "")
        '                        QS = ModifyQueryString(QS, "ccIPage", "")
        '                        returnHtml = returnHtml & main_GetFormStart(QS)
        '                        returnHtml = returnHtml & html_GetFormInputHidden("Type", FormTypeJoin)
        '                        returnHtml = returnHtml & "<table border=""0"" cellpadding=""5"" cellspacing=""0"" width=""100%"">"
        '                        returnHtml = returnHtml & "<tr>"
        '                        returnHtml = returnHtml & "<td align=""right"" width=""30%"">" & SpanClassAdminNormal & "First Name</span></td>"
        '                        returnHtml = returnHtml & "<td align=""left""  width=""70%""><input NAME=""" & "firstname"" VALUE=""" & html_EncodeHTML(FirstName) & """ SIZE=""20"" MAXLENGTH=""50""></td>"
        '                        returnHtml = returnHtml & "</tr>"
        '                        returnHtml = returnHtml & "<tr>"
        '                        returnHtml = returnHtml & "<td align=""right"" width=""30%"">" & SpanClassAdminNormal & "Last Name</span></td>"
        '                        returnHtml = returnHtml & "<td align=""left""  width=""70%""><input NAME=""" & "lastname"" VALUE=""" & html_EncodeHTML(db.db_GetCSText(CSPeople, "lastname")) & """ SIZE=""20"" MAXLENGTH=""50""></td>"
        '                        returnHtml = returnHtml & "</tr>"
        '                        returnHtml = returnHtml & "<tr>"
        '                        returnHtml = returnHtml & "<td align=""right"" width=""30%"">" & SpanClassAdminNormal & "Email</span></td>"
        '                        returnHtml = returnHtml & "<td align=""left""  width=""70%""><input NAME=""" & "email"" VALUE=""" & html_EncodeHTML(db.db_GetCSText(CSPeople, "email")) & """ SIZE=""20"" MAXLENGTH=""50""></td>"
        '                        returnHtml = returnHtml & "</tr>"
        '                        returnHtml = returnHtml & "<tr>"
        '                        returnHtml = returnHtml & "<td align=""right"" width=""30%"">" & SpanClassAdminNormal & "Username</span></td>"
        '                        returnHtml = returnHtml & "<td align=""left""  width=""70%""><input NAME=""" & "username"" VALUE=""" & html_EncodeHTML(db.db_GetCSText(CSPeople, "username")) & """ SIZE=""20"" MAXLENGTH=""50""></td>"
        '                        returnHtml = returnHtml & "</tr>"
        '                        returnHtml = returnHtml & "<tr>"
        '                        returnHtml = returnHtml & "<td align=""right"" width=""30%"">" & SpanClassAdminNormal & "Password</span></td>"
        '                        returnHtml = returnHtml & "<td align=""left""  width=""70%""><input type=password NAME=""" & "password"" SIZE=""20"" MAXLENGTH=""50""></td>"
        '                        returnHtml = returnHtml & "</tr>"
        '                        returnHtml = returnHtml & "<tr><td colspan=""2"">" & main_GetPanelButtons(ButtonRegister, "Button") & "</td></tr>"
        '                        returnHtml = returnHtml & "</table>"
        '                        returnHtml = returnHtml & "</form>"
        '                    End If
        '                End If
        '            End If
        '            '
        '            main_GetJoinForm = returnHtml
        '            '
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError18(MethodName)
        '            '
        '        End Function
        '        '
        '        '========================================================================
        '        ' ----- main_GetMyProfileForm()
        '        '
        '        '   Anyone can have access to this form, if they are authenticated.
        '        '   To give a guest access, assign then a username and password and authenticated them.
        '        '========================================================================
        '        '
        '        Public Function main_GetMyProfileForm(PeopleID As Integer) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetMyProfileForm")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            Const TableOpen = vbCrLf & "<table border=""0"" cellpadding=""3"" cellspacing=""0"" width=""100%""><tr><td width=""150""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""140"" height=""1""></td><td><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""1""></td></tr>"
        '            Const TableClose = vbCrLf & "</table>"
        '            '
        '            Dim CSMember As Integer
        '            Dim MethodName As String
        '            Dim iPeopleID As Integer
        '            Dim CSLastVisit As Integer
        '            Dim RowDivider As String
        '            Dim RowCount As Integer
        '            Dim Stream As New coreFastStringClass
        '            Dim ButtonPanel As String
        '            Dim ButtonList As String
        '            Dim ContentName As String
        '            Dim ContentID As Integer
        '            Dim s As coreFastStringClass
        '            '
        '            iPeopleID = EncodeInteger(PeopleID)
        '            '
        '            MethodName = "main_GetMyProfileForm"
        '            '
        '            If Not user.user_isAuthenticated() Then
        '                Call error_AddUserError("You can not edit your MyAccount page until you have logged in.")
        '            Else
        '                CSMember = main_OpenContent("People", "ID=" & app.db_EncodeSQLNumber(iPeopleID))
        '                If app.db_csOk(CSMember) Then
        '                    '
        '                    ContentID = app.db_GetCSInteger(CSMember, "ContentControlID")
        '                    ContentName = metaData.getContentNameByID(ContentID)
        '                    '
        '                    ' ----- member personal information
        '                    '
        '                    s = New coreFastStringClass
        '                    s.Add(TableOpen)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Name", "", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "FirstName", "", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "LastName", "", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Email", "The internet email address where you can be contacted. This address is used to confirm your username and paStreamword.", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Company", "Your employer", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "title", "Your job title", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Address", "Your street address", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Address2", "Your street address", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "City", "", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "State", "Your state or provence", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Zip", "Your zipcode or postal code", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Country", "", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Phone", "", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Fax", "", RowCount) & vbCrLf)
        '                    's.Add( main_GetMyProfileForm_RowCS(CSMember, "People", "imagefilename", "", RowCount) & vbcrlf )
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ResumeFilename", "", RowCount) & vbCrLf)
        '                    s.Add(TableClose)
        '                    Call main_AddLiveTabEntry("Contact", s.Text)
        '                    '
        '                    ' ----- billing
        '                    '
        '                    s = New coreFastStringClass
        '                    s.Add(TableOpen)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillName", "", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillEmail", "", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillCompany", "Your employer", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillAddress", "Your street address", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillCity", "", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillState", "Your state or provence", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillZip", "Your zipcode or postal code", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillCountry", "", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillPhone", "", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillFax", "", RowCount) & vbCrLf)
        '                    s.Add(TableClose)
        '                    Call main_AddLiveTabEntry("Billing", s.Text)
        '                    '
        '                    ' ----- Shipping Information
        '                    '
        '                    s = New coreFastStringClass
        '                    s.Add(TableOpen)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipName", "", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipCompany", "", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipAddress", "Your street address", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipCity", "", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipState", "Your state or provence", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipZip", "Your zipcode or postal code", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipCountry", "", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipPhone", "", RowCount) & vbCrLf)
        '                    s.Add(TableClose)
        '                    Call main_AddLiveTabEntry("Shipping", s.Text)
        '                    '
        '                    ' ----- Site Preferences
        '                    '
        '                    s = New coreFastStringClass
        '                    s.Add(TableOpen)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "username", "Used with your password to gain access to the site.", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Password", "Use with your username to gain access to the site.", RowCount) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "allowbulkemail", "If checked, we may send you updates about our site from time to time.", RowCount) & vbCrLf)
        '                    ' 6/18/2009 - removed notes from base
        '                    '            s.Add( main_GetMyProfileForm_RowCS(CSMember, "People", "sendnotes", "If checked, notes sent to you as a site member will be emailed. Otherwise, they are available only when you have logged on.", RowCount) & vbCrLf
        '                    s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "LanguageID", "select your prefered language. If content is aviable in your language, is will be displayed. Otherwise, the default language will be used.", RowCount) & vbCrLf)
        '                    If EncodeBoolean(app.siteProperty_getBoolean("AllowAutoLogin", False)) Then
        '                        s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "autologin", "This site allows automatic login. If this box is check, you will enable this function for your member account.", RowCount) & vbCrLf)
        '                    End If
        '                    If user.main_IsContentManager() Then
        '                        s.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "allowtoolspanel", "If checked, a tools panel appears at the bottom of every active page with acceStream to key administrative functions.", RowCount) & vbCrLf)
        '                    End If
        '                    s.Add(TableClose)
        '                    Call main_AddLiveTabEntry("Preferences", s.Text)
        '                    '
        '                    ' ----- Interest Topics
        '                    '
        '                    s = New coreFastStringClass
        '                    s.Add(TableOpen)
        '                    s.Add("<tr><td colspan=""2"">" & SpanClassAdminNormal & "<b>Selected Topics</b></span><br ><img src=""/ccLib/images/black.gif"" width=""100%"" height=""1"" ></td></tr>" & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_Topics(iPeopleID, ContentName) & vbCrLf)
        '                    s.Add("<tr><td colspan=""2"">" & SpanClassAdminNormal & "<b>Topics Habits</b></span><br ><img src=""/ccLib/images/black.gif"" width=""100%"" height=""1"" ></td></tr>" & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_TopicHabits)
        '                    s.Add(TableClose)
        '                    Call main_AddLiveTabEntry("Topics", s.Text)
        '                    '
        '                    ' ----- Group main_MemberShip
        '                    '
        '                    s = New coreFastStringClass
        '                    s.Add(TableOpen)
        '                    s.Add(main_GetMyProfileForm_Groups)
        '                    s.Add(TableClose)
        '                    Call main_AddLiveTabEntry("Groups", s.Text)
        '                    '
        '                    ' ----- Records
        '                    '
        '                    s = New coreFastStringClass
        '                    s.Add(TableOpen)
        '                    s.Add(main_GetMyProfileForm_Row("Member Number", EncodeText(user.userid)) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_Row("Visitor Number", EncodeText(main_VisitorID)) & vbCrLf)
        '                    s.Add(main_GetMyProfileForm_Row("Visit Number", EncodeText(main_VisitId)) & vbCrLf)
        '                    CSLastVisit = app.db_csOpen("Visits", "MemberID=" & iPeopleID, "ID DESC")
        '                    If app.db_csOk(CSLastVisit) Then
        '                        s.Add(main_GetMyProfileForm_RowCS(CSLastVisit, "Visits", "StartTime", "", RowCount, "Start Time", True) & vbCrLf)
        '                        s.Add(main_GetMyProfileForm_RowCS(CSLastVisit, "Visits", "REMOTE_ADDR", "", RowCount, "IP Address", True) & vbCrLf)
        '                        s.Add(main_GetMyProfileForm_RowCS(CSLastVisit, "Visits", "Browser", "", RowCount, "", True) & vbCrLf)
        '                        s.Add(main_GetMyProfileForm_RowCS(CSLastVisit, "Visits", "HTTP_REFERER", "", RowCount, "Referer", True) & vbCrLf)
        '                        s.Add(main_GetMyProfileForm_RowCS(CSLastVisit, "Visits", "CookieSupport", "", RowCount, "Cookie Support", True) & vbCrLf)
        '                    End If
        '                    Call app.db_csClose(CSLastVisit)
        '                    s.Add(TableClose)
        '                    Call main_AddLiveTabEntry("Statistics", s.Text)
        '                    '
        '                    ' ----- save button
        '                    '
        '                    RowCount = 0
        '                    Stream.Add(main_GetFormStart)
        '                    ButtonList = ButtonSave & "," & ButtonCancel
        '                    ButtonPanel = main_GetPanelButtons(ButtonList, "Button")
        '                    Stream.Add(ButtonPanel)
        '                    Stream.Add(html_GetFormInputHidden("Type", FormTypeMyProfile))
        '                    Stream.Add(error_GetUserError())
        '                    Stream.Add("<div>&nbsp;</div>")
        '                    Stream.Add(main_GetLiveTabs())
        '                    Stream.Add(ButtonPanel)
        '                    '
        '                    main_GetMyProfileForm = Stream.Text & "</form>"
        '                End If
        '            End If
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError18(MethodName)
        '            '
        '        End Function
        '        '
        '        '========================================================================
        '        ' ----- main_Get_old_MyProfileForm()
        '        '
        '        '   Anyone can have access to this form, if they are authenticated.
        '        '   To give a guest access, assign then a username and password and authenticated them.
        '        '========================================================================
        '        '
        '        Public Function main_Get_old_MyProfileForm(PeopleID As Integer) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Get_old_MyProfileForm")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            Dim CSMember As Integer
        '            Dim MethodName As String
        '            Dim iPeopleID As Integer
        '            Dim CSLastVisit As Integer
        '            Dim RowDivider As String
        '            Dim RowCount As Integer
        '            Dim Stream As New coreFastStringClass
        '            Dim ButtonPanel As String
        '            Dim ButtonList As String
        '            Dim ContentName As String
        '            Dim ContentID As Integer
        '            Dim tabContent(5) As String
        '            '
        '            iPeopleID = EncodeInteger(PeopleID)
        '            '
        '            MethodName = "main_Get_old_MyProfileForm"
        '            '
        '            If Not user.user_isAuthenticated() Then
        '                Call error_AddUserError("You can not edit your MyAccount page until you have logged in.")
        '            Else
        '                CSMember = main_OpenContent("People", "ID=" & db.db_EncodeSQLNumber(iPeopleID))
        '                If db.db_csOk(CSMember) Then
        '                    ContentID = db.db_GetCSInteger(CSMember, "ContentControlID")
        '                    ContentName = metaData.getContentNameByID(ContentID)
        '                    '
        '                    RowDivider = "<tr><td width=""100%"" align=""left""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""1"" ></td></tr>" & vbCrLf
        '                    RowCount = 0
        '                    Stream.Add(main_GetFormStart)
        '                    ButtonList = ButtonSave & "," & ButtonCancel
        '                    ButtonPanel = main_GetPanelButtons(ButtonList, "Button")
        '                    Stream.Add(ButtonPanel)
        '                    Stream.Add(html_GetFormInputHidden("Type", FormTypeMyProfile))
        '                    Stream.Add(error_GetUserError())
        '                    Stream.Add("<table border=""0"" cellpadding=""3"" cellspacing=""0"" width=""100%"">")
        '                    Stream.Add("<tr><td width=""150""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""140"" height=""1"" ></td><td><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""1"" ></td></tr>" & vbCrLf)
        '                    '
        '                    ' ----- member personal information
        '                    '
        '                    Stream.Add("<tr>" & vbCrLf)
        '                    Stream.Add("<td colspan=""2"">" & SpanClassAdminNormal & "<b>Your Information</b></span><br ><img src=""/ccLib/images/black.gif"" width=""100%"" height=""1"" ></td>" & vbCrLf)
        '                    Stream.Add("</tr>" & vbCrLf)
        '                    '
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Name", "", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "FirstName", "", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "LastName", "", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Email", "The internet email address where you can be contacted. This address is used to confirm your username and paStreamword.", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Company", "Your employer", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "title", "Your job title", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Address", "Your street address", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "City", "", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "State", "Your state or provence", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Zip", "Your zipcode or postal code", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Country", "", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Phone", "", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Fax", "", RowCount) & vbCrLf)
        '                    'Stream.Add( main_GetMyProfileForm_RowCS(CSMember, "People", "imagefilename", "", RowCount) & vbcrlf )
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ResumeFilename", "", RowCount) & vbCrLf)
        '                    '
        '                    Stream.Add("<tr>" & vbCrLf)
        '                    Stream.Add("<td colspan=""2"">" & SpanClassAdminNormal & "<b>Billing Information (for online commerce only)</b></span><br ><img src=""/ccLib/images/black.gif"" width=""100%"" height=""1"" ></td>" & vbCrLf)
        '                    Stream.Add("</tr>" & vbCrLf)
        '                    '
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillName", "", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillEmail", "", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillCompany", "Your employer", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillAddress", "Your street address", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillCity", "", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillState", "Your state or provence", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillZip", "Your zipcode or postal code", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillCountry", "", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillPhone", "", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "BillFax", "", RowCount) & vbCrLf)
        '                    '
        '                    ' ----- Shipping Information
        '                    '
        '                    Stream.Add("<tr><td colspan=""2"">" & SpanClassAdminNormal & "<b>Shipping Information (for online commerce only)</b></span><br ><img src=""/ccLib/images/black.gif"" width=""100%"" height=""1"" ></td></tr>" & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipName", "", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipCompany", "", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipAddress", "Your street address", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipCity", "", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipState", "Your state or provence", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipZip", "Your zipcode or postal code", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipCountry", "", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "ShipPhone", "", RowCount) & vbCrLf)
        '                    '
        '                    ' ----- Site Preferences
        '                    '
        '                    Stream.Add("<tr><td colspan=""2"">" & SpanClassAdminNormal & "<b>Site Preferences</b></span><br ><img src=""/ccLib/images/black.gif"" width=""100%"" height=""1"" ></td></tr>" & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "username", "Used with your password to gain access to the site.", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "Password", "Use with your username to gain access to the site.", RowCount) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "allowbulkemail", "If checked, we may send you updates about our site from time to time.", RowCount) & vbCrLf)
        '                    ' 6/18/2009 - removed notes from base
        '                    '            Stream.Add( main_GetMyProfileForm_RowCS(CSMember, "People", "sendnotes", "If checked, notes sent to you as a site member will be emailed. Otherwise, they are available only when you have logged on.", RowCount) & vbcrlf )
        '                    Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "LanguageID", "", RowCount) & vbCrLf)
        '                    If siteProperties.getBoolean("AllowAutoLogin", False) Then
        '                        Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "autologin", "This site allows automatic login. If this box is check, you will enable this function for your member account.", RowCount) & vbCrLf)
        '                    End If
        '                    If user.main_IsContentManager() Then
        '                        Stream.Add(main_GetMyProfileForm_RowCS(CSMember, "People", "allowtoolspanel", "If checked, a tools panel appears at the bottom of every active page with acceStream to key administrative functions.", RowCount) & vbCrLf)
        '                    End If
        '                    '
        '                    ' ----- Interest Topics
        '                    '
        '                    Stream.Add("<tr><td colspan=""2"">" & SpanClassAdminNormal & "<b>Topics of Interest</b></span><br ><img src=""/ccLib/images/black.gif"" width=""100%"" height=""1"" ></td></tr>" & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_Topics(iPeopleID, ContentName) & vbCrLf)
        '                    '
        '                    ' ----- Topics Habits
        '                    '
        '                    Stream.Add("<tr><td colspan=""2"">" & SpanClassAdminNormal & "<b>Topic Habits</b></span><br ><img src=""/ccLib/images/black.gif"" width=""100%"" height=""1"" ></td></tr>" & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_TopicHabits)
        '                    '
        '                    ' ----- Group main_MemberShip
        '                    '
        '                    Stream.Add("<tr><td colspan=""2"">" & SpanClassAdminNormal & "<b>Group main_MemberShip</b></span><br ><img src=""/ccLib/images/black.gif"" width=""100%"" height=""1"" ></td></tr>" & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_Groups)
        '                    '
        '                    ' ----- Records
        '                    '
        '                    Stream.Add("<tr><td colspan=""2"">" & SpanClassAdminNormal & "<b>Statistics</b></span><br ><img src=""/ccLib/images/black.gif"" width=""100%"" height=""1"" ></td></tr>" & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_Row("Member Number", EncodeText(user.userId)) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_Row("Visitor Number", EncodeText(main_VisitorID)) & vbCrLf)
        '                    Stream.Add(main_GetMyProfileForm_Row("Visit Number", EncodeText(main_VisitId)) & vbCrLf)
        '                    CSLastVisit = db.db_csOpen("Visits", "MemberID=" & iPeopleID, "ID DESC")
        '                    If db.db_csOk(CSLastVisit) Then
        '                        'Stream.Add( main_GetMyProfileForm_RowCS(CSLastVisit, "Visits", "main_VisitorID", "", RowCount) & vbcrlf )
        '                        'Stream.Add( main_GetMyProfileForm_RowCS(CSLastVisit, "Visits", "ID", "", RowCount) & vbcrlf )
        '                        Stream.Add(main_GetMyProfileForm_RowCS(CSLastVisit, "Visits", "StartTime", "", RowCount, "Start Time", True) & vbCrLf)
        '                        Stream.Add(main_GetMyProfileForm_RowCS(CSLastVisit, "Visits", "REMOTE_ADDR", "", RowCount, "IP Address", True) & vbCrLf)
        '                        Stream.Add(main_GetMyProfileForm_RowCS(CSLastVisit, "Visits", "Browser", "", RowCount, "", True) & vbCrLf)
        '                        Stream.Add(main_GetMyProfileForm_RowCS(CSLastVisit, "Visits", "HTTP_REFERER", "", RowCount, "Referer", True) & vbCrLf)
        '                        'Stream.Add( main_GetMyProfileForm_RowCS(CSLastVisit, "Visits", "RefererPathPage", "", RowCount) & vbcrlf )
        '                        Stream.Add(main_GetMyProfileForm_RowCS(CSLastVisit, "Visits", "CookieSupport", "", RowCount, "Cookie Support", True) & vbCrLf)
        '                        'Stream.Add( main_GetMyProfileForm_RowCS(CSLastVisit, "Visits", "main_VisitAuthenticated", "", RowCount) & vbcrlf )
        '                    End If
        '                    Call db.db_csClose(CSLastVisit)
        '                    '
        '                    Stream.Add("</table>")
        '                    '
        '                    ' ----- save button
        '                    '
        '                    Stream.Add(ButtonPanel)
        '                    '
        '                    main_Get_old_MyProfileForm = Stream.Text & "</form>"
        '                End If
        '            End If
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError18(MethodName)
        '            '
        '        End Function
        '        '
        '        ' -----
        '        '
        '        Private Function main_GetMyProfileForm_RowCS(ByVal CSPointer As Integer, ByVal ContentName As String, ByVal FieldName As String, ByVal Explaination As String, ByVal RowCount As Integer, Optional ByVal Caption As String = "", Optional ByVal readOnlyField As Boolean = False) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetMyProfileForm_RowCS")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            Dim Stream As String
        '            Dim MethodName As String
        '            Dim iCaption As String
        '            '
        '            MethodName = "main_GetMyProfileForm_RowCS"
        '            '
        '            iCaption = Caption
        '            If Caption = "" Then
        '                iCaption = db.db_getCSFieldCaption(CSPointer, FieldName)
        '            End If
        '            '
        '            If Not db.db_csOk(CSPointer) Then
        '                handleExceptionAndRethrow(New Exception("ContentSet argument is not valid"))
        '            Else
        '                If readOnlyField Then
        '                    Stream = db.db_GetCSText(CSPointer, FieldName)
        '                Else
        '                    Stream = html_GetFormInputCS(CSPointer, ContentName, FieldName, , 60)
        '                End If
        '                main_GetMyProfileForm_RowCS = main_GetMyProfileForm_Row(iCaption, Stream)
        '            End If
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError13(MethodName)
        '        End Function
        '        '
        '        ' ----- main_GetMyProfileForm_RowCS()
        '        '
        '        Private Function main_GetMyProfileForm_Row(LeftSide As String, RightSide As String) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetMyProfileForm_Row")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            main_GetMyProfileForm_Row = "" _
        '                & "<tr>" _
        '                & "<td align=""right"" valign=""middle""><span class=""ccAdminSmall"">" & LeftSide & "</span></td>" _
        '                & "<td align=""left""  valign=""middle""><span class=""ccAdminSmall"">" & RightSide & "</span></td>" _
        '                & "</tr>"
        '            Exit Function
        'ErrorTrap:
        '            Call handleLegacyError13("main_GetMyProfileForm_Row")
        '        End Function
        '        '
        '        '========================================================================
        '        ' ----- main_Get a string with the topic groups and check the ones this member has selected
        '        '========================================================================
        '        '
        '        Private Function main_GetMyProfileForm_Topics(PeopleID As Integer, ContentName As String) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetMyProfileForm_Topics")
        '            '
        '            Dim Stream As String
        '            '
        '            Stream = main_GetFormInputCheckList(rnMyProfileTopics, "people", PeopleID, "topics", "member topic rules", "memberid", "topicid")
        '            'Stream = main_GetFormInputTopics("Topic", "Topics", ContentName, PeopleID)
        '            '
        '            ' Empty case
        '            '
        '            If Stream = "" Then
        '                Stream = "There are currently no topics defined"
        '            End If
        '            '
        '            ' Set it in the output
        '            '
        '            main_GetMyProfileForm_Topics = "" _
        '                & "<tr>" _
        '                & "<td align=""right"" valign=""top"">" & SpanClassAdminSmall & "</span></td>" _
        '                & "<td valign=""top"">" & SpanClassAdminNormal & Stream & "</span></td>" _
        '                & "</tr>"
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError13("main_GetMyProfileForm_Topics")
        '        End Function
        '        '
        '        '========================================================================
        '        ' ----- main_Get a string with the topic groups and check the ones this member has selected
        '        '========================================================================
        '        '
        '        Private Function main_GetMyProfileForm_TopicHabits() As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetMyProfileForm_TopicHabits")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            Dim SQL As String
        '            Dim CS As Integer
        '            Dim Stream As String
        '            Dim MethodName As String
        '            Dim TopicCount As Integer
        '            '
        '            MethodName = "main_GetMyProfileForm_TopicHabits"
        '            '
        '            ' ----- Gather all the topics to which this member belongs
        '            '
        '            SQL = "SELECT ccTopics.Name as Name, Sum( ccTopicHabits.Score ) as Score" _
        '                & " FROM ccTopics LEFT JOIN ccTopicHabits ON ccTopics.ID = ccTopicHabits.TopicID" _
        '                & " WHERE (((ccTopics.Active)<>0) AND ((ccTopicHabits.MemberID)=" & user.userId & ")) OR (((ccTopics.Active)<>0) AND ((ccTopicHabits.MemberID) Is Null))" _
        '                & " Group By ccTopics.name" _
        '                & " Order by ccTopics.Name"
        '            CS = db.db_csOpenSql(SQL)
        '            Do While db.db_csOk(CS)
        '                Stream = Stream & SpanClassAdminNormal & db.db_GetCSText(CS, "name") & " = " & EncodeText(db.db_GetCSInteger(CS, "score")) & "</span><BR >"
        '                Call db.db_csGoNext(CS)
        '                TopicCount = TopicCount + 1
        '            Loop
        '            Call db.db_csClose(CS)
        '            '
        '            '
        '            '
        '            If TopicCount = 0 Then
        '                Stream = "There are currently no topics defined"
        '            End If
        '            '
        '            ' ----- Set it in the output
        '            '
        '            main_GetMyProfileForm_TopicHabits = "" _
        '                & "<tr>" _
        '                & "<td align=""right"" valign=""top"">" & SpanClassAdminSmall & "</span></td>" _
        '                & "<td valign=""top"">" & SpanClassAdminNormal & Stream & "</span></td>" _
        '                & "</tr>"
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError13(MethodName)
        '        End Function
        '        '
        '        '========================================================================
        '        ' ----- main_Get a string with the topic groups and check the ones this member has selected
        '        '========================================================================
        '        '
        '        Private Function main_GetMyProfileForm_Groups() As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetMyProfileForm_Groups")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            Dim MethodName As String
        '            Dim PublicJoinCriteria As String
        '            Dim Stream As String
        '            Dim GroupList As String

        '            '
        '            MethodName = "main_GetMyProfileForm_Groups"
        '            '
        '            If Not user.user_isAdmin() Then
        '                PublicJoinCriteria = "ccgroups.PublicJoin<>0"
        '            End If
        '            '
        '            GroupList = main_GetFormInputCheckList("MemberRules", "People", user.userId, "Groups", "Member Rules", "MemberID", "GroupID", PublicJoinCriteria, "Caption")
        '            If GroupList = "" Then
        '                GroupList = "<div>There are no public groups</div>"
        '            End If
        '            main_GetMyProfileForm_Groups = "" _
        '                & "<tr>" _
        '                & "<td align=""right"" valign=""top"">" & SpanClassAdminSmall & "</span></td>" _
        '                & "<td valign=""top"">" & SpanClassAdminNormal & GroupList & "</span></td>" _
        '                & "</tr>"
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError13(MethodName)
        '        End Function
        '
        '=============================================================================
        ' main_Get the GroupID from iGroupName
        '=============================================================================
        '
        Public Function group_GetGroupID(ByVal GroupName As String) As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetGroupID")
            '
            'If Not (true) Then Exit Function
            '
            Dim dt As DataTable
            Dim MethodName As String
            Dim iGroupName As String
            '
            iGroupName = EncodeText(GroupName)
            '
            MethodName = "main_GetGroupID"
            '
            group_GetGroupID = 0
            If (iGroupName <> "") Then
                '
                ' ----- main_Get the Group ID
                '
                dt = db.executeSql("select top 1 id from ccGroups where name=" & db.encodeSQLText(iGroupName))
                If dt.Rows.Count > 0 Then
                    group_GetGroupID = EncodeInteger(dt.Rows(0).Item(0))
                End If
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
        End Function
        '
        '=============================================================================
        ' main_Get the GroupName from iGroupID
        '=============================================================================
        '
        Public Function group_GetGroupName(GroupID As Integer) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetGroupByID")
            '
            'If Not (true) Then Exit Function
            '
            Dim CS As Integer
            Dim MethodName As String
            Dim iGroupID As Integer
            '
            iGroupID = EncodeInteger(GroupID)
            '
            MethodName = "main_GetGroupByID"
            '
            group_GetGroupName = ""
            If (iGroupID > 0) Then
                '
                ' ----- main_Get the Group name
                '
                CS = db_csOpenRecord("Groups", iGroupID)
                If db.cs_Ok(CS) Then
                    group_GetGroupName = EncodeText(db_cs_GetField(CS, "Name"))
                End If
                Call db.cs_Close(CS)
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '=============================================================================
        ' Add a new group, return its GroupID
        '=============================================================================
        '
        Public Function group_Add(ByVal GroupName As String, Optional ByVal GroupCaption As String = "") As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("AddGroup")
            '
            'If Not (true) Then Exit Function
            '
            'dim dt as datatable
            Dim CS As Integer
            Dim MethodName As String
            Dim iGroupName As String
            Dim iGroupCaption As String
            '
            MethodName = "main_AddGroup"
            '
            iGroupName = EncodeText(GroupName)
            iGroupCaption = encodeEmptyText(GroupCaption, iGroupName)
            '
            group_Add = -1
            Dim dt As DataTable
            dt = db.executeSql("SELECT ID FROM ccgroups WHERE NAME=" & db.encodeSQLText(iGroupName))
            If dt.Rows.Count > 0 Then
                group_Add = EncodeInteger(dt.Rows(0).Item(0))
            Else
                CS = db.cs_insertRecord("Groups", SystemMemberID)
                If db.cs_Ok(CS) Then
                    group_Add = EncodeInteger(db.db_GetCSField(CS, "ID"))
                    Call db.cs_set(CS, "name", iGroupName)
                    Call db.cs_set(CS, "caption", iGroupCaption)
                    Call db.cs_set(CS, "active", True)
                End If
                Call db.cs_Close(CS)
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
        End Function

        '
        '=============================================================================
        ' Add a new group, return its GroupID
        '=============================================================================
        '
        Public Sub group_DeleteGroup(ByVal GroupName As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("DeleteGroup")
            '
            'If Not (true) Then Exit Sub
            '
            Call db.deleteContentRecords("Groups", "name=" & db.encodeSQLText(GroupName))
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_DeleteGroup")
        End Sub
        '
        '=============================================================================
        ' Add a member to a group
        '=============================================================================
        '
        Public Sub group_AddGroupMember(ByVal GroupName As String, Optional ByVal NewMemberID As Integer = SystemMemberID, Optional ByVal DateExpires As Date = Nothing)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("AddGroupMember")
            '
            'If Not (true) Then Exit Sub
            '
            Dim CS As Integer
            Dim GroupID As Integer
            Dim MethodName As String
            Dim iGroupName As String
            Dim iDateExpires As Date
            '
            MethodName = "main_AddGroupMember"
            '
            iGroupName = EncodeText(GroupName)
            iDateExpires = DateExpires 'encodeMissingDate(DateExpires, Date.MinValue)
            '
            If iGroupName <> "" Then
                GroupID = group_GetGroupID(iGroupName)
                If (GroupID < 1) Then
                    GroupID = group_Add(GroupName, GroupName)
                End If
                If (GroupID < 1) Then
                    Call handleLegacyError14(MethodName, "main_AddGroupMember could not find or add Group [" & GroupName & "]")
                Else
                    CS = db.csOpen("Member Rules", "(MemberID=" & db.encodeSQLNumber(NewMemberID) & ")and(GroupID=" & db.encodeSQLNumber(GroupID) & ")", , False)
                    If Not db.cs_Ok(CS) Then
                        Call db.cs_Close(CS)
                        CS = db.cs_insertRecord("Member Rules")
                    End If
                    If Not db.cs_Ok(CS) Then
                        Call handleLegacyError14(MethodName, "main_AddGroupMember could not add this member to the Group [" & GroupName & "]")
                    Else
                        Call db.cs_set(CS, "active", True)
                        Call db.cs_set(CS, "memberid", NewMemberID)
                        Call db.cs_set(CS, "groupid", GroupID)
                        If iDateExpires <> Date.MinValue Then
                            Call db.cs_set(CS, "DateExpires", iDateExpires)
                        Else
                            Call db.cs_set(CS, "DateExpires", Nothing)
                        End If
                    End If
                    Call db.cs_Close(CS)
                End If
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '=============================================================================
        ' Delete a member from a group
        '=============================================================================
        '
        Public Sub group_DeleteGroupMember(ByVal GroupName As String, Optional ByVal NewMemberID As Integer = SystemMemberID)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("DeleteGroupMember")
            '
            'If Not (true) Then Exit Sub
            '
            Dim GroupID As Integer
            Dim MethodName As String
            Dim iGroupName As String
            '
            iGroupName = EncodeText(GroupName)
            '
            MethodName = "main_DeleteGroupMember"
            '
            If iGroupName <> "" Then
                GroupID = group_GetGroupID(iGroupName)
                If (GroupID < 1) Then
                ElseIf (NewMemberID < 1) Then
                    Call handleLegacyError14(MethodName, "Member ID is invalid")
                Else
                    Call db.deleteContentRecords("Member Rules", "(MemberID=" & db.encodeSQLNumber(NewMemberID) & ")AND(groupid=" & db.encodeSQLNumber(GroupID) & ")")
                End If
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '        '
        '        '=============================================================================
        '        '   main_Get the Admin Form
        '        '=============================================================================
        '        '
        '        Public Function main_GetAdminForm(Optional ByVal Content As String = "") As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetAdminForm")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            Dim admin As New Contensive.Addons.adminClass()
        '            '
        '            ' main_GetClose page was removed from AdminClass so main_GetAdminPage can call it after main_GetHTMLHead (in main_GetAdminStart)
        '            '
        '            'Call AppendLog("call main_getEndOfBody, from main_getAdminForm,")
        '            main_GetAdminForm = "" _
        '                & Admin.execute_getContent(Content) _
        '                & main_GetEndOfBody(True, True, False, True)
        '            '
        '            Exit Function
        '            '
        'ErrorTrap:
        '            Admin = Nothing
        '            Call handleLegacyError18("main_GetAdminForm")
        '        End Function
        ''
        ''=============================================================================
        ''   Legacy
        ''=============================================================================
        ''
        'Public Function main_GetAdminPage(Optional ByVal Content As String = "") As String
        '    main_GetAdminPage = addonToBe_admin(Content)
        'End Function
        '
        '=============================================================================
        ' Print the admin developer tools page
        '=============================================================================
        '
        Public Function tools_GetToolsForm() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetToolsForm")
            '
            '
            Dim Tools As New coreToolsClass(Me)
            tools_GetToolsForm = Tools.GetForm()
            Tools = Nothing
            Exit Function
            '
ErrorTrap:
            Tools = Nothing
            Call handleLegacyError18("PrintToolsForm")
        End Function
        '
        '=============================================================================
        '   Return just the copy from a content page
        '=============================================================================
        '
        Public Sub content_SetContentCopy(ByVal CopyName As String, ByVal Content As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("SetContentCopy")
            '
            'If Not (true) Then Exit Sub
            '
            Dim CS As Integer
            Dim iCopyName As String
            Dim iContent As String
            'dim buildversion As String
            Const ContentName = "Copy Content"
            '
            '  BuildVersion = app.dataBuildVersion
            If False Then '.3.210" Then
                handleExceptionAndRethrow(New Exception("Contensive database was created with version " & db.dataBuildVersion & ". main_SetContentCopy requires an builder."))
            Else
                iCopyName = EncodeText(CopyName)
                iContent = EncodeText(Content)
                CS = db.csOpen(ContentName, "name=" & db_EncodeSQLText(iCopyName))
                If Not db.cs_Ok(CS) Then
                    Call db.cs_Close(CS)
                    CS = db.cs_insertRecord(ContentName)
                End If
                If db.cs_Ok(CS) Then
                    Call db.cs_set(CS, "name", iCopyName)
                    Call db.cs_set(CS, "Copy", iContent)
                End If
                Call db.cs_Close(CS)
            End If
            '
            Exit Sub
            '
ErrorTrap:
            '    PageList = Nothing
            Call handleLegacyError18("main_GetContentCopy")
        End Sub

        '        '
        '        '=============================================================================
        '        '   Print content in a page format
        '        '
        '        '   iRootPageName is the name of the position on the site, not the name of the
        '        '   content.
        '        '
        '        '   PageName is optional only if main_PreloadContentPage has been called, set to ""
        '        '=============================================================================
        '        '
        '        Public Function main_GetContentPage(ByVal RootPageName As String, Optional ByVal ContentName As String = "", Optional ByVal OrderByClause As String = "", Optional ByVal AllowChildPageList As Boolean = True, Optional ByVal AllowReturnLink As Boolean = True, Optional ByVal Bid As Integer = 0) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetContentPage")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            Dim FieldRows As Integer
        '            Dim quickEditor As String
        '            Dim iRootPageName As String
        '            Dim rootPageId As Integer
        '            Dim pageId As Integer
        '            Dim iContentName As String
        '            Dim iOrderByClause As String
        '            Dim contentPage As String
        '            '
        '            ' ----- Type the input
        '            '
        '            '$$$$$ cache this - somewhere it opens cs with icontentname
        '            iContentName = encodeEmptyText(ContentName, "Page Content")
        '            iRootPageName = Trim(EncodeText(RootPageName))
        '            If iRootPageName <> "" Then
        '                rootPageId = main_GetRecordID(iContentName, iRootPageName)
        '            End If
        '            iOrderByClause = EncodeText(OrderByClause)
        '            If (Bid = 0) Then
        '                pageId = docProperties.getInteger("bid")
        '            Else
        '                pageId = Bid
        '            End If
        '            '
        '            ' ----- Test if the page has been preloaded
        '            '
        '            contentPage = main_GetHtmlBody_GetSection_GetContent(pageId, rootPageId, iContentName, iOrderByClause, AllowChildPageList, AllowReturnLink, False, 0, siteProperties.useContentWatchLink, False)
        '            main_GetContentPage = main_GetEditWrapper(iContentName, contentPage)
        '            '
        '            ' ----- Redirect if required
        '            '       ##### to be moved directly into page list routines
        '            '
        '            If pageManager_RedirectLink <> "" Then
        '                '
        '                ' redirect
        '                '
        '                Call web_Redirect2(pageManager_RedirectLink, pageManager_RedirectReason, pageManager_RedirectBecausePageNotFound)
        '            ElseIf (InStr(1, main_GetContentPage, main_fpo_QuickEditing) <> 0) Then
        '                '
        '                ' quick editor
        '                '
        '                FieldRows = EncodeInteger(properties_user_getText(ContentName & ".copyFilename.PixelHeight", "500"))
        '                If FieldRows < 50 Then
        '                    FieldRows = 50
        '                    Call properties_SetMemberProperty(ContentName & ".copyFilename.PixelHeight", 50)
        '                End If
        '                quickEditor = html_GetFormInputHTML("copyFilename", main_QuickEditCopy)
        '                main_GetContentPage = vbReplace(main_GetContentPage, main_fpo_QuickEditing, quickEditor)
        '            End If
        '            Exit Function
        '            '
        'ErrorTrap:
        '            '    PageList = Nothing
        '            Call handleLegacyError18("main_GetContentPage")
        '        End Function
        '        '
        '        '=============================================================================
        '        '   Print content in a page format
        '        '
        '        '   iRootPageName is the name of the position on the site, not the name of the
        '        '   content.
        '        '
        '        '   PageName is optional only if main_PreloadContentPage has been called, set to ""
        '        '=============================================================================
        '        '
        '        Public Function main_GetContentPageArchive(ByVal RootPageName As String, Optional ByVal ContentName As String = "", Optional ByVal OrderByClause As String = "") As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetContentPageArchive")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            Dim iRootPageName As String
        '            Dim rootPageId As Integer
        '            Dim PageRecordID As Integer
        '            Dim iContentName As String
        '            '
        '            iRootPageName = Trim(EncodeText(RootPageName))
        '            iContentName = encodeEmptyText(ContentName, "Page Content")
        '            PageRecordID = docProperties.getInteger("bid")
        '            If iRootPageName <> "" Then
        '                rootPageId = main_GetRecordID(iContentName, iRootPageName)
        '            End If
        '            '
        '            main_GetContentPageArchive = main_GetHtmlBody_GetSection_GetContent(PageRecordID, rootPageId, iContentName, EncodeText(OrderByClause), True, True, True, 0, siteProperties.useContentWatchLink, False)
        '            '
        '            If pageManager_RedirectLink <> "" Then
        '                Call web_Redirect2(pageManager_RedirectLink, "Redirecting due to a main_GetContentPageArchive condition. (" & pageManager_RedirectReason & ")", pageManager_RedirectBecausePageNotFound)
        '            End If
        '            '
        '            main_GetContentPageArchive = main_GetEditWrapper(iContentName & " Archive", main_GetContentPageArchive)
        '            '
        '            Exit Function
        '            '
        'ErrorTrap:
        '            '   PageList = Nothing
        '            Call handleLegacyError18("main_GetContentPageArchive")
        '        End Function
        '        '
        '        '=============================================================================
        '        '   Print content in a page format
        '        '
        '        '   RootPageNameLocal is the name of the position on the site, not the name of the
        '        '   content.
        '        '=============================================================================
        '        '
        '        Public Function main_GetContentPageMenu(ByVal RootPageName As String, Optional ByVal ContentName As String = "", Optional ByVal Link As String = "", Optional ByVal RootPageRecordID As Integer = 0, Optional ByVal DepthLimit As Integer = 0, Optional ByVal MenuStyle As String = "", Optional ByVal StyleSheetPrefix As String = "", Optional ByVal MenuImage As String = "") As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetContentPageMenu")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            'Dim PageList As PageListClass
        '            Dim RootPageNameLocal As String
        '            Dim ContentNameLocal As String
        '            Dim PageLink As String
        '            Dim ChildPageRecordID As Integer
        '            Dim MenuStyleLocal As Integer
        '            Dim StyleSheetPrefixLocal As String
        '            Dim IMenuImage As String
        '            Dim UseContentWatchLink As Boolean
        '            '
        '            RootPageNameLocal = Trim(EncodeText(RootPageName))
        '            ContentNameLocal = encodeEmptyText(ContentName, "Page Content")
        '            PageLink = encodeEmptyText(Link, "")
        '            MenuStyleLocal = encodeEmptyInteger(MenuStyle, 1)
        '            StyleSheetPrefixLocal = encodeEmptyText(StyleSheetPrefix, "ccFlyout")
        '            IMenuImage = encodeEmptyText(MenuImage, "")
        '            UseContentWatchLink = siteProperties.useContentWatchLink
        '            '
        '            main_GetContentPageMenu = main_GetSectionMenu_NameMenu(RootPageNameLocal, ContentNameLocal, PageLink, RootPageRecordID, DepthLimit, MenuStyleLocal, StyleSheetPrefixLocal, IMenuImage, IMenuImage, "", 0, UseContentWatchLink)
        '            '
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            'Set PageList = Nothing
        '            Call handleLegacyError18("main_GetContentPageMenu")
        '        End Function
        '        '
        '        '   2.0 compatibility
        '        '
        '        Public Function main_OpenContent(ByVal ContentName As String, Optional ByVal Criteria As String = "", Optional ByVal SortFieldList As String = "", Optional ByVal ActiveOnly As Boolean = True) As Integer
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("OpenContent")
        '            '
        '            'If Not (true) Then Exit Function
        '            main_OpenContent = db.db_csOpen(EncodeText(ContentName), Criteria, SortFieldList, ActiveOnly)
        '            '
        '            Exit Function
        'ErrorTrap:
        '            Call handleLegacyError18("main_OpenContent")
        '        End Function
        '
        '========================================================================
        ' main_Gets the field in the current CSRow according to its definition
        '========================================================================
        '
        Public Function cs_GetCSRecordEditLink(ByVal CSPointer As Integer, Optional ByVal AllowCut As Object = False) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetCSRecordEditLink")
            '
            'If Not (true) Then Exit Function
            '
            Dim RecordName As String
            Dim ContentName As String
            Dim RecordID As Integer
            Dim ContentControlID As Integer
            Dim MethodName As String
            Dim iCSPointer As Integer
            '
            iCSPointer = EncodeInteger(CSPointer)
            '
            MethodName = "main_GetCSRecordEditLink"
            '
            If iCSPointer = -1 Then
                Call handleLegacyError14(MethodName, "main_GetCSRecordEditLink called with invalid iCSPointer")
            Else
                If Not db.cs_Ok(iCSPointer) Then
                    Call handleLegacyError14(MethodName, "main_GetCSRecordEditLink called with Not main_CSOK")
                Else
                    '
                    ' Print an edit link for the records Content (may not be iCSPointer content)
                    '
                    RecordID = (db.cs_getInteger(iCSPointer, "ID"))
                    RecordName = db.cs_getText(iCSPointer, "Name")
                    ContentControlID = (db.cs_getInteger(iCSPointer, "contentcontrolid"))
                    ContentName = metaData.getContentNameByID(ContentControlID)
                    If ContentName <> "" Then
                        cs_GetCSRecordEditLink = main_GetRecordEditLink2(ContentName, RecordID, EncodeBoolean(AllowCut), RecordName, user.isEditing(ContentName))
                    End If
                End If
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        ''========================================================================
        ''   upgraded
        ''========================================================================
        ''
        'Public Function main_GetFormStart(Optional ByVal ActionQueryString As String = "") As String
        '    main_GetFormStart = main_GetFormStart(ActionQueryString)
        'End Function
        ''
        ''========================================================================
        '' ----- Starts an HTML form
        ''       Should be closed with PrintFormEnd
        ''========================================================================
        ''
        'Public Function main_GetFormStart(Optional ByVal ActionQueryString As String = "", Optional ByVal htmlName As String = "", Optional ByVal HtmlId As String = "") As String
        '    main_GetFormStart2 = main_GetFormStart3(ActionQueryString, htmlName, HtmlId)

        'End Function
        '
        '========================================================================
        ' ----- Starts an HTML form
        '       Should be closed with PrintFormEnd
        '========================================================================
        '
        Public Function html_GetFormStart(Optional ByVal ActionQueryString As String = Nothing, Optional ByVal htmlName As String = "", Optional ByVal htmlId As String = "", Optional ByVal htmlMethod As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetFormStart3")
            '
            'If Not (true) Then Exit Function
            '
            Dim Ptr As Integer
            Dim MethodName As String
            Dim ActionQS As String
            Dim iMethod As String
            Dim ActionParts() As String
            Dim Action As String
            Dim QSParts() As String
            Dim QSNameValues() As String
            Dim QSName As String
            Dim QSValue As String
            Dim RefreshHiddens As String
            '
            MethodName = "main_GetFormStart3"
            '
            If ActionQueryString Is Nothing Then
                ActionQS = web_RefreshQueryString
            Else
                ActionQS = ActionQueryString
            End If
            iMethod = vbLCase(htmlMethod)
            If iMethod = "" Then
                iMethod = "post"
            End If
            RefreshHiddens = ""
            Action = web_ServerFormActionURL
            '
            If (ActionQS <> "") Then
                If (iMethod <> "main_Get") Then
                    '
                    ' non-main_Get, put Action QS on end of Action
                    '
                    Action = Action & "?" & ActionQS
                Else
                    '
                    ' main_Get method, build hiddens for actionQS
                    '
                    QSParts = Split(ActionQS, "&")
                    For Ptr = 0 To UBound(QSParts)
                        QSNameValues = Split(QSParts(Ptr), "=")
                        If UBound(QSNameValues) = 0 Then
                            QSName = DecodeResponseVariable(QSNameValues(0))
                        Else
                            QSName = DecodeResponseVariable(QSNameValues(0))
                            QSValue = DecodeResponseVariable(QSNameValues(1))
                            RefreshHiddens = RefreshHiddens & cr & "<input type=""hidden"" name=""" & html_EncodeHTML(QSName) & """ value=""" & html_EncodeHTML(QSValue) & """>"
                        End If
                    Next
                End If
            End If
            '
            html_GetFormStart = "" _
                & cr & "<form name=""" & htmlName & """ id=""" & htmlId & """ action=""" & Action & """ method=""" & iMethod & """ style=""display: inline;"" >" _
                & RefreshHiddens _
                & ""
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        ' ----- Ends an HTML form
        '========================================================================
        '
        Public Function html_GetFormEnd() As String
            '
            html_GetFormEnd = "</form>"
            '
        End Function
        '
        '
        '
        Public Function html_GetFormInputText(ByVal TagName As String, Optional ByVal DefaultValue As String = "", Optional ByVal Height As String = "", Optional ByVal Width As String = "", Optional ByVal Id As String = "", Optional ByVal PasswordField As Boolean = False) As String
            html_GetFormInputText = html_GetFormInputText2(EncodeText(TagName), EncodeText(DefaultValue), EncodeInteger(Height), EncodeInteger(Width), EncodeText(Id), PasswordField, False)
        End Function
        '
        '
        '
        Public Function html_GetFormInputText2(ByVal htmlName As String, Optional ByVal DefaultValue As String = "", Optional ByVal Height As Integer = -1, Optional ByVal Width As Integer = -1, Optional ByVal HtmlId As String = "", Optional ByVal PasswordField As Boolean = False, Optional ByVal Disabled As Boolean = False, Optional ByVal HtmlClass As String = "") As String
            On Error GoTo ErrorTrap
            '
            Dim iDefaultValue As String
            Dim iWidth As Integer
            Dim iHeight As Integer
            Dim TagID As String
            Dim TagDisabled As String
            '
            If True Then
                TagID = ""
                '
                iDefaultValue = html_EncodeHTML(DefaultValue)
                If HtmlId <> "" Then
                    TagID = TagID & " id=""" & encodeEmptyText(HtmlId, "") & """"
                End If
                '
                If HtmlClass <> "" Then
                    TagID = TagID & " class=""" & HtmlClass & """"
                End If
                '
                iWidth = Width
                If (iWidth <= 0) Then
                    iWidth = siteProperties.defaultFormInputWidth
                End If
                '
                iHeight = Height
                If (iHeight <= 0) Then
                    iHeight = siteProperties.defaultFormInputTextHeight
                End If
                '
                If Disabled Then
                    TagDisabled = " disabled=""disabled"""
                End If
                '
                If PasswordField Then
                    html_GetFormInputText2 = "<input TYPE=""password"" NAME=""" & htmlName & """ SIZE=""" & iWidth & """ VALUE=""" & iDefaultValue & """" & TagID & TagDisabled & ">"
                ElseIf (iHeight = 1) And (InStr(1, iDefaultValue, """") = 0) Then
                    html_GetFormInputText2 = "<input TYPE=""Text"" NAME=""" & htmlName & """ SIZE=""" & iWidth.ToString & """ VALUE=""" & iDefaultValue & """" & TagID & TagDisabled & ">"
                Else
                    html_GetFormInputText2 = "<textarea NAME=""" & htmlName & """ ROWS=""" & iHeight.ToString & """ COLS=""" & iWidth.ToString & """" & TagID & TagDisabled & ">" & iDefaultValue & "</TEXTAREA>"
                End If
                main_FormInputTextCnt = main_FormInputTextCnt + 1
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetFormInputText2")
        End Function
        '
        '========================================================================
        ' ----- main_Get an HTML Form text input (or text area)
        '========================================================================
        '
        Public Function html_GetFormInputTextExpandable(ByVal TagName As String, Optional ByVal Value As String = "", Optional ByVal Rows As Integer = 0, Optional ByVal styleWidth As String = "100%", Optional ByVal Id As String = "", Optional ByVal PasswordField As Boolean = False) As String
            If Rows = 0 Then
                Rows = siteProperties.defaultFormInputTextHeight
            End If
            html_GetFormInputTextExpandable = html_GetFormInputTextExpandable2(TagName, Value, Rows, styleWidth, Id, PasswordField, False, "")
        End Function
        '
        '========================================================================
        ' ----- main_Get an HTML Form text input (or text area)
        '   added disabled case
        '========================================================================
        '
        Public Function html_GetFormInputTextExpandable2(ByVal TagName As String, Optional ByVal Value As String = "", Optional ByVal Rows As Integer = 0, Optional ByVal styleWidth As String = "100%", Optional ByVal Id As String = "", Optional ByVal PasswordField As Boolean = False, Optional ByVal Disabled As Boolean = False, Optional ByVal HtmlClass As String = "") As String
            On Error GoTo ErrorTrap : Dim Tn As String : Tn = "cpCoreClass.GetFormInputTextExpandable2" ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            'If Not (true) Then Exit Function
            '
            Dim AttrDisabled As String
            Dim Value_Local As String
            Dim StyleWidth_Local As String
            Dim Rows_Local As Integer
            Dim IDRoot As String
            Dim EditorClosed As String
            Dim EditorOpened As String
            '
            Value_Local = html_EncodeHTML(Value)
            IDRoot = Id
            If IDRoot = "" Then
                IDRoot = "TextArea" & main_FormInputTextCnt
            End If
            '
            StyleWidth_Local = styleWidth
            If StyleWidth_Local = "" Then
                StyleWidth_Local = "100%"
            End If
            '
            Rows_Local = Rows
            If Rows_Local = 0 Then
                '
                ' need a default for this -- it should be different from a text, it should be for a textarea -- bnecause it is used differently
                '
                'Rows_Local = app.SiteProperty_DefaultFormInputTextHeight
                If Rows_Local = 0 Then
                    Rows_Local = 10
                End If
            End If
            If Disabled Then
                AttrDisabled = " disabled=""disabled"""
            End If
            '
            EditorClosed = "" _
                & cr & "<div class=""ccTextAreaHead"" ID=""" & IDRoot & "Head"">" _
                & cr2 & "<a href=""#"" onClick=""OpenTextArea('" & IDRoot & "');return false""><img src=""/ccLib/images/OpenUpRev1313.gif"" width=13 height=13 border=0>&nbsp;Full Screen</a>" _
                & cr & "</div>" _
                & cr & "<div class=""ccTextArea"">" _
                & cr2 & "<textarea ID=""" & IDRoot & """ NAME=""" & TagName & """ ROWS=""" & Rows_Local & """ Style=""width:" & StyleWidth_Local & ";""" & AttrDisabled & " onkeydown=""return cj.encodeTextAreaKey(this, event);"">" & Value_Local & "</TEXTAREA>" _
                & cr & "</div>" _
                & ""
            '
            EditorOpened = "" _
                & cr & "<div class=""ccTextAreaHeCursorTypeEnum.ADOPENed"" style=""display:none;"" ID=""" & IDRoot & "HeCursorTypeEnum.ADOPENed"">" _
                & cr & "<a href=""#"" onClick=""CloseTextArea('" & IDRoot & "');return false""><img src=""/ccLib/images/OpenDownRev1313.gif"" width=13 height=13 border=0>&nbsp;Full Screen</a>" _
                & cr2 & "</div>" _
                & cr & "<textarea class=""ccTextAreaOpened"" style=""display:none;"" ID=""" & IDRoot & "Opened"" NAME=""" & IDRoot & "Opened""" & AttrDisabled & " onkeydown=""return cj.encodeTextAreaKey(this, event);""></TEXTAREA>"
            '
            html_GetFormInputTextExpandable2 = "" _
                & "<div class=""" & HtmlClass & """>" _
                & kmaIndent(EditorClosed) _
                & kmaIndent(EditorOpened) _
                & "</div>"
            main_FormInputTextCnt = main_FormInputTextCnt + 1
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            handleExceptionAndRethrow(New Exception("Unexpected exception"))
            '
        End Function
        '
        '
        '
        Public Function html_GetFormInputDate(ByVal TagName As String, Optional ByVal DefaultValue As String = "", Optional ByVal Width As String = "", Optional ByVal Id As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetFormInputDate")
            '
            'If Not (true) Then Exit Function
            '
            Dim HeadJS As String
            Dim DateString As String
            Dim DateValue As Date
            Dim iDefaultValue As String
            Dim iWidth As Integer
            Dim MethodName As String
            Dim iTagName As String
            Dim TagID As String
            Dim CalendarObjName As String
            Dim AnchorName As String
            '
            MethodName = "main_GetFormInputDate"
            '
            iTagName = EncodeText(TagName)
            iDefaultValue = encodeEmptyText(DefaultValue, "")
            If (iDefaultValue = "0") Or (iDefaultValue = "12:00:00 AM") Then
                iDefaultValue = ""
            Else
                iDefaultValue = html_EncodeHTML(iDefaultValue)
            End If
            If encodeEmptyText(Id, "") <> "" Then
                TagID = " ID=""" & encodeEmptyText(Id, "") & """"
            End If
            '
            iWidth = encodeEmptyInteger(Width, 20)
            If iWidth = 0 Then
                iWidth = 20
            End If
            '
            CalendarObjName = "Cal" & main_InputDateCnt
            AnchorName = "ACal" & main_InputDateCnt

            If main_InputDateCnt = 0 Then
                HeadJS = "" _
                    & vbCrLf & "<SCRIPT LANGUAGE=""JavaScript"" SRC=""/cclib/mktree/CalendarPopup.js""></SCRIPT>" _
                    & vbCrLf & "<SCRIPT LANGUAGE=""JavaScript"">" _
                    & vbCrLf & "var cal = new CalendarPopup();" _
                    & vbCrLf & "cal.showNavigationDropdowns();" _
                    & vbCrLf & "</SCRIPT>"
                Call main_AddHeadScriptLink("/cclib/mktree/CalendarPopup.js", "Calendar Popup")
                Call main_AddHeadScriptCode("var cal=new CalendarPopup();cal.showNavigationDropdowns();", "Calendar Popup")
            End If

            If IsDate(iDefaultValue) Then
                DateValue = EncodeDate(iDefaultValue)
                If Month(DateValue) < 10 Then
                    DateString = DateString & "0"
                End If
                DateString = DateString & Month(DateValue) & "/"
                If Day(DateValue) < 10 Then
                    DateString = DateString & "0"
                End If
                DateString = DateString & Day(DateValue) & "/" & Year(DateValue)
            End If


            html_GetFormInputDate = html_GetFormInputDate _
                & vbCrLf & "<input TYPE=""text"" NAME=""" & iTagName & """ ID=""" & iTagName & """ VALUE=""" & iDefaultValue & """  SIZE=""" & iWidth & """>" _
                & vbCrLf & "<a HREF=""#"" Onclick = ""cal.select(document.getElementById('" & iTagName & "'),'" & AnchorName & "','MM/dd/yyyy','" & DateString & "'); return false;"" NAME=""" & AnchorName & """ ID=""" & AnchorName & """><img title=""Select a date"" alt=""Select a date"" src=""/ccLib/images/table.jpg"" width=12 height=10 border=0></A>" _
                & vbCrLf & ""

            main_InputDateCnt = main_InputDateCnt + 1
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        ' ----- main_Get an HTML Form file upload input
        '========================================================================
        '
        Public Function html_GetFormInputFile2(ByVal TagName As String, Optional ByVal htmlId As String = "", Optional ByVal HtmlClass As String = "") As String
            '
            html_GetFormInputFile2 = "<input TYPE=""file"" name=""" & TagName & """ id=""" & htmlId & """ class=""" & HtmlClass & """>"
            '
        End Function
        '
        ' ----- main_Get an HTML Form file upload input
        '
        Public Function html_GetFormInputFile(ByVal TagName As String, Optional ByVal htmlId As String = "") As String
            '
            html_GetFormInputFile = html_GetFormInputFile2(TagName, htmlId)
            '
        End Function
        '
        '========================================================================
        ' ----- main_Get an HTML Form input
        '========================================================================
        '
        Public Function html_GetFormInputRadioBox(ByVal TagName As String, ByVal TagValue As String, ByVal CurrentValue As String, Optional ByVal htmlId As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetFormInputRadioBox")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            Dim iTagName As String
            Dim iTagValue As String
            Dim iCurrentValue As String
            Dim ihtmlId As String
            Dim TagID As String
            '
            iTagName = EncodeText(TagName)
            iTagValue = EncodeText(TagValue)
            iCurrentValue = EncodeText(CurrentValue)
            ihtmlId = encodeEmptyText(htmlId, "")
            If ihtmlId <> "" Then
                TagID = " ID=""" & ihtmlId & """"
            End If
            '
            MethodName = "main_GetFormInputRadioBox"
            '
            If iTagValue = iCurrentValue Then
                html_GetFormInputRadioBox = "<input TYPE=""Radio"" NAME=""" & iTagName & """ VALUE=""" & iTagValue & """ checked" & TagID & ">"
            Else
                html_GetFormInputRadioBox = "<input TYPE=""Radio"" NAME=""" & iTagName & """ VALUE=""" & iTagValue & """" & TagID & ">"
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        '   Legacy
        '========================================================================
        '
        Public Function html_GetFormInputCheckBox(ByVal TagName As String, Optional ByVal DefaultValue As String = "", Optional ByVal htmlId As String = "") As String
            html_GetFormInputCheckBox = html_GetFormInputCheckBox2(EncodeText(TagName), EncodeBoolean(DefaultValue), EncodeText(htmlId))
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Public Function html_GetFormInputCheckBox2(ByVal TagName As String, Optional ByVal DefaultValue As Boolean = False, Optional ByVal HtmlId As String = "", Optional ByVal Disabled As Boolean = False, Optional ByVal HtmlClass As String = "") As String
            On Error GoTo ErrorTrap
            '
            html_GetFormInputCheckBox2 = "<input TYPE=""CheckBox"" NAME=""" & TagName & """ VALUE=""1"""
            If HtmlId <> "" Then
                html_GetFormInputCheckBox2 = html_GetFormInputCheckBox2 & " id=""" & HtmlId & """"
            End If
            If HtmlClass <> "" Then
                html_GetFormInputCheckBox2 = html_GetFormInputCheckBox2 & " class=""" & HtmlClass & """"
            End If
            If DefaultValue Then
                html_GetFormInputCheckBox2 = html_GetFormInputCheckBox2 & " checked=""checked"""
            End If
            If Disabled Then
                html_GetFormInputCheckBox2 = html_GetFormInputCheckBox2 & " disabled=""disabled"""
            End If
            html_GetFormInputCheckBox2 = html_GetFormInputCheckBox2 & ">"
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_GetFormInputCheckBox2")
        End Function
        '
        '========================================================================
        '   Create a List of Checkboxes based on a contentname and a list of IDs that should be checked
        '
        '   For instance, list out a checklist of all public groups, with the ones checked that this member belongs to
        '       PrimaryContentName = "People"
        '       PrimaryRecordID = MemberID
        '       SecondaryContentName = "Groups"
        '       SecondaryContentSelectCriteria = "ccGroups.PublicJoin<>0"
        '       RulesContentName = "Member Rules"
        '       RulesPrimaryFieldName = "MemberID"
        '       RulesSecondaryFieldName = "GroupID"
        '========================================================================
        '
        Public Function html_GetFormInputCheckListByIDList(ByVal TagName As String, ByVal SecondaryContentName As String, ByVal CheckedIDList As String, Optional ByVal CaptionFieldName As String = "", Optional ByVal readOnlyField As Boolean = False) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetFormInputCheckListByIDList")
            '
            'If Not (true) Then Exit Function
            '
            Dim SQL As String
            Dim CS As Integer
            Dim main_MemberShipCount As Integer
            Dim main_MemberShipSize As Integer
            Dim main_MemberShipPointer As Integer
            Dim SectionName As String
            Dim GroupCount As Integer
            Dim main_MemberShip() As Integer
            Dim SecondaryTablename As String
            Dim SecondaryContentID As Integer
            Dim rulesTablename As String
            Dim Result As String
            Dim MethodName As String
            Dim iCaptionFieldName As String
            Dim GroupName As String
            Dim GroupCaption As String
            Dim CanSeeHiddenFields As Boolean
            Dim SecondaryCDef As coreMetaDataClass.CDefClass
            Dim ContentIDList As String
            Dim Found As Boolean
            Dim RecordID As Integer
            Dim SingularPrefix As String
            '
            MethodName = "main_GetFormInputCheckListByIDList"
            '
            iCaptionFieldName = encodeEmptyText(CaptionFieldName, "name")
            '
            ' ----- Gather all the SecondaryContent that associates to the PrimaryContent
            '
            SecondaryCDef = metaData.getCdef(SecondaryContentName)
            SecondaryTablename = SecondaryCDef.ContentTableName
            SecondaryContentID = SecondaryCDef.Id
            SecondaryCDef.childIdList.Add(SecondaryContentID)
            SingularPrefix = GetSingular(SecondaryContentName) & "&nbsp;"
            '
            ' ----- Gather all the records, sorted by ContentName
            '
            SQL = "SELECT " & SecondaryTablename & ".ID AS ID, ccContent.Name AS SectionName, " & SecondaryTablename & "." & iCaptionFieldName & " AS GroupCaption, " & SecondaryTablename & ".name AS GroupName, " & SecondaryTablename & ".SortOrder" _
            & " FROM " & SecondaryTablename & " LEFT JOIN ccContent ON " & SecondaryTablename & ".ContentControlID = ccContent.ID" _
            & " Where (" & SecondaryTablename & ".Active<>" & SQLFalse & ")" _
            & " And (ccContent.Active<>" & SQLFalse & ")" _
            & " And (" & SecondaryTablename & ".ContentControlID IN (" & ContentIDList & "))"
            SQL &= "" _
                & " GROUP BY " & SecondaryTablename & ".ID, ccContent.Name, " & SecondaryTablename & "." & iCaptionFieldName & ", " & SecondaryTablename & ".name, " & SecondaryTablename & ".SortOrder" _
                & " ORDER BY ccContent.Name, " & SecondaryTablename & "." & iCaptionFieldName
            CS = db.cs_openSql(SQL)
            If db.cs_Ok(CS) Then
                SectionName = ""
                GroupCount = 0
                CanSeeHiddenFields = user.isAuthenticatedDeveloper()
                Do While db.cs_Ok(CS)
                    GroupName = db.cs_getText(CS, "GroupName")
                    If (Mid(GroupName, 1, 1) <> "_") Or CanSeeHiddenFields Then
                        RecordID = db.cs_getInteger(CS, "ID")
                        GroupCaption = db.cs_getText(CS, "GroupCaption")
                        If GroupCaption = "" Then
                            GroupCaption = GroupName
                        End If
                        If GroupCaption = "" Then
                            GroupCaption = SingularPrefix & RecordID
                        End If
                        If GroupCount <> 0 Then
                            ' leave this between checkboxes - it is searched in the admin page
                            Result = Result & "<br >" & vbCrLf
                        End If
                        If IsInDelimitedString(CheckedIDList, CStr(RecordID), ",") Then
                            Found = True
                        Else
                            Found = False
                        End If
                        ' must leave the first hidden with the value in this form - it is searched in the admin pge
                        Result = Result & "<input type=hidden name=""" & TagName & "." & GroupCount & ".ID"" value=" & RecordID & ">"
                        If readOnlyField And Not Found Then
                            Result = Result & "<input type=checkbox disabled>"
                        ElseIf readOnlyField Then
                            Result = Result & "<input type=checkbox disabled checked>"
                            Result = Result & "<input type=""hidden"" name=""" & TagName & "." & GroupCount & ".ID"" value=" & RecordID & ">"
                        ElseIf Found Then
                            Result = Result & "<input type=checkbox name=""" & TagName & "." & GroupCount & """ checked>"
                        Else
                            Result = Result & "<input type=checkbox name=""" & TagName & "." & GroupCount & """>"
                        End If
                        Result = Result & SpanClassAdminNormal & GroupCaption
                        GroupCount = GroupCount + 1
                    End If
                    db.db_csGoNext(CS)
                Loop
                Result = Result & "<input type=""hidden"" name=""" & TagName & ".RowCount"" value=""" & GroupCount & """>" & vbCrLf
            End If
            db.cs_Close(CS)
            html_GetFormInputCheckListByIDList = Result
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        ' -----
        '
        Public Function html_GetFormInputCS(ByVal CSPointer As Integer, ByVal ContentName As String, ByVal FieldName As String, Optional ByVal Height As Integer = 1, Optional ByVal Width As Integer = 40, Optional ByVal htmlId As String = "") As String
            Dim returnResult As String
            Try
                Dim IsEmptyList As Boolean
                Dim Stream As String
                Dim MethodName As String
                Dim FieldCaption As String
                Dim FieldValueVariant As Object
                Dim FieldValueText As String
                Dim FieldValueInteger As Integer
                Dim fieldTypeId As Integer
                Dim FieldReadOnly As Boolean
                Dim FieldPassword As Boolean
                Dim fieldFound As Boolean
                Dim FieldLookupContentID As Integer
                Dim FieldMemberSelectGroupID As Integer
                Dim FieldLookupContentName As String
                Dim Contentdefinition As coreMetaDataClass.CDefClass
                Dim FieldHTMLContent As Boolean
                Dim CSLookup As Integer
                Dim FieldLookupList As String
                '
                MethodName = "main_GetFormInputCS"
                '
                Stream = ""
                If True Then
                    fieldFound = False
                    Contentdefinition = metaData.getCdef(ContentName)
                    For Each keyValuePair As KeyValuePair(Of String, coreMetaDataClass.CDefFieldClass) In Contentdefinition.fields
                        Dim field As coreMetaDataClass.CDefFieldClass = keyValuePair.Value
                        With field
                            If vbUCase(.nameLc) = vbUCase(FieldName) Then
                                FieldValueVariant = .defaultValue
                                fieldTypeId = .fieldTypeId
                                FieldReadOnly = .ReadOnly
                                FieldCaption = .caption
                                FieldPassword = .Password
                                FieldHTMLContent = .htmlContent
                                FieldLookupContentID = .lookupContentID
                                FieldLookupList = .lookupList
                                FieldMemberSelectGroupID = .MemberSelectGroupID
                                fieldFound = True
                            End If
                        End With
                    Next
                    If Not fieldFound Then
                        handleExceptionAndRethrow(New Exception("Field [" & FieldName & "] was not found in Content Definition [" & ContentName & "]"))
                    Else
                        '
                        ' main_Get the current value if the record was found
                        '
                        If db.cs_Ok(CSPointer) Then
                            FieldValueVariant = db_cs_GetField(CSPointer, FieldName)
                        End If
                        '
                        If FieldPassword Then
                            '
                            ' Handle Password Fields
                            '
                            FieldValueText = EncodeText(FieldValueVariant)
                            returnResult = html_GetFormInputText2(FieldName, FieldValueText, Height, Width, , True)
                        Else
                            '
                            ' Non Password field by fieldtype
                            '
                            Select Case fieldTypeId
                            '
                            '
                            '
                                Case FieldTypeIdHTML
                                    FieldValueText = EncodeText(FieldValueVariant)
                                    If FieldReadOnly Then
                                        returnResult = FieldValueText
                                    Else
                                        returnResult = html_GetFormInputHTML(FieldName, FieldValueText, , Width.ToString)
                                    End If
                                '
                                ' html private files, read from privatefiles and use html editor
                                '
                                Case FieldTypeIdFileHTMLPrivate
                                    FieldValueText = EncodeText(FieldValueVariant)
                                    If FieldValueText <> "" Then
                                        FieldValueText = privateFiles.readFile(FieldValueText)
                                    End If
                                    If FieldReadOnly Then
                                        returnResult = FieldValueText
                                    Else
                                        'Height = encodeEmptyInteger(Height, 4)
                                        returnResult = html_GetFormInputHTML(FieldName, FieldValueText, , Width.ToString)
                                    End If
                                '
                                ' text private files, read from privatefiles and use text editor
                                '
                                Case FieldTypeIdFileTextPrivate
                                    FieldValueText = EncodeText(FieldValueVariant)
                                    If FieldValueText <> "" Then
                                        FieldValueText = privateFiles.readFile(FieldValueText)
                                    End If
                                    If FieldReadOnly Then
                                        returnResult = FieldValueText
                                    Else
                                        'Height = encodeEmptyInteger(Height, 4)
                                        returnResult = html_GetFormInputText2(FieldName, FieldValueText, Height, Width)
                                    End If
                                '
                                ' text public files, read from cdnfiles and use text editor
                                '
                                Case FieldTypeIdFileCSS, FieldTypeIdFileXML, FieldTypeIdFileJavascript
                                    FieldValueText = EncodeText(FieldValueVariant)
                                    If FieldValueText <> "" Then
                                        FieldValueText = cdnFiles.readFile(FieldValueText)
                                    End If
                                    If FieldReadOnly Then
                                        returnResult = FieldValueText
                                    Else
                                        'Height = encodeEmptyInteger(Height, 4)
                                        returnResult = html_GetFormInputText2(FieldName, FieldValueText, Height, Width)
                                    End If
                                '
                                '
                                '
                                Case FieldTypeIdBoolean
                                    If FieldReadOnly Then
                                        returnResult = EncodeText(EncodeBoolean(FieldValueVariant))
                                    Else
                                        returnResult = html_GetFormInputCheckBox2(FieldName, EncodeBoolean(FieldValueVariant))
                                    End If
                                '
                                '
                                '
                                Case FieldTypeIdAutoIdIncrement
                                    returnResult = EncodeText(EncodeNumber(FieldValueVariant))
                                '
                                '
                                '
                                Case FieldTypeIdFloat, FieldTypeIdCurrency, FieldTypeIdInteger
                                    FieldValueVariant = EncodeNumber(FieldValueVariant)
                                    If FieldReadOnly Then
                                        returnResult = EncodeText(FieldValueVariant)
                                    Else
                                        returnResult = html_GetFormInputText2(FieldName, EncodeText(FieldValueVariant), Height, Width)
                                    End If
                                '
                                '
                                '
                                Case FieldTypeIdFile
                                    FieldValueText = EncodeText(FieldValueVariant)
                                    If FieldReadOnly Then
                                        returnResult = FieldValueText
                                    Else
                                        returnResult = FieldValueText & "<BR >change: " & html_GetFormInputFile(FieldName, EncodeText(FieldValueVariant))
                                    End If
                                '
                                '
                                '
                                Case FieldTypeIdFileImage
                                    FieldValueText = EncodeText(FieldValueVariant)
                                    If FieldReadOnly Then
                                        returnResult = FieldValueText
                                    Else
                                        returnResult = "<img src=""" & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, FieldValueText) & """><BR >change: " & html_GetFormInputFile(FieldName, EncodeText(FieldValueVariant))
                                    End If
                                '
                                '
                                '
                                Case FieldTypeIdLookup
                                    FieldValueInteger = EncodeInteger(FieldValueVariant)
                                    FieldLookupContentName = metaData.getContentNameByID(FieldLookupContentID)
                                    If FieldLookupContentName <> "" Then
                                        '
                                        ' Lookup into Content
                                        '
                                        If FieldReadOnly Then
                                            CSPointer = db_csOpenRecord(FieldLookupContentName, FieldValueInteger)
                                            If db.cs_Ok(CSLookup) Then
                                                returnResult = main_GetCSEncodedField(CSLookup, "name")
                                            End If
                                            Call db.cs_Close(CSLookup)
                                        Else
                                            returnResult = main_GetFormInputSelect2(FieldName, FieldValueInteger, FieldLookupContentName, "", "", "", IsEmptyList)
                                        End If
                                    ElseIf FieldLookupList <> "" Then
                                        '
                                        ' Lookup into LookupList
                                        '
                                        returnResult = main_GetFormInputSelectList2(FieldName, FieldValueInteger, FieldLookupList, "", "")
                                    Else
                                        '
                                        ' Just call it text
                                        '
                                        returnResult = html_GetFormInputText2(FieldName, CStr(FieldValueInteger), Height, Width)
                                    End If
                                '
                                '
                                '
                                Case FieldTypeIdMemberSelect
                                    FieldValueInteger = EncodeInteger(FieldValueVariant)
                                    returnResult = main_GetFormInputMemberSelect(FieldName, FieldValueInteger, FieldMemberSelectGroupID)
                                    '
                                    '
                                    '
                                Case Else
                                    FieldValueText = EncodeText(FieldValueVariant)
                                    If FieldReadOnly Then
                                        returnResult = FieldValueText
                                    Else
                                        If FieldHTMLContent Then
                                            returnResult = html_GetFormInputHTML3(FieldName, FieldValueText, CStr(Height), CStr(Width), FieldReadOnly, False)
                                            'main_GetFormInputCS = main_GetFormInputActiveContent(fieldname, FieldValueText, height, width)
                                        Else
                                            returnResult = html_GetFormInputText2(FieldName, FieldValueText, Height, Width)
                                        End If
                                    End If
                            End Select
                        End If
                    End If
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
        End Function
        '
        '========================================================================
        ' ----- Print an HTML Form Button element named BUTTON
        '========================================================================
        '
        Public Function html_GetFormButton(ByVal ButtonLabel As String, Optional ByVal Name As String = "", Optional ByVal htmlId As String = "", Optional ByVal OnClick As String = "") As String
            html_GetFormButton = html_GetFormButton2(ButtonLabel, Name, htmlId, OnClick, False)
        End Function
        '
        '========================================================================
        ' ----- Print an HTML Form Button element named BUTTON
        '========================================================================
        '
        Public Function html_GetFormButton2(ByVal ButtonLabel As String, Optional ByVal Name As String = "button", Optional ByVal htmlId As String = "", Optional ByVal OnClick As String = "", Optional ByVal Disabled As Boolean = False) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetFormButton2")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            Dim iOnClick As String
            Dim TagID As String
            Dim s As String
            '
            MethodName = "main_GetFormButton2"
            '
            s = "<input TYPE=""SUBMIT""" _
                & " NAME=""" & encodeEmptyText(Name, "button") & """" _
                & " VALUE=""" & EncodeText(ButtonLabel) & """" _
                & " OnClick=""" & encodeEmptyText(OnClick, "") & """" _
                & " ID=""" & encodeEmptyText(htmlId, "") & """"
            If Disabled Then
                s = s & " disabled=""disabled"""
            End If
            html_GetFormButton2 = s & ">"
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        ' main_Gets a value in a hidden form field
        '   Handles name and value encoding
        '========================================================================
        '
        Public Function html_GetFormInputHidden(ByVal TagName As String, ByVal TagValue As String, Optional ByVal htmlId As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetFormInputHidden")
            '
            'If Not (true) Then Exit Function
            '
            Dim iTagValue As String
            Dim ihtmlId As String
            Dim s As String
            '
            s = cr & "<input type=""hidden"" NAME=""" & html_EncodeHTML(EncodeText(TagName)) & """"
            '
            iTagValue = html_EncodeHTML(EncodeText(TagValue))
            If iTagValue <> "" Then
                s = s & " VALUE=""" & iTagValue & """"
            End If
            '
            ihtmlId = EncodeText(htmlId)
            If ihtmlId <> "" Then
                s = s & " ID=""" & html_EncodeHTML(ihtmlId) & """"
            End If
            '
            s = s & ">"
            '
            html_GetFormInputHidden = s
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetFormInputHidden")
        End Function
        '
        Public Function html_GetFormInputHidden(ByVal TagName As String, ByVal TagValue As Boolean, Optional ByVal htmlId As String = "") As String
            Return html_GetFormInputHidden(TagName, TagValue.ToString, htmlId)
        End Function
        '
        Public Function html_GetFormInputHidden(ByVal TagName As String, ByVal TagValue As Integer, Optional ByVal htmlId As String = "") As String
            Return html_GetFormInputHidden(TagName, TagValue.ToString, htmlId)
        End Function
        '
        ' Popup a separate window with the contents of a file
        '
        Public Function html_GetWindowOpenJScript(ByVal URI As String, Optional ByVal WindowWidth As String = "", Optional ByVal WindowHeight As String = "", Optional ByVal WindowScrollBars As String = "", Optional ByVal WindowResizable As Boolean = True, Optional ByVal WindowName As String = "_blank") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetWindowOpenJScript")
            '
            'If Not (true) Then Exit Function
            '
            Dim Delimiter As String
            Dim MethodName As String
            '
            html_GetWindowOpenJScript = ""
            WindowName = encodeEmptyText(WindowName, "_blank")
            '
            MethodName = "main_GetWindowOpenJScript()"
            '
            ' Added addl options from huhcorp.com sample
            '
            html_GetWindowOpenJScript = html_GetWindowOpenJScript & "window.open('" & URI & "', '" & WindowName & "'"
            html_GetWindowOpenJScript = html_GetWindowOpenJScript & ",'menubar=no,toolbar=no,location=no,status=no"
            Delimiter = ","
            If Not isMissing(WindowWidth) Then
                If WindowWidth <> "" Then
                    html_GetWindowOpenJScript = html_GetWindowOpenJScript & Delimiter & "width=" & WindowWidth
                    Delimiter = ","
                End If
            End If
            If Not isMissing(WindowHeight) Then
                If WindowHeight <> "" Then
                    html_GetWindowOpenJScript = html_GetWindowOpenJScript & Delimiter & "height=" & WindowHeight
                    Delimiter = ","
                End If
            End If
            If Not isMissing(WindowScrollBars) Then
                If WindowScrollBars <> "" Then
                    html_GetWindowOpenJScript = html_GetWindowOpenJScript & Delimiter & "scrollbars=" & WindowScrollBars
                    Delimiter = ","
                End If
            End If
            If WindowResizable Then
                html_GetWindowOpenJScript = html_GetWindowOpenJScript & Delimiter & "resizable"
                Delimiter = ","
            End If
            html_GetWindowOpenJScript = html_GetWindowOpenJScript & "')"
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        ' Popup a separate window with the contents of a file
        '
        Public Function html_GetWindowDialogJScript(ByVal URI As String, Optional ByVal WindowWidth As String = "", Optional ByVal WindowHeight As String = "", Optional ByVal WindowScrollBars As Boolean = False, Optional ByVal WindowResizable As Boolean = False, Optional ByVal WindowName As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetWindowDialogJScript")
            '
            'If Not (true) Then Exit Function
            '
            Dim Delimiter As String
            Dim iWindowName As String
            Dim MethodName As String
            '
            iWindowName = encodeEmptyText(WindowName, "_blank")
            '
            MethodName = "main_GetWindowDialogJScript()"
            '
            ' Added addl options from huhcorp.com sample
            '
            html_GetWindowDialogJScript = ""
            html_GetWindowDialogJScript = html_GetWindowDialogJScript & "showModalDialog('" & URI & "', '" & iWindowName & "'"
            html_GetWindowDialogJScript = html_GetWindowDialogJScript & ",'status:false"
            If Not isMissing(WindowWidth) Then
                If WindowWidth <> "" Then
                    html_GetWindowDialogJScript = html_GetWindowDialogJScript & ";dialogWidth:" & WindowWidth & "px"
                End If
            End If
            If Not isMissing(WindowHeight) Then
                If WindowHeight <> "" Then
                    html_GetWindowDialogJScript = html_GetWindowDialogJScript & ";dialogHeight:" & WindowHeight & "px"
                End If
            End If
            If WindowScrollBars Then
                html_GetWindowDialogJScript = html_GetWindowDialogJScript & ";scroll:yes"
            End If
            If WindowResizable Then
                html_GetWindowDialogJScript = html_GetWindowDialogJScript & ";resizable:yes"
            End If
            html_GetWindowDialogJScript = html_GetWindowDialogJScript & "')"
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '
        '
        Public Function exportAscii_GetAsciiExport(ByVal ContentName As String, Optional ByVal PageSize As Integer = 1000, Optional ByVal PageNumber As Integer = 1) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetAsciiExport")
            '
            'If Not (true) Then Exit Function
            '
            'dim dt as datatable
            Dim SQL As String
            Dim Criteria As String
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim Delimiter As String
            Dim Copy As String
            Dim DataSourceName As String
            Dim TableName As String
            Dim CSPointer As Integer
            Dim FieldNameVariant As String
            Dim FieldName As String
            Dim UcaseFieldName As String
            Dim fieldType As Integer
            Dim MethodName As String
            Dim iContentName As String
            Dim sb As New System.Text.StringBuilder
            'Dim PageSize As Integer
            'Dim PageNumber As Integer
            Dim TestFilename As String
            '
            TestFilename = "AsciiExport" & common_GetRandomLong_Internal() & ".txt"
            '
            iContentName = EncodeText(ContentName)
            'PageSize = encodeEmptyInteger(PageSize, 1000)
            If PageSize = 0 Then
                PageSize = 1000
            End If
            'PageNumber = encodeEmptyInteger(PageNumber, 1)
            If PageNumber = 0 Then
                PageNumber = 1
            End If
            '
            MethodName = "main_GetAsciiExport"
            '
            ' ----- Check for special case iContentNames
            '
            Call web_setResponseContentType("text/plain")
            Call web_SetStreamBuffer(False)
            TableName = GetDbObjectTableName(db_GetContentTablename(iContentName))
            Select Case vbUCase(TableName)
                Case "CCMEMBERS"
                    '
                    ' ----- People and member content export
                    '
                    If Not user.isAuthenticatedAdmin() Then
                        Call sb.Append("Warning: You must be a site administrator to export this information.")
                    Else
                        CSPointer = db.csOpen(iContentName, , "ID", False, , , ,, PageSize, PageNumber)
                        '
                        ' ----- print out the field names
                        '
                        If db.cs_Ok(CSPointer) Then
                            Call sb.Append("""EID""")
                            Delimiter = ","
                            FieldNameVariant = db.db_GetCSFirstFieldName(CSPointer)
                            Do While (FieldNameVariant <> "")
                                FieldName = EncodeText(FieldNameVariant)
                                UcaseFieldName = vbUCase(FieldName)
                                If (UcaseFieldName <> "USERNAME") And (UcaseFieldName <> "PASSWORD") Then
                                    Call sb.Append(Delimiter & """" & FieldName & """")
                                End If
                                FieldNameVariant = db.db_GetCSNextFieldName(CSPointer)
                                '''DoEvents
                            Loop
                            Call sb.Append(vbCrLf)
                        End If
                        '
                        ' ----- print out the values
                        '
                        Do While db.cs_Ok(CSPointer)
                            If Not (db.cs_getBoolean(CSPointer, "Developer")) Then
                                Copy = security.encodeToken((db.cs_getInteger(CSPointer, "ID")), main_PageStartTime)
                                Call sb.Append("""" & Copy & """")
                                Delimiter = ","
                                FieldNameVariant = db.db_GetCSFirstFieldName(CSPointer)
                                Do While (FieldNameVariant <> "")
                                    FieldName = EncodeText(FieldNameVariant)
                                    UcaseFieldName = vbUCase(FieldName)
                                    If (UcaseFieldName <> "USERNAME") And (UcaseFieldName <> "PASSWORD") Then
                                        Copy = db.db_GetCS(CSPointer, FieldName)
                                        If Copy <> "" Then
                                            Copy = vbReplace(Copy, """", "'")
                                            Copy = vbReplace(Copy, vbCrLf, " ")
                                            Copy = vbReplace(Copy, vbCr, " ")
                                            Copy = vbReplace(Copy, vbLf, " ")
                                        End If
                                        Call sb.Append(Delimiter & """" & Copy & """")
                                    End If
                                    FieldNameVariant = db.db_GetCSNextFieldName(CSPointer)
                                    '''DoEvents
                                Loop
                                Call sb.Append(vbCrLf)
                            End If
                            Call db.db_csGoNext(CSPointer)
                            '''DoEvents
                        Loop
                    End If
                    ' End Case
                Case Else
                    '
                    ' ----- All other content
                    '
                    If Not user.isAuthenticatedContentManager(iContentName) Then
                        Call sb.Append("Error: You must be a content manager to export this data.")
                    Else
                        CSPointer = db.csOpen(iContentName, , "ID", False, , , ,, PageSize, PageNumber)
                        '
                        ' ----- print out the field names
                        '
                        If db.cs_Ok(CSPointer) Then
                            Delimiter = ""
                            FieldNameVariant = db.db_GetCSFirstFieldName(CSPointer)
                            Do While (FieldNameVariant <> "")
                                Call appRootFiles.appendFile(TestFilename, Delimiter & """" & FieldNameVariant & """")
                                Delimiter = ","
                                FieldNameVariant = db.db_GetCSNextFieldName(CSPointer)
                                '''DoEvents
                            Loop
                            Call appRootFiles.appendFile(TestFilename, vbCrLf)
                        End If
                        '
                        ' ----- print out the values
                        '
                        Do While db.cs_Ok(CSPointer)
                            Delimiter = ""
                            FieldNameVariant = db.db_GetCSFirstFieldName(CSPointer)
                            Do While (FieldNameVariant <> "")
                                Select Case db.db_GetCSFieldTypeId(CSPointer, EncodeText(FieldNameVariant))
                                    Case FieldTypeIdFileTextPrivate, FieldTypeIdFileCSS, FieldTypeIdFileXML, FieldTypeIdFileJavascript, FieldTypeIdFileHTMLPrivate
                                        Copy = main_GetCSEncodedField(CSPointer, EncodeText(FieldNameVariant))
                                    Case FieldTypeIdLookup
                                        Copy = db.db_GetCSLookup(CSPointer, EncodeText(FieldNameVariant))
                                    Case FieldTypeIdRedirect, FieldTypeIdManyToMany
                                    Case Else
                                        Copy = db.cs_getText(CSPointer, EncodeText(FieldNameVariant))
                                End Select
                                If Copy <> "" Then
                                    Copy = vbReplace(Copy, """", "'")
                                    Copy = vbReplace(Copy, vbCrLf, " ")
                                    Copy = vbReplace(Copy, vbCr, " ")
                                    Copy = vbReplace(Copy, vbLf, " ")
                                End If
                                Call appRootFiles.appendFile(TestFilename, Delimiter & """" & Copy & """")
                                Delimiter = ","
                                FieldNameVariant = db.db_GetCSNextFieldName(CSPointer)
                                '''DoEvents
                            Loop
                            Call appRootFiles.appendFile(TestFilename, vbCrLf)
                            Call db.db_csGoNext(CSPointer)
                            '''DoEvents
                        Loop
                    End If
            End Select
            exportAscii_GetAsciiExport = appRootFiles.readFile(TestFilename)
            Call appRootFiles.deleteFile(TestFilename)
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '        '
        '        '
        '        '
        '        Public Sub user_SetMember(PeopleID As Integer)
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("SetMember")
        '            '
        '            'If Not (true) Then Exit Sub
        '            '
        '            Dim CSPointer As Integer
        '            Dim MethodName As String
        '            Dim iPeopleID As Integer
        '            '
        '            iPeopleID = EncodeInteger(PeopleID)
        '            '
        '            MethodName = "main_SetMember"
        '            '
        '            CSPointer = db.csOpen("people", "id=" & db.db_EncodeSQLNumber(iPeopleID))
        '            If Not db.db_csOk(CSPointer) Then
        '                Call handleLegacyError14(MethodName, "main_SetMember ErrorTrap, could not find RecordID [" & iPeopleID & "] in people content.")
        '            Else
        '                Call db.db_setCS(CSPointer, "ContentControlID", main_GetContentID("Members"))
        '            End If
        '            Call db.db_csClose(CSPointer)
        '            '
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError18("main_SetMember")
        '        End Sub
        '
        '
        '
        Public Sub web_SetStreamBuffer(BufferOn As Boolean)
            Try
                If docBufferEnabled Then
                    '
                    ' ----- once on, can not be turned off Response Object
                    '
                    docBufferEnabled = BufferOn
                Else
                    '
                    ' ----- StreamBuffer off, allow on and off
                    '
                    docBufferEnabled = BufferOn
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
        End Sub
        '
        '
        '
        Public Sub web_setResponseStatus(status As String)
            _docBufferResponseStatus = status
        End Sub
        '
        '
        '
        Public Sub web_setResponseContentType(ContentType As Object)
            _docBufferContentType = CStr(ContentType)
        End Sub
        '
        '
        '
        Public Sub web_addResponseHeader(HeaderName As Object, HeaderValue As Object)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("SetStreamHeader")
            '
            If docOpen Then
                If _docBufferResponseHeader <> "" Then
                    _docBufferResponseHeader = _docBufferResponseHeader & vbCrLf
                End If
                _docBufferResponseHeader = _docBufferResponseHeader _
                    & vbReplace(EncodeText(HeaderName), vbCrLf, "") _
                    & vbCrLf & vbReplace(EncodeText(HeaderValue), vbCrLf, "")
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_SetStreamHeader")
            '
        End Sub
        '
        '
        '
        Public Sub main_ClearStream()
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("ClearStream")
            '
            _docBuffer = ""
            _docBufferRedirect = ""
            _docBufferResponseHeader = ""
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_ClearStream")
            '
        End Sub
        '
        '
        '
        Public Sub main_FlushStream()
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("FlushStream")
            '
            If (iisContext IsNot Nothing) Then
                '
                ' ASP flush
                '
                iisContext.Response.Flush()
            Else
                '
                ' No Buffer equivalent
                '
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_FlushStream")
            '
        End Sub
        '
        '========================================================================
        '   Creates the site-wide standard filename for textfiles and uploaded files and images
        '
        '   May or may not contain directory slashes
        '========================================================================
        '
        Public Function main_GetVirtualFilename(ByVal ContentName As String, ByVal FieldName As String, ByVal RecordID As Integer, Optional ByVal OriginalFilename As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetVirtualFilename")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            Dim iContentName As String
            Dim iFieldName As String
            Dim iRecordID As Integer
            '
            iContentName = EncodeText(ContentName)
            iFieldName = EncodeText(FieldName)
            iRecordID = EncodeInteger(RecordID)
            '
            MethodName = "main_GetVirtualFilename"
            '
            main_GetVirtualFilename = db.db_GetVirtualFilename(iContentName, iFieldName, iRecordID, OriginalFilename)
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
        End Function
        '
        '
        '
        Public Function main_GetLinkedText(AnchorTag As Object, AnchorText As Object) As String
            main_GetLinkedText = csv_GetLinkedText(EncodeText(AnchorTag), EncodeText(AnchorText))
            Exit Function
        End Function
        '
        '=============================================================================
        ' Save Visit
        '   If main_VisitId = 0, create new visit entry and set main_VisitId
        '=============================================================================
        '
        Public Sub visit_save()
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("SaveVisit")
            '
            'If Not (true) Then Exit Sub
            '
            Dim SQL As String
            Dim MethodName As String
            ' 'dim buildversion As String
            '
            MethodName = "main_SaveVisit"
            '
            If visit_initialized Then
                '
                ' initialized means the main_InitVisit has completed, so all the other visit values are real
                '
                'BuildVersion = app.dataBuildVersion
                '
                ' ----- set the default Visit Name if nothing else
                '
                If visit_name = "" Then
                    visit_name = "Visit" & visit_Id
                End If
                '
                ' ----- save existing visit
                '
                SQL = "UPDATE ccVisits SET " _
                    & " LastVisitTime=" & db.encodeSQLDate(main_PageStartTime) _
                    & ",PageVisits=" & (visit_pages) _
                    & ",CookieSupport=" & db.encodeSQLBoolean(visit_cookieSupport) _
                    & ",LoginAttempts=" & visit_loginAttempts _
                    & ",VisitAuthenticated=" & db.encodeSQLBoolean(visit_isAuthenticated) _
                    & ",MemberID=" & user.id _
                    & ",MemberNew=" & db.encodeSQLBoolean(user.isNew) _
                    & ",TimeToLastHit=" & db.encodeSQLNumber(main_VisitTimeToLastHit) _
                    & ",ExcludeFromAnalytics=" & db.encodeSQLBoolean(visit_excludeFromAnalytics) _
                    & ",Mobile=" & db.encodeSQLBoolean(visit_browserIsMobile) _
                    & ",Bot=" & db.encodeSQLBoolean(visit_isBot Or visit_isBadBot) _
                    & ""
                If visit_pages <= 1 Then
                    '
                    ' First page of the visit, save everything
                    '
                    SQL &= "" _
                        & ",VisitorID=" & visitor_id _
                        & ",Name=" & db.encodeSQLText(visit_name) _
                        & ",VisitorNew=" & db.encodeSQLBoolean(visitor_new) _
                        & ",StartTime=" & db.encodeSQLDate(visit_startTime) _
                        & ",StartDateValue=" & visit_startDateValue _
                        & ",DateAdded=" & db.encodeSQLDate(visit_startTime) _
                        & ",Remote_Addr=" & db.encodeSQLText(webServer.requestRemoteIP) _
                        & ",Browser=" & db.encodeSQLText(Left(webServer.requestBrowser, 255)) _
                        & ",HTTP_Via=" & db.encodeSQLText(Left(webServer.requestHTTPVia, 255)) _
                        & ",HTTP_From=" & db.encodeSQLText(Left(webServer.requestHTTPFrom, 255)) _
                        & ",HTTP_REFERER=" & db.encodeSQLText(Left(visit_refererHost, 255)) _
                        & ",RefererPathPage=" & db.encodeSQLText(Left(visit_refererPathPage, 255)) _
                        & ""
                End If
                SQL &= " WHERE (ID=" & visit_Id & ");"
                Call db.executeSql(SQL)
            End If
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '=============================================================================
        '   Save Visitor
        '
        '   Saves changes to the visitor record back to the database. Should be called
        '   before exit of anypage if anything here changes
        '=============================================================================
        '
        Public Sub visitor_save()
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("SaveVisitor")
            '
            'If Not (true) Then Exit Sub
            '
            Dim SQL As String
            Dim MethodName As String
            '
            MethodName = "main_SaveVisitor"
            '
            If visit_initialized Then
                If True Then
                    SQL = "UPDATE ccVisitors SET " _
                        & " Name = " & db.encodeSQLText(visitor_Name) _
                        & ",MemberID = " & db.encodeSQLNumber(visitor_memberID) _
                        & ",OrderID = " & db.encodeSQLNumber(visitor_orderID) _
                        & ",ForceBrowserMobile = " & db.encodeSQLNumber(visitor_forceBrowserMobile) _
                        & " WHERE ID=" & visitor_id & ";"
                Else
                    SQL = "UPDATE ccVisitors SET " _
                        & " Name = " & db.encodeSQLText(visitor_Name) _
                        & ",MemberID = " & db.encodeSQLNumber(visitor_memberID) _
                        & ",OrderID = " & db.encodeSQLNumber(visitor_orderID) _
                        & " WHERE ID=" & visitor_id & ";"
                End If
                Call db.executeSql(SQL)
            End If
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '========================================================================
        ' Initilize the Current Page using just the WebClient
        '   main_AllowVisitTracking - if true a cookie will be written and the visit tracked
        '========================================================================
        '
        Public Sub visit_init(ByVal visitInit_allowVisitTracking As Boolean)
            Try
                Dim NeedToWriteVisitCookie As Boolean
                Dim TrackGuests As Boolean
                Dim TrackGuestsWithoutCookies As Boolean
                Dim DefaultMemberName As String
                Dim AllowOnNewVisitEvent As Boolean
                Dim CS As Integer
                'Dim CSNewVisit As Integer
                'Dim CSNewVisitor As Integer
                Dim visitor_changes As Boolean
                Dim user_changes As Boolean
                Dim visit_lastTimeFromCookie As Date
                Dim SQL As String
                Dim SlashPosition As Integer
                Dim MemberLinkinEID As String
                Dim MemberLinkLoginID As Integer
                Dim MemberLinkRecognizeID As Integer
                Dim CookieVisitNew As String
                Dim CookieVisit As String
                Dim CookieVisitor As String
                Dim WorkingReferer As String
                Dim MethodName As String
                Dim Copy As String
                Dim AuthUsername As String
                Dim AuthPassword As String
                Dim AuthDomain As String
                Dim main_appNameCookiePrefix As String
                '
                main_appNameCookiePrefix = vbLCase(main_encodeCookieName(appConfig.name))

                ' ----- Visit Defaults
                '
                visit_Id = 0
                visit_pages = 0
                visit_loginAttempts = 0
                visit_lastTimeFromCookie = Date.MinValue
                visit_stateOK = True
                visit_isAuthenticated = False
                visit_excludeFromAnalytics = False
                visit_cookieSupport = False
                '
                ' ----- Visitor Defaults
                '
                'hint = "010"
                'CSNewVisitor = -1
                visitor_id = 0
                visitor_new = False
                visitor_changes = False
                '
                ' ----- Member Defaults
                '
                'hint = "020"
                user.id = 0
                user.name = "Guest"
                user.userAdded = False
                user.isNew = False
                user_changes = False
                user.styleFilename = ""
                user.excludeFromAnalytics = False
                '
                ' ----- Decode Browser User-Agent string to main_VisitName, main_VisitIsBot, main_VisitIsBadBot, etc
                '
                ' moved to only run on first page (new visit) hit
                '    Call main_decodeBrowserUserAgent(main_VisitBrowser)
                '    '
                '    ' ----- Determine if Visit Tracking is allowed
                '    '
                '
                'Call AppendLog("main_InitVisit(), 2420")
                '
                Dim tokenDate As Date
                CookieVisit = webServer.getRequestCookie(main_appNameCookiePrefix & main_cookieNameVisit)
                MemberLinkinEID = docProperties.getText("eid")
                MemberLinkLoginID = 0
                MemberLinkRecognizeID = 0
                If (MemberLinkinEID <> "") Then
                    If siteProperties.getBoolean("AllowLinkLogin", True) Then
                        '
                        ' Link Login
                        '
                        Call security.decodeToken(MemberLinkinEID, MemberLinkLoginID, tokenDate)
                        'MemberLinkLoginID = main_DecodeKeyNumber(MemberLinkinEID)
                    ElseIf siteProperties.getBoolean("AllowLinkRecognize", True) Then
                        '
                        ' Link Recognize
                        '
                        Call security.decodeToken(MemberLinkinEID, MemberLinkRecognizeID, tokenDate)
                        'MemberLinkRecognizeID = main_DecodeKeyNumber(MemberLinkinEID)
                    Else
                        '
                        ' block link login
                        '
                        MemberLinkinEID = ""
                    End If
                End If
                'hint = "200"
                If (visitInit_allowVisitTracking) Or (CookieVisit <> "") Or (MemberLinkLoginID <> 0) Or (MemberLinkRecognizeID <> 0) Then
                    '
                    ' ----- try cookie main_VisitId
                    '
                    'hint = "210"
                    If (CookieVisit <> "") Then
                        Call security.decodeToken(CookieVisit, visit_Id, visit_lastTimeFromCookie)
                        'main_VisitId = main_DecodeKeyNumber(CookieVisit)
                        If visit_Id = 0 Then
                            '
                            ' ----- Bad Cookie, clear it so a new one will be written
                            '
                            CookieVisit = ""
                        Else
                            '
                            ' ----- good cookie
                            '
                            'main_VisitLastTimeFromCookie = main_DecodeKeyTime(CookieVisit)
                        End If
                    End If
                    '
                    ' ----- Visit is good, read Visit/Visitor
                    '
                    'hint = "220"
                    If (visit_Id <> 0) Then
                        SQL = "SELECT" _
                            & " ccVisits.ID AS VisitId" _
                            & ",ccVisits.Name AS VisitName" _
                            & ",ccVisits.VisitAuthenticated AS VisitAuthenticated" _
                            & ",ccVisits.StartTime AS VisitStartTime" _
                            & ",ccVisits.StartDateValue AS VisitStartDateValue" _
                            & ",ccVisits.LastVisitTime AS VisitLastVisitTime" _
                            & ",ccVisits.StopTime AS VisitStopTime" _
                            & ",ccVisits.PageVisits AS VisitPageVisits" _
                            & ",ccVisits.CookieSupport AS VisitCookieSupport" _
                            & ",ccVisits.LoginAttempts AS VisitLoginAttempts" _
                            & ",ccVisits.VisitorNew AS VisitVisitorNew" _
                            & ",ccVisits.HTTP_REFERER AS VisitHTTP_REFERER" _
                            & ",ccVisits.REMOTE_ADDR AS VisitREMOTE_ADDR" _
                            & ",ccVisits.Browser AS VisitBrowser" _
                            & ",ccVisits.MemberNew AS VisitMemberNew"
                        SQL &= "" _
                            & ",ccVisitors.ID AS VisitorID" _
                            & ",ccVisitors.Name AS VisitorName" _
                            & ",ccVisitors.MemberID AS VisitorMemberID" _
                            & ",ccVisitors.OrderID AS VisitorOrderID"
                        SQL &= ",ccVisitors.ForceBrowserMobile AS VisitorForceBrowserMobile"
                        SQL &= ",ccVisits.bot AS VisitBot"
                        SQL &= ",ccVisits.mobile AS VisitMobile"
                        SQL &= "" _
                            & ",m.ID AS MemberID" _
                            & ",m.Name AS MemberName" _
                            & ",m.admin AS MemberAdmin" _
                            & ",m.developer AS MemberDeveloper" _
                            & ",m.ContentControlID AS MemberContentControlID" _
                            & ",m.AllowBulkEmail AS MemberAllowBulkEmail" _
                            & ",m.AllowToolsPanel AS MemberAllowToolsPanel" _
                            & ",m.AdminMenuModeID AS MemberAdminMenuModeID" _
                            & ",m.AutoLogin AS MemberAutoLogin" _
                            & ",m.username AS MemberUsername" _
                            & ",m.password AS MemberPassword" _
                            & ",m.LanguageID AS MemberLanguageID" _
                            & ",ccLanguages.name AS MemberLanguage"
                        SQL &= "" _
                            & ",m.OrganizationID AS MemberOrganizationID" _
                            & ",m.Active AS MemberActive" _
                            & ",m.Visits AS MemberVisits" _
                            & ",m.LastVisit AS MemberLastVisit" _
                            & ",m.Company AS MemberCompany" _
                            & ",m.Email AS MemberEmail"
                        SQL &= ",m.StyleFilename as MemberStyleFilename"
                        SQL &= ",m.ExcludeFromAnalytics as MemberExcludeFromAnalytics"
                        SQL &= ",ccvisits.ExcludeFromAnalytics as VisitExcludeFromAnalytics"
                        SQL &= "" _
                            & " FROM ((ccVisits" _
                                & " LEFT JOIN ccVisitors ON ccVisits.VisitorID = ccVisitors.ID)" _
                                & " LEFT JOIN ccMembers as m ON ccVisits.MemberID = m.ID)" _
                                & " LEFT JOIN ccLanguages ON m.LanguageID = ccLanguages.ID" _
                            & " WHERE (((ccVisits.ID)=" & visit_Id & "))"
                        '
                        CS = db.cs_openSql(SQL)
                        If Not db.cs_Ok(CS) Then
                            '
                            ' Bad visit cookie, kill main_VisitId
                            '
                            visit_Id = 0
                            visitor_id = 0
                        Else
                            '
                            '--------------------------------------------------------------------------
                            ' ----- Visit found, read visitor info first
                            '--------------------------------------------------------------------------
                            '
                            'hint = "240"
                            visitor_id = db.cs_getInteger(CS, "VisitorID")
                            visitor_Name = db.cs_getText(CS, "VisitorName")
                            visitor_memberID = (db.cs_getInteger(CS, "VisitorMemberID"))
                            visitor_forceBrowserMobile = (db.cs_getInteger(CS, "VisitorForceBrowserMobile"))
                            visitor_orderID = (db.cs_getInteger(CS, "VisitorOrderID"))
                            '
                            '--------------------------------------------------------------------------
                            ' ----- test visit age
                            '--------------------------------------------------------------------------
                            '
                            'hint = "250"
                            visit_lastTime = db.db_GetCSDate(CS, "VisitLastVisitTime")
                            If visit_lastTime.ToOADate + 0.041666 < main_PageStartTime.ToOADate Then
                                '--------------------------------------------------------------------------
                                ' ----- kill visit (no activity for over 1 hour)
                                ' changed time to 60 minutes from 30 minutes - multiple client request (Toll Brothers, etc)
                                '--------------------------------------------------------------------------
                                '
                                'hint = "251"
                                Call testPoint("main_InitVisit Last visit was more than an hour old, kill the visit")
                                NeedToWriteVisitCookie = True
                                visit_Id = 0
                                CookieVisit = ""
                            Else
                                '--------------------------------------------------------------------------
                                ' -----  visit OK, capture visit and Member info
                                '--------------------------------------------------------------------------
                                '
                                'hint = "252"
                                visit_Id = (db.cs_getInteger(CS, "VisitId"))
                                visit_name = (db.cs_getText(CS, "VisitName"))
                                visit_cookieSupport = (db.cs_getBoolean(CS, "VisitCookieSupport"))
                                visit_pages = (db.cs_getInteger(CS, "VisitPageVisits"))
                                visit_isAuthenticated = (db.cs_getBoolean(CS, "VisitAuthenticated"))
                                visit_startTime = (db.db_GetCSDate(CS, "VisitStartTime"))
                                visit_startDateValue = (db.cs_getInteger(CS, "VisitStartDateValue"))
                                visit_referer = (db.cs_getText(CS, "VisitHTTP_REFERER"))
                                visit_loginAttempts = (db.cs_getInteger(CS, "VisitLoginAttempts"))
                                visitor_new = (db.cs_getBoolean(CS, "VisitVisitorNew"))
                                '
                                webServer.requestRemoteIP = (db.cs_getText(CS, "VisitREMOTE_ADDR"))
                                webServer.requestBrowser = (db.cs_getText(CS, "VisitBrowser"))
                                main_VisitTimeToLastHit = 0
                                If visit_startTime > Date.MinValue Then
                                    main_VisitTimeToLastHit = CInt((main_PageStartTime - visit_startTime).TotalSeconds)
                                End If
                                visit_excludeFromAnalytics = db.cs_getBoolean(CS, "VisitExcludeFromAnalytics")
                                If ((Not visit_cookieSupport) And (CookieVisit <> "")) Then
                                    visit_cookieSupport = True
                                End If
                                visit_browserIsMobile = db.cs_getBoolean(CS, "VisitMobile")
                                visit_isBot = db.cs_getBoolean(CS, "VisitBot")
                                '
                                '--------------------------------------------------------------------------
                                ' -----  Member info
                                '   20170104 - set id in user object populates the record
                                ' REFACTOR -- this is loading the user twice, when refactored remove these fields from the visit state and just set the user.id
                                '--------------------------------------------------------------------------
                                '
                                Dim testActive As Boolean
                                Dim testId As Integer
                                testActive = db.cs_getBoolean(CS, "MemberActive")
                                testId = db.cs_getInteger(CS, "MemberID")
                                If ((Not testActive) Or (testId = 0)) Then
                                    user.id = 0
                                Else
                                    user.id = testId
                                    user.active = testActive
                                    user.isNew = db.cs_getBoolean(CS, "VisitMemberNew")
                                    user.name = (db.cs_getText(CS, "MemberName"))
                                    user.isDeveloper = (db.cs_getBoolean(CS, "MemberDeveloper"))
                                    user.isAdmin = (db.cs_getBoolean(CS, "MemberAdmin"))
                                    user.contentControlID = (db.cs_getInteger(CS, "MemberContentControlID"))
                                    user.allowBulkEmail = (db.cs_getBoolean(CS, "MemberAllowBulkEmail"))
                                    user.allowToolsPanel = (db.cs_getBoolean(CS, "MemberAllowToolsPanel"))
                                    user.adminMenuModeID = db.cs_getInteger(CS, "MemberAdminMenuModeID")
                                    user.autoLogin = (db.cs_getBoolean(CS, "MemberAutoLogin"))
                                    user.username = (db.cs_getText(CS, "MemberUsername"))
                                    user.password = (db.cs_getText(CS, "MemberPassword"))
                                    user.languageId = (db.cs_getInteger(CS, "MemberLanguageID"))
                                    user.language = (db.cs_getText(CS, "MemberLanguage"))
                                    user.organizationId = (db.cs_getInteger(CS, "MemberOrganizationID"))
                                    user.styleFilename = db.cs_getText(CS, "MemberStyleFilename")
                                    user.excludeFromAnalytics = (db.cs_getBoolean(CS, "MemberExcludeFromAnalytics"))
                                    '
                                    ' ----- consider removing
                                    '
                                    user.email = (db.cs_getText(CS, "MemberEmail"))
                                    user.company = (db.cs_getText(CS, "MemberCompany"))
                                    user.visits = (db.cs_getInteger(CS, "MemberVisits"))
                                    user.lastVisit = (db.db_GetCSDate(CS, "MemberLastVisit"))
                                End If
                                '
                                '--------------------------------------------------------------------------
                                ' ----- set main_VisitStateOK if Dbase main_VisitLastTime matches main_VisitLastTimeFromCookie
                                '--------------------------------------------------------------------------
                                '
                                'hint = "270"
                                If ((visit_lastTimeFromCookie - visit_lastTime).TotalSeconds) > 2 Then
                                    visit_stateOK = False
                                    testPoint("VisitState is false, main_VisitLastTime <> Database main_VisitLastTime, this page is out of order (back button), set main_VisitStateOK false")
                                End If
                            End If
                        End If
                        Call db.cs_Close(CS)
                    End If
                    '
                    '--------------------------------------------------------------------------
                    ' ----- new visit required
                    '--------------------------------------------------------------------------
                    '
                    'Call AppendLog("main_InitVisit(), 2470")
                    '
                    'hint = "300"
                    ' 1/15/2010
                    If (visit_Id = 0) Then
                        '
                        ' ----- Decode Browser User-Agent string to main_VisitName, main_VisitIsBot, main_VisitIsBadBot, etc
                        '
                        Call web_init_decodeBrowserUserAgent(webServer.requestBrowser)
                        '
                        ' ----- create new visit record
                        '
                        'hint = "310"
                        visit_Id = db.metaData_InsertContentRecordGetID("Visits", user.id)
                        If (visit_Id < 1) Then
                            visit_Id = 0
                            handleExceptionAndRethrow(New Exception("Internal error, new visit record could not be selected."))
                        End If
                        If visit_name = "" Then
                            visit_name = "User"
                        End If
                        visit_pages = 0
                        visit_startTime = main_PageStartTime
                        visit_startDateValue = CInt(main_PageStartTime.ToOADate)
                        visit_lastTime = main_PageStartTime
                        '
                        ' ----- main_Get visit referer
                        '
                        'hint = "320"
                        If webServer.requestReferrer <> "" Then
                            WorkingReferer = webServer.requestReferrer
                            SlashPosition = vbInstr(1, WorkingReferer, "//")
                            If (SlashPosition <> 0) And (Len(WorkingReferer) > (SlashPosition + 2)) Then
                                WorkingReferer = Mid(WorkingReferer, SlashPosition + 2)
                            End If
                            SlashPosition = vbInstr(1, WorkingReferer, "/")
                            If SlashPosition = 0 Then
                                visit_refererPathPage = ""
                                visit_refererHost = WorkingReferer
                            Else
                                visit_refererPathPage = Mid(WorkingReferer, SlashPosition)
                                visit_refererHost = Mid(WorkingReferer, 1, SlashPosition - 1)
                            End If
                        End If
                        '
                        '--------------------------------------------------------------------------
                        ' ----- create visitor from cookie
                        '--------------------------------------------------------------------------
                        '
                        'hint = "330"
                        CookieVisitor = EncodeText(webServer.getRequestCookie(main_appNameCookiePrefix & main_cookieNameVisitor))
                        '
                        'Call AppendLog("main_InitVisit(), 2480")
                        '
                        If siteProperties.getBoolean("AllowAutoRecognize", True) Then
                            '
                            'Call AppendLog("main_InitVisit(), 2485")
                            '
                            'hint = "340"
                            Call security.decodeToken(CookieVisitor, visitor_id, tokenDate)
                            'main_VisitorID = main_DecodeKeyNumber(CookieVisitor)
                            If visitor_id <> 0 Then
                                '
                                ' ----- cookie found, open visitor
                                '
                                'hint = "350"
                                visit_cookieSupport = True
                                If True Then
                                    SQL = "SELECT ID,Name,MemberID,OrderID,ForceBrowserMobile from ccVisitors WHERE ID=" & visitor_id & ";"
                                Else
                                    SQL = "SELECT ID,Name,MemberID,OrderID,0 as ForceBrowserMobile from ccVisitors WHERE ID=" & visitor_id & ";"
                                End If
                                CS = db.cs_openSql(SQL)
                                If Not db.cs_Ok(CS) Then
                                    '
                                    ' ----- bad cookie, kill main_VisitorID
                                    '
                                    visitor_id = 0
                                Else
                                    '
                                    ' ----- set visitor values
                                    '
                                    visitor_changes = False
                                    visitor_id = (db.cs_getInteger(CS, "ID"))
                                    visitor_Name = (db.cs_getText(CS, "Name"))
                                    visitor_memberID = (db.cs_getInteger(CS, "MemberID"))
                                    visitor_forceBrowserMobile = (db.cs_getInteger(CS, "ForceBrowserMobile"))
                                    visitor_orderID = (db.cs_getInteger(CS, "OrderID"))
                                End If
                                Call db.cs_Close(CS)
                            End If
                        End If
                        '
                        '--------------------------------------------------------------------------
                        ' ----- create new visitor for new visit
                        '--------------------------------------------------------------------------
                        '
                        'Call AppendLog("main_InitVisit(), 2490")
                        '
                        'hint = "400"
                        If visitor_id = 0 Then
                            '
                            ' Visitor Fields
                            '
                            visitor_id = db.metaData_InsertContentRecordGetID("Visitors", user.id)
                            If (visitor_id < 1) Then
                                Call handleLegacyError14(MethodName, "main_InitVisit, could not create new visitor")
                                visitor_id = 0
                            End If
                            visitor_Name = "Visitor " & visitor_id
                            visitor_memberID = 0
                            visitor_orderID = 0
                            visitor_changes = True
                            visitor_forceBrowserMobile = 0
                            '
                            ' Visit Fields
                            '
                            visitor_new = True
                        End If
                        '
                        '-----------------------------------------------------------------------------------
                        ' ----- find  identity from the visitor
                        '-----------------------------------------------------------------------------------
                        '
                        'Call AppendLog("main_InitVisit(), 2492")
                        '
                        'hint = "500"
                        user.id = visitor_memberID
                        If (visitor_memberID > 0) Then
                            '
                            ' ----- recognize by the main_VisitorMemberID
                            '
                            'hint = "510"
                            If user.recognizeById(visitor_memberID) Then
                                '
                                ' ----- if successful, now test for autologin (authentication)
                                '
                                'hint = "520"

                                If (siteProperties.getBoolean("AllowAutoLogin", False)) And (user.autoLogin) And visit_cookieSupport Then
                                    '
                                    ' ----- they allow it, now Check if they were logged in on their last visit
                                    '
                                    'hint = "530"
                                    SQL = "select top 1 V.VisitAuthenticated from ccVisits V where (V.ID<>" & visit_Id & ")and(V.VisitorID=" & visitor_id & ") order by id desc"
                                    CS = db.cs_openSql(SQL)
                                    If db.cs_Ok(CS) Then
                                        If db.cs_getBoolean(CS, "VisitAuthenticated") Then
                                            '
                                            ' ----- yes, go ahead with autologin
                                            '
                                            If user.authenticateById(user.id) Then
                                                Call log_LogActivity2("autologin", user.id, user.organizationId)
                                                visitor_changes = True
                                                user_changes = True
                                            End If
                                        End If
                                    End If
                                    Call db.cs_Close(CS)
                                Else
                                    '
                                    ' Recognized, not auto login
                                    '
                                    'hint = "540"
                                    Call log_LogActivity2("recognized", user.id, user.organizationId)
                                End If
                            End If
                        End If
                        '
                        '--------------------------------------------------------------------------
                        ' ----- new visit, update the persistant visitor cookie
                        '--------------------------------------------------------------------------
                        '
                        'hint = "600"
                        If visitInit_allowVisitTracking Then
                            Call webServer.addResponseCookie(main_appNameCookiePrefix & main_cookieNameVisitor, security.encodeToken(visitor_id, visit_startTime), visit_startTime.AddYears(1), , www_requestRootPath, False)
                        End If
                        '
                        '--------------------------------------------------------------------------
                        ' ----- OnNewVisit Add-on call
                        '--------------------------------------------------------------------------
                        '
                        AllowOnNewVisitEvent = True
                    End If
                    '
                    '-----------------------------------------------------------------------------------
                    ' ----- Attempt Link-in recognize or login
                    ' ----- This is allowed even if main_AllowVisitTracking is off
                    '-----------------------------------------------------------------------------------
                    '
                    'Call AppendLog("main_InitVisit(), 2494")
                    '
                    'hint = "700"
                    If (MemberLinkLoginID <> 0) Then
                        '
                        ' Link Login
                        '
                        If user.authenticateById(MemberLinkLoginID) Then
                            Call log_LogActivity2("link login with eid " & MemberLinkinEID, user.id, user.organizationId)
                        End If
                    ElseIf (MemberLinkRecognizeID <> 0) Then
                        '
                        ' Link Recognize
                        '
                        Call user.recognizeById(MemberLinkRecognizeID)
                        Call log_LogActivity2("link recognize with eid " & MemberLinkinEID, user.id, user.organizationId)
                    End If
                    '
                    '-----------------------------------------------------------------------------------
                    ' ----- create guest identity if no identity
                    '-----------------------------------------------------------------------------------
                    '
                    'Call AppendLog("main_InitVisit(), 2496")
                    '
                    'hint = "800"
                    If (user.id < 1) Then
                        '
                        ' No user created
                        '
                        If (LCase(Left(visit_name, 5)) <> "visit") Then
                            DefaultMemberName = visit_name
                        Else
                            DefaultMemberName = EncodeText(db_GetContentFieldProperty("people", "name", "default"))
                        End If
                        If (False) Then
                            '
                            ' not upgraded, just create user like it did before
                            '
                            Call user.createUser()
                        Else
                            '
                            ' upgraded, determine the kind of tracking - experimental build set to true
                            '
                            TrackGuests = siteProperties.getBoolean("track guests", False)
                            If Not TrackGuests Then
                                '
                                ' do not track guests at all
                                '
                                Call user.createUserDefaults(DefaultMemberName)
                            Else
                                If visit_cookieSupport Then
                                    '
                                    ' cookies supported, not first hit and not spider
                                    '
                                    Call user.createUser()
                                Else
                                    '
                                    ' upgraded, set it to the site property - experimental build set to true
                                    '
                                    TrackGuestsWithoutCookies = siteProperties.getBoolean("track guests without cookies")
                                    If TrackGuestsWithoutCookies Then
                                        '
                                        ' compatibiltiy mode - create people for non-cookies too
                                        '
                                        Call user.createUser()
                                    Else
                                        '
                                        ' set defaults for people record
                                        '
                                        Call user.createUserDefaults(DefaultMemberName)
                                    End If
                                End If
                            End If
                        End If
                    End If
                    '
                    '--------------------------------------------------------------------------
                    ' ----- establish language for the member, if they do not have one
                    '--------------------------------------------------------------------------
                    '
                    'Call AppendLog("main_InitVisit(), 2498")
                    '
                    'hint = "900"
                    If visit_pages = 0 Then
                        '
                        ' First page of this visit, verify the member language
                        '
                        If (user.languageId < 1) Or (user.language = "") Then
                            '
                            ' No member language, set member language from browser language
                            '
                            Call web_GetBrowserLanguage(user.languageId, user.language)
                            If user.languageId > 0 Then
                                '
                                ' Browser Language worked
                                '
                                user_changes = True
                            Else
                                '
                                ' Still no match, main_Get the default language
                                '
                                user.language = siteProperties.getText("Language", "English")
                                If user.language <> "English" Then
                                    '
                                    ' Handle the non-English case first, so if there is a problem, fall back is English
                                    '
                                    CS = db.csOpen("Languages", "name=" & db.encodeSQLText(user.language))
                                    If db.cs_Ok(CS) Then
                                        user.languageId = db.cs_getInteger(CS, "ID")
                                        user_changes = True
                                    End If
                                    Call db.cs_Close(CS)
                                    If user.languageId = 0 Then
                                        '
                                        ' non-English Language is not in Language Table, set default to english
                                        '
                                        user.language = "English"
                                        Call siteProperties.setProperty("Language", user.language)
                                    End If
                                End If
                                If user.language = "English" Then
                                    CS = db.csOpen("Languages", "name=" & db.encodeSQLText(user.language))
                                    If db.cs_Ok(CS) Then
                                        user.languageId = db.cs_getInteger(CS, "ID")
                                        user_changes = True
                                    End If
                                    Call db.cs_Close(CS)
                                    If user.languageId < 1 Then
                                        '
                                        ' English is not in Language table, add it, and set it in Member
                                        '
                                        CS = db.cs_insertRecord("Languages")
                                        If db.cs_Ok(CS) Then
                                            user.languageId = db.cs_getInteger(CS, "ID")
                                            user.language = "English"
                                            Call db.cs_set(CS, "Name", user.language)
                                            Call db.cs_set(CS, "HTTP_Accept_LANGUAGE", "en")
                                            user_changes = True
                                        End If
                                        Call db.cs_Close(CS)
                                    End If
                                End If
                            End If
                        End If
                    End If
                    '
                    '-----------------------------------------------------------------------------------
                    ' ----- Save anything that changed
                    '-----------------------------------------------------------------------------------
                    '
                    'Call AppendLog("main_InitVisit(), 2499")
                    '
                    ' can not count main_VisitCookieSupport yet, since a new visit will not show cookie support until the ajax hit
                    'hint = "910"
                    visit_excludeFromAnalytics = visit_excludeFromAnalytics Or visit_isBot Or user.excludeFromAnalytics Or user.isAdmin Or user.isDeveloper
                    '
                    ' Update Page count
                    '
                    If Not web_PageExcludeFromAnalytics Then
                        visit_pages = visit_pages + 1
                    End If
                    '
                    ' Update the Visit
                    ' set main_visitInitialized true allows main_SaveVisit, main_SaveVisitor, etc to work
                    '
                    visit_initialized = True
                    Call visit_save()
                    '
                    ' ----- Save visitor record
                    '
                    'hint = "940"
                    If visitor_changes Then
                        Call visitor_save()
                    End If
                    '
                    ' ----- Save Member record
                    '
                    'hint = "950"
                    If user_changes Then
                        Call user.saveMemberBase()
                    End If
                    '
                    ' ----- send visit cookie if supported or first page
                    '       no, always send the cookie. There are too many exceptions to try being tricky here.
                    '
                    'hint = "960"
                    CookieVisitNew = security.encodeToken(visit_Id, visit_lastTime)
                    'CookieVisitNew = encodeToken(main_VisitId, main_VisitStartTime)
                    If visitInit_allowVisitTracking And (CookieVisit <> CookieVisitNew) Then
                        CookieVisit = CookieVisitNew
                        NeedToWriteVisitCookie = True
                    End If
                End If
                ' set visitinitialized - for the cases where the earlier set was bypassed, like now allowvisittracking
                visit_initialized = True
                'hint = "970"
                If (AllowOnNewVisitEvent) And (True) Then
                    '
                    '---------------------------------------------------------------------------------
                    ' ----- OnNewVisitEvent
                    '---------------------------------------------------------------------------------
                    '
                    'hint = "980"
                    '$$$$$ cache this
                    ' $$$$$ make ptr list on load
                    CS = db.csOpen("Add-ons", "(OnNewVisitEvent<>0)", "Name", , , , , "id")
                    Do While db.cs_Ok(CS)
                        Call executeAddon_legacy5(db.cs_getInteger(CS, "ID"), "", "", addonContextEnum.ContextOnNewVisit, "", 0, "", 0)
                        db.db_csGoNext(CS)
                    Loop
                    Call db.cs_Close(CS)
                End If
                '
                '---------------------------------------------------------------------------------
                ' ----- Write Visit Cookie
                '---------------------------------------------------------------------------------
                '
                CookieVisit = security.encodeToken(visit_Id, main_PageStartTime)
                Call webServer.addResponseCookie(main_appNameCookiePrefix & main_cookieNameVisit, CookieVisit, , , www_requestRootPath, False)
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
        End Sub
        '        '
        '        '========================================================================
        '        '   Read in a file from the sites virtual file directory given filename
        '        '========================================================================
        '        '
        '        Public Function app.contentFiles.ReadFile(ByVal Filename As String) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("ReadVirtualFile")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            main_ReadVirtualFile = app.contentFiles.ReadFile(Filename)
        '            '
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError18("main_ReadVirtualFile")
        '        End Function
        '            '
        '            '========================================================================
        '            '   Save data to a file in the sites virtual file directory
        '            '========================================================================
        '            '
        '            Public Sub app.publicFiles.SaveFile(ByVal Filename As Object, ByVal FileContent As Object)
        '            On Error GoTo ErrorTrap : ''Dim th as integer : th = profileLogMethodEnter("SaveVirtualFile")
        '            '
        '            'If Not (true) Then Exit Sub
        '            '
        '            Dim MethodName As String
        '            '
        '            MethodName = "main_SaveVirtualFile"
        '            '
        '            Call app.publicFiles.SaveFile(EncodeText(Filename), EncodeText(FileContent))
        '            '
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call main_HandleClassErrorAndResume_TrapPatch1(MethodName)
        '        End Sub
        '        '
        '        '========================================================================
        '        ' Delete a file from the virtual director
        '        '========================================================================
        '        '
        '        Public Sub app.publicFiles.DeleteFile(ByVal Filename As Object)
        '            On Error GoTo ErrorTrap : ''Dim th as integer : th = profileLogMethodEnter("DeleteVirtualFile")
        '            '
        '            'If Not (true) Then Exit Sub
        '            Dim MethodName As String
        '            '
        '            MethodName = "main_DeleteVirtualFile"
        '            '
        '        Call app.publicFiles.DeleteFile(EncodeText(Filename))
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call main_HandleClassErrorAndResume_TrapPatch1(MethodName)
        '            '
        '        End Sub
        '        '
        '        '========================================================================
        '        ' Delete a file from the virtual director
        '        '========================================================================
        '        '
        '        Public Sub main_CopyVirtualFile(ByVal SourceFilename As String, ByVal DestinationFilename As String)
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("CopyVirtualFile")
        '            '
        '            'If Not (true) Then Exit Sub
        '            '
        '            Dim MethodName As String
        '            '
        '            MethodName = "main_CopyVirtualFilename"
        '            '
        '            Call app.contentFiles.copyFile(EncodeText(SourceFilename), EncodeText(DestinationFilename))
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError18(MethodName)
        '            '
        '        End Sub
        '        '
        '        '========================================================================
        '        '   append data to the end of a file in the sites virtual file directory
        '        '========================================================================
        '        '
        '        Public Sub main_AppendVirtualFile(ByVal Filename As Object, ByVal FileContent As Object)
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("AppendVirtualFile")
        '            '
        '            'If Not (true) Then Exit Sub
        '            Dim MethodName As String
        '            '
        '            MethodName = "main_AppendVirtualFile"
        '            '
        '            Call app.publicFiles.appendFile(EncodeText(Filename), EncodeText(FileContent))
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError18(MethodName)
        '        End Sub
        '        '
        '        '========================================================================
        '        '   Save data to a file
        '        '========================================================================
        '        '
        '        Public Sub main_SaveFile(ByVal Filename As Object, ByVal FileContent As Object)
        '            On Error GoTo ErrorTrap : ''Dim th as integer : th = profileLogMethodEnter("SaveFile")
        '            '
        '            'If Not (true) Then Exit Sub
        '            Dim MethodName As String
        '            '
        '            MethodName = "main_SaveFile"
        '            '
        '        Call app.publicFiles.SaveFile(EncodeText(Filename), EncodeText(FileContent))
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call main_HandleClassErrorAndResume_TrapPatch1(MethodName)
        '            '
        '        End Sub
        '        '
        '        '========================================================================
        '        ' ----- Creates a file folder if it does not exist
        '        '========================================================================
        '        '
        '        Public Sub main_CreateFileFolder(ByVal FolderPath As Object)
        '            On Error GoTo ErrorTrap : ''Dim th as integer : th = profileLogMethodEnter("CreateFileFolder")
        '            '
        '            'If Not (true) Then Exit Sub
        '            Dim MethodName As String
        '            '
        '            MethodName = "main_CreateFileFolder"
        '            '
        '        Call app.publicFiles.createPath(EncodeText(FolderPath))
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call main_HandleClassErrorAndResume_TrapPatch1(MethodName)
        '            '
        '        End Sub
        '            '
        '            '========================================================================
        '            '   Deletes a file if it exists
        '            '========================================================================
        '            '
        '        Public Sub mainx_DeleteFile(ByVal Filename As Object)
        '            On Error GoTo ErrorTrap : ''Dim th as integer : th = profileLogMethodEnter("DeleteFile")
        '            '
        '            'If Not (true) Then Exit Sub
        '            Dim MethodName As String
        '            '
        '            MethodName = "main_DeleteFile"
        '            '
        '            Call app.csv_DeleteFile(EncodeText(Filename))
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call main_HandleClassErrorAndResume_TrapPatch1(MethodName)
        '            '
        '        End Sub
        '            '
        '            '========================================================================
        '            '   Copy a file
        '            '========================================================================
        '            '
        '        Public Sub main_xcopyFile(ByVal SourcePathFilename As Object, ByVal DestinationPathFilename As Object)
        '            On Error GoTo ErrorTrap : ''Dim th as integer : th = profileLogMethodEnter("copyFile")
        '            '
        '            'If Not (true) Then Exit Sub
        '            Dim MethodName As String
        '            '
        '            MethodName = "main_copyFile"
        '            '
        '            Call app.csv_CopyFile(EncodeText(SourcePathFilename), EncodeText(DestinationPathFilename))
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call main_HandleClassErrorAndResume_TrapPatch1(MethodName)
        '            '
        '        End Sub
        '            '
        '            '========================================================================
        '            '   rename a file
        '            '========================================================================
        '            '
        '        Public Sub main_renamxeFile(ByVal SourcePathFilename As Object, ByVal DestinationFilename As Object)
        '            On Error GoTo ErrorTrap : ''Dim th as integer : th = profileLogMethodEnter("renameFile")
        '            '
        '            'If Not (true) Then Exit Sub
        '            Dim MethodName As String
        '            '
        '            MethodName = "main_renameFile"
        '            '
        '            Call app.csv_renameFile(EncodeText(SourcePathFilename), EncodeText(DestinationFilename))
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call main_HandleClassErrorAndResume_TrapPatch1(MethodName)
        '            '
        '        End Sub
        '            '
        '            '========================================================================
        '            '   main_Get a list of files in a folder
        '            '========================================================================
        '            '
        '        Public Function main_GetFxileList(ByVal FolderPath As String, Optional ByVal PageSize As Integer = 1000, Optional ByVal PageNumber As Integer = 1) As IO.FileInfo()
        '            On Error GoTo ErrorTrap : ''Dim th as integer : th = profileLogMethodEnter("GetFileList")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            main_GetFileList = app.csv_GetFileList(EncodeText(FolderPath), EncodeInteger(PageSize), EncodeInteger(PageNumber))
        '            '
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call main_HandleClassErrorAndResume_TrapPatch1("main_GetFileList")
        '        End Function
        '        '
        '        '========================================================================
        '        '   main_Get a list of files in a folder
        '        '========================================================================
        '        '
        '        Public Function main_GetFileCount(ByVal FolderPath As Object) As Integer
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetFileCount")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            main_GetFileCount = app.getPublicFileCount(EncodeText(FolderPath))
        '            '
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError18("main_GetFileCount")
        '        End Function
        '
        '========================================================================
        '   main_Get a list of files in a folder
        '========================================================================
        '
        Public Function getFolderNameList(ByVal FolderPath As Object) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetFolderList")
            '
            'If Not (true) Then Exit Function
            '
            getFolderNameList = appRootFiles.getFolderNameList(EncodeText(FolderPath))
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_GetFolderList")
        End Function
        '            '
        '            '========================================================================
        '            '   main_Get a list of files in a folder in the Virtual Content path
        '            '========================================================================
        '            '
        '        Public Function main_GetVirtxualFileList(ByVal FolderPath As String, Optional ByVal PageSize As Integer = 1000, Optional ByVal PageNumber As Integer = 1) As IO.FileInfo()
        '            On Error GoTo ErrorTrap : ''Dim th as integer : th = profileLogMethodEnter("GetVirtualFileList")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            main_GetVirtualFileList = app.publicFiles.GetFolderFiles(EncodeText(FolderPath))
        '            '
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call main_HandleClassErrorAndResume_TrapPatch1("main_GetVirtualFileList")
        '        End Function
        '        '
        '        '========================================================================
        '        '   main_Get a list of files in a folder in the Virtual Content path
        '        '========================================================================
        '        '
        '        Public Function main_GetVirtualFileCount(ByVal FolderPath As Object) As Integer
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetVirtualFileCount")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            main_GetVirtualFileCount = app.csv_GetVirtualFileCount(EncodeText(FolderPath))
        '            '
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError18("main_GetVirtualFileCount")
        '        End Function
        '
        '========================================================================
        '   main_Get a list of files in a folder in the Virtual Content path
        '========================================================================
        '
        Public Function main_GetVirtualFolderList(ByVal FolderPath As Object) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetVirtualFolderList")
            '
            'If Not (true) Then Exit Function
            '
            main_GetVirtualFolderList = cdnFiles.getFolderNameList(EncodeText(FolderPath))
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_GetVirtualFolderList")
        End Function
        '
        '========================================================================
        ' main_Get a Contents ID from the ContentName
        '========================================================================
        '
        Public Function main_GetContentID(ByVal ContentName As String) As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetContentID")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            '
            MethodName = "main_GetContentID"
            '
            main_GetContentID = metaData.getContentId(EncodeText(ContentName))
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        ''
        ''========================================================================
        '' main_Get a Contents Name from the ContentID
        ''========================================================================
        ''
        'Public Function metaData.getContentNameByID(ByVal ContentID As Integer) As String
        '    Return metaData.getContentNameByID(ContentID)
        'End Function
        '
        ' ----- main_Get a DataSource Name from its ContentName
        '
        Public Function main_GetContentDataSource(ByVal ContentName As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetContentDataSource")
            '
            'If Not (true) Then Exit Function
            Dim MethodName As String
            '
            MethodName = "main_GetContentDataSource"
            '
            main_GetContentDataSource = metaData.getContentDataSource(EncodeText(ContentName))
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function

        '
        '========================================================================
        ' main_DeleteContentRecord by content name
        '
        '   To be compatible with a previous release, if the RecordID is not an integer,
        '   call main_DeleteContentRecords.
        '========================================================================
        '
        Public Sub db_DeleteContentRecord(ByVal ContentName As String, ByVal RecordID As Integer)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("DeleteContentRecord")
            '
            'If Not (true) Then Exit Sub
            '
            Dim MethodName As String
            Dim iRecordID As Integer
            Dim iContentName As String
            '
            iRecordID = EncodeInteger(RecordID)
            iContentName = EncodeText(ContentName)
            '
            MethodName = "main_DeleteContentRecord"
            '
            If (iContentName = "") Or (iRecordID = 0) Then
                If (EncodeText(RecordID) <> "") And (EncodeText(RecordID) <> "0") Then
                    Call db.db_DeleteContentRecord(ContentName, RecordID)
                Else
                    handleExceptionAndRethrow(New Exception("Invalid ContentName [" & iContentName & "] or RecordID [" & EncodeText(RecordID) & "]"))
                End If
            Else
                Call db.db_DeleteContentRecord(iContentName, iRecordID, user.id)
            End If
            Call main_ProcessSpecialCaseAfterSave(True, iContentName, iRecordID, "", 0, False)
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '========================================================================
        ' main_DeleteCSRecord
        '========================================================================
        '
        Public Sub db_DeleteCSRecord(ByVal CSPointer As Integer)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("DeleteCSRecord")
            '
            'If Not (true) Then Exit Sub
            '
            Dim MethodName As String
            '
            MethodName = "main_DeleteCSRecord"
            '
            Call db.db_DeleteCSRecord(EncodeInteger(CSPointer))
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '========================================================================
        ' main_InsertContentRecordGetID
        '   Inserts a record into a content table.
        '   Returns the ID of the record, 0 if error
        '========================================================================
        '
        Public Function metaData_InsertContentRecordGetID(ByVal ContentName As String) As Integer
            metaData_InsertContentRecordGetID = db.metaData_InsertContentRecordGetID(EncodeText(ContentName), user.id)
        End Function
        '
        '=============================================================================
        ' Create a child content from a parent content
        '
        '   If child does not exist, copy everything from the parent
        '   If child already exists, add any missing fields from parent
        '=============================================================================
        '
        Public Sub metaData_CreateContentChild(ByVal ChildContentName As String, ByVal ParentContentName As String)
            Call metaData.CreateContentChild(EncodeText(ChildContentName), EncodeText(ParentContentName), user.id)
        End Sub
        '
        ' ----- alternate name
        '
        Public Function db_InsertCSContent(ByVal ContentName As String) As Integer
            db_InsertCSContent = db.cs_insertRecord(EncodeText(ContentName))
        End Function
        '
        '========================================================================
        '   Determine the current persons Language
        '
        '   Return the ID in the Languages content
        '========================================================================
        '
        Public Function web_GetBrowserLanguageID() As Integer
            Dim LanguageID As Integer = 0
            Dim LanguageName As String = ""
            Call web_GetBrowserLanguage(LanguageID, LanguageName)
            web_GetBrowserLanguageID = LanguageID
        End Function
        '
        '========================================================================
        '   Determine the current persons Language
        '
        '   Return the ID in the Languages content
        '========================================================================
        '
        Public Sub web_GetBrowserLanguage(ByRef LanguageID As Integer, ByRef LanguageName As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetBrowserLanguage")
            '
            'If Not (true) Then Exit Sub
            '
            Dim MethodName As String
            Dim CS As Integer
            Dim CommaPosition As Integer
            Dim DashPosition As Integer
            Dim AcceptLanguageString As String
            Dim AcceptLanguage As String
            '
            MethodName = "main_GetBrowserLanguage"
            LanguageID = 0
            LanguageName = ""
            '
            ' ----- Determine Language by browser
            '
            AcceptLanguageString = EncodeText(webServer.RequestLanguage) & ","
            CommaPosition = vbInstr(1, AcceptLanguageString, ",")
            Do While CommaPosition <> 0 And LanguageID = 0
                AcceptLanguage = Trim(Mid(AcceptLanguageString, 1, CommaPosition - 1))
                AcceptLanguageString = Mid(AcceptLanguageString, CommaPosition + 1)
                If Len(AcceptLanguage) > 0 Then
                    DashPosition = vbInstr(1, AcceptLanguage, "-")
                    If DashPosition > 1 Then
                        AcceptLanguage = Mid(AcceptLanguage, 1, DashPosition - 1)
                    End If
                    DashPosition = vbInstr(1, AcceptLanguage, ";")
                    If DashPosition > 1 Then
                        AcceptLanguage = Mid(AcceptLanguage, 1, DashPosition - 1)
                    End If
                    If Len(AcceptLanguage) > 0 Then
                        CS = db.csOpen("languages", "HTTP_Accept_LANGUAGE=" & db.encodeSQLText(AcceptLanguage), , , , , , "ID", 1)
                        If db.cs_Ok(CS) Then
                            LanguageID = db.cs_getInteger(CS, "ID")
                            LanguageName = db.cs_getText(CS, "Name")
                        End If
                        Call db.cs_Close(CS)
                    End If
                End If
                CommaPosition = vbInstr(1, AcceptLanguageString, ",")
            Loop
            '
            If LanguageID = 0 Then
                '
                ' ----- no matching browser language, use site default
                '
                CS = db.csOpen("languages", "name=" & db.encodeSQLText(siteProperties.language), , , , , , "ID", 1)
                If db.cs_Ok(CS) Then
                    LanguageID = db.cs_getInteger(CS, "ID")
                    LanguageName = db.cs_getText(CS, "Name")
                End If
                Call db.cs_Close(CS)
            End If
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '========================================================================
        ' main_GetRecordEditLink( iContentName, iRecordID )
        '
        '   iContentName The content for this link
        '   iRecordID    The ID of the record in the Table
        '========================================================================
        '
        Public Function main_GetRecordEditLink(ByVal ContentName As String, ByVal RecordID As Integer, Optional ByVal AllowCut As Boolean = False) As String
            main_GetRecordEditLink = main_GetRecordEditLink2(ContentName, RecordID, EncodeBoolean(AllowCut), "", user.isEditing(EncodeText(ContentName)))
        End Function
        '
        '========================================================================
        ' main_GetRecordEditLink2( iContentName, iRecordID, AllowCut, RecordName )
        '
        '   ContentName The content for this link
        '   RecordID    The ID of the record in the Table
        '   AllowCut
        '   RecordName
        '   IsEditing
        '========================================================================
        '
        Public Function main_GetRecordEditLink2(ByVal ContentName As String, ByVal RecordID As Integer, ByVal AllowCut As Boolean, ByVal RecordName As String, ByVal IsEditing As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetRecordEditLink2")
            '
            'If Not (true) Then Exit Function
            '
            Dim CS As Integer
            Dim SQL As String
            Dim ContentID As Integer
            Dim Link As String
            Dim MethodName As String
            Dim iContentName As String
            Dim iRecordID As Integer
            Dim RootEntryName As String
            Dim ClipBoard As String
            Dim WorkingLink As String
            Dim iAllowCut As Boolean
            Dim Icon As String
            Dim ContentCaption As String
            '
            iContentName = EncodeText(ContentName)
            iRecordID = EncodeInteger(RecordID)
            iAllowCut = EncodeBoolean(AllowCut)
            ContentCaption = html_EncodeHTML(iContentName)
            If vbLCase(ContentCaption) = "aggregate functions" Then
                ContentCaption = "Add-on"
            End If
            If vbLCase(ContentCaption) = "aggregate function objects" Then
                ContentCaption = "Add-on"
            End If
            ContentCaption = ContentCaption & " record"
            If RecordName <> "" Then
                ContentCaption = ContentCaption & ", named '" & RecordName & "'"
            End If
            '
            MethodName = "main_GetRecordEditLink2"
            '
            main_GetRecordEditLink2 = ""
            If (iContentName = "") Then
                Call handleLegacyError14(MethodName, "ContentName [" & ContentName & "] is invalid")
            Else
                If (iRecordID < 1) Then
                    Call handleLegacyError14(MethodName, "RecordID [" & RecordID & "] is invalid")
                Else
                    If IsEditing Then
                        '
                        ' Edit link, main_Get the CID
                        '
                        ContentID = main_GetContentID(iContentName)
                        '
                        main_GetRecordEditLink2 = main_GetRecordEditLink2 _
                            & "<a" _
                            & " class=""ccRecordEditLink"" " _
                            & " TabIndex=-1" _
                            & " href=""" & html_EncodeHTML(siteProperties.adminURL & "?cid=" & ContentID & "&id=" & iRecordID & "&af=4&aa=2&ad=1") & """"
                        If Not main_ReturnAfterEdit Then
                            main_GetRecordEditLink2 = main_GetRecordEditLink2 & " target=""_blank"""
                        End If
                        main_GetRecordEditLink2 = main_GetRecordEditLink2 _
                            & "><img" _
                            & " src=""/ccLib/images/IconContentEdit.gif""" _
                            & " border=""0""" _
                            & " alt=""Edit this " & html_EncodeHTML(ContentCaption) & """" _
                            & " title=""Edit this " & html_EncodeHTML(ContentCaption) & """" _
                            & " align=""absmiddle""" _
                            & "></a>"
                        '
                        ' Cut Link if enabled
                        '
                        If iAllowCut Then
                            WorkingLink = modifyLinkQuery(web_requestPage & "?" & web_RefreshQueryString, RequestNameCut, EncodeText(ContentID) & "." & EncodeText(RecordID), True)
                            main_GetRecordEditLink2 = "" _
                                & main_GetRecordEditLink2 _
                                & "<a class=""ccRecordCutLink"" TabIndex=""-1"" href=""" & html_EncodeHTML(WorkingLink) & """><img src=""/ccLib/images/Contentcut.gif"" border=""0"" alt=""Cut this " & ContentCaption & " to clipboard"" title=""Cut this " & ContentCaption & " to clipboard"" align=""absmiddle""></a>"
                        End If
                        '
                        ' Help link if enabled
                        '
                        Dim helpLink As String
                        helpLink = ""
                        'helpLink = main_GetHelpLink(5, "Editing " & ContentCaption, "Turn on Edit icons by checking 'Edit' in the tools panel, and click apply.<br><br><img src=""/ccLib/images/IconContentEdit.gif"" style=""vertical-align:middle""> Edit-Content icon<br><br>Edit-Content icons appear in your content. Click them to edit your content.")
                        main_GetRecordEditLink2 = "" _
                            & main_GetRecordEditLink2 _
                            & helpLink
                        '
                        main_GetRecordEditLink2 = "<span class=""ccRecordLinkCon"" style=""white-space:nowrap;"">" & main_GetRecordEditLink2 & "</span>"
                        ''
                        'main_GetRecordEditLink2 = "" _
                        '    & cr & "<div style=""position:absolute;"">" _
                        '    & KmaIndent(main_GetRecordEditLink2) _
                        '    & cr & "</div>"
                        '
                        'main_GetRecordEditLink2 = "" _
                        '    & cr & "<div style=""position:relative;display:inline;"">" _
                        '    & KmaIndent(main_GetRecordEditLink2) _
                        '    & cr & "</div>"
                    End If

                End If
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        ' Print an add link for the current ContentSet
        '   iCSPointer is the content set to be added to
        '   PresetNameValueList is a name=value pair to force in the added record
        '========================================================================
        '
        Public Function main_GetCSRecordAddLink(ByVal CSPointer As Integer, Optional ByVal PresetNameValueList As String = "", Optional ByVal AllowPaste As Boolean = False) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetCSRecordAddLink")
            '
            'If Not (true) Then Exit Function
            '
            Dim ContentName As String
            Dim iPresetNameValueList As String
            Dim MethodName As String
            Dim iCSPointer As Integer
            '
            iCSPointer = EncodeInteger(CSPointer)
            iPresetNameValueList = encodeEmptyText(PresetNameValueList, "")
            '
            MethodName = "main_GetCSRecordAddLink"
            '
            If iCSPointer < 0 Then
                Call handleLegacyError14(MethodName, "main_GetCSRecordAddLink was called with invalid ContentSet pointer [" & iCSPointer & "]")
            Else
                '
                ' Print an add tag to the iCSPointers Content
                '
                ContentName = db.db_GetCSContentName(iCSPointer)
                If ContentName = "" Then
                    Call handleLegacyError14(MethodName, "main_GetCSRecordAddLink was called with a ContentSet that was created with an SQL statement. The function requires a ContentSet opened with an OpenCSContent.")
                Else
                    main_GetCSRecordAddLink = main_GetRecordAddLink(ContentName, iPresetNameValueList, AllowPaste)
                End If
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        ' main_GetRecordAddLink( iContentName, iPresetNameValueList )
        '
        '   Returns a string of add tags for the Content Definition included, and all
        '   child contents of that area.
        '
        '   iContentName The content for this link
        '   iPresetNameValueList The sql equivalent used to select the record.
        '           translates to name0=value0,name1=value1.. pairs separated by ,
        '
        '   LowestRootMenu - The Menu in the flyout structure that is the furthest down
        '   in the chain that the user has content access to. This is so a content manager
        '   does not have to navigate deep into a structure to main_Get to content he can
        '   edit.
        '   Basically, the entire menu is created down from the MenuName, and populated
        '   with all the entiries this user has access to. The LowestRequiredMenuName is
        '   is returned from the _branch routine, and that is to root on-which the
        '   main_GetMenu uses
        '========================================================================
        '
        Public Function main_GetRecordAddLink(ByVal ContentName As String, ByVal PresetNameValueList As String, Optional ByVal AllowPaste As Boolean = False) As String
            main_GetRecordAddLink = main_GetRecordAddLink2(EncodeText(ContentName), EncodeText(PresetNameValueList), AllowPaste, user.isEditing(EncodeText(ContentName)))
        End Function
        '
        '========================================================================
        ' main_GetRecordAddLink2
        '
        '   Returns a string of add tags for the Content Definition included, and all
        '   child contents of that area.
        '
        '   iContentName The content for this link
        '   iPresetNameValueList The sql equivalent used to select the record.
        '           translates to name0=value0,name1=value1.. pairs separated by ,
        '
        '   LowestRootMenu - The Menu in the flyout structure that is the furthest down
        '   in the chain that the user has content access to. This is so a content manager
        '   does not have to navigate deep into a structure to main_Get to content he can
        '   edit.
        '   Basically, the entire menu is created down from the MenuName, and populated
        '   with all the entiries this user has access to. The LowestRequiredMenuName is
        '   is returned from the _branch routine, and that is to root on-which the
        '   main_GetMenu uses
        '========================================================================
        '
        Public Function main_GetRecordAddLink2(ByVal ContentName As String, ByVal PresetNameValueList As String, ByVal AllowPaste As Boolean, ByVal IsEditing As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetRecordAddLink")
            '
            'If Not (true) Then Exit Function
            '
            Dim ParentID As Integer
            Dim BufferString As String
            Dim MethodName As String
            Dim iContentName As String
            Dim iContentID As Integer
            Dim iPresetNameValueList As String
            Dim MenuName As String
            Dim MenuHasBranches As Boolean
            Dim LowestRequiredMenuName As String
            Dim ClipBoard As String
            Dim PasteLink As String
            Dim Position As Integer
            Dim ClipBoardArray As String()
            Dim ClipboardContentID As Integer
            Dim ClipChildRecordID As Integer
            Dim iAllowPaste As Boolean
            Dim useFlyout As Boolean
            Dim csChildContent As Integer
            Dim Link As String
            '
            MethodName = "main_GetRecordAddLink"
            '
            main_GetRecordAddLink2 = ""
            If IsEditing Then
                iContentName = EncodeText(ContentName)
                iPresetNameValueList = EncodeText(PresetNameValueList)
                iPresetNameValueList = vbReplace(iPresetNameValueList, "&", ",")
                iAllowPaste = EncodeBoolean(AllowPaste)

                If iContentName = "" Then
                    Call handleLegacyError14(MethodName, "Method called with blank ContentName")
                Else
                    iContentID = main_GetContentID(iContentName)
                    csChildContent = db.csOpen("Content", "ParentID=" & iContentID, , , , , , "id")
                    useFlyout = db.cs_Ok(csChildContent)
                    Call db.cs_Close(csChildContent)
                    '
                    If Not useFlyout Then
                        Link = siteProperties.adminURL & "?cid=" & iContentID & "&af=4&aa=2&ad=1"
                        If PresetNameValueList <> "" Then
                            Link = Link & "&wc=" & main_EncodeRequestVariable(PresetNameValueList)
                        End If
                        main_GetRecordAddLink2 = main_GetRecordAddLink2 _
                            & "<a" _
                            & " TabIndex=-1" _
                            & " href=""" & html_EncodeHTML(Link) & """"
                        If Not main_ReturnAfterEdit Then
                            main_GetRecordAddLink2 = main_GetRecordAddLink2 & " target=""_blank"""
                        End If
                        main_GetRecordAddLink2 = main_GetRecordAddLink2 _
                            & "><img" _
                            & " src=""/ccLib/images/IconContentAdd.gif""" _
                            & " border=""0""" _
                            & " alt=""Add record""" _
                            & " title=""Add record""" _
                            & " align=""absmiddle""" _
                            & "></a>"
                    Else
                        '
                        MenuName = common_GetRandomLong_Internal().ToString
                        Call menu_AddEntry(MenuName, , "/ccLib/images/IconContentAdd.gif", , , , "stylesheet", "stylesheethover")
                        LowestRequiredMenuName = main_GetRecordAddLink_AddMenuEntry(iContentName, iPresetNameValueList, "", MenuName, MenuName)
                    End If
                    '
                    ' Add in the paste entry, if needed
                    '
                    If iAllowPaste Then
                        ClipBoard = visitProperty.getText("Clipboard", "")
                        If ClipBoard <> "" Then
                            Position = vbInstr(1, ClipBoard, ".")
                            If Position <> 0 Then
                                ClipBoardArray = Split(ClipBoard, ".")
                                If UBound(ClipBoardArray) > 0 Then
                                    ClipboardContentID = EncodeInteger(ClipBoardArray(0))
                                    ClipChildRecordID = EncodeInteger(ClipBoardArray(1))
                                    'iContentID = main_GetContentID(iContentName)
                                    If db_IsWithinContent(ClipboardContentID, iContentID) Then
                                        If vbInstr(1, iPresetNameValueList, "PARENTID=", vbTextCompare) <> 0 Then
                                            '
                                            ' must test for main_IsChildRecord
                                            '
                                            BufferString = iPresetNameValueList
                                            BufferString = vbReplace(BufferString, "(", "")
                                            BufferString = vbReplace(BufferString, ")", "")
                                            BufferString = vbReplace(BufferString, ",", "&")
                                            ParentID = EncodeInteger(main_GetNameValue_Internal(BufferString, "Parentid"))
                                        End If


                                        If (ParentID <> 0) And (Not main_IsChildRecord(iContentName, ParentID, ClipChildRecordID)) Then
                                            '
                                            ' Can not paste as child of itself
                                            '
                                            PasteLink = web_requestPage & "?" & web_RefreshQueryString
                                            PasteLink = modifyLinkQuery(PasteLink, RequestNamePaste, "1", True)
                                            PasteLink = modifyLinkQuery(PasteLink, RequestNamePasteParentContentID, CStr(iContentID), True)
                                            PasteLink = modifyLinkQuery(PasteLink, RequestNamePasteParentRecordID, CStr(ParentID), True)
                                            PasteLink = modifyLinkQuery(PasteLink, RequestNamePasteFieldList, iPresetNameValueList, True)
                                            main_GetRecordAddLink2 = main_GetRecordAddLink2 _
                                                & "<a class=""ccRecordCutLink"" TabIndex=""-1"" href=""" & html_EncodeHTML(PasteLink) & """><img src=""/ccLib/images/ContentPaste.gif"" border=""0"" alt=""Paste record in clipboard here"" title=""Paste record in clipboard here"" align=""absmiddle""></a>"
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                    '
                    ' Add in the available flyout menu entries
                    '
                    If LowestRequiredMenuName <> "" Then
                        main_GetRecordAddLink2 = main_GetRecordAddLink2 & menuFlyout.getMenu(LowestRequiredMenuName, 0)
                        main_GetRecordAddLink2 = vbReplace(main_GetRecordAddLink2, "class=""ccFlyoutButton"" ", "", 1, 99, vbTextCompare)
                        If PasteLink <> "" Then
                            main_GetRecordAddLink2 = main_GetRecordAddLink2 & "<a TabIndex=-1 href=""" & html_EncodeHTML(PasteLink) & """><img src=""/ccLib/images/ContentPaste.gif"" border=""0"" alt=""Paste content from clipboard"" align=""absmiddle""></a>"
                        End If
                    End If
                    '
                    ' Help link if enabled
                    '
                    Dim helpLink As String
                    helpLink = ""
                    'helpLink = main_GetHelpLink(6, "Adding " & iContentName, "Turn on Edit icons by checking 'Edit' in the tools panel, and click apply.<br><br><img src=""/ccLib/images/IconContentAdd.gif"" " & IconWidthHeight & " style=""vertical-align:middle""> Add-Content icon<br><br>Add-Content icons appear in your content. Click them to add content.")
                    main_GetRecordAddLink2 = main_GetRecordAddLink2 & helpLink                '
                    If main_GetRecordAddLink2 <> "" Then
                        main_GetRecordAddLink2 = "" _
                            & vbCrLf & vbTab & "<div style=""display:inline;"">" _
                            & kmaIndent(main_GetRecordAddLink2) _
                            & vbCrLf & vbTab & "</div>"
                    End If
                    '
                    ' ----- Add the flyout panels to the content to return
                    '       This must be here so if the call is made after main_ClosePage, the panels will still deliver
                    '
                    If LowestRequiredMenuName <> "" Then
                        main_GetRecordAddLink2 = main_GetRecordAddLink2 & menu_GetClose()
                        If vbInstr(1, main_GetRecordAddLink2, "IconContentAdd.gif", vbTextCompare) <> 0 Then
                            main_GetRecordAddLink2 = vbReplace(main_GetRecordAddLink2, "IconContentAdd.gif"" ", "IconContentAdd.gif"" align=""absmiddle"" ")
                        End If
                    End If
                    If main_ReturnAfterEdit Then
                        main_GetRecordAddLink2 = vbReplace(main_GetRecordAddLink2, "target=", "xtarget=", 1, 99, vbTextCompare)
                    End If
                    'End If
                End If
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        '   main_IsChildRecord
        '
        '   Tests if this record is in the ParentID->ID chain for this content
        '========================================================================
        '
        Private Function main_IsChildRecord(ByVal ContentName As String, ByVal ChildRecordID As Integer, ByVal ParentRecordID As Integer) As Boolean
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("IsChildRecord")
            '
            Dim CDef As coreMetaDataClass.CDefClass
            '
            main_IsChildRecord = (ChildRecordID = ParentRecordID)
            If Not main_IsChildRecord Then
                CDef = metaData.getCdef(ContentName)
                If IsInDelimitedString(UCase(CDef.SelectCommaList), "PARENTID", ",") Then
                    main_IsChildRecord = main_IsChildRecord_Recurse(CDef.ContentDataSourceName, CDef.ContentTableName, ChildRecordID, ParentRecordID, "")
                End If
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("cpCoreClass.IsChildRecord")
            '
        End Function
        '
        '========================================================================
        '   main_IsChildRecord
        '
        '   Tests if this record is in the ParentID->ID chain for this content
        '========================================================================
        '
        Private Function main_IsChildRecord_Recurse(ByVal DataSourceName As String, ByVal TableName As String, ByVal ChildRecordID As Integer, ByVal ParentRecordID As Integer, ByVal History As String) As Boolean
            '
            Dim SQL As String
            Dim CS As Integer
            Dim ChildRecordParentID As Integer
            '
            SQL = "select ParentID from " & TableName & " where id=" & ChildRecordID
            CS = db.cs_openSql(SQL)
            If db.cs_Ok(CS) Then
                ChildRecordParentID = db.cs_getInteger(CS, "ParentID")
            End If
            Call db.cs_Close(CS)
            If (ChildRecordParentID <> 0) And (Not IsInDelimitedString(History, CStr(ChildRecordID), ",")) Then
                main_IsChildRecord_Recurse = (ParentRecordID = ChildRecordParentID)
                If Not main_IsChildRecord_Recurse Then
                    main_IsChildRecord_Recurse = main_IsChildRecord_Recurse(DataSourceName, TableName, ChildRecordParentID, ParentRecordID, History & "," & CStr(ChildRecordID))
                End If
            End If
            '
        End Function
        '
        '========================================================================
        ' main_GetRecordAddLink_AddMenuEntry( ContentName, PresetNameValueList, ContentNameList, MenuName )
        '
        '   adds an add entry for the content name, and all the child content
        '   returns the MenuName of the lowest branch that has valid
        '   menu entries.
        '
        '   ContentName The content for this link
        '   PresetNameValueList The sql equivalent used to select the record.
        '           translates to (name0=value0)&(name1=value1).. pairs separated by &
        '   ContentNameList is a comma separated list of names of the content included so far
        '   MenuName is the name of the root branch, for flyout menu
        '
        '   IsMember(), main_IsAuthenticated() And Member_AllowLinkAuthoring must already be checked
        '========================================================================
        '
        Private Function main_GetRecordAddLink_AddMenuEntry(ByVal ContentName As String, ByVal PresetNameValueList As String, ByVal ContentNameList As String, ByVal MenuName As String, ByVal ParentMenuName As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetRecordAddLink_AddMenuEntry")
            '
            'If Not (true) Then Exit Function
            '
            Dim Copy As String
            Dim CID As Integer
            Dim CS As Integer
            Dim SQL As String
            Dim LinkCount As Integer
            Dim csChildContent As Integer
            Dim ContentID As Integer
            Dim Link As String
            Dim MyContentNameList As String
            Dim MethodName As String
            Dim Label As String
            Dim ButtonCaption As String
            Dim ContentRecordFound As Boolean
            Dim ContentAllowAdd As Boolean
            Dim GroupRulesAllowAdd As Boolean
            Dim MemberRulesDateExpires As Date
            Dim MemberRulesAllow As Boolean
            Dim ChildMenuButtonCount As Integer
            Dim ChildMenuName As String
            Dim ChildContentName As String
            '
            MethodName = "main_GetRecordAddLink_AddMenuEntry"
            '
            Link = ""
            MyContentNameList = ContentNameList
            If (ContentName = "") Then
                Call handleLegacyError14(MethodName, "main_GetRecordAddLink, ContentName is empty")
            Else
                If (InStr(1, MyContentNameList, "," & vbUCase(ContentName) & ",") >= 0) Then
                    Call handleLegacyError14(MethodName, "main_GetRecordAddLink_AddMenuEntry, Content Child [" & ContentName & "] is one of its own parents")
                Else
                    MyContentNameList = MyContentNameList & "," & vbUCase(ContentName) & ","
                    '
                    ' ----- Select the Content Record for the Menu Entry selected
                    '
                    ContentRecordFound = False
                    If user.isAuthenticatedAdmin() Then
                        '
                        ' ----- admin member, they have access, main_Get ContentID and set markers true
                        '
                        SQL = "SELECT ID as ContentID, AllowAdd as ContentAllowAdd, 1 as GroupRulesAllowAdd, null as MemberRulesDateExpires" _
                            & " FROM ccContent" _
                            & " WHERE (" _
                            & " (ccContent.Name=" & db.encodeSQLText(ContentName) & ")" _
                            & " AND(ccContent.active<>0)" _
                            & " );"
                        CS = db.cs_openSql(SQL)
                        If db.cs_Ok(CS) Then
                            '
                            ' Entry was found
                            '
                            ContentRecordFound = True
                            ContentID = db.cs_getInteger(CS, "ContentID")
                            ContentAllowAdd = db.cs_getBoolean(CS, "ContentAllowAdd")
                            GroupRulesAllowAdd = True
                            MemberRulesDateExpires = Date.MinValue
                            MemberRulesAllow = True
                        End If
                        Call db.cs_Close(CS)
                    Else
                        '
                        ' non-admin member, first check if they have access and main_Get true markers
                        '
                        SQL = "SELECT ccContent.ID as ContentID, ccContent.AllowAdd as ContentAllowAdd, ccGroupRules.AllowAdd as GroupRulesAllowAdd, ccMemberRules.DateExpires as MemberRulesDateExpires" _
                            & " FROM (((ccContent" _
                                & " LEFT JOIN ccGroupRules ON ccGroupRules.ContentID=ccContent.ID)" _
                                & " LEFT JOIN ccgroups ON ccGroupRules.GroupID=ccgroups.ID)" _
                                & " LEFT JOIN ccMemberRules ON ccgroups.ID=ccMemberRules.GroupID)" _
                                & " LEFT JOIN ccMembers ON ccMemberRules.MemberID=ccMembers.ID" _
                            & " WHERE (" _
                            & " (ccContent.Name=" & db.encodeSQLText(ContentName) & ")" _
                            & " AND(ccContent.active<>0)" _
                            & " AND(ccGroupRules.active<>0)" _
                            & " AND(ccMemberRules.active<>0)" _
                            & " AND((ccMemberRules.DateExpires is Null)or(ccMemberRules.DateExpires>" & db.encodeSQLDate(main_PageStartTime) & "))" _
                            & " AND(ccgroups.active<>0)" _
                            & " AND(ccMembers.active<>0)" _
                            & " AND(ccMembers.ID=" & user.id & ")" _
                            & " );"
                        CS = db.cs_openSql(SQL)
                        If db.cs_Ok(CS) Then
                            '
                            ' ----- Entry was found, member has some kind of access
                            '
                            ContentRecordFound = True
                            ContentID = db.cs_getInteger(CS, "ContentID")
                            ContentAllowAdd = db.cs_getBoolean(CS, "ContentAllowAdd")
                            GroupRulesAllowAdd = db.cs_getBoolean(CS, "GroupRulesAllowAdd")
                            MemberRulesDateExpires = db.db_GetCSDate(CS, "MemberRulesDateExpires")
                            MemberRulesAllow = False
                            If MemberRulesDateExpires = Date.MinValue Then
                                MemberRulesAllow = True
                            ElseIf (MemberRulesDateExpires > main_PageStartTime) Then
                                MemberRulesAllow = True
                            End If
                        Else
                            '
                            ' ----- No entry found, this member does not have access, just main_Get ContentID
                            '
                            ContentRecordFound = True
                            ContentID = main_GetContentID(ContentName)
                            ContentAllowAdd = False
                            GroupRulesAllowAdd = False
                            MemberRulesAllow = False
                        End If
                        Call db.cs_Close(CS)
                    End If
                    If ContentRecordFound Then
                        '
                        ' Add the Menu Entry* to the current menu (MenuName)
                        '
                        Link = ""
                        ButtonCaption = ContentName
                        main_GetRecordAddLink_AddMenuEntry = MenuName
                        If ContentAllowAdd And GroupRulesAllowAdd And MemberRulesAllow Then
                            Link = siteProperties.adminURL & "?cid=" & ContentID & "&af=4&aa=2&ad=1"
                            If PresetNameValueList <> "" Then
                                Dim NameValueList As String
                                NameValueList = PresetNameValueList
                                Link = Link & "&wc=" & main_EncodeRequestVariable(PresetNameValueList)
                            End If
                        End If
                        Call menu_AddEntry(MenuName & ":" & ContentName, ParentMenuName, , , Link, ButtonCaption, "", "", True)
                        '
                        ' Create child submenu if Child Entries found
                        '
                        csChildContent = db.csOpen("Content", "ParentID=" & ContentID, , , , , , "name")
                        If Not db.cs_Ok(csChildContent) Then
                            '
                            ' No child menu
                            '
                        Else
                            '
                            ' Add the child menu
                            '
                            ChildMenuName = MenuName & ":" & ContentName
                            ChildMenuButtonCount = 0
                            '
                            ' ----- Create the ChildPanel with all Children found
                            '
                            Do While db.cs_Ok(csChildContent)
                                ChildContentName = db.cs_getText(csChildContent, "name")
                                Copy = main_GetRecordAddLink_AddMenuEntry(ChildContentName, PresetNameValueList, MyContentNameList, MenuName, ParentMenuName)
                                'Copy = main_GetRecordAddLink_AddMenuEntry(ChildContentName, PresetNameValueList, MyContentNameList, MenuName, ChildMenuName)
                                If Copy <> "" Then
                                    ChildMenuButtonCount = ChildMenuButtonCount + 1
                                End If
                                If (main_GetRecordAddLink_AddMenuEntry = "") And (Copy <> "") Then
                                    main_GetRecordAddLink_AddMenuEntry = Copy
                                End If
                                db.db_csGoNext(csChildContent)
                            Loop
                        End If
                    End If
                End If
                Call db.cs_Close(csChildContent)
                'main_GetRecordAddLink_AddMenuEntry = Link
            End If
            '
            'main_TestPointExit
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetRecordAddLink_AddMenuEntry")
        End Function
        '
        '========================================================================
        ' Depricated - Use main_GetRecordEditLink and main_GetRecordAddLink
        '========================================================================
        '
        Public Function main_GetRecordEditLinkByContent(ByVal ContentID As Integer, ByVal RecordIDVariant As Object, ByVal Criteria As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetRecordEditLinkByContent")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            Dim ContentName As String
            '
            MethodName = "main_GetRecordEditLinkByContent"
            '
            ContentName = metaData.getContentNameByID(ContentID)
            If ContentName <> "" Then
                If Not IsNull(RecordIDVariant) Then
                    main_GetRecordEditLinkByContent = main_GetRecordEditLink2(ContentName, EncodeInteger(RecordIDVariant), False, "", user.isEditing(ContentName))
                Else
                    main_GetRecordEditLinkByContent = main_GetRecordAddLink(ContentName, Criteria)
                End If
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function

        '
        '========================================================================
        ' ----- Compatibility Only
        '========================================================================
        '
        Public Function main_GetFormCSInput(ByVal CSPointer As Integer, ByVal FieldName As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetFormCSInput")
            '
            'If Not (true) Then Exit Function
            '
            If db.cs_Ok(EncodeInteger(CSPointer)) Then
                '
                ' Just do a text box with the value
                '
                main_GetFormCSInput = html_GetFormInputText2(FieldName, EncodeText(db.db_GetCSField(CSPointer, FieldName)))
            Else
                '
                ' Just do a text box with a blank
                '
                main_GetFormCSInput = html_GetFormInputText2(EncodeText(FieldName), "")
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_GetFormCSInput")
            '
        End Function
        '
        '
        '
        Public Sub web_addRefreshQueryString(ByVal Name As String, Optional ByVal Value As String = "")
            Try
                Dim temp() As String
                '
                If (InStr(1, Name, "=") > 0) Then
                    temp = Split(Name, "=")
                    _RefreshQueryString = ModifyQueryString(_RefreshQueryString, temp(0), temp(1), True)
                Else
                    _RefreshQueryString = ModifyQueryString(_RefreshQueryString, Name, Value, True)
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            '
        End Sub
        '
        '==================================================================================================
        ' ----- Remove this record from all watch lists
        '       Mark permanent if the content is being deleted. non-permanent otherwise
        '==================================================================================================
        '
        Public Sub metaData_DeleteContentTracking(ContentName As String, RecordID As Integer, Permanent As Object)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("DeleteContentTracking")
            '
            'If Not (true) Then Exit Sub
            '
            Dim MethodName As String
            '
            MethodName = "main_DeleteContentTracking( " & ContentName & ", " & RecordID & " )"
            '
            Call csv_DeleteContentTracking(EncodeText(ContentName), EncodeInteger(RecordID), EncodeBoolean(Permanent))
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '=================================================================================
        '   Public for main_GetRandomLong_Internal
        '=================================================================================
        '
        Public Function common_GetRandomLong() As Integer
            On Error GoTo ErrorTrap
            '
            common_GetRandomLong = common_GetRandomLong_Internal()
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_GetRandomLong")
        End Function
        '
        '=================================================================================
        '   main_Get a Random long value
        '=================================================================================
        '
        Public Function common_GetRandomLong_Internal() As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetRandomLong_Internal")
            '
            Dim RandomLimit As Single
            '
            RandomLimit = ((2 ^ 30) - 1)
            common_GetRandomLong_Internal = CInt(Rnd() * RandomLimit)
            '
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_GetRandomLong_Internal")
        End Function
        '
        '========================================================================
        '   Compatibility
        '========================================================================
        '
        Public Function html_GetFormInputHTML(ByVal TagName As String, Optional ByVal DefaultValue As String = "", Optional ByVal Height As String = "", Optional ByVal Width As String = "") As String
            html_GetFormInputHTML = html_GetFormInputHTML3(EncodeText(TagName), EncodeText(DefaultValue), EncodeText(Height), EncodeText(Width))
        End Function
        '
        '========================================================================
        ' ----- main_Get an HTML Form text input (or text area)
        '========================================================================
        '
        Public Function html_GetFormInputHTML3(ByVal htmlName As String, Optional ByVal DefaultValue As String = "", Optional ByVal styleHeight As String = "", Optional ByVal styleWidth As String = "", Optional ByVal readOnlyfield As Boolean = False, Optional ByVal allowActiveContent As Boolean = False, Optional ByVal addonListJSON As String = "", Optional ByVal styleList As String = "", Optional ByVal styleOptionList As String = "", Optional ByVal allowResourceLibrary As Boolean = False) As String
            Dim returnHtml As String = ""
            Try
                Dim MethodName As String
                'Dim innovaEditor As innovaEditorAddonClassFPO
                Dim FieldTypeDefaultEditorAddonIdList As String
                Dim FieldTypeDefaultEditorAddonIds() As String
                Dim editorAddonID As Integer
                Dim addonOption_String As String
                Dim FieldTypeDefaultEditorAddonId As Integer
                '
                FieldTypeDefaultEditorAddonIdList = getFieldTypeDefaultEditorAddonIdList()
                FieldTypeDefaultEditorAddonIds = Split(FieldTypeDefaultEditorAddonIdList, ",")
                FieldTypeDefaultEditorAddonId = EncodeInteger(FieldTypeDefaultEditorAddonIds(FieldTypeIdHTML))

                If FieldTypeDefaultEditorAddonId = 0 Then
                    '
                    '    use default wysiwyg
                    '
                    returnHtml = html_GetFormInputTextExpandable2(htmlName, DefaultValue)
                Else
                    '
                    ' use addon editor
                    '
                    addonOption_String = "" _
                        & "editorName=" & encodeNvaArgument(htmlName) _
                        & "&editorValue=" & encodeNvaArgument(DefaultValue) _
                        & "&editorFieldType=" & FieldTypeIdHTML _
                        & "&editorReadOnly=" & readOnlyfield _
                        & "&editorWidth=" & styleWidth _
                        & "&editorHeight=" & styleHeight _
                        & ""
                    addonOption_String = addonOption_String _
                        & "&editorAllowResourceLibrary=" & encodeNvaArgument(CStr(allowResourceLibrary)) _
                        & "&editorAllowActiveContent=" & encodeNvaArgument(CStr(allowActiveContent)) _
                        & "&editorAddonList=" & encodeNvaArgument(addonListJSON) _
                        & "&editorStyles=" & encodeNvaArgument(styleList) _
                        & "&editorStyleOptions=" & encodeNvaArgument(styleOptionList) _
                        & ""
                    returnHtml = executeAddon_legacy4(FieldTypeDefaultEditorAddonId.ToString, addonOption_String, addonContextEnum.ContextEditor)
                End If

            Catch ex As Exception
                Call handleExceptionAndRethrow(ex)
            End Try
            Return returnHtml
        End Function
        '
        '========================================================================
        ' ----- Process the reply from the Tools Panel form
        '========================================================================
        '
        Private Sub pageManager_ProcessFormToolsPanel()
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("ProcessFormToolsPanel")
            '
            'If Not (true) Then Exit Sub
            '
            Dim CSPointer As Integer
            Dim CS As Integer
            Dim TopicCount As Integer
            Dim TopicPointer As Integer
            Dim TopicID As Integer
            Dim Panel As String
            Dim MethodName As String
            Dim CreatePathBlock As Boolean
            Dim Button As String
            Dim PathID As Integer
            Dim RequestAutoLogin As Boolean
            Dim SiteAutoLogin As Boolean
            '
            MethodName = "main_ProcessFormToolsPanel()"
            '
            ' ----- Read in and save the Member profile values from the tools panel
            '
            If (user.id > 0) Then
                If Not error_IsUserError() Then
                    Button = docProperties.getText("mb")
                    Select Case Button
                        Case ButtonLogout
                            '
                            ' Logout - This can only come from the Horizonal Tool Bar
                            '
                            Call user.logout()
                        Case ButtonLogin
                            '
                            ' Login - This can only come from the Horizonal Tool Bar
                            '
                            Call user.processFormLoginDefault()
                        Case ButtonApply
                            '
                            ' Apply
                            '
                            user.loginForm_Username = docProperties.getText("username")
                            If user.loginForm_Username <> "" Then
                                Call user.processFormLoginDefault()
                            End If
                            '
                            ' ----- AllowAdminLinks
                            '
                            Call visitProperty.setProperty("AllowEditing", EncodeText(main_GetStreamBoolean2("AllowEditing")))
                            '
                            ' ----- Quick Editor
                            '
                            Call visitProperty.setProperty("AllowQuickEditor", EncodeText(main_GetStreamBoolean2("AllowQuickEditor")))
                            '
                            ' ----- Advanced Editor
                            '
                            Call visitProperty.setProperty("AllowAdvancedEditor", EncodeText(main_GetStreamBoolean2("AllowAdvancedEditor")))
                            '
                            ' ----- Allow Workflow authoring Render Mode - Visit Property
                            '
                            Call visitProperty.setProperty("AllowWorkflowRendering", EncodeText(main_GetStreamBoolean2("AllowWorkflowRendering")))
                            '
                            ' ----- developer Only parts
                            '
                            Call visitProperty.setProperty("AllowDebugging", EncodeText(main_GetStreamBoolean2("AllowDebugging")))
                            If user.isAuthenticatedDeveloper() Then
                                '
                                ' ----- Create Path Block record, if requested
                                '
                                CreatePathBlock = main_GetStreamBoolean2("CreatePathBlock")
                                CS = db.csOpen("Paths", "name=" & db.encodeSQLText(web_requestPath))
                                PathID = 0
                                If db.cs_Ok(CS) Then
                                    PathID = db.cs_getInteger(CS, "id")
                                End If
                                Call db.cs_Close(CS)
                                If (PathID = 0) And (CreatePathBlock) Then
                                    '
                                    ' path is not blocked, but we want it blocked
                                    '
                                    CS = db.cs_insertRecord("Paths")
                                    If db.cs_Ok(CS) Then
                                        Call db.cs_set(CS, "name", web_requestPath)
                                        Call db.cs_set(CS, "active", 1)
                                    End If
                                    Call db.cs_Close(CS)
                                ElseIf (PathID <> 0) And (Not CreatePathBlock) Then
                                    '
                                    ' path is blocked, but we do not want it blocked
                                    '
                                    Call db_DeleteContentRecord("Paths", PathID)
                                End If
                            End If
                    End Select
                End If
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '========================================================================
        ' -----
        '========================================================================
        '
        Private Sub pageManager_ProcessAddonSettingsEditor()
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("ProcessAddonSettingsEditor")
            '
            'If Not (true) Then Exit Sub
            '
            Dim constructor As String
            Dim FoundAddon As Boolean
            Dim ParseOK As Boolean
            Dim PosNameStart As Integer
            Dim PosNameEnd As Integer
            Dim AddonName As String
            Dim CSAddon As Integer
            Dim OptionPtr As Integer
            Dim ArgValueAddonEncoded As String
            Dim OptionCnt As Integer
            Dim needToClearCache As Boolean
            Dim TableName As String
            Dim EmptyVariant As Object
            Dim ConstructorSplit() As String
            Dim Ptr As Integer
            Dim Arg() As String
            Dim ArgName As String
            Dim ArgValue As String
            Dim ArgValueOptions As String
            Dim PosBracket As Integer
            Dim AddonOptionConstructor As String
            Dim addonOption_String As String
            Dim fieldType As Integer
            Dim Copy As String
            Dim MethodName As String
            Dim ContentID As Integer
            Dim RecordID As Integer
            Dim FieldName As String
            Dim ACInstanceID As String
            Dim ContentName As String
            Dim CS As Integer
            Dim PosACInstanceID As Integer
            Dim PosStart As Integer
            Dim PosIDStart As Integer
            Dim PosIDEnd As Integer
            Dim addonPtr As Integer
            '
            MethodName = "main_ProcessAddonSettingsEditor()"
            '
            ContentName = docProperties.getText("ContentName")
            RecordID = docProperties.getInteger("RecordID")
            FieldName = docProperties.getText("FieldName")
            ACInstanceID = docProperties.getText("ACInstanceID")
            If (ACInstanceID = PageChildListInstanceID) Then
                '
                ' ----- Page Content Child List Add-on
                '
                If (RecordID <> 0) And (True) Then
                    CSAddon = db_csOpen("Add-ons", siteProperties.childListAddonID)
                    FoundAddon = False
                    If db.cs_Ok(CSAddon) Then
                        FoundAddon = True
                        AddonOptionConstructor = db.cs_getText(CSAddon, "ArgumentList")
                        AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbCrLf, vbCr)
                        AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbLf, vbCr)
                        AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbCr, vbCrLf)
                        If True Then
                            If AddonOptionConstructor <> "" Then
                                AddonOptionConstructor = AddonOptionConstructor & vbCrLf
                            End If
                            If db.cs_getBoolean(CSAddon, "IsInline") Then
                                AddonOptionConstructor = AddonOptionConstructor & AddonOptionConstructor_Inline
                            Else
                                AddonOptionConstructor = AddonOptionConstructor & AddonOptionConstructor_Block
                            End If
                        End If

                        ConstructorSplit = Split(AddonOptionConstructor, vbCrLf)
                        AddonOptionConstructor = ""
                        '
                        ' main_Get all responses from current Argument List and build new addonOption_String
                        '
                        For Ptr = 0 To UBound(ConstructorSplit)
                            Arg = Split(ConstructorSplit(Ptr), "=")
                            ArgName = Arg(0)
                            OptionCnt = docProperties.getInteger(ArgName & "CheckBoxCnt")
                            If OptionCnt > 0 Then
                                ArgValueAddonEncoded = ""
                                For OptionPtr = 0 To OptionCnt - 1
                                    ArgValue = docProperties.getText(ArgName & OptionPtr)
                                    If ArgValue <> "" Then
                                        ArgValueAddonEncoded = ArgValueAddonEncoded & "," & encodeNvaArgument(ArgValue)
                                    End If
                                Next
                                If ArgValueAddonEncoded <> "" Then
                                    ArgValueAddonEncoded = Mid(ArgValueAddonEncoded, 2)
                                End If
                            Else
                                ArgValue = docProperties.getText(ArgName)
                                ArgValueAddonEncoded = encodeNvaArgument(ArgValue)
                            End If
                            addonOption_String = addonOption_String & "&" & encodeNvaArgument(ArgName) & "=" & ArgValueAddonEncoded
                        Next
                        If addonOption_String <> "" Then
                            addonOption_String = Mid(addonOption_String, 2)
                        End If
                    End If
                    Call db.cs_Close(CSAddon)
                    ' ????? need to test
                    Call db.executeSql("update ccpagecontent set ChildListInstanceOptions=" & db.encodeSQLText(addonOption_String) & " where id=" & RecordID)
                    needToClearCache = True
                    'CS = main_OpenCSContentRecord("page content", RecordID)
                    'If app.csv_IsCSOK(CS) Then
                    '    Call app.db_SetCS(CS, "ChildListInstanceOptions", addonOption_String)
                    '    needToClearCache = True
                    'End If
                    'Call app.db_closeCS(CS)
                End If
            ElseIf (ACInstanceID = "-2") And (FieldName <> "") Then
                '
                ' ----- Admin Addon, ACInstanceID=-2, FieldName=AddonName
                '
                AddonName = FieldName
                '????? test this
                FoundAddon = False
                addonPtr = addonCache.getPtr(AddonName)
                If addonPtr >= 0 Then
                    FoundAddon = True
                    AddonOptionConstructor = addonCache.localCache.addonList(addonPtr).addonCache_ArgumentList
                    AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbCrLf, vbCr)
                    AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbLf, vbCr)
                    AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbCr, vbCrLf)
                    If AddonOptionConstructor <> "" Then
                        AddonOptionConstructor = AddonOptionConstructor & vbCrLf
                    End If
                    If EncodeBoolean(addonCache.localCache.addonList(addonPtr).addonCache_IsInline) Then
                        AddonOptionConstructor = AddonOptionConstructor & AddonOptionConstructor_Inline
                    Else
                        AddonOptionConstructor = AddonOptionConstructor & AddonOptionConstructor_Block
                    End If
                End If
                '        CSAddon = app.db_csOpen("Add-ons", "name=" & encodeSQLText(AddonName))
                '        FoundAddon = False
                '        If app.csv_IsCSOK(CSAddon) Then
                '            FoundAddon = True
                '            AddonOptionConstructor = db.db_GetCSText(CSAddon, "ArgumentList")
                '            AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbCrLf, vbCr)
                '            AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbLf, vbCr)
                '            AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbCr, vbCrLf)
                '            If AddonOptionConstructor <> "" Then
                '                AddonOptionConstructor = AddonOptionConstructor & vbCrLf
                '            End If
                '            If db.db_GetCSBoolean(CSAddon, "IsInline") Then
                '                AddonOptionConstructor = AddonOptionConstructor & AddonOptionConstructor_Inline
                '            Else
                '                AddonOptionConstructor = AddonOptionConstructor & AddonOptionConstructor_Block
                '            End If
                '        End If
                '        Call app.db_closeCS(CSAddon)
                If Not FoundAddon Then
                    '
                    ' Hardcoded Addons
                    '
                    Select Case vbLCase(AddonName)
                        Case "block text"
                            FoundAddon = True
                            AddonOptionConstructor = AddonOptionConstructor_ForBlockText
                        Case ""
                    End Select
                End If
                If FoundAddon Then
                    ConstructorSplit = Split(AddonOptionConstructor, vbCrLf)
                    addonOption_String = ""
                    '
                    ' main_Get all responses from current Argument List
                    '
                    For Ptr = 0 To UBound(ConstructorSplit)
                        Dim nvp As String
                        nvp = Trim(ConstructorSplit(Ptr))
                        If nvp <> "" Then
                            Arg = Split(ConstructorSplit(Ptr), "=")
                            ArgName = Arg(0)
                            OptionCnt = docProperties.getInteger(ArgName & "CheckBoxCnt")
                            If OptionCnt > 0 Then
                                ArgValueAddonEncoded = ""
                                For OptionPtr = 0 To OptionCnt - 1
                                    ArgValue = docProperties.getText(ArgName & OptionPtr)
                                    If ArgValue <> "" Then
                                        ArgValueAddonEncoded = ArgValueAddonEncoded & "," & encodeNvaArgument(ArgValue)
                                    End If
                                Next
                                If ArgValueAddonEncoded <> "" Then
                                    ArgValueAddonEncoded = Mid(ArgValueAddonEncoded, 2)
                                End If
                            Else
                                ArgValue = docProperties.getText(ArgName)
                                ArgValueAddonEncoded = encodeNvaArgument(ArgValue)
                            End If
                            addonOption_String = addonOption_String & "&" & encodeNvaArgument(ArgName) & "=" & ArgValueAddonEncoded
                        End If
                    Next
                    If addonOption_String <> "" Then
                        addonOption_String = Mid(addonOption_String, 2)
                    End If
                    Call userProperty.setProperty("Addon [" & AddonName & "] Options", addonOption_String)
                    needToClearCache = True
                End If
            ElseIf ContentName = "" Or RecordID = 0 Then
                '
                ' ----- Public Site call, must have contentname and recordid
                '
                handleExceptionAndRethrow(New Exception("invalid content [" & ContentName & "], RecordID [" & RecordID & "]"))
            Else
                '
                ' ----- Normal Content Edit - find instance in the content
                '
                CS = db_csOpen(ContentName, RecordID)
                If Not db.cs_Ok(CS) Then
                    handleExceptionAndRethrow(New Exception("No record found with content [" & ContentName & "] and RecordID [" & RecordID & "]"))
                Else
                    If FieldName <> "" Then
                        '
                        ' Field is given, find the position
                        '
                        Copy = db.db_GetCS(CS, FieldName)
                        PosACInstanceID = vbInstr(1, Copy, "=""" & ACInstanceID & """ ", vbTextCompare)
                    Else
                        '
                        ' Find the field, then find the position
                        '
                        FieldName = db.db_GetCSFirstFieldName(CS)
                        Do While FieldName <> ""
                            fieldType = db.db_GetCSFieldTypeId(CS, FieldName)
                            Select Case fieldType
                                Case FieldTypeIdLongText, FieldTypeIdText, FieldTypeIdFileTextPrivate, FieldTypeIdFileCSS, FieldTypeIdFileXML, FieldTypeIdFileJavascript, FieldTypeIdHTML, FieldTypeIdFileHTMLPrivate
                                    Copy = db.db_GetCS(CS, FieldName)
                                    PosACInstanceID = vbInstr(1, Copy, "ACInstanceID=""" & ACInstanceID & """", vbTextCompare)
                                    If PosACInstanceID <> 0 Then
                                        '
                                        ' found the instance
                                        '
                                        PosACInstanceID = PosACInstanceID + 13
                                        Exit Do
                                    End If
                            End Select
                            FieldName = db.db_GetCSNextFieldName(CS)
                        Loop
                    End If
                    '
                    ' Parse out the Addon Name
                    '
                    If PosACInstanceID = 0 Then
                        handleExceptionAndRethrow(New Exception("AC Instance [" & ACInstanceID & "] not found in record with content [" & ContentName & "] and RecordID [" & RecordID & "]"))
                    Else
                        Copy = html_EncodeContentUpgrades(Copy)
                        ParseOK = False
                        PosStart = InStrRev(Copy, "<ac ", PosACInstanceID, vbTextCompare)
                        If PosStart <> 0 Then
                            '
                            ' main_Get Addon Name to lookup Addon and main_Get most recent Argument List
                            '
                            PosNameStart = vbInstr(PosStart, Copy, " name=", vbTextCompare)
                            If PosNameStart <> 0 Then
                                PosNameStart = PosNameStart + 7
                                PosNameEnd = vbInstr(PosNameStart, Copy, """")
                                If PosNameEnd <> 0 Then
                                    AddonName = Mid(Copy, PosNameStart, PosNameEnd - PosNameStart)
                                    '????? test this
                                    FoundAddon = False
                                    addonPtr = addonCache.getPtr(AddonName)
                                    If addonPtr >= 0 Then
                                        FoundAddon = True
                                        AddonOptionConstructor = EncodeText(addonCache.localCache.addonList(addonPtr).addonCache_ArgumentList)
                                        AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbCrLf, vbCr)
                                        AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbLf, vbCr)
                                        AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbCr, vbCrLf)
                                        If AddonOptionConstructor <> "" Then
                                            AddonOptionConstructor = AddonOptionConstructor & vbCrLf
                                        End If
                                        If EncodeBoolean(addonCache.localCache.addonList(addonPtr).addonCache_IsInline) Then
                                            AddonOptionConstructor = AddonOptionConstructor & AddonOptionConstructor_Inline
                                        Else
                                            AddonOptionConstructor = AddonOptionConstructor & AddonOptionConstructor_Block
                                        End If
                                    End If
                                    If Not FoundAddon Then
                                        '
                                        ' Hardcoded Addons
                                        '
                                        Select Case vbLCase(AddonName)
                                            Case "block text"
                                                FoundAddon = True
                                                AddonOptionConstructor = AddonOptionConstructor_ForBlockText
                                            Case ""
                                        End Select
                                    End If
                                    If FoundAddon Then
                                        ConstructorSplit = Split(AddonOptionConstructor, vbCrLf)
                                        addonOption_String = ""
                                        '
                                        ' main_Get all responses from current Argument List
                                        '
                                        For Ptr = 0 To UBound(ConstructorSplit)
                                            constructor = ConstructorSplit(Ptr)
                                            If constructor <> "" Then
                                                Arg = Split(constructor, "=")
                                                ArgName = Arg(0)
                                                OptionCnt = docProperties.getInteger(ArgName & "CheckBoxCnt")
                                                If OptionCnt > 0 Then
                                                    ArgValueAddonEncoded = ""
                                                    For OptionPtr = 0 To OptionCnt - 1
                                                        ArgValue = docProperties.getText(ArgName & OptionPtr)
                                                        If ArgValue <> "" Then
                                                            ArgValueAddonEncoded = ArgValueAddonEncoded & "," & encodeNvaArgument(ArgValue)
                                                        End If
                                                    Next
                                                    If ArgValueAddonEncoded <> "" Then
                                                        ArgValueAddonEncoded = Mid(ArgValueAddonEncoded, 2)
                                                    End If
                                                Else
                                                    ArgValue = docProperties.getText(ArgName)
                                                    ArgValueAddonEncoded = encodeNvaArgument(ArgValue)
                                                End If

                                                addonOption_String = addonOption_String & "&" & encodeNvaArgument(ArgName) & "=" & ArgValueAddonEncoded
                                            End If
                                        Next
                                        If addonOption_String <> "" Then
                                            addonOption_String = Mid(addonOption_String, 2)
                                        End If
                                    End If
                                End If
                            End If
                            '
                            ' Replace the new querystring into the AC tag in the content
                            '
                            PosIDStart = vbInstr(PosStart, Copy, " querystring=", vbTextCompare)
                            If PosIDStart <> 0 Then
                                PosIDStart = PosIDStart + 14
                                If PosIDStart <> 0 Then
                                    PosIDEnd = vbInstr(PosIDStart, Copy, """")
                                    If PosIDEnd <> 0 Then
                                        ParseOK = True
                                        Copy = Mid(Copy, 1, PosIDStart - 1) & html_EncodeHTML(addonOption_String) & Mid(Copy, PosIDEnd)
                                        Call db.cs_set(CS, FieldName, Copy)
                                        needToClearCache = True
                                    End If
                                End If
                            End If
                        End If
                        If Not ParseOK Then
                            handleExceptionAndRethrow(New Exception("There was a problem parsing AC Instance [" & ACInstanceID & "] record with content [" & ContentName & "] and RecordID [" & RecordID & "]"))
                        End If
                    End If
                End If
                Call db.cs_Close(CS)
            End If
            If needToClearCache Then
                '
                ' Clear Caches
                '
                Call pageManager_cache_pageContent_clear()
                Call pageManager_cache_pageTemplate_clear()
                Call pageManager_cache_siteSection_clear()
                Call cache.invalidateTagCommaList("")
                If ContentName <> "" Then
                    Call cache.invalidateTagCommaList(ContentName)
                    TableName = db_GetContentTablename(ContentName)
                    If vbLCase(TableName) = "cctemplates" Then
                        Call cache.setKey(pageManager_cache_pageTemplate_cacheName, EmptyVariant)
                        Call pageManager_cache_pageTemplate_load()
                    End If
                    If vbLCase(TableName) = "ccpagecontent" Then
                        Call pageManager_cache_pageContent_updateRow(RecordID, pagemanager_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                    End If
                End If
            End If
            '
            '
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '========================================================================
        ' ----- Process the little edit form in the help bubble
        '========================================================================
        '
        Private Sub main_ProcessHelpBubbleEditor()
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("ProcessHelpBubbleEditor")
            '
            'If Not (true) Then Exit Sub
            '
            Dim SQL As String
            Dim MethodName As String
            Dim HelpBubbleID As String
            Dim IDSplit() As String
            Dim RecordID As Integer
            Dim HelpCaption As String
            Dim HelpMessage As String
            '
            MethodName = "main_ProcessHelpBubbleEditor()"
            '
            HelpBubbleID = docProperties.getText("HelpBubbleID")
            IDSplit = Split(HelpBubbleID, "-")
            Select Case vbLCase(IDSplit(0))
                Case "userfield"
                    '
                    ' main_Get the id of the field, and save the input as the caption and help
                    '
                    If UBound(IDSplit) > 0 Then
                        RecordID = EncodeInteger(IDSplit(1))
                        If RecordID > 0 Then
                            HelpCaption = docProperties.getText("helpcaption")
                            HelpMessage = docProperties.getText("helptext")
                            SQL = "update ccfields set caption=" & db.encodeSQLText(HelpCaption) & ",HelpMessage=" & db.encodeSQLText(HelpMessage) & " where id=" & RecordID
                            Call db.executeSql(SQL)
                            cache.invalidateAll()
                            metaData.clear()
                        End If
                    End If
            End Select
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '========================================================================
        ' ----- Starts an HTML page (for an admin page -- not a public page)
        '========================================================================
        '
        Public Function admin_GetPageStart(Optional ByVal Title As String = "", Optional ByVal PageMargin As Integer = 0) As String
            admin_GetPageStart = admin_GetPageStart2(Title, PageMargin)
        End Function
        '
        '========================================================================
        ' ----- Starts an HTML page (for an admin page -- not a public page)
        '========================================================================
        '
        Public Function admin_GetPageStart2(Optional ByVal Title As String = "", Optional ByVal PageMargin As Integer = 0) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetPageStartAdmin")
            '
            'If Not (true) Then Exit Function
            '
            If Title <> "" Then
                Call main_AddPagetitle(Title)
            End If
            If main_MetaContent_Title = "" Then
                Call main_AddPagetitle("Admin-" & main_ServerDomain)
            End If
            main_MetaContent_NoFollow = True
            '
            ' main_SetMetaContent - this is done by the 'content' contributer for the page
            '
            Call main_SetMetaContent(0, 0)
            '
            admin_GetPageStart2 = "" _
                & main_DocTypeAdmin _
                & vbCrLf & "<html>" _
                & vbCrLf & "<head>" _
                & main_GetHTMLInternalHead(True) _
                & vbCrLf & "</head>" _
                & vbCrLf & "<body class=""ccBodyAdmin ccCon"">"
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetPageStartAdmin")
        End Function

        '
        '========================================================================
        ' ----- Ends an HTML page
        '========================================================================
        '
        Public Function pagemanager_GetPageEnd() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetPageEnd")
            '
            'If Not (true) Then Exit Function
            '
            pagemanager_GetPageEnd = "" _
                & cr & "</body>" _
                & vbCrLf & "</html>"
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetPageEnd")
        End Function

        '
        '========================================================================
        ' ----- Add a new DHTML menu entry
        '========================================================================
        '
        Public Sub menu_AddEntry(ByVal Name As String, Optional ByVal ParentName As String = "", Optional ByVal ImageLink As String = "", Optional ByVal ImageOverLink As String = "", Optional ByVal Link As String = "", Optional ByVal Caption As String = "", Optional ByVal StyleSheet As String = "", Optional ByVal StyleSheetHover As String = "", Optional ByVal NewWindow As Boolean = False)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("AddMenuEntry")
            '
            'If Not (true) Then Exit Sub
            Dim MethodName As String
            Dim Image As String
            Dim ImageOver As String
            '
            MethodName = "AddMenu()"
            '
            Image = EncodeText(ImageLink)
            If Image <> "" Then
                ImageOver = EncodeText(ImageOverLink)
                If Image = ImageOver Then
                    ImageOver = ""
                End If
            End If
            Call menuFlyout.AddEntry(EncodeText(Name), ParentName, Image, ImageOver, Link, Caption, , NewWindow)
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '========================================================================
        ' ----- main_Get all the menu close scripts
        '
        '   call this at the end of the page
        '========================================================================
        '
        Public Function menu_GetClose() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00214")
            '
            'If Not (true) Then Exit Function
            Dim MethodName As String
            Dim MenuFlyoutIcon As String
            '
            MethodName = "main_GetMenuClose()"
            '
            If Not (menuFlyout Is Nothing) Then
                menu_MenuSystemCloseCount = menu_MenuSystemCloseCount + 1
                menu_GetClose = menu_GetClose & menuFlyout.GetMenuClose()
                MenuFlyoutIcon = siteProperties.getText("MenuFlyoutIcon", "&#187;")
                If MenuFlyoutIcon <> "&#187;" Then
                    menu_GetClose = vbReplace(menu_GetClose, "&#187;</a>", MenuFlyoutIcon & "</a>")
                End If
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '
        '
        Public Property web_RefreshQueryString() As String
            Get
                web_RefreshQueryString = _RefreshQueryString
            End Get
            Set(ByVal value As String)
                _RefreshQueryString = value
            End Set
        End Property
        '
        '========================================================================
        ' -----
        '========================================================================
        '
        Public Function properties_user_getText(ByVal PropertyName As String, Optional ByVal DefaultValue As String = "", Optional ByVal TargetMemberID As Integer = SystemMemberID) As String
            Dim returnProperty As String = DefaultValue
            Try
                If TargetMemberID = SystemMemberID Then
                    returnProperty = userProperty.getText(PropertyName, DefaultValue, user.id)
                Else
                    returnProperty = userProperty.getText(PropertyName, DefaultValue, TargetMemberID)
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return returnProperty
        End Function
        '
        Public Function properties_user_getInteger(ByVal PropertyName As String, Optional ByVal DefaultValue As Integer = 0, Optional ByVal TargetMemberID As Integer = SystemMemberID) As Integer
            Return EncodeInteger(properties_user_getText(PropertyName, DefaultValue.ToString, TargetMemberID))
        End Function
        ''
        ''========================================================================
        '' -----
        ''========================================================================
        ''
        'Public Sub userProperty_SetProperty(ByVal PropertyName As String, ByVal Value As String, Optional ByVal TargetMemberID As Integer = SystemMemberID)
        '    Try
        '        If TargetMemberID = SystemMemberID Then
        '            Call userProperty.setProperty(PropertyName, Value, user.userId)
        '        Else
        '            Call userProperty.setProperty(PropertyName, Value, TargetMemberID)
        '        End If
        '    Catch ex As Exception
        '        handleExceptionAndRethrow(ex)
        '    End Try
        'End Sub
        ''
        'public Sub userProperty_SetProperty(ByVal PropertyName As String, ByVal Value As Integer, Optional ByVal TargetMemberID As Integer = SystemMemberID)
        '    userProperty_SetProperty(PropertyName, Value.ToString, TargetMemberID)
        'End Sub
        ''
        ''========================================================================
        '' -----
        ''========================================================================
        ''
        'Public Sub properties_SetVisitProperty(ByVal PropertyName As String, ByVal Value As String, Optional ByVal TargetVisitId As Integer = 0)
        '    Try
        '        If TargetVisitId = 0 Then
        '            Call visitProperty.setProperty(PropertyName, Value, main_VisitId)
        '        Else
        '            Call visitProperty.setProperty(PropertyName, Value, TargetVisitId)
        '        End If
        '    Catch ex As Exception
        '        handleExceptionAndRethrow(ex)
        '    End Try
        'End Sub
        ''
        ''========================================================================
        '' -----
        ''========================================================================
        ''
        'Public Function vistorProperty_getText(ByVal PropertyName As String, Optional ByVal DefaultValue As String = "", Optional ByVal TargetVisitorid As Integer = 0) As String
        '    Dim returnProperty As String = DefaultValue
        '    Try
        '        If TargetVisitorid = 0 Then
        '            returnProperty = visitorProperty.getText(PropertyName, DefaultValue, main_VisitorID)
        '        Else
        '            returnProperty = visitorProperty.getText(PropertyName, DefaultValue, TargetVisitorid)
        '        End If
        '    Catch ex As Exception
        '        handleExceptionAndRethrow(ex)
        '    End Try
        '    Return returnProperty
        'End Function
        ''
        ''========================================================================
        '' -----
        ''========================================================================
        ''
        'Public Sub visitorProperty_SetProperty(ByVal PropertyName As String, ByVal Value As String, Optional ByVal TargetVisitorid As Integer = 0)
        '    Try
        '        If TargetVisitorid = 0 Then
        '            Call visitorProperty.setProperty(PropertyName, Value, main_VisitorID)
        '        Else
        '            Call visitorProperty.setProperty(PropertyName, Value, TargetVisitorid)
        '        End If
        '    Catch ex As Exception
        '        handleExceptionAndRethrow(ex)
        '    End Try
        'End Sub
        '
        '==========================================================================
        '   Add on to the common error message
        '==========================================================================
        '
        Public Sub error_AddUserError(ByVal Message As String)
            '
            If (InStr(1, main_iUserError, Message, vbTextCompare) = 0) Then
                main_iUserError = main_iUserError & cr & "<li class=""ccError"">" & EncodeText(Message) & "</LI>"
            End If
            '
        End Sub
        '
        '==========================================================================
        '   main_Get The user error messages
        '       If there are none, return ""
        '==========================================================================
        '
        Public Function error_GetUserError() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00224")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            '
            MethodName = "main_GetUserError"
            '
            error_GetUserError = EncodeText(main_iUserError)
            If error_GetUserError <> "" Then
                error_GetUserError = "<ul class=""ccError"">" & kmaIndent(error_GetUserError) & cr & "</ul>"
                error_GetUserError = UserErrorHeadline & "" & error_GetUserError
                main_iUserError = ""
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '==========================================================================
        '   main_IsUserError
        '       Returns true if there is a user error
        '==========================================================================
        '
        Public Function error_IsUserError() As Boolean
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00225")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            '
            MethodName = "main_IsUserError"
            '
            error_IsUserError = (main_iUserError <> "")
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function

        '
        '==========================================================================
        '   Copy the records from one CS to another
        '==========================================================================
        '
        Public Sub db_cs_CopyRecord(ByVal CSSource As Object, ByVal CSDestination As Object)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00229")
            '
            'If Not (true) Then Exit Sub
            '
            Dim MethodName As String
            '
            MethodName = "main_CopyCSRecord"
            '
            Call db.db_CopyCSRecord(EncodeInteger(CSSource), EncodeInteger(CSDestination))
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '========================================================================
        '
        '========================================================================
        '
        Public Function db_GetContentProperty(ByVal ContentName As String, ByVal PropertyName As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetContentProperty")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            Dim Contentdefinition As coreMetaDataClass.CDefClass
            '
            MethodName = "main_GetContentProperty"
            '
            Contentdefinition = metaData.getCdef(EncodeText(ContentName))
            Select Case vbUCase(EncodeText(PropertyName))
                Case "CONTENTCONTROLCRITERIA"
                    db_GetContentProperty = Contentdefinition.ContentControlCriteria
                Case "ACTIVEONLY"
                    db_GetContentProperty = Contentdefinition.ActiveOnly.ToString
                Case "ADMINONLY"
                    db_GetContentProperty = Contentdefinition.AdminOnly.ToString
                Case "ALIASID"
                    db_GetContentProperty = Contentdefinition.AliasID
                Case "ALIASNAME"
                    db_GetContentProperty = Contentdefinition.AliasName
                Case "ALLOWADD"
                    db_GetContentProperty = Contentdefinition.AllowAdd.ToString
                Case "ALLOWDELETE"
                    db_GetContentProperty = Contentdefinition.AllowDelete.ToString
                'Case "CHILDIDLIST"
                '    main_GetContentProperty = Contentdefinition.ChildIDList
                Case "DATASOURCEID"
                    db_GetContentProperty = Contentdefinition.dataSourceId.ToString
                Case "DEFAULTSORTMETHOD"
                    db_GetContentProperty = Contentdefinition.DefaultSortMethod
                Case "DEVELOPERONLY"
                    db_GetContentProperty = Contentdefinition.DeveloperOnly.ToString
                Case "FIELDCOUNT"
                    db_GetContentProperty = Contentdefinition.fields.Count.ToString
                'Case "FIELDPOINTER"
                '    main_GetContentProperty = Contentdefinition.FieldPointer
                Case "ID"
                    db_GetContentProperty = Contentdefinition.Id.ToString
                Case "IGNORECONTENTCONTROL"
                    db_GetContentProperty = Contentdefinition.IgnoreContentControl.ToString
                Case "NAME"
                    db_GetContentProperty = Contentdefinition.Name
                Case "PARENTID"
                    db_GetContentProperty = Contentdefinition.parentID.ToString
                'Case "SINGLERECORD"
                '    main_GetContentProperty = Contentdefinition.SingleRecord
                Case "CONTENTTABLENAME"
                    db_GetContentProperty = Contentdefinition.ContentTableName
                Case "CONTENTDATASOURCENAME"
                    db_GetContentProperty = Contentdefinition.ContentDataSourceName
                Case "AUTHORINGTABLENAME"
                    db_GetContentProperty = Contentdefinition.AuthoringTableName
                Case "AUTHORINGDATASOURCENAME"
                    db_GetContentProperty = Contentdefinition.AuthoringDataSourceName
                Case "WHERECLAUSE"
                    db_GetContentProperty = Contentdefinition.WhereClause
                Case "ALLOWWORKFLOWAUTHORING"
                    db_GetContentProperty = Contentdefinition.AllowWorkflowAuthoring.ToString
                Case "DROPDOWNFIELDLIST"
                    db_GetContentProperty = Contentdefinition.DropDownFieldList
                Case "SELECTFIELDLIST"
                    db_GetContentProperty = Contentdefinition.SelectCommaList
                Case Else
                    Call handleLegacyError14(MethodName, "Content Property [" & EncodeText(PropertyName) & "] was not found in content [" & EncodeText(ContentName) & "]")
            End Select
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Public Function db_GetContentFieldProperty(ByVal ContentName As String, ByVal FieldName As String, ByVal PropertyName As String) As Object
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00230")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            Dim Contentdefinition As coreMetaDataClass.CDefClass
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim UcaseFieldName As String
            '
            MethodName = "main_GetContentFieldProperty"
            '
            db_GetContentFieldProperty = ""
            If True Then
                UcaseFieldName = vbUCase(EncodeText(FieldName))
                Contentdefinition = metaData.getCdef(EncodeText(ContentName))
                If (UcaseFieldName = "") Or (Contentdefinition.fields.Count < 1) Then
                    Call handleLegacyError14(MethodName, "Content Name [" & EncodeText(ContentName) & "] or FieldName [" & EncodeText(FieldName) & "] was not valid")
                Else
                    For Each keyValuePair As KeyValuePair(Of String, coreMetaDataClass.CDefFieldClass) In Contentdefinition.fields
                        Dim field As coreMetaDataClass.CDefFieldClass = keyValuePair.Value
                        With field
                            If UcaseFieldName = vbUCase(.nameLc) Then
                                Select Case vbUCase(EncodeText(PropertyName))
                                    Case "FIELDTYPE", "TYPE"
                                        db_GetContentFieldProperty = .fieldTypeId
                                    Case "HTMLCONTENT"
                                        db_GetContentFieldProperty = .htmlContent
                                    Case "ADMINONLY"
                                        db_GetContentFieldProperty = .adminOnly
                                    Case "AUTHORABLE"
                                        db_GetContentFieldProperty = .authorable
                                    Case "CAPTION"
                                        db_GetContentFieldProperty = .caption
                                    Case "REQUIRED"
                                        db_GetContentFieldProperty = .Required
                                    Case "UNIQUENAME"
                                        db_GetContentFieldProperty = .UniqueName
                                    Case "UNIQUE"
                                        '
                                        ' fix for the uniquename screwup - it is not unique name, it is unique value
                                        '
                                        db_GetContentFieldProperty = .UniqueName
                                    Case "DEFAULT"
                                        db_GetContentFieldProperty = EncodeText(.defaultValue)
                                    Case "MEMBERSELECTGROUPID"
                                        db_GetContentFieldProperty = EncodeText(.MemberSelectGroupID)
                                    Case Else
                                        Call handleLegacyError14(MethodName, "Content Property [" & EncodeText(PropertyName) & "] was not found in content [" & EncodeText(ContentName) & "]")
                                End Select
                                Exit For
                            End If
                        End With
                    Next
                End If
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        ' main_Get a boolean from request
        '   if empty, returns null
        '   if RequestBlock true, tries only querystring
        '   if "ON", "YES", "TRUE" or non-0 number returns true, otherwise false
        '========================================================================
        '
        Public Function web_ReadStreamBoolean(ByVal Key As String) As Boolean
            Dim returnTrue As Boolean = False
            Try
                Dim ExpressionString As String = web_ReadStreamText(Key)
                If Not IsNull(ExpressionString) Then
                    If ExpressionString <> "" Then
                        If vbIsNumeric(ExpressionString) Then
                            If ExpressionString <> "0" Then
                                returnTrue = True
                            Else
                                returnTrue = False
                            End If
                        ElseIf vbUCase(ExpressionString) = "ON" Then
                            returnTrue = True
                        ElseIf vbUCase(ExpressionString) = "YES" Then
                            returnTrue = True
                        ElseIf vbUCase(ExpressionString) = "TRUE" Then
                            returnTrue = True
                        Else
                            returnTrue = False
                        End If
                    End If
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return returnTrue
        End Function
        '
        '========================================================================
        ' main_Get a Date from request
        '   if empty, returns null
        '   if not a date, returns null
        '   if RequestBlock true, tries only querystring
        '========================================================================
        '
        Public Function web_ReadStreamDate(ByVal Key As String) As Date
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00233")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            Dim testDate As String
            '
            MethodName = "main_ReadStreamDate"
            '
            testDate = web_ReadStreamText(Key)
            If Not IsNull(testDate) Then
                If Not IsDate(testDate) Then
                    web_ReadStreamDate = Nothing
                Else
                    web_ReadStreamDate = CDate(testDate)
                End If
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        ' main_Get a number from request
        '   if empty, returns null
        '   if not a value, returns null
        '   if RequestBlock true, tries only querystring
        '========================================================================
        '
        Public Function web_ReadStreamNumber(ByVal Key As String) As Double
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00234")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            Dim testResults As String
            '
            MethodName = "main_ReadStreamNumber"
            '
            testResults = web_ReadStreamText(Key)
            If Not IsNull(web_ReadStreamNumber) Then
                If vbIsNumeric(testResults) Then
                    web_ReadStreamNumber = CDbl(testResults)
                Else
                    web_ReadStreamNumber = 0
                End If
            End If
            '
            testPoint("main_ReadStreamNumber( " & EncodeText(Key) & " )  = " & web_ReadStreamNumber)
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '========================================================================
        ' main_Get a Text string from request
        '   if empty, returns null
        '   if RequestBlock true, tries only querystring
        '========================================================================
        '
        Public Function web_ReadStreamText(ByVal Key As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00235")
            '
            'If Not (true) Then Exit Function
            '
            web_ReadStreamText = docProperties.getText(Key)
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_ReadStreamText")
            '
        End Function
        '
        ' ----- 2.1 compatibility
        '
        Public Function db_GetContentTablename(ByVal ContentName As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetContentTablename")
            '
            'If Not (true) Then Exit Function
            '
            db_GetContentTablename = EncodeText(db_GetContentProperty(EncodeText(ContentName), "ContentTableName"))
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetContentTablename")
        End Function

        '
        '========================================================================
        ' Opens a Content Definition into a ContentSEt
        '   Returns and integer that points into the ContentSet array
        '   If there was a problem, it returns -1
        '
        '   If authoring mode, as group of records are returned.
        '       The first is the current edit record
        '       The rest are the archive records.
        '========================================================================
        '
        Public Function db_csOpenRecord(ByVal ContentName As String, ByVal RecordID As Integer, Optional ByVal WorkflowAuthoringMode As Boolean = False, Optional ByVal WorkflowEditingMode As Boolean = False, Optional ByVal SelectFieldList As String = "") As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("OpenCSContentRecord_Internal")
            '
            'If Not (true) Then Exit Function
            '
            db_csOpenRecord = db.csOpen(ContentName, "(ID=" & db.encodeSQLNumber(RecordID) & ")", , False, user.id, WorkflowAuthoringMode, WorkflowEditingMode, SelectFieldList, 1)
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_OpenCSContentRecord_Internal")
        End Function
        '
        '========================================================================
        ' Opens a Content Definition into a ContentSEt
        '   Returns and integer that points into the ContentSet array
        '   If there was a problem, it returns -1
        '
        '   If authoring mode, as group of records are returned.
        '       The first is the current edit record
        '       The rest are the archive records.
        '========================================================================
        '
        Public Function db_csOpen(ByVal ContentName As String, ByVal RecordID As Integer, Optional ByVal WorkflowAuthoringMode As Boolean = False, Optional ByVal WorkflowEditingMode As Boolean = False, Optional ByVal SelectFieldList As String = "") As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("OpenCSContentRecord")
            '
            'If Not (true) Then Exit Function
            '
            db_csOpen = db.csOpen(EncodeText(ContentName), "(ID=" & db.encodeSQLNumber(RecordID) & ")", , False, user.id, WorkflowAuthoringMode, WorkflowEditingMode, SelectFieldList, 1)
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_OpenCSContentRecord")
        End Function
        '
        '========================================================================
        ' main_IsWorkflowRendering()
        '   True if the current visitor is a content manager in workflow rendering mode
        '========================================================================
        '
        Public Function pagemanager_IsWorkflowRendering() As Boolean
            Dim returnIs As Boolean = False
            Try
                If user.isAuthenticatedContentManager() Then
                    pagemanager_IsWorkflowRendering = visitProperty.getBoolean("AllowWorkflowRendering")
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return returnIs
        End Function
        '
        '========================================================================
        '   main_IsWithinContent( ChildContentID, ParentContentID )
        '
        '       Returns true if ChildContentID is in ParentContentID
        '========================================================================
        '
        Public Function db_IsWithinContent(ByVal ChildContentID As Integer, ByVal ParentContentID As Integer) As Boolean
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("IsWithinContent")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            '
            MethodName = "IsWithinContent"
            '
            db_IsWithinContent = metaData.isWithinContent(EncodeInteger(ChildContentID), EncodeInteger(ParentContentID))
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '
        '
        Public Sub db_IncrementContentField(ByVal ContentName As String, ByVal RecordID As Integer, ByVal FieldName As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00252")
            '
            'If Not (true) Then Exit Sub
            '
            Dim MethodName As String
            Dim iContentName As String
            Dim iRecordID As Integer
            Dim iFieldName As String
            '
            iContentName = EncodeText(ContentName)
            iRecordID = EncodeInteger(RecordID)
            iFieldName = EncodeText(FieldName)
            '
            MethodName = "main_IncrementContentField( " & iContentName & "," & EncodeText(iRecordID) & "," & iFieldName & " )"
            '
            Call db_IncrementContentField_Internal(iContentName, iRecordID, iFieldName)
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '
        '
        Public Sub db_IncrementContentField_Internal(ByVal ContentName As String, ByVal RecordID As Integer, ByVal FieldName As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00253")
            '
            'If Not (true) Then Exit Sub
            '
            Dim SQL As String
            Dim CDef As coreMetaDataClass.CDefClass
            '
            CDef = metaData.getCdef(ContentName)
            Call main_IncrementTableField(CDef.ContentTableName, RecordID, FieldName, CDef.ContentDataSourceName)
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_IncrementContentField_Internal")
        End Sub
        '
        '
        '
        Public Function db_EncodeSQLText(ByVal SourceText As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00254")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            Dim iSourceText As String
            '
            iSourceText = EncodeText(SourceText)
            '
            MethodName = "main_EncodeSQLText( " & iSourceText & " )"
            '
            db_EncodeSQLText = db.encodeSQLText(iSourceText)
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function


        '
        Public Property html_FormInputWidthDefault() As Integer
            Get
                html_FormInputWidthDefault = main_iFormInputWidthDefault
            End Get
            Set(ByVal value As Integer)
                main_iFormInputWidthDefault = value
            End Set
        End Property
        '
        '========================================================================
        '   main_GetCSField - Fast
        '       CSv is not checked
        '       All arguments typed
        '========================================================================
        '
        Public Function db_cs_GetField(ByVal CSPointer As Integer, ByVal FieldName As String) As Object
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetCSField_Internal")
            '
            'If Not (true) Then Exit Function
            '
            db_cs_GetField = db.db_GetCSField(CSPointer, FieldName)
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_GetCSField_Internal")
            '
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Public Sub pageManager_GetAuthoringStatus(ByVal ContentName As String, ByVal RecordID As Integer, ByRef IsSubmitted As Boolean, ByRef IsApproved As Boolean, ByRef SubmittedName As String, ByRef ApprovedName As String, ByRef IsInserted As Boolean, ByRef IsDeleted As Boolean, ByRef IsModified As Boolean, ByRef ModifiedName As String, ByRef ModifiedDate As Date, ByRef SubmittedDate As Date, ByRef ApprovedDate As Date)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("main_GetAuthoringStatus")
            '
            'If Not (true) Then Exit Sub
            '
            Dim MethodName As String
            '
            MethodName = "main_GetAuthoringStatus"
            '
            Call workflow.getAuthoringStatus(ContentName, RecordID, IsSubmitted, IsApproved, SubmittedName, ApprovedName, IsInserted, IsDeleted, IsModified, ModifiedName, ModifiedDate, SubmittedDate, ApprovedDate)
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '========================================================================
        '   main_Get athoring permissions to determine what buttons we display, and what authoring actions we can take
        '
        '       RecordID = 0 means it is an unsaved inserted record, or this pertains to the content, not a record
        '
        '       AllowCancel - OK to exit without any action
        '       AllowInsert - OK to create new records, display ADD button
        '       AllowSave - OK to save the record, display the Save and OK Buttons
        '       etc.
        '========================================================================
        '
        Public Sub pageManager_GetAuthoringPermissions(ByVal ContentName As String, ByVal RecordID As Integer, ByRef AllowInsert As Boolean, ByRef AllowCancel As Boolean, ByRef allowSave As Boolean, ByRef AllowDelete As Boolean, ByRef AllowPublish As Boolean, ByRef AllowAbort As Boolean, ByRef AllowSubmit As Boolean, ByRef AllowApprove As Boolean, ByRef readOnlyField As Boolean)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00270")
            '
            'If Not (true) Then Exit Sub
            '
            Dim MethodName As String
            '
            Dim IsEditing As Boolean
            Dim IsSubmitted As Boolean
            Dim IsApproved As Boolean
            Dim IsInserted As Boolean
            Dim IsDeleted As Boolean
            Dim IsModified As Boolean
            Dim EditingName As String
            Dim EditingExpires As Date
            Dim SubmittedName As String
            Dim ApprovedName As String
            Dim ModifiedName As String
            Dim CDef As coreMetaDataClass.CDefClass
            Dim ModifiedDate As Date
            Dim SubmittedDate As Date
            Dim ApprovedDate As Date
            '
            MethodName = "main_GetAuthoringButtons"
            '
            ' main_Get Authoring Workflow Status
            '
            If RecordID <> 0 Then
                Call workflow.getAuthoringStatus(ContentName, RecordID, IsSubmitted, IsApproved, SubmittedName, ApprovedName, IsInserted, IsDeleted, IsModified, ModifiedName, ModifiedDate, SubmittedDate, ApprovedDate)
            End If
            '
            ' main_Get Content Definition
            '
            CDef = metaData.getCdef(ContentName)
            '
            ' Set Buttons based on Status
            '
            If IsEditing Then
                '
                ' Edit Locked
                '
                AllowCancel = True
                readOnlyField = True
            ElseIf (Not siteProperties.allowWorkflowAuthoring) Or (Not CDef.AllowWorkflowAuthoring) Then
                '
                ' No Workflow Authoring
                '
                AllowCancel = True
                allowSave = True
                If (CDef.AllowDelete) And (Not IsDeleted) And (RecordID <> 0) Then
                    AllowDelete = True
                End If
                If (CDef.AllowAdd) And (Not IsInserted) Then
                    AllowInsert = True
                End If
            ElseIf user.isAuthenticatedAdmin() Then
                '
                ' Workflow, Admin
                '
                If IsApproved Then
                    '
                    ' Workflow, Admin, Approved
                    '
                    AllowCancel = True
                    AllowPublish = True
                    AllowAbort = True
                    readOnlyField = True
                    AllowInsert = True
                ElseIf IsSubmitted Then
                    '
                    ' Workflow, Admin, Submitted (not approved)
                    '
                    AllowCancel = True
                    If Not IsDeleted Then
                        allowSave = True
                    End If
                    AllowPublish = True
                    AllowAbort = True
                    AllowApprove = True
                    If IsDeleted Then
                        readOnlyField = True
                    End If
                    AllowInsert = True
                ElseIf IsInserted Then
                    '
                    ' Workflow, Admin, Inserted (not submitted, not approved)
                    '
                    AllowCancel = True
                    allowSave = True
                    AllowPublish = True
                    AllowAbort = True
                    AllowSubmit = True
                    AllowApprove = True
                    AllowInsert = True
                ElseIf IsDeleted Then
                    '
                    ' Workflow, Admin, Deleted record (not submitted, not approved)
                    '
                    AllowCancel = True
                    AllowPublish = True
                    AllowAbort = True
                    AllowSubmit = True
                    AllowApprove = True
                    readOnlyField = True
                    AllowInsert = True
                ElseIf IsModified Then
                    '
                    ' Workflow, Admin, Modified (not submitted, not approved, not inserted, not deleted)
                    '
                    AllowCancel = True
                    allowSave = True
                    AllowPublish = True
                    AllowAbort = True
                    AllowSubmit = True
                    AllowApprove = True
                    AllowDelete = True
                    AllowInsert = True
                Else
                    '
                    ' Workflow, Admin, Not Modified (not submitted, not approved, not inserted, not deleted)
                    '
                    AllowCancel = True
                    allowSave = True
                    AllowPublish = True
                    AllowApprove = True
                    AllowSubmit = True
                    AllowDelete = True
                    AllowInsert = True
                End If
            Else
                '
                ' Workflow, Content Manager
                '
                If IsApproved Then
                    '
                    ' Workflow, Content Manager, Approved
                    '
                    AllowCancel = True
                    readOnlyField = True
                    AllowInsert = True
                ElseIf IsSubmitted Then
                    '
                    ' Workflow, Content Manager, Submitted (not approved)
                    '
                    AllowCancel = True
                    readOnlyField = True
                    AllowInsert = True
                ElseIf IsInserted Then
                    '
                    ' Workflow, Content Manager, Inserted (not submitted, not approved)
                    '
                    AllowCancel = True
                    allowSave = True
                    AllowAbort = True
                    AllowSubmit = True
                    AllowInsert = True
                ElseIf IsDeleted Then
                    '
                    ' Workflow, Content Manager, Deleted record (not submitted, not approved)
                    '
                    AllowCancel = True
                    AllowAbort = True
                    AllowSubmit = True
                    readOnlyField = True
                    AllowInsert = True
                ElseIf IsModified Then
                    '
                    ' Workflow, Content Manager, Modified (not submitted, not approved, not inserted, not deleted)
                    '
                    AllowCancel = True
                    allowSave = True
                    AllowDelete = True
                    AllowAbort = True
                    AllowSubmit = True
                    AllowInsert = True
                Else
                    '
                    ' Workflow, Content Manager, Not Modified (not submitted, not approved, not inserted, not deleted)
                    '
                    AllowCancel = True
                    allowSave = True
                    AllowDelete = True
                    AllowAbort = True
                    AllowSubmit = True
                    AllowInsert = True
                End If
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '
        '
        Public Sub pageManager_SendPublishSubmitNotice(ByVal ContentName As String, ByVal RecordID As Integer, ByVal RecordName As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00272")
            '
            'If Not (true) Then Exit Sub
            '
            Dim MethodName As String
            Dim CDef As coreMetaDataClass.CDefClass
            Dim Copy As String
            Dim Link As String
            Dim FromAddress As String
            '
            MethodName = "main_SendPublishSubmitNotice"
            '
            FromAddress = siteProperties.getText("EmailPublishSubmitFrom", siteProperties.emailAdmin)
            CDef = metaData.getCdef(ContentName)
            Link = siteProperties.adminURL & "?af=" & AdminFormPublishing
            Copy = Msg_AuthoringSubmittedNotification
            Copy = vbReplace(Copy, "<DOMAINNAME>", "<a href=""" & html_EncodeHTML(Link) & """>" & main_ServerDomain & "</a>")
            Copy = vbReplace(Copy, "<RECORDNAME>", RecordName)
            Copy = vbReplace(Copy, "<CONTENTNAME>", ContentName)
            Copy = vbReplace(Copy, "<RECORDID>", RecordID.ToString)
            Copy = vbReplace(Copy, "<SUBMITTEDDATE>", main_PageStartTime.ToString)
            Copy = vbReplace(Copy, "<SUBMITTEDNAME>", user.name)
            '
            Call main_SendGroupEmail(siteProperties.getText("WorkflowEditorGroup", "Content Editors"), FromAddress, "Authoring Submitted Notification", Copy, False, True)
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '
        '
        Public Function db_GetTableID(ByVal TableName As String) As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00273")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            Dim CS As Integer
            '
            MethodName = "main_GetTableID"
            '
            db_GetTableID = -1
            CS = db.cs_openSql("Select ID from ccTables where name=" & db.encodeSQLText(TableName), , 1)
            If db.cs_Ok(CS) Then
                db_GetTableID = db.cs_getInteger(CS, "ID")
            End If
            Call db.cs_Close(CS)
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        ' ================================================================================================
        '   conversion pass 2
        ' ================================================================================================
        '
        '
        '
        '
        Public Function main_GetAuthoringStatusMessage(ByVal IsContentWorkflowAuthoring As Boolean, ByVal RecordEditLocked As Boolean, ByVal main_EditLockName As String, ByVal main_EditLockExpires As Date, ByVal RecordApproved As Boolean, ByVal ApprovedBy As String, ByVal RecordSubmitted As Boolean, ByVal SubmittedBy As String, ByVal RecordDeleted As Boolean, ByVal RecordInserted As Boolean, ByVal RecordModified As Boolean, ByVal ModifiedBy As String) As String
            main_GetAuthoringStatusMessage = ""
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00274")
            '
            'If Not (true) Then Exit Function
            '
            Dim MethodName As String
            Dim Copy As String
            Dim Delimiter As String = ""
            Dim main_EditLockExpiresMinutes As Integer
            '
            MethodName = "main_GetAuthoringStatusMessage"
            '
            main_EditLockExpiresMinutes = CInt((main_EditLockExpires - main_PageStartTime).TotalMinutes)
            If Not siteProperties.allowWorkflowAuthoring Then
                '
                ' ----- site does not support workflow authoring
                '
                If RecordEditLocked Then
                    Copy = vbReplace(Msg_EditLock, "<EDITNAME>", main_EditLockName)
                    Copy = vbReplace(Copy, "<EDITEXPIRES>", main_EditLockExpires.ToString)
                    Copy = vbReplace(Copy, "<EDITEXPIRESMINUTES>", EncodeText(main_EditLockExpiresMinutes))
                    main_GetAuthoringStatusMessage &= Delimiter & Copy
                    Delimiter = "<BR >"
                End If
                main_GetAuthoringStatusMessage &= Delimiter & Msg_WorkflowDisabled
                Delimiter = "<BR >"
            ElseIf Not IsContentWorkflowAuthoring Then
                '
                ' ----- content does not support workflow authoring
                '
                If RecordEditLocked Then
                    Copy = vbReplace(Msg_EditLock, "<EDITNAME>", main_EditLockName)
                    Copy = vbReplace(Copy, "<EDITEXPIRES>", main_EditLockExpires.ToString)
                    Copy = vbReplace(Copy, "<EDITEXPIRESMINUTES>", EncodeText(main_EditLockExpiresMinutes))
                    main_GetAuthoringStatusMessage &= Delimiter & Copy
                    Delimiter = "<BR >"
                End If
                main_GetAuthoringStatusMessage &= Delimiter & Msg_ContentWorkflowDisabled
                Delimiter = "<BR >"
            Else
                '
                ' ----- Workflow Authoring is supported, check deleted, inserted or modified
                '
                If RecordApproved Then
                    '
                    ' Approved
                    '
                    If user.isAuthenticatedAdmin() Then
                        Copy = vbReplace(Msg_AuthoringApprovedAdmin, "<EDITNAME>", ApprovedBy)
                        main_GetAuthoringStatusMessage &= Delimiter & Copy
                        Delimiter = "<BR >"
                    Else
                        Copy = vbReplace(Msg_AuthoringApproved, "<EDITNAME>", ApprovedBy)
                        main_GetAuthoringStatusMessage &= Delimiter & Copy
                        Delimiter = "<BR >"
                    End If
                ElseIf RecordSubmitted Then
                    '
                    ' Submitted
                    '
                    If user.isAuthenticatedAdmin() Then
                        Copy = vbReplace(Msg_AuthoringSubmittedAdmin, "<EDITNAME>", SubmittedBy)
                        main_GetAuthoringStatusMessage &= Delimiter & Copy
                        Delimiter = "<BR >"
                    Else
                        Copy = vbReplace(Msg_AuthoringSubmitted, "<EDITNAME>", SubmittedBy)
                        main_GetAuthoringStatusMessage &= Delimiter & Copy
                        Delimiter = "<BR >"
                    End If
                ElseIf RecordDeleted Then
                    '
                    ' deleted
                    '
                    main_GetAuthoringStatusMessage &= Delimiter & Msg_AuthoringDeleted
                    Delimiter = "<BR >"
                ElseIf RecordInserted Then
                    '
                    ' inserted
                    '
                    main_GetAuthoringStatusMessage &= Delimiter & Msg_AuthoringInserted
                    Delimiter = "<BR >"
                ElseIf RecordModified Then
                    '
                    ' modified, submitted or approved
                    '
                    If user.isAuthenticatedAdmin() Then
                        If RecordEditLocked Then
                            Copy = vbReplace(Msg_EditLock, "<EDITNAME>", main_EditLockName)
                            Copy = vbReplace(Copy, "<EDITEXPIRES>", main_EditLockExpires.ToString)
                            Copy = vbReplace(Copy, "<EDITEXPIRESMINUTES>", EncodeText(main_EditLockExpiresMinutes))
                            main_GetAuthoringStatusMessage &= Delimiter & Copy
                            Delimiter = "<BR >"
                        End If
                        Copy = vbReplace(Msg_AuthoringRecordModifedAdmin, "<EDITNAME>", ModifiedBy)
                        main_GetAuthoringStatusMessage &= Delimiter & Copy
                        'main_GetAuthoringStatusMessage &=  Delimiter & Msg_AuthoringRecordModifedAdmin
                        Delimiter = "<BR >"
                    Else
                        If RecordEditLocked Then
                            Copy = vbReplace(Msg_EditLock, "<EDITNAME>", main_EditLockName)
                            Copy = vbReplace(Copy, "<EDITEXPIRES>", main_EditLockExpires.ToString)
                            Copy = vbReplace(Copy, "<EDITEXPIRESMINUTES>", EncodeText(main_EditLockExpiresMinutes))
                            main_GetAuthoringStatusMessage &= Delimiter & Copy
                            Delimiter = "<BR >"
                        End If
                        Copy = vbReplace(Msg_AuthoringRecordModifed, "<EDITNAME>", ModifiedBy)
                        main_GetAuthoringStatusMessage &= Delimiter & Copy
                        'main_GetAuthoringStatusMessage &=  Delimiter & Msg_AuthoringRecordModifed
                        Delimiter = "<BR >"
                    End If
                End If
                '
                ' ----- Check for authoring status messages if it has been modified
                '
                If main_GetAuthoringStatusMessage = "" Then
                    '
                    ' no changes
                    '
                    If RecordEditLocked Then
                        Copy = vbReplace(Msg_EditLock, "<EDITNAME>", main_EditLockName)
                        Copy = vbReplace(Copy, "<EDITEXPIRES>", main_EditLockExpires.ToString)
                        Copy = vbReplace(Copy, "<EDITEXPIRESMINUTES>", EncodeText(main_EditLockExpiresMinutes))
                        main_GetAuthoringStatusMessage &= Delimiter & Copy
                        Delimiter = "<BR >"
                    End If
                    main_GetAuthoringStatusMessage &= Delimiter & Msg_AuthoringRecordNotModifed
                    Delimiter = "<BR >"
                End If
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '   Checks the username and password
        '
        Public Function main_IsLoginOK(ByVal Username As String, ByVal Password As String, Optional ByVal ErrorMessage As String = "", Optional ByVal ErrorCode As Integer = 0) As Boolean
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00275")
            '
            'If Not (true) Then Exit Function
            '
            main_IsLoginOK = (user.authenticateGetId(Username, Password) <> 0)
            If Not main_IsLoginOK Then
                ErrorMessage = error_GetUserError()
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_IsLoginOK")
            '
        End Function
        '
        '   2.1 compatibility
        '
        Public Function main_GetFormSendPassword() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00278")
            '
            'If Not (true) Then Exit Function
            '
            main_GetFormSendPassword = user.getSendPasswordForm()
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetFormSendPassword")
        End Function
        '
        '
        '
        Public Function main_GetResourceLibrary(Optional ByVal RootFolderName As String = "", Optional ByVal AllowSelectResource As Boolean = False, Optional ByVal SelectResourceEditorName As String = "") As String
            main_GetResourceLibrary = main_GetResourceLibrary2(RootFolderName, AllowSelectResource, SelectResourceEditorName, "", True)
        End Function
        '
        '
        '
        Public Function main_GetResourceLibrary2(ByVal RootFolderName As String, ByVal AllowSelectResource As Boolean, ByVal SelectResourceEditorName As String, ByVal SelectLinkObjectName As String, ByVal AllowGroupAdd As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetResourceLibrary2")
            '
            'If Not (true) Then Exit Function
            '
            Dim ResourceLibrary As Object
            Dim Option_String As String
            Dim addonId As Integer
            '
            Option_String = "" _
                & "RootFolderName=" & RootFolderName _
                & "&AllowSelectResource=" & AllowSelectResource _
                & "&SelectResourceEditorName=" & SelectResourceEditorName _
                & "&SelectLinkObjectName=" & SelectLinkObjectName _
                & "&AllowGroupAdd=" & AllowGroupAdd _
                & ""
            main_GetResourceLibrary2 = executeAddon_legacy4("{564EF3F5-9673-4212-A692-0942DD51FF1A}", Option_String, addonContextEnum.ContextAdmin)
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            ResourceLibrary = Nothing
            Call handleLegacyError18("main_GetResourceLibrary2")
        End Function
        '
        '========================================================================
        ' Read and save a main_GetFormInputCheckList
        '   see main_GetFormInputCheckList for an explaination of the input
        '========================================================================
        '
        Public Sub main_ProcessCheckList(ByVal TagName As String, ByVal PrimaryContentName As String, ByVal PrimaryRecordID As String, ByVal SecondaryContentName As String, ByVal RulesContentName As String, ByVal RulesPrimaryFieldname As String, ByVal RulesSecondaryFieldName As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("ProcessCheckList")
            '
            'If Not (true) Then Exit Sub
            '
            Dim rulesTablename As String
            Dim SQL As String
            'dim dt as datatable
            Dim currentRules As DataTable
            Dim currentRulesCnt As Integer
            Dim RuleFound As Boolean
            Dim RuleId As Integer
            Dim Ptr As Integer
            Dim TestRecordIDLast As Integer
            Dim TestRecordID As Integer
            Dim dupRuleIdList As String
            Dim GroupCnt As Integer
            Dim GroupPtr As Integer
            Dim CSPointer As Integer
            Dim MethodName As String
            Dim SecondaryRecordID As Integer
            Dim RuleNeeded As Boolean
            Dim CSRule As Integer
            Dim DateExpires As Date
            Dim DateExpiresVariant As Object
            Dim RuleContentChanged As Boolean
            Dim SupportRuleCopy As Boolean
            Dim RuleCopy As String
            '
            MethodName = "ProcessCheckList"
            '
            ' --- create Rule records for all selected
            '
            GroupCnt = doc_getInteger(TagName & ".RowCount")
            If GroupCnt > 0 Then
                '
                ' Test if RuleCopy is supported
                '
                SupportRuleCopy = main_IsContentFieldSupported(RulesContentName, "RuleCopy")
                If SupportRuleCopy Then
                    SupportRuleCopy = SupportRuleCopy And main_IsContentFieldSupported(SecondaryContentName, "AllowRuleCopy")
                    If SupportRuleCopy Then
                        SupportRuleCopy = SupportRuleCopy And main_IsContentFieldSupported(SecondaryContentName, "RuleCopyCaption")
                    End If
                End If
                '
                ' Go through each checkbox and check for a rule
                '
                '
                ' try
                '
                currentRulesCnt = 0
                dupRuleIdList = ""
                rulesTablename = db_GetContentTablename(RulesContentName)
                SQL = "select " & RulesSecondaryFieldName & ",id from " & rulesTablename & " where (" & RulesPrimaryFieldname & "=" & PrimaryRecordID & ")and(active<>0) order by " & RulesSecondaryFieldName
                currentRulesCnt = 0
                currentRules = db.executeSql(SQL)
                currentRulesCnt = currentRules.Rows.Count
                For GroupPtr = 0 To GroupCnt - 1
                    '
                    ' ----- Read Response
                    '
                    SecondaryRecordID = docProperties.getInteger(TagName & "." & GroupPtr & ".ID")
                    RuleCopy = docProperties.getText(TagName & "." & GroupPtr & ".RuleCopy")
                    RuleNeeded = main_GetStreamBoolean2(TagName & "." & GroupPtr)
                    '
                    ' ----- Update Record
                    '
                    RuleFound = False
                    RuleId = 0
                    TestRecordIDLast = 0
                    For Ptr = 0 To currentRulesCnt - 1
                        TestRecordID = EncodeInteger(currentRules.Rows(Ptr).Item(0))
                        If TestRecordID = 0 Then
                            '
                            ' skip
                            '
                        ElseIf TestRecordID = SecondaryRecordID Then
                            '
                            ' hit
                            '
                            RuleFound = True
                            RuleId = EncodeInteger(currentRules.Rows(Ptr).Item(1))
                            Exit For
                        ElseIf TestRecordID = TestRecordIDLast Then
                            '
                            ' dup
                            '
                            dupRuleIdList = dupRuleIdList & "," & EncodeInteger(currentRules.Rows(Ptr).Item(1))
                            currentRules.Rows(Ptr).Item(0) = 0
                        End If
                        TestRecordIDLast = TestRecordID
                    Next
                    If SupportRuleCopy And RuleNeeded And (RuleFound) Then
                        '
                        ' Record exists and is needed, update the rule copy
                        '
                        SQL = "update " & rulesTablename & " set rulecopy=" & db.encodeSQLText(RuleCopy) & " where id=" & RuleId
                        Call db.executeSql(SQL)
                    ElseIf RuleNeeded And (Not RuleFound) Then
                        '
                        ' No record exists, and one is needed
                        '
                        CSRule = db.cs_insertRecord(RulesContentName)
                        If db.cs_Ok(CSRule) Then
                            Call db.cs_set(CSRule, "Active", RuleNeeded)
                            Call db.cs_set(CSRule, RulesPrimaryFieldname, PrimaryRecordID)
                            Call db.cs_set(CSRule, RulesSecondaryFieldName, SecondaryRecordID)
                            If SupportRuleCopy Then
                                Call db.cs_set(CSRule, "RuleCopy", RuleCopy)
                            End If
                        End If
                        Call db.cs_Close(CSRule)
                        RuleContentChanged = True
                    ElseIf (Not RuleNeeded) And RuleFound Then
                        '
                        ' Record exists and it is not needed
                        '
                        SQL = "delete from " & rulesTablename & " where id=" & RuleId
                        Call db.executeSql(SQL)
                        RuleContentChanged = True
                    End If
                Next
                '
                ' delete dups
                '
                If dupRuleIdList <> "" Then
                    SQL = "delete from " & rulesTablename & " where id in (" & Mid(dupRuleIdList, 2) & ")"
                    Call db.executeSql(SQL)
                    RuleContentChanged = True
                End If
                '        For GroupPtr = 0 To GroupCnt - 1
                '            '
                '            ' ----- Read Response
                '            '
                '            SecondaryRecordID = main_GetStreamInteger2(TagName & "." & GroupPtr & ".ID")
                '            RuleCopy = main_GetStreamText2(TagName & "." & GroupPtr & ".RuleCopy")
                '            RuleNeeded = main_GetStreamBoolean2(TagName & "." & GroupPtr)
                '            '
                '            ' ----- Update Record
                '            '
                '            CSRule = app.db_csOpen(RulesContentName, "(" & RulesPrimaryFieldname & "=" & PrimaryRecordID & ")and(" & RulesSecondaryFieldName & "=" & SecondaryRecordID & ")", , False)
                '            If SupportRuleCopy And RuleNeeded And (app.csv_IsCSOK(CSRule)) Then
                '                '
                '                ' Record exists and is needed, update the rule copy
                '                '
                '                Call app.csv_SetCS(CSRule, "RuleCopy", RuleCopy)
                '            ElseIf RuleNeeded And (Not app.csv_IsCSOK(CSRule)) Then
                '                '
                '                ' No record exists, and one is needed
                '                '
                '                Call app.db_closeCS(CSRule)
                '                CSRule = app.db_InsertCSRecord(RulesContentName)
                '                If app.csv_IsCSOK(CSRule) Then
                '                    Call app.csv_SetCS(CSRule, "Active", RuleNeeded)
                '                    Call app.csv_SetCS(CSRule, RulesPrimaryFieldname, PrimaryRecordID)
                '                    Call app.csv_SetCS(CSRule, RulesSecondaryFieldName, SecondaryRecordID)
                '                    If SupportRuleCopy Then
                '                        Call app.csv_SetCS(CSRule, "RuleCopy", RuleCopy)
                '                    End If
                '                End If
                '                RuleContentChanged = True
                '            ElseIf (Not RuleNeeded) And app.csv_IsCSOK(CSRule) Then
                '                '
                '                ' Record exists and it is not needed
                '                '
                '                Call main_DeleteCSRecord(CSRule)
                '                RuleContentChanged = True
                '            End If
                '            Call app.db_closeCS(CSRule)
                '        Next
            End If
            If RuleContentChanged Then
                Call cache.invalidateTagCommaList(RulesContentName)
            End If
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '========================================================================
        '   main_GetCS Field, translate all fields to their best text equivalent, and encode for display
        '========================================================================
        '
        Public Function main_GetCSEncodedField(ByVal CSPointer As Integer, ByVal FieldName As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetCSEncodedField")
            '
            Dim ContentName As String
            Dim RecordID As Integer
            '
            'If Not (true) Then Exit Function
            '
            If db.db_IsCSFieldSupported(CSPointer, "id") And db.db_IsCSFieldSupported(CSPointer, "contentcontrolId") Then
                RecordID = db.cs_getInteger(CSPointer, "id")
                ContentName = metaData.getContentNameByID(db.cs_getInteger(CSPointer, "contentcontrolId"))
            End If
            main_GetCSEncodedField = html_encodeContent10(db.db_GetCS(EncodeInteger(CSPointer), EncodeText(FieldName)), user.id, ContentName, RecordID, 0, False, False, True, True, False, True, "", "http://" & webServer.requestDomain, False, 0, "", addonContextEnum.ContextPage, user.isAuthenticated, Nothing, user.isEditingAnything)
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_GetCSEncodedField")
        End Function
        '
        '=============================================================================================
        '   main_GetCS calls
        '=============================================================================================
        '
        '        Public Function db.db_GetCSText(ByVal CSPointer As Integer, ByVal FieldName As String) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetCSText")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            main_GetCSText = db.db_GetCSText(EncodeInteger(CSPointer), EncodeText(FieldName))
        '            'main_GetCSText = encodeText(main_GetCSField_Internal(encodeInteger(CSPointer), encodeText(FieldName)))
        '            '
        '            Exit Function
        'ErrorTrap:
        '            Call handleLegacyError18("main_GetCSText")
        '        End Function
        '
        '=============================================================================================
        '   main_GetCS calls
        '=============================================================================================
        '
        '        Public Function db.db_GetCSFilename(ByVal CSPointer As Integer, ByVal FieldName As String, ByVal OriginalFilename As String, Optional ByVal ContentName As String = "") As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetCSFilename")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            db.db_GetCSFilename = db.db_GetCSFilename(EncodeInteger(CSPointer), EncodeText(FieldName), EncodeText(OriginalFilename), encodeEmptyText(ContentName, ""))
        '            '
        '            Exit Function
        'ErrorTrap:
        '            Call handleLegacyError18("db.db_GetCSFilename")
        '        End Function
        '        '
        '        Public Function db.db_GetCSBoolean(ByVal CSPointer As Integer, ByVal FieldName As String) As Boolean
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetCSBoolean")
        '            '
        '            main_GetCSBoolean = db.db_GetCSBoolean((CSPointer), EncodeText(FieldName))
        '            '
        '            Exit Function
        'ErrorTrap:
        '            Call handleLegacyError18("main_GetCSBoolean")
        '        End Function
        '

        ''
        'Public Function db.db_GetCSNumber(ByVal CSPointer As Integer, ByVal FieldName As String) As Double
        '    db_xxGetCSNumber = db.db_GetCSNumber(EncodeInteger(CSPointer), EncodeText(FieldName))
        'End Function
        ''
        ''
        ''
        'Public Function db.db_GetCSLookup(ByVal CSPointer As Integer, ByVal FieldName As String) As String
        '    db_xxGetCSLookup = db.db_GetCSLookup(EncodeInteger(CSPointer), EncodeText(FieldName))
        'End Function
        '
        '
        '
        Public Function db_GetCSSource(ByVal CSPointer As Integer) As String
            Dim iCS As Integer
            '
            iCS = EncodeInteger(CSPointer)
            If Not db.cs_Ok(iCS) Then
                Call Err.Raise(ignoreInteger, "dll", "ContentSet is not main_CSOK")
            Else
                db_GetCSSource = db.db_GetCSSource(iCS)
            End If
        End Function
        '        '
        '        '========================================================================
        '        '   Aborts any edits for this record
        '        '========================================================================
        '        '
        '        Public Sub workflow.workflow_AbortEdit(ByVal ContentName As String, ByVal RecordID As Integer)
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("AbortEdit")
        '            '
        '            'If Not (true) Then Exit Sub
        '            '
        '            Call db.workflow.workflow_AbortEdit(EncodeText(ContentName), EncodeInteger(RecordID), user.userid)
        '            '
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError18("main_AbortEdit")
        '        End Sub

        '        '
        '        '
        '        '
        '        Public Function db.db_GetCSRow(ByVal CSPointer As Integer) As Object
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetCSRow")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            main_GetCSRow = db.db_GetCSRow(EncodeInteger(CSPointer))
        '            '
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError18("main_GetCSRow")
        '            '
        '        End Function
        ''
        ''
        ''
        'Public Function db.db_GetCSRows(ByVal CSPointer As Integer) As Object
        '    main_GetCSRows = db.db_GetCSRows(EncodeInteger(CSPointer))
        'End Function
        ''
        ''
        ''
        'Public Function main_GetCSRowCount(ByVal CSPointer As Integer) As Integer
        '    main_GetCSRowCount = db.db_GetCSRowCount(EncodeInteger(CSPointer))
        'End Function
        ''
        ''   Leave interface
        ''
        'Public ReadOnly Property main_AllowencodeHTML() As Boolean
        '    Get
        '        Call handleLegacyError18("AllowEncodeHTML is not supported")
        '    End Get
        'End Property
        ''
        ''   Buffered Visit Property
        ''
        'Public ReadOnly Property visitProperty.getboolean("AllowHelpIcon")() As Boolean
        '    Get
        '        If user.isAuthenticated() Then
        '            If Not property_visit_allowHelpIcon_isLoaded Then
        '                property_visit_allowHelpIcon_Local = EncodeBoolean(visitProperty.getBoolean("AllowHelpIcon")
        '                property_visit_allowHelpIcon_isLoaded = True
        '            End If
        '        End If
        '        visitProperty.getboolean("AllowHelpIcon") = property_visit_allowHelpIcon_Local

        '    End Get
        'End Property

        ''
        ''   Buffered Visit Property
        ''
        'Public ReadOnly Property visitProperty_AllowLinkAuthoring() As Boolean
        '    Get
        '        visitProperty_AllowLinkAuthoring = visitProperty.getBoolean("AllowEditing")

        '    End Get
        'End Property
        ''
        ''   Buffered Visit Property
        ''
        'Public ReadOnly Property visitProperty_AllowQuickEditor() As Boolean
        '    Get
        '        If user.isAuthenticated() Then
        '            If Not property_visit_allowQuickEditor_isLoaded Then
        '                property_visit_allowQuickEditor = EncodeBoolean(
        '                property_visit_allowQuickEditor_isLoaded = True
        '            End If
        '            visitProperty_AllowQuickEditor = property_visit_allowQuickEditor
        '        End If
        '        '

        '    End Get
        'End Property
        ''
        ''   Buffered Visit Property
        ''
        'Public ReadOnly Property visitProperty_AllowAdvancedEditor() As Boolean
        '    Get
        '        If user.isAuthenticated() Then
        '            If Not property_visit_allowAdvancedEditor_isLoaded Then
        '                property_visit_allowAdvancedEditor = visitProperty.getBoolean("AllowAdvancedEditor")
        '                property_visit_allowAdvancedEditor_isLoaded = True
        '            End If
        '            visitProperty_AllowAdvancedEditor = property_visit_allowAdvancedEditor
        '        End If

        '    End Get
        'End Property
        ''
        ''   Buffered Visit Property
        ''
        'Public ReadOnly Property visitProperty_AllowPresentationAuthoring() As Boolean
        '    Get
        '        visitProperty_AllowPresentationAuthoring = visitProperty.getBoolean("AllowQuickEditor")

        '    End Get
        'End Property

        ''
        ''   Buffered Visit Property
        ''
        'Public ReadOnly Property visitProperty_AllowWorkflowRendering() As Boolean
        '    Get
        '        If user.isAuthenticated() Then
        '            If Not property_visit_allowWorkflowRendering_isLoaded Then
        '                property_visit_allowWorkflowRendering = EncodeBoolean(
        '                property_visit_allowWorkflowRendering_isLoaded = True
        '            End If
        '            visitProperty_AllowWorkflowRendering = property_visit_allowWorkflowRendering
        '        End If

        '    End Get
        'End Property
        ''
        ''   Buffered Visit Property
        ''
        'Public ReadOnly Property visitProperty.getBoolean("AllowDebugging")() As Boolean
        '    Get
        '        visitProperty.getBoolean("AllowDebugging") = False
        '        If user.isAuthenticated() Then
        '            If Not property_visit_allowDebugging_isLoaded Then
        '                property_visit_allowDebugging_Local = EncodeBoolean(
        '                property_visit_allowDebugging_isLoaded = True
        '            End If
        '            visitProperty.getBoolean("AllowDebugging") = property_visit_allowDebugging_Local
        '        End If

        '    End Get
        'End Property
        '
        Public Function main_GetYesNo(ByVal InputValue As Boolean) As String
            If InputValue Then
                Return "Yes"
            Else
                Return "No"
            End If
        End Function
        '        '
        '        '========================================================================
        '        '   Returns Content Page fields as strings
        '        '========================================================================
        '        '
        '        Public Function main_GetContentPageField(ByVal FieldName As String) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetContentPageField")
        '            '
        '            Call handleLegacyError23("Deprecated Method: main_GetContentPageField")
        '            'dim dt as datatable
        '            Dim returnString As String
        '            Dim rs As DataTable
        '            '
        '            returnString = ""
        '            rs = db.executeSql("select " & EncodeText(FieldName) & " from ccpagecontent where id=" & main_RenderedPageID)
        '            If rs.Rows.Count > 0 Then
        '                returnString = EncodeText(rs.Rows(0).Item(0))
        '            End If
        '            '
        '            main_GetContentPageField = returnString
        '            '    '
        '            '    Dim FieldCount as integer
        '            '    ' converted array to dictionary - Dim FieldPointer As Integer
        '            '    Dim UcaseFieldName As String
        '            '    '
        '            '    UcaseFieldName = vbUCase(encodeText(FieldName))
        '            '    If Not IsEmpty(main_oldCacheRS_FieldValues) Then
        '            '        FieldCount = UBound(main_oldCacheRS_FieldNames)
        '            '        If FieldCount > 0 Then
        '            '            For FieldPointer = 0 To FieldCount - 1
        '            '                If UcaseFieldName = vbUCase(main_oldCacheRS_FieldNames(FieldPointer)) Then
        '            '                    main_GetContentPageField = main_oldCacheRS_FieldValues(FieldPointer)
        '            '                    Exit For
        '            '                    End If
        '            '                Next
        '            '            End If
        '            '        End If
        '            '
        '            Exit Function
        'ErrorTrap:
        '            Call handleLegacyError18("main_GetContentPageField")
        '        End Function
        ''
        ''========================================================================
        ''   Preloads the ContentPage
        ''       If PageContentCS app.csv_IsCSOK, then do nothing
        ''       else,
        ''========================================================================
        ''
        'Public Sub main_PreloadContentPage(ByVal RootPageName As String, Optional ByVal RootContentName As String = "")
        '    Call handleLegacyError23("Deprecated Method: main_GetAutoSite")
        'End Sub
        '
        '========================================================================
        '   2.1 compatibility
        ' ----- main_Get an Authoring Link Graphic
        '========================================================================
        '
        Public Function web_GetAuthoringLink(ByVal Label As String, ByVal SideCaption As String, ByVal Link As String, ByVal NewWindow As Boolean, Optional ByVal ignore0 As Boolean = False, Optional ByVal Ignore1 As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00340")
            '
            'If Not (true) Then Exit Function
            '
            Dim ContentName As String
            Dim MethodName As String
            '
            MethodName = "main_GetAuthoringLink"
            '
            ' Old style non-flyout Authoring Links
            '
            web_GetAuthoringLink = "<div align=""left""><table border=""0"" cellpadding=""1"" cellspacing=""0"" class=""ccAuthoringLink""><tr><td>"
            web_GetAuthoringLink = web_GetAuthoringLink & "<table border=""0"" cellpadding=""1"" cellspacing=""0"" width=""31"" class=""ccAuthoringLink""><tr><td width=""30"" align=""center""><a href=""" & html_EncodeHTML(Link) & """"
            If NewWindow Then
                web_GetAuthoringLink = web_GetAuthoringLink & " target=""_blank"""
            End If
            web_GetAuthoringLink = web_GetAuthoringLink & " class=""ccAuthoringLink""><span class=""ccAuthoringLink"">" & Label & "</span></a>"
            web_GetAuthoringLink = web_GetAuthoringLink & "<br ><img alt=""space"" src=""/cclib/image/spacer.gif"" width=""30"" height=""1""></td>"
            If SideCaption <> "" Then
                web_GetAuthoringLink = web_GetAuthoringLink & "<td align=""center"" bgcolor=""#FFFFFF"" width=""1""><nobr><span class=""ccAdminSmall""><font color=""#000000"">&nbsp;" & SideCaption & "&nbsp;</font></span></nobr></td>"
            End If
            web_GetAuthoringLink = web_GetAuthoringLink & "</tr></table></td></tr></table></div>"
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Function
        '
        '=============================================================================
        ' Returns the connection string for a datasource
        '=============================================================================
        '
        Public Function main_GetConnectionString(ByVal DataSourceName As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00342")
            '
            'If Not (true) Then Exit Function
            '
            main_GetConnectionString = db_GetConnectionString(EncodeText(DataSourceName))
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_GetConnectionString")
        End Function
        '
        '=============================================================================
        ' Returns the connection string for a datasource
        '=============================================================================
        '
        Public Function main_GetCDefAdminColumns(ByVal ContentName As String) As Object
            '
            'If Not (true) Then Exit Function
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_GetCDefAdminColumns")
        End Function
        '
        '=============================================================================
        ' Returns the connection string for a datasource
        '=============================================================================
        '
        Public Sub main_CreateAdminMenu(ByVal ParentName As String, ByVal EntryName As String, ByVal ContentName As String, ByVal LinkPage As String, ByVal SortOrder As String, Optional ByVal AdminOnly As Boolean = False, Optional ByVal DeveloperOnly As Boolean = False, Optional ByVal NewWindow As Boolean = False)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00343")
            '
            'If Not (true) Then Exit Sub
            '
            Call admin_CreateAdminMenu2(ParentName, EntryName, ContentName, LinkPage, SortOrder, AdminOnly, DeveloperOnly, NewWindow)
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_CreateAdminMenu")
        End Sub
        '
        '========================================================================
        ' ----- Starts an HTML form for uploads
        '       Should be closed with main_GetUploadFormEnd
        '========================================================================
        '
        Public Function html_GetUploadFormStart(Optional ByVal ActionQueryString As String = Nothing) As String

            If ActionQueryString Is Nothing Then
                ActionQueryString = _RefreshQueryString
            End If
            On Error GoTo ErrorTrap
            '
            Dim iActionQueryString As String
            '
            iActionQueryString = ModifyQueryString(ActionQueryString, RequestNameRequestBinary, True, True)
            '
            html_GetUploadFormStart = "<form action=""" & web_ServerFormActionURL & "?" & iActionQueryString & """ ENCTYPE=""MULTIPART/FORM-DATA"" METHOD=""POST""  style=""display: inline;"" >"
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetUploadFormStart")
        End Function
        '
        '========================================================================
        ' ----- Closes an HTML form for uploads
        '========================================================================
        '
        Public Function html_GetUploadFormEnd() As String
            html_GetUploadFormEnd = html_GetFormEnd()
        End Function
        '
        '========================================================================
        ' ----- Starts an HTML form for uploads
        '       Should be closed with main_GetUploadFormEnd
        '========================================================================
        '
        Public Function web_ProcessFormInputFile(ByVal TagName As String, Optional ByVal VirtualFilePath As String = "") As String
            web_ProcessFormInputFile = web_ProcessFormInputFile2(TagName, cdnFiles, VirtualFilePath)
        End Function
        '
        '========================================================================
        ' ----- Starts an HTML form for uploads
        '       Should be closed with main_GetUploadFormEnd
        '========================================================================
        '
        Public Function web_ProcessFormInputFile2(ByVal TagName As String, files As coreFileSystemClass, Optional ByVal VirtualFilePath As String = "") As String
            Dim returnString As String = ""
            Try
                Dim Key As String
                Dim iVirtualFilePath As String
                '
                Key = TagName.ToLower()
                If docProperties.docPropertiesDict.ContainsKey(Key) Then
                    With docProperties.docPropertiesDict(TagName.ToLower())
                        If (.IsFile) And (UCase(.Name) = vbUCase(Key)) Then
                            iVirtualFilePath = EncodeText(VirtualFilePath)
                            iVirtualFilePath = vbReplace(iVirtualFilePath, "/", "\")

                            If iVirtualFilePath <> "" Then
                                If Left(iVirtualFilePath, 1) = "\" Then
                                    If Len(iVirtualFilePath) = 1 Then
                                        iVirtualFilePath = ""
                                    Else
                                        iVirtualFilePath = Mid(iVirtualFilePath, 2)
                                    End If
                                End If
                                If Right(iVirtualFilePath, 1) <> "\" Then
                                    iVirtualFilePath = iVirtualFilePath & "\"
                                End If
                                web_ProcessFormInputFile2 = iVirtualFilePath
                            End If
                            If iVirtualFilePath = "" Then
                                web_ProcessFormInputFile2 = "Upload\"
                            End If
                            web_ProcessFormInputFile2 = returnString & encodeFilename(.Value)
                            Call files.deleteFile(web_ProcessFormInputFile2)
                            If .tmpPrivatefile <> "" Then
                                '
                                ' copy tmp private files to the appropriate folder in the destination file system
                                '
                                Call privateFiles.copyFile(.tmpPrivatefile, web_ProcessFormInputFile2, files)
                            Else
                                Call files.SaveFile(web_ProcessFormInputFile2, .FileContent)
                            End If
                        End If
                    End With
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
        End Function
        ''
        ''   2.1 compatibility
        ''
        'Public Function user_IsAuthoring(ByVal ContentName As String) As Boolean
        '    Return user.user_isEditing(ContentName)
        'End Function

        '
        '========================================================================
        '   Browser Detection
        '========================================================================
        '
        Private Sub web_init_decodeBrowserUserAgent(ByVal BrowserUserAgent As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("decodeBrowserUserAgent")
            '
            Const DefaultMobileUserAgents = ""
            '
            Dim iTagName As String
            '
            Dim visitNameFound As Boolean
            Dim BotList As String
            Dim Bots() As String
            Dim Args() As String
            Dim Ptr As Integer
            Dim Cnt As Integer
            Dim Pos As Integer
            Dim Arg As String
            Dim DateExpires As Date
            Dim Filename As String
            '
            Dim PositionStart As Integer
            Dim PositionEnd As Integer
            Dim Agent As String
            Dim AgentParts() As String
            Dim CompatibleAgent As String
            Dim AgentVersion, AgentMinor As String
            Dim RealAgent As String
            Dim Details As String
            Dim DetailsStart As Integer
            Dim DetailsEnd As Integer
            Dim temp As String
            Dim DetailSections() As String
            Dim DetailCount As Integer
            Dim DetailPointer As Integer
            Dim DetailsVersionSection() As String
            Dim temp3() As String
            Dim Detail As String
            Dim DetailTail As String
            Dim UserAgentSubstrings As String
            Dim Subs() As String
            '
            If True Then
                Select Case visitor_forceBrowserMobile
                    Case 1
                        visit_browserIsMobile = True
                    Case 2
                        visit_browserIsMobile = False
                    Case Else
                        If webServer.requestxWapProfile <> "" Then
                            '
                            ' If x_wap, set mobile true
                            '
                            visit_browserIsMobile = True
                        ElseIf vbInstr(1, webServer.requestHttpAccept, "wap", vbTextCompare) <> 0 Then
                            '
                            ' If main_HTTP_Accept, set mobile true
                            '
                            visit_browserIsMobile = True
                        Else
                            '
                            ' If useragent is in the list, set mobile true
                            '
                            UserAgentSubstrings = main_GetMobileBrowserList()
                            If UserAgentSubstrings <> "" Then
                                UserAgentSubstrings = vbReplace(UserAgentSubstrings, vbCrLf, vbLf)
                                Subs = Split(UserAgentSubstrings, vbLf)
                                Cnt = UBound(Subs) + 1
                                If Cnt > 0 Then
                                    For Ptr = 0 To Cnt - 1
                                        If vbInstr(1, BrowserUserAgent, Subs(Ptr), vbTextCompare) <> 0 Then
                                            visit_browserIsMobile = True
                                            Exit For
                                        End If
                                    Next
                                End If
                            End If
                        End If
                End Select
            Else
                visit_browserIsMobile = False
            End If
            '
            '
            '
            If BrowserUserAgent = "" Then
                '
                ' blank browser, Blank-Browser-Bot
                '
                visit_name = "Blank-Browser-Bot"
                visit_isBot = True
                visit_isBadBot = False
            Else
                DetailsStart = vbInstr(1, BrowserUserAgent, "(")
                '
                If DetailsStart = 0 Then
                    '
                    ' no details, either very old, or not IE/NS
                    '
                Else
                    '
                    '"CompatibleAgent (details) DetailTail" format
                    '
                    Details = Mid(BrowserUserAgent, DetailsStart + 1)
                    DetailsEnd = vbInstr(1, Details, ")")
                    If DetailsEnd <> 0 Then
                        If Len(Details) > DetailsEnd Then
                            DetailTail = Trim(Mid(Details, DetailsEnd + 1))
                        End If
                        Details = Mid(Details, 1, DetailsEnd - 1)
                    End If
                    CompatibleAgent = Trim(Mid(BrowserUserAgent, 1, DetailsStart - 1))
                    '
                    ' Netscape puts phrase in the DetailTail
                    '
                    PositionStart = vbInstr(1, DetailTail, "netscape", vbTextCompare)
                    If PositionStart <> 0 Then
                        visit_browserIsNS = True
                        PositionEnd = vbInstr(PositionStart, DetailTail, " ")
                        If PositionEnd = 0 Then
                            Agent = Mid(DetailTail, PositionStart)
                        Else
                            Agent = Mid(DetailTail, PositionStart, PositionEnd)
                        End If
                        AgentParts = Split(Agent, "/")
                        If UBound(AgentParts) > 0 Then
                            visit_browserVersion = Trim(AgentParts(1))
                        End If
                    End If
                    '
                    DetailSections = Split(Details, ";")
                    DetailCount = UBound(DetailSections) + 1
                    For DetailPointer = 0 To DetailCount - 1
                        Detail = Trim(DetailSections(DetailPointer))
                        '
                        If (InStr(1, Detail, "msie", vbTextCompare) >= 0) Then
                            visit_browserIsIE = True
                            DetailsVersionSection = Split(Trim(Detail), " ")
                            If UBound(DetailsVersionSection) > 0 Then
                                visit_browserVersion = Trim(DetailsVersionSection(1))
                            End If
                        ElseIf vbInstr(1, Details, "netscape", vbTextCompare) <> 0 Then
                            '
                            visit_browserIsNS = True
                        End If
                        '
                        If vbInstr(1, Detail, "win", vbTextCompare) <> 0 Then
                            visit_browserIsWindows = True
                        End If
                        '
                        If vbInstr(1, Detail, "mac", vbTextCompare) <> 0 Then
                            visit_browserIsMac = True
                        End If
                        '
                        If vbInstr(1, Detail, "linux", vbTextCompare) <> 0 Then
                            visit_browserIsLinux = True
                        End If
                    Next
                End If
                '
                BotList = EncodeText(cache.getObject(Of String)("DefaultBotNameList"))
                If BotList <> "" Then
                    '
                    ' First line of Persistent variant is the expiration date (1 hour in the future)
                    '
                    DateExpires = EncodeDate(getLine(BotList))
                    If DateExpires = Date.MinValue Then
                        BotList = ""
                    ElseIf DateExpires < main_PageStartTime Then
                        BotList = ""
                    End If
                End If
                If BotList = "" Then
                    Filename = "config\VisitNameList.txt"
                    BotList = cluster.localClusterFiles.readFile(Filename)
                    If BotList = "" Then
                        BotList = "" _
                            & vbCrLf & "//" _
                            & vbCrLf & "// Default Bot Name list" _
                            & vbCrLf & "// This file is maintained by the server. On the first hit of a visit," _
                            & vbCrLf & "// the default member name is overridden with this name if there is a match" _
                            & vbCrLf & "// in either the user agent or the ipaddress." _
                            & vbCrLf & "// format:  name -tab- browser-user-agent-substring -tab- ip-address-substring -tab- type " _
                            & vbCrLf & "// This text is cached by the server for 1 hour, so changes take" _
                            & vbCrLf & "// effect when the cache expires. It is updated daily from the" _
                            & vbCrLf & "// support site feed. Manual changes may be over written." _
                            & vbCrLf & "// type - r=robot (default), b=bad robot, u=user" _
                            & vbCrLf & "//" _
                            & vbCrLf & "Contensive MonitorContensive Monitor" & vbTab & vbTab & "r" _
                            & vbCrLf & "Google-Bot" & vbTab & "googlebot" & vbTab & vbTab & "r" _
                            & vbCrLf & "MSN-Bot" & vbTab & "msnbot" & vbTab & vbTab & "r" _
                            & vbCrLf & "Yahoo-Bot" & vbTab & "slurp" & vbTab & vbTab & "r" _
                            & vbCrLf & "SearchMe-Bot" & vbTab & "searchme.com" & vbTab & vbTab & "r" _
                            & vbCrLf & "Twiceler-Bot" & vbTab & "www.cuil.com" & vbTab & vbTab & "r" _
                            & vbCrLf & "Unknown Bot" & vbTab & "robot" & vbTab & vbTab & "r" _
                            & vbCrLf & "Unknown Bot" & vbTab & "crawl" & vbTab & vbTab & "r" _
                            & ""
                        Call cluster.localClusterFiles.saveFile(Filename, BotList)
                    End If
                    DateExpires = main_PageStartTime.AddHours(1)
                    Call cache.setKey("DefaultBotNameList", CStr(DateExpires) & vbCrLf & BotList)
                End If
                '
                If BotList <> "" Then
                    BotList = vbReplace(BotList, vbCrLf, vbLf)
                    Bots = Split(BotList, vbLf)
                    If UBound(Bots) >= 0 Then
                        For Ptr = 0 To UBound(Bots)
                            Arg = Trim(Bots(Ptr))
                            '
                            ' remove comments
                            '
                            If Left(Arg, 2) <> "//" Then
                                Args = Split(Arg, vbTab)
                                If UBound(Args) > 0 Then
                                    If Trim(Args(1)) <> "" Then
                                        If vbInstr(1, BrowserUserAgent, Args(1), vbTextCompare) <> 0 Then
                                            visit_name = Args(0)
                                            visitNameFound = True
                                            Exit For
                                        End If
                                    End If
                                    If UBound(Args) > 1 Then
                                        If Trim(Args(2)) <> "" Then
                                            If vbInstr(1, webServer.requestRemoteIP, Args(2), vbTextCompare) <> 0 Then
                                                visit_name = Args(0)
                                                visitNameFound = True
                                                Exit For
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        Next
                        If visitNameFound Then
                            If UBound(Args) < 3 Then
                                visit_isBot = True
                                visit_isBadBot = False
                            Else
                                visit_isBadBot = (LCase(Args(3)) = "b")
                                visit_isBot = visit_isBadBot Or (LCase(Args(3)) = "r")
                            End If
                        End If
                    End If
                End If
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_decodeBrowserUserAgent")
        End Sub
        '
        '
        '
        Public Function db_GetSortMethodByID(ByVal SortMethodID As Integer) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00352")
            '
            Dim CS As Integer
            '
            'If Not (true) Then Exit Function
            '
            If SortMethodID > 0 Then
                CS = db_csOpenRecord("Sort Methods", SortMethodID)
                If db.cs_Ok(CS) Then
                    db_GetSortMethodByID = db.cs_getText(CS, "OrderByClause")
                End If
                Call db.cs_Close(CS)
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_GetSortMethodByID")
        End Function

        '
        '=============================================================================
        '
        '=============================================================================
        '
        Public Function pageManager_GetSectionMenuNamed(Optional ByVal DepthLimit As Integer = 3, Optional ByVal MenuStyle As Integer = 1, Optional ByVal StyleSheetPrefix As String = "", Optional ByVal MenuName As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetSectionMenuNamed")
            '
            'If Not (true) Then Exit Function
            '
            'Dim DepthLimit As Integer
            'Dim MenuStyle As Integer
            Dim StyleSheetPrefixLocal As String
            Dim RedirectLink As String
            Dim DefaultTemplateLink As String
            Dim MenuNameLocal As String
            Dim MenuID As Integer
            '
            'DepthLimit = encodeEmptyInteger(DepthLimit, 3)
            'MenuStyle = encodeEmptyInteger(MenuStyle, 1)
            StyleSheetPrefixLocal = encodeEmptyText(StyleSheetPrefix, "ccFlyout")
            MenuNameLocal = encodeEmptyText(MenuName, "Default")
            If MenuNameLocal = "" Then
                MenuNameLocal = "Default"
            End If
            MenuID = csv_VerifyDynamicMenu(MenuNameLocal)
            '
            DefaultTemplateLink = siteProperties.getText("SectionLandingLink", www_requestRootPath & siteProperties.serverPageDefault)
            pageManager_GetSectionMenuNamed = pageManager_GetSectionMenu(DepthLimit, MenuStyle, StyleSheetPrefixLocal, DefaultTemplateLink, MenuID, MenuNameLocal, siteProperties.useContentWatchLink)
            pageManager_GetSectionMenuNamed = main_GetEditWrapper("Section Menu", pageManager_GetSectionMenuNamed)
            '
            If pageManager_RedirectLink <> "" Then
                Call web_Redirect2(pageManager_RedirectLink, pageManager_RedirectReason, pageManager_RedirectBecausePageNotFound)
            End If
            '
            Exit Function
            '
ErrorTrap:
            'Set PageList = Nothing
            Call handleLegacyError18("main_GetSectionMenuNamed")
        End Function
        '
        '=============================================================================
        ' 3.3 Compatibility
        '=============================================================================
        '
        Public Function main_GetSectionMenu(Optional ByVal DepthLimit As Integer = 3, Optional ByVal MenuStyle As Integer = 1, Optional ByVal StyleSheetPrefix As String = "") As String
            main_GetSectionMenu = pageManager_GetSectionMenuNamed(DepthLimit, MenuStyle, StyleSheetPrefix)
        End Function
        '
        '=============================================================================
        '   main_Get the link for a Content Record by its ContentRecordKey
        '=============================================================================
        '
        Public Function main_GetContentWatchLinkByKey(ByVal ContentRecordKey As String, Optional ByVal DefaultLink As String = "", Optional ByVal IncrementClicks As Boolean = False) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetContentWatchLinkByKey")
            '
            'If Not (true) Then Exit Function
            '
            Dim CSPointer As Integer
            '
            ' Lookup link in main_ContentWatch
            '
            CSPointer = db.csOpen("Content Watch", "ContentRecordKey=" & db.encodeSQLText(ContentRecordKey), , , , , , "Link,Clicks")
            If db.cs_Ok(CSPointer) Then
                main_GetContentWatchLinkByKey = db.cs_getText(CSPointer, "Link")
                If EncodeBoolean(IncrementClicks) Then
                    Call db.cs_set(CSPointer, "Clicks", db.cs_getInteger(CSPointer, "clicks") + 1)
                End If
            Else
                main_GetContentWatchLinkByKey = EncodeText(DefaultLink)
            End If
            Call db.cs_Close(CSPointer)
            '
            main_GetContentWatchLinkByKey = EncodeAppRootPath(main_GetContentWatchLinkByKey, web_requestVirtualFilePath, www_requestRootPath, webServer.requestDomain)
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_GetContentWatchLinkByKey")
        End Function
        '
        '=============================================================================
        '   main_Get the link for a Content Record by the ContentName and RecordID
        '=============================================================================
        '
        Public Function main_GetContentWatchLinkByName(ByVal ContentName As String, ByVal RecordID As Integer, Optional ByVal DefaultLink As String = "", Optional ByVal IncrementClicks As Boolean = True) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetContentWatchLinkByName")
            '
            'If Not (true) Then Exit Function
            '
            Dim ContentRecordKey As String
            '
            ContentRecordKey = main_GetContentID(EncodeText(ContentName)) & "." & EncodeInteger(RecordID)
            main_GetContentWatchLinkByName = main_GetContentWatchLinkByKey(ContentRecordKey, DefaultLink, IncrementClicks)
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_GetContentWatchLinkByName")
        End Function
        '
        '=============================================================================
        '   main_Get the link for a Content Record by the ContentID and RecordID
        '=============================================================================
        '
        Public Function main_GetContentWatchLinkByID(ByVal ContentID As Integer, ByVal RecordID As Integer, Optional ByVal DefaultLink As String = "", Optional ByVal IncrementClicks As Boolean = True) As String
            main_GetContentWatchLinkByID = main_GetContentWatchLinkByKey(EncodeText(ContentID) & "." & EncodeText(RecordID), DefaultLink, IncrementClicks)
        End Function
        '
        '
        '
        Private Function main_GetHtmlBody_GetSection_GetContent_GetTableRow(ByVal Caption As String, ByVal Result As String, ByVal EvenRow As Boolean) As String
            '
            Dim CopyCaption As String
            Dim CopyResult As String
            '
            CopyCaption = Caption
            If CopyCaption = "" Then
                CopyCaption = "&nbsp;"
            End If
            '
            CopyResult = Result
            If CopyResult = "" Then
                CopyResult = "&nbsp;"
            End If
            '
            main_GetHtmlBody_GetSection_GetContent_GetTableRow = GetTableCell("<nobr>" & CopyCaption & "</nobr>", "150", , EvenRow, "right") & GetTableCell(CopyResult, "100%", , EvenRow, "left") & kmaEndTableRow
        End Function
        '
        '=============================================================================
        '   Add content padding around content
        '       is called from main_GetPageRaw, as well as from higher up when blocking is turned on
        '=============================================================================
        '
        Private Function pageManager_GetContentBoxWrapper(ByVal Content As String, ByVal ContentPadding As Integer) As String
            'dim buildversion As String
            '
            ' BuildVersion = app.dataBuildVersion
            pageManager_GetContentBoxWrapper = Content
            If siteProperties.getBoolean("Compatibility ContentBox Pad With Table") Then
                '
                If ContentPadding > 0 Then
                    '
                    pageManager_GetContentBoxWrapper = "" _
                        & cr & "<table border=0 width=""100%"" cellspacing=0 cellpadding=0>" _
                        & cr2 & "<tr>" _
                        & cr3 & "<td style=""padding:" & ContentPadding & "px"">" _
                        & kmaIndent(kmaIndent(kmaIndent(pageManager_GetContentBoxWrapper))) _
                        & cr3 & "</td>" _
                        & cr2 & "</tr>" _
                        & cr & "</table>"
                    '            main_GetContentBoxWrapper = "" _
                    '                & cr & "<table border=0 width=""100%"" cellspacing=0 cellpadding=" & ContentPadding & ">" _
                    '                & cr2 & "<tr>" _
                    '                & cr3 & "<td>" _
                    '                & KmaIndent(KmaIndent(KmaIndent(main_GetContentBoxWrapper))) _
                    '                & cr3 & "</td>" _
                    '                & cr2 & "</tr>" _
                    '                & cr & "</table>"
                End If
                pageManager_GetContentBoxWrapper = "" _
                    & cr & "<div class=""contentBox"">" _
                    & kmaIndent(pageManager_GetContentBoxWrapper) _
                    & cr & "</div>"
            Else
                '
                pageManager_GetContentBoxWrapper = "" _
                    & cr & "<div class=""contentBox"" style=""padding:" & ContentPadding & "px"">" _
                    & kmaIndent(pageManager_GetContentBoxWrapper) _
                    & cr & "</div>"
            End If
        End Function
        ' $$$$$ not used
        ''
        ''========================================================================
        ''
        ''========================================================================
        ''
        'Private Function main_GetHtmlBody_GetSection_GetContentBox_QuickEditing_BodyInput(Caption As String, FormInput As String) As String
        '    main_GetHtmlBody_GetSection_GetContentBox_QuickEditing_BodyInput = "" _
        '        & "<table border=""0"" cellpadding=""2"" cellspacing=""1"" width=""100%""><tr>" _
        '        & "<td width=""150"" align=""right"" valign=""middle"">" & addSpan(Caption & "<BR ><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""150"" height=""1"">", "ccAdminSmall") & "</td>" _
        '        & "<td align=""LEFT"" class=""ccPanelInput"">" & addSpan(FormInput, "ccAdminNormal") & "</td>" _
        '        & "</tr></table>"
        'End Function
        '
        '========================================================================
        ' ----- Process the reply from the Authoring Tools Panel form
        '========================================================================
        '
        Public Sub pageManager_ProcessFormQuickEditing()
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00363")
            '
            Dim RecordParentID As Integer
            Dim SaveButNoChanges As Boolean
            Dim RequestName As String
            Dim ParentID As Integer
            Dim Link As String
            Dim FieldName As String
            Dim CSBlock As Integer
            Dim MethodName As String
            Dim ContentName As String
            Dim Filename As String
            Dim Copy As String
            Dim Button As String
            'Dim CopyEditMode as integer
            Dim RecordID As Integer
            Dim RecordModified As Boolean
            Dim RecordName As String
            '
            Dim IsEditLocked As Boolean
            Dim IsSubmitted As Boolean
            Dim IsApproved As Boolean
            Dim IsInserted As Boolean
            Dim IsDeleted As Boolean
            Dim IsModified As Boolean
            Dim main_EditLockMemberName As String
            Dim main_EditLockMemberID As Integer
            Dim main_EditLockDateExpires As Date
            Dim SubmittedMemberName As String
            Dim ApprovedMemberName As String
            Dim ModifiedMemberName As String
            Dim ModifiedDate As Date
            Dim SubmittedDate As Date
            Dim ApprovedDate As Date
            Dim allowSave As Boolean
            Dim iIsAdmin As Boolean
            Dim main_WorkflowSupport As Boolean
            '
            MethodName = "pageManager_ProcessFormQuickEditing()"
            '
            RecordModified = False
            RecordID = (docProperties.getInteger("ID"))
            ContentName = docProperties.getText("ContentName")
            Button = docProperties.getText("Button")
            iIsAdmin = user.isAuthenticatedAdmin()
            '
            If (Button <> "") And (RecordID <> 0) And (ContentName <> "") And (user.isAuthenticatedContentManager(ContentName)) Then
                main_WorkflowSupport = siteProperties.allowWorkflowAuthoring And workflow.isWorkflowAuthoringCompatible(ContentName)
                Call pageManager_GetAuthoringStatus(ContentName, RecordID, IsSubmitted, IsApproved, SubmittedMemberName, ApprovedMemberName, IsInserted, IsDeleted, IsModified, ModifiedMemberName, ModifiedDate, SubmittedDate, ApprovedDate)
                IsEditLocked = workflow.GetEditLockStatus(ContentName, RecordID)
                main_EditLockMemberName = workflow.GetEditLockMemberName(ContentName, RecordID)
                main_EditLockDateExpires = workflow.GetEditLockDateExpires(ContentName, RecordID)
                Call workflow.ClearEditLock(ContentName, RecordID)
                '
                ' tough case, in Quick mode, lets mark the record reviewed, no matter what button they push, except cancel
                '
                If Button <> ButtonCancel Then
                    Call pageManager_MarkRecordReviewed(ContentName, RecordID)
                End If
                '
                ' Determine is the record should be saved
                '
                If (Not IsApproved) And (Not main_GetStreamBoolean2("RENDERMODE")) Then
                    If iIsAdmin Then
                        '
                        ' cases that admin can save
                        '
                        allowSave = False _
                            Or (Button = ButtonAddChildPage) _
                            Or (Button = ButtonAddSiblingPage) _
                            Or (Button = ButtonSave) _
                            Or (Button = ButtonOK) _
                            Or (Button = ButtonPublish) _
                            Or (Button = ButtonPublishSubmit) _
                            Or (Button = ButtonPublishApprove)
                    Else
                        '
                        ' cases that CM can save
                        '
                        allowSave = False _
                            Or (Button = ButtonAddChildPage) _
                            Or (Button = ButtonAddSiblingPage) _
                            Or (Button = ButtonSave) _
                            Or (Button = ButtonOK) _
                            Or (Button = ButtonPublishSubmit)
                    End If
                End If
                If allowSave Then
                    '
                    ' ----- Save Changes
                    '
                    SaveButNoChanges = True
                    RequestName = docProperties.getText("name")
                    If Trim(RequestName) = "" Then
                        Call error_AddUserError("A name is required to save this page")
                    Else
                        CSBlock = db_csOpenRecord(ContentName, RecordID, True, True)
                        If db.cs_Ok(CSBlock) Then
                            FieldName = "copyFilename"
                            Copy = docProperties.getText(FieldName)
                            Copy = html_DecodeContent(Copy)
                            If Copy <> db.db_GetCS(CSBlock, "copyFilename") Then
                                Call db.cs_set(CSBlock, "copyFilename", Copy)
                                SaveButNoChanges = False
                            End If
                            RecordName = docProperties.getText("name")
                            If RecordName <> db.db_GetCS(CSBlock, "name") Then
                                Call db.cs_set(CSBlock, "name", RecordName)
                                SaveButNoChanges = False
                            End If
                            Call main_AddLinkAlias(RecordName, RecordID, "")
                            If (docProperties.getText("headline") <> db.db_GetCS(CSBlock, "headline")) Then
                                Call db.cs_set(CSBlock, "headline", docProperties.getText("headline"))
                                SaveButNoChanges = False
                            End If
                            RecordParentID = db.cs_getInteger(CSBlock, "parentid")
                        End If
                        Call db.cs_Close(CSBlock)
                        '
                        Call workflow.SetEditLock(ContentName, RecordID)
                        '
                        If Not SaveButNoChanges Then
                            Call main_ProcessSpecialCaseAfterSave(False, ContentName, RecordID, RecordName, RecordParentID, False)
                            Call pageManager_cache_pageContent_clear()
                            Call cache.invalidateTagCommaList(ContentName)
                        End If
                    End If
                End If
                If (Button = ButtonAddChildPage) Then
                    '
                    '
                    '
                    CSBlock = db.cs_insertRecord(ContentName)
                    If db.cs_Ok(CSBlock) Then
                        Call db.cs_set(CSBlock, "active", True)
                        Call db.cs_set(CSBlock, "ParentID", RecordID)
                        Call db.cs_set(CSBlock, "contactmemberid", user.id)
                        Call db.cs_set(CSBlock, "name", "New Page added " & main_PageStartTime & " by " & user.name)
                        Call db.cs_set(CSBlock, "copyFilename", "")
                        RecordID = db.cs_getInteger(CSBlock, "ID")
                        Call db.db_SaveCSRecord(CSBlock)
                        '
                        Link = pageManager_GetPageLink4(RecordID, "", True, False)
                        'Link = main_GetPageLink(RecordID)
                        If main_WorkflowSupport Then
                            If Not pagemanager_IsWorkflowRendering() Then
                                Link = modifyLinkQuery(Link, "main_AdminWarningMsg", "This new unpublished page has been added and Workflow Rendering has been enabled so you can edit this page.", True)
                                Call siteProperties.setProperty("AllowWorkflowRendering", True)
                            End If
                        End If
                        Call web_Redirect2(Link, "Redirecting because a new page has been added with the quick editor.", False)
                    End If
                    Call db.cs_Close(CSBlock)
                    '
                    'Call AppendLog("pageManager_ProcessFormQuickEditor, 7-call pageManager_cache_pageContent_clear")
                    Call pageManager_cache_pageContent_clear()
                    Call cache.invalidateTagCommaList(ContentName)
                End If
                If (Button = ButtonAddSiblingPage) Then
                    '
                    '
                    '
                    CSBlock = db_csOpen(ContentName, RecordID, , , "ParentID")
                    If db.cs_Ok(CSBlock) Then
                        ParentID = db.cs_getInteger(CSBlock, "ParentID")
                    End If
                    Call db.cs_Close(CSBlock)
                    If ParentID <> 0 Then
                        CSBlock = db.cs_insertRecord(ContentName)
                        If db.cs_Ok(CSBlock) Then
                            Call db.cs_set(CSBlock, "active", True)
                            Call db.cs_set(CSBlock, "ParentID", ParentID)
                            Call db.cs_set(CSBlock, "contactmemberid", user.id)
                            Call db.cs_set(CSBlock, "name", "New Page added " & main_PageStartTime & " by " & user.name)
                            Call db.cs_set(CSBlock, "copyFilename", "")
                            RecordID = db.cs_getInteger(CSBlock, "ID")
                            Call db.db_SaveCSRecord(CSBlock)
                            '
                            Link = pageManager_GetPageLink4(RecordID, "", True, False)
                            'Link = main_GetPageLink(RecordID)
                            If main_WorkflowSupport Then
                                If Not pagemanager_IsWorkflowRendering() Then
                                    Link = modifyLinkQuery(Link, "main_AdminWarningMsg", "This new unpublished page has been added and Workflow Rendering has been enabled so you can edit this page.", True)
                                    Call siteProperties.setProperty("AllowWorkflowRendering", True)
                                End If
                            End If
                            Call web_Redirect2(Link, "Redirecting because a new page has been added with the quick editor.", False)
                        End If
                        Call db.cs_Close(CSBlock)
                    End If
                    '
                    'Call AppendLog("pageManager_ProcessFormQuickEditor, 8-call pageManager_cache_pageContent_clear")
                    Call pageManager_cache_pageContent_clear()
                    Call cache.invalidateTagCommaList(ContentName)
                End If
                If (Button = ButtonDelete) Then
                    CSBlock = db_csOpen(ContentName, RecordID)
                    If db.cs_Ok(CSBlock) Then
                        ParentID = db.cs_getInteger(CSBlock, "parentid")
                    End If
                    Call db.cs_Close(CSBlock)
                    '
                    Call pageManager_DeleteChildRecords(ContentName, RecordID, False)
                    Call db_DeleteContentRecord(ContentName, RecordID)
                    '
                    If Not main_WorkflowSupport Then
                        'Call AppendLog("pageManager_ProcessFormQuickEditor, 9-call pageManager_cache_pageContent_clear")
                        Call pageManager_cache_pageContent_clear()
                        Call cache.invalidateTagCommaList(ContentName)
                    End If
                    '
                    If Not main_WorkflowSupport Then
                        Link = pageManager_GetPageLink4(ParentID, "", True, False)
                        'Link = main_GetPageLink(ParentID)
                        Link = modifyLinkQuery(Link, "main_AdminWarningMsg", "The page has been deleted, and you have been redirected to the parent of the deleted page.", True)
                        Call web_Redirect2(Link, "Redirecting to the parent page because the page was deleted with the quick editor.", pageManager_RedirectBecausePageNotFound)
                        Exit Sub
                    End If
                End If
                '
                If (Button = ButtonAbortEdit) Then
                    Call workflow.abortEdit2(ContentName, RecordID, user.id)
                End If
                If (Button = ButtonPublishSubmit) Then
                    Call workflow.main_SubmitEdit(ContentName, RecordID)
                    Call pageManager_SendPublishSubmitNotice(ContentName, RecordID, "")
                End If
                If (Not error_IsUserError()) And ((Button = ButtonOK) Or (Button = ButtonCancel) Or (Button = ButtonPublish)) Then
                    '
                    ' ----- Turn off Quick Editor if not save or add child
                    '
                    Call visitProperty.setProperty("AllowQuickEditor", "0")
                End If
                If iIsAdmin Then
                    '
                    ' ----- Admin only functions
                    '
                    If (Button = ButtonPublish) Then
                        Call workflow.publishEdit(ContentName, RecordID)
                        Call cache.invalidateTagCommaList(ContentName)
                    End If
                    If (Button = ButtonPublishApprove) Then
                        Call workflow.approveEdit(ContentName, RecordID)
                    End If
                End If
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError13(MethodName)
        End Sub
        '
        '======================================================================================
        '   main_Get a dynamic menu from Page Content
        '======================================================================================
        '
        Private Function pageManager_GetSectionMenu_NameMenu(ByVal PageName As String, ByVal ContentName As String, ByVal DefaultLink As String, ByVal RootPageRecordID As Integer, ByVal DepthLimit As Integer, ByVal MenuStyle As Integer, ByVal StyleSheetPrefix As String, ByVal MenuImage As String, ByVal MenuImageOver As String, ByVal RootMenuCaption As String, ByVal SectionID As Integer, ByVal UseContentWatchLink As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00364")
            '
            Dim AllowInMenus As Boolean
            Dim PCCPtr As Integer
            Dim PageFound As Boolean
            Dim ChildPageCount As Integer
            Dim ChildPagesFoundTest As String
            Dim AddRootButton As Boolean
            Dim TopMenuCaption As String
            Dim Tier1MenuCaption As String
            '
            Dim CSPointer As Integer
            Dim MenuID As Integer
            Dim ContentID As Integer
            Dim BakeName As String
            Dim Criteria As String
            Dim MenuNamePrefix As String
            Dim childListSortMethodId As Integer
            Dim LinkWorking As String
            Dim ParentID As Integer
            Dim templateId As Integer
            Dim ContentControlID As Integer
            Dim allowChildListDisplay As Boolean
            Dim MenuLinkOverRide As String
            Dim ChildPagesFound As Boolean
            Dim FieldList As String
            Dim DateExpires As Date
            Dim dateArchive As Date
            Dim PubDate As Date
            '
            '
            '
            If (PageName = "") Or (ContentName = "") Then
                Call Err.Raise(ignoreInteger, "dll", "main_GetPageMenu requires a valid page name and content name")
            Else
                '
                ' ----- Read Bake Version
                '
                BakeName = "main_GetMenu-" & web_requestProtocol & "-" & webServer.requestDomain & "-" & PageName & "-" & ContentName & "-" & DefaultLink & "-" & RootPageRecordID & "-" & DepthLimit & "-" & MenuStyle & "-" & StyleSheetPrefix
                BakeName = vbReplace(BakeName, "/", "_")
                BakeName = vbReplace(BakeName, ":", "_")
                BakeName = vbReplace(BakeName, ".", "_")
                BakeName = vbReplace(BakeName, " ", "_")
                pageManager_GetSectionMenu_NameMenu = EncodeText(cache.getObject(Of String)(BakeName))
                If pageManager_GetSectionMenu_NameMenu <> "" Then
                    pageManager_GetSectionMenu_NameMenu = pageManager_GetSectionMenu_NameMenu
                Else
                    '
                    ' ----- Add Root Page to Menu System
                    '
                    If RootPageRecordID > 0 Then
                        PCCPtr = pageManager_cache_pageContent_getPtr(RootPageRecordID, pagemanager_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                        'Criteria = "(ID=" & encodeSQLNumber(RootPageRecordID) & ")"
                    Else
                        PCCPtr = pageManager_cache_pageContent_getFirstNamePtr(PageName, pagemanager_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                        'Criteria = "(name=" & encodeSQLText(PageName) & ")"
                    End If
                    '
                    ' Skip over expired, archive and non-published
                    '
                    PageFound = False
                    Do While PCCPtr >= 0 And Not PageFound
                        DateExpires = EncodeDate(cache_pageContent(PCC_DateExpires, PCCPtr))
                        dateArchive = EncodeDate(cache_pageContent(PCC_DateArchive, PCCPtr))
                        PubDate = EncodeDate(cache_pageContent(PCC_PubDate, PCCPtr))
                        PageFound = ((DateExpires = Date.MinValue) Or (DateExpires > main_PageStartTime)) And ((PubDate = Date.MinValue) Or (PubDate < main_PageStartTime))
                        'PageFound = ((DateExpires = Date.MinValue) Or (DateExpires > main_PageStartTime)) And ((DateArchive = Date.MinValue) Or (DateArchive > main_PageStartTime)) And ((PubDate = Date.MinValue) Or (PubDate < main_PageStartTime))
                        If (Not PageFound) Then
                            If (RootPageRecordID = 0) Then
                                PCCPtr = pageManager_cache_pageContent_nameIndex.getNextPtr
                            Else
                                PCCPtr = -1
                            End If
                        End If
                    Loop
                    If Not PageFound Then
                        '
                        ' menu root was not found, just put up what we have. If the link is there, the page will be created
                        '
                        AllowInMenus = True
                        LinkWorking = DefaultLink
                        LinkWorking = EncodeAppRootPath(LinkWorking, web_requestVirtualFilePath, www_requestRootPath, webServer.requestDomain)
                        LinkWorking = modifyLinkQuery(LinkWorking, "bid", "", False)
                        MenuNamePrefix = EncodeText(GetRandomInteger) & "_"
                        MenuID = 0
                        childListSortMethodId = 0
                        ParentID = 0
                        templateId = 0
                        allowChildListDisplay = False
                        MenuLinkOverRide = ""
                        ChildPagesFound = False
                    Else
                        AllowInMenus = EncodeBoolean(cache_pageContent(PCC_AllowInMenus, PCCPtr))
                        If AllowInMenus Then
                            MenuNamePrefix = EncodeText(GetRandomInteger) & "_"
                            MenuID = EncodeInteger(cache_pageContent(PCC_ID, PCCPtr))
                            childListSortMethodId = EncodeInteger(cache_pageContent(PCC_ChildListSortMethodID, PCCPtr))
                            Tier1MenuCaption = EncodeText(cache_pageContent(PCC_MenuHeadline, PCCPtr))
                            If Tier1MenuCaption = "" Then
                                Tier1MenuCaption = EncodeText(cache_pageContent(PCC_Headline, PCCPtr))
                                If Tier1MenuCaption = "" Then
                                    Tier1MenuCaption = EncodeText(cache_pageContent(PCC_Name, PCCPtr))
                                    If Tier1MenuCaption = "" Then
                                        Tier1MenuCaption = "Page " & CStr(MenuID)
                                    End If
                                End If
                            End If
                            ContentControlID = EncodeInteger(cache_pageContent(PCC_ContentControlID, PCCPtr))
                            templateId = EncodeInteger(cache_pageContent(PCC_TemplateID, PCCPtr))
                            allowChildListDisplay = EncodeBoolean(cache_pageContent(PCC_AllowChildListDisplay, PCCPtr))
                            MenuLinkOverRide = EncodeText(cache_pageContent(PCC_Link, PCCPtr))
                            ChildPagesFoundTest = cache_pageContent(PCC_ChildPagesFound, PCCPtr)
                            If ChildPagesFoundTest = "" Then
                                '
                                ' Not initialized, assume true
                                '
                                ChildPagesFound = True
                            Else
                                ChildPagesFound = EncodeBoolean(ChildPagesFoundTest)
                            End If
                            '
                            ' Use parentid to detect if this record needs to be called with the bid
                            '
                            ParentID = EncodeInteger(cache_pageContent(PCC_ParentID, PCCPtr))
                            '
                            ' main_Get the Link
                            '
                            LinkWorking = pageManager_GetPageLink4(MenuID, "", True, False)
                            'LinkWorking = main_GetPageDynamicLinkWithArgs(ContentControlID, MenuID, DefaultLink, True, TemplateID, SectionID, MenuLinkOverRide, UseContentWatchLink)
                        End If
                    End If
                    '
                    If AllowInMenus Then
                        '
                        ' ----- Set Tier1 Menu Caption (top element of the first flyout panel)
                        '
                        If Tier1MenuCaption = "" Then
                            Tier1MenuCaption = RootMenuCaption
                            If Tier1MenuCaption = "" Then
                                Tier1MenuCaption = PageName
                            End If
                        End If
                        '
                        ' ----- Set Top Menu Caption (clickable label that opens the menus)
                        '
                        TopMenuCaption = RootMenuCaption
                        If TopMenuCaption = "" Then
                            TopMenuCaption = Tier1MenuCaption
                        End If
                        '
                        If LinkWorking = "" Then
                            '
                            ' ----- Blank LinkWorking, this entry has no link
                            ' ----- Add menu header, and first entry for the root page
                            '
                            Call menu_AddEntry(MenuNamePrefix & MenuID, "", MenuImage, MenuImageOver, , TopMenuCaption)
                            '
                            ' ----- Root menu only, add a repeat of the button to the first menu
                            '
                            If (MenuStyle < 8) Or (MenuStyle > 11) Then
                                '
                                ' ##### Josh says Quadrem says they dont like the repeat on hovers
                                '
                                Call menu_AddEntry(MenuNamePrefix & MenuID & ".entry", MenuNamePrefix & MenuID, , , , Tier1MenuCaption)
                            End If
                        Else
                            '
                            ' ----- LinkWorking is here, put MenuID on the end of it
                            ' ----- Add menu header, and first entry for the root page
                            '
                            Call menu_AddEntry(MenuNamePrefix & MenuID, "", MenuImage, MenuImageOver, LinkWorking, TopMenuCaption)
                            '
                            ' ----- Root menu only, add a repeat of the button to the first menu
                            '
                            AddRootButton = False
                            If (MenuStyle < 8) Or (MenuStyle > 11) Then
                                '
                                ' ##### Josh says Quadrem says they dont like the repeat on hovers
                                '
                                AddRootButton = True
                                If ParentID <> 0 Then
                                    '
                                    ' This Top-most page is not the RootPage, include the bid
                                    '
                                Else
                                    '
                                    ' This Top-most page is the RootPage, include no bid
                                    '
                                End If
                            End If
                        End If
                        ' ##### can not block, this is being used
                        If ChildPagesFound Then
                            ChildPageCount = main_GetSectionMenu_AddChildMenu_ReturnChildCount(MenuID, ContentName, LinkWorking, Tier1MenuCaption, "," & EncodeText(MenuID), MenuNamePrefix, 1, DepthLimit, childListSortMethodId, SectionID, AddRootButton, UseContentWatchLink)
                            If (ChildPageCount = 0) And (True) Then
                                Call db.executeSql("update ccpagecontent set ChildPagesFound=0 where id=" & MenuID)
                            End If
                        End If
                        pageManager_GetSectionMenu_NameMenu = pageManager_GetSectionMenu_NameMenu & vbReplace(menuFlyout.getMenu(MenuNamePrefix & EncodeText(MenuID), MenuStyle, StyleSheetPrefix), vbCrLf, "")
                        pageManager_GetSectionMenu_NameMenu = pageManager_GetSectionMenu_NameMenu & menu_GetClose()
                        Call cache.setKey(BakeName, pageManager_GetSectionMenu_NameMenu, ContentName & ",Site Sections,Dynamic Menus,Dynamic Menu Section Rules")
                    End If
                End If
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("main_GetSectionMenu_NameMenu")
        End Function
        '
        '======================================================================================
        '   main_Get a dynamic menu from Page Content
        '======================================================================================
        '
        Private Function pageManager_GetSectionMenu_IdMenu(ByVal RootPageRecordID As Integer, ByVal DefaultLink As String, ByVal DepthLimit As Integer, ByVal MenuStyle As Integer, ByVal StyleSheetPrefix As String, ByVal MenuImage As String, ByVal MenuImageOver As String, ByVal RootMenuCaption As String, ByVal SectionID As Integer, ByVal UseContentWatchLink As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("PageList_GetPageIDMenu")
            '
            Dim PseudoChildPagesFound As Boolean
            Dim AllowInMenus As Boolean
            Dim DateExpires As Date
            Dim dateArchive As Date
            Dim PubDate As Date
            Dim PCCPtr As Integer
            Dim PageFound As Boolean
            Dim ChildPageCount As Integer
            Dim ContentName As String
            Dim AddRootButton As Boolean
            Dim TopMenuCaption As String
            Dim Tier1MenuCaption As String
            '
            Dim CSPointer As Integer
            Dim PageID As Integer
            Dim ContentID As Integer
            Dim BakeName As String
            Dim Criteria As String
            Dim MenuNamePrefix As String
            Dim childListSortMethodId As Integer
            Dim LinkWorking As String
            Dim LinkWorkingNoRedirect As String
            Dim ParentID As Integer
            Dim templateId As Integer
            Dim ContentControlID As Integer
            Dim allowChildListDisplay As Boolean
            Dim MenuLinkOverRide As String
            Dim ChildPagesFound As Boolean
            Dim FieldList As String
            Dim ChildPagesFoundTest As String
            '
            If RootPageRecordID = 610 Then
                RootPageRecordID = RootPageRecordID
            End If
            '
            '$$$$$ cache this - somewhere in here it opens cs with contentname
            ContentName = "Page Content"
            If False Then
                Call Err.Raise(ignoreInteger, "dll", "main_GetPageMenu requires a valid page name and content name")
            Else
                '
                ' ----- Read Bake Version
                '
                BakeName = "main_GetMenu-" & web_requestProtocol & "-" & webServer.requestDomain & "-" & RootPageRecordID & "-" & DefaultLink & "-" & DepthLimit & "-" & MenuStyle & "-" & StyleSheetPrefix
                BakeName = vbReplace(BakeName, "/", "_")
                BakeName = vbReplace(BakeName, ":", "_")
                BakeName = vbReplace(BakeName, ".", "_")
                BakeName = vbReplace(BakeName, " ", "_")
                pageManager_GetSectionMenu_IdMenu = EncodeText(cache.getObject(Of String)(BakeName))
                If pageManager_GetSectionMenu_IdMenu <> "" Then
                    pageManager_GetSectionMenu_IdMenu = pageManager_GetSectionMenu_IdMenu
                Else
                    '
                    ' ----- Add Root Page to Menu System
                    '
                    PCCPtr = pageManager_cache_pageContent_getPtr(RootPageRecordID, pagemanager_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                    PageFound = (PCCPtr >= 0)
                    '
                    ' Skip if expired, archive and non-published
                    '
                    If PageFound Then
                        DateExpires = EncodeDate(cache_pageContent(PCC_DateExpires, PCCPtr))
                        dateArchive = EncodeDate(cache_pageContent(PCC_DateArchive, PCCPtr))
                        PubDate = EncodeDate(cache_pageContent(PCC_PubDate, PCCPtr))
                        PageFound = ((DateExpires = Date.MinValue) Or (DateExpires > main_PageStartTime)) And ((PubDate = Date.MinValue) Or (PubDate < main_PageStartTime))
                        'PageFound = ((DateExpires = Date.MinValue) Or (DateExpires > main_PageStartTime)) And ((DateArchive = Date.MinValue) Or (DateArchive > main_PageStartTime)) And ((PubDate = Date.MinValue) Or (PubDate < main_PageStartTime))
                    End If
                    If Not PageFound Then
                        '
                        ' menu root was not found, just put up what we have. If the link is there, the page will be created
                        '
                        AllowInMenus = True
                        LinkWorking = DefaultLink
                        LinkWorkingNoRedirect = LinkWorking
                        LinkWorking = EncodeAppRootPath(LinkWorking, web_requestVirtualFilePath, www_requestRootPath, webServer.requestDomain)
                        LinkWorking = modifyLinkQuery(LinkWorking, "bid", "", False)
                        MenuNamePrefix = EncodeText(GetRandomInteger) & "_"
                        ' ***** just want to know what would happen here
                        PageID = RootPageRecordID
                        'pageId = 0
                        childListSortMethodId = 0
                        ParentID = 0
                        templateId = 0
                        allowChildListDisplay = False
                        MenuLinkOverRide = ""
                        ChildPagesFound = False
                    Else
                        '
                        ' AllowInMenus does not work for root pages, which are the only pages being handled here. This menu is hidden from the section record
                        '
                        AllowInMenus = True
                        If AllowInMenus Then
                            MenuNamePrefix = EncodeText(GetRandomInteger) & "_"
                            PageID = EncodeInteger(cache_pageContent(PCC_ID, PCCPtr))
                            childListSortMethodId = EncodeInteger(cache_pageContent(PCC_ChildListSortMethodID, PCCPtr))
                            Tier1MenuCaption = EncodeText(cache_pageContent(PCC_MenuHeadline, PCCPtr))
                            If Tier1MenuCaption = "" Then
                                Tier1MenuCaption = EncodeText(cache_pageContent(PCC_Name, PCCPtr))
                                If Tier1MenuCaption = "" Then
                                    Tier1MenuCaption = "Page " & CStr(PageID)
                                End If
                            End If
                            ContentControlID = EncodeInteger(cache_pageContent(PCC_ContentControlID, PCCPtr))
                            templateId = EncodeInteger(cache_pageContent(PCC_TemplateID, PCCPtr))
                            allowChildListDisplay = EncodeBoolean(cache_pageContent(PCC_AllowChildListDisplay, PCCPtr))
                            MenuLinkOverRide = EncodeText(cache_pageContent(PCC_Link, PCCPtr))
                            ChildPagesFoundTest = EncodeText(cache_pageContent(PCC_ChildPagesFound, PCCPtr))
                            If ChildPagesFoundTest = "" Then
                                '
                                ' Not initialized, assume true
                                '
                                ChildPagesFound = True
                            Else
                                ChildPagesFound = EncodeBoolean(ChildPagesFoundTest)
                            End If
                            '
                            ' Use parentid to detect if this record needs to be called with the bid
                            '
                            ParentID = EncodeInteger(cache_pageContent(PCC_ParentID, PCCPtr))
                            '
                            ' main_Get the Link
                            '
                            '1/13/2010 - convert everything to use linkalias and issecure
                            'LinkWorkingNoRedirect = main_GetPageLink4()
                            LinkWorkingNoRedirect = pageManager_GetPageLink4(PageID, "", True, False)
                            '                    LinkWorkingNoRedirect = main_GetPageDynamicLinkWithArgs(contentcontrolid, pageId, DefaultLink, True, TemplateID, SectionID, "", UseContentWatchLink)
                            LinkWorking = LinkWorkingNoRedirect
                            '                    If MenuLinkOverRide <> "" Then
                            '                        LinkWorking = "?rc=" & contentcontrolid & "&ri=" & pageId
                            '                    End If
                            'LinkWorking = main_GetPageDynamicLinkWithArgs(ContentControlID, pageId, DefaultLink, True, TemplateID, SectionID, MenuLinkOverRide, UseContentWatchLink)
                        End If
                    End If
                    '
                    If AllowInMenus Then
                        '
                        ' ----- Set Tier1 Menu Caption (top element of the first flyout panel)
                        '
                        If Tier1MenuCaption = "" Then
                            Tier1MenuCaption = RootMenuCaption
                        End If
                        '
                        ' ----- Set Top Menu Caption (clickable label that opens the menus)
                        '
                        TopMenuCaption = RootMenuCaption
                        If TopMenuCaption = "" Then
                            TopMenuCaption = Tier1MenuCaption
                        End If
                        '
                        If LinkWorking = "" Then
                            '
                            ' ----- Blank LinkWorking, this entry has no link
                            ' ----- Add menu header, and first entry for the root page
                            '
                            Call menu_AddEntry(MenuNamePrefix & PageID, "", MenuImage, MenuImageOver, , TopMenuCaption)
                            '
                            ' ----- Root menu only, add a repeat of the button to the first menu
                            '
                            If (MenuStyle < 8) Or (MenuStyle > 11) Then
                                '
                                ' ##### Josh says Quadrem says they dont like the repeat on hovers
                                '
                                Call menu_AddEntry(MenuNamePrefix & PageID & ".entry", MenuNamePrefix & PageID, , , , Tier1MenuCaption)
                            End If
                        Else
                            '
                            ' ----- LinkWorking is here, put pageId on the end of it
                            ' ----- Add menu header, and first entry for the root page
                            '
                            If PageID <> 0 Then
                                Call menu_AddEntry(MenuNamePrefix & PageID, "", MenuImage, MenuImageOver, LinkWorking, TopMenuCaption)
                            ElseIf (SectionID <> 0) And (RootPageRecordID <> 0) Then
                                Dim CSSection As Integer
                                Call menu_AddEntry(MenuNamePrefix & RootPageRecordID, "", MenuImage, MenuImageOver, LinkWorking, TopMenuCaption)
                                'Dim linkAlias
                            Else
                                Call menu_AddEntry(MenuNamePrefix & PageID, "", MenuImage, MenuImageOver, LinkWorking, TopMenuCaption)
                            End If
                            '
                            ' ----- Root menu only, add a repeat of the button to the first menu
                            '
                            AddRootButton = False
                            If (MenuStyle < 8) Or (MenuStyle > 11) Then
                                '
                                ' ##### Josh says Quadrem says they dont like the repeat on hovers
                                '
                                AddRootButton = True
                                If ParentID <> 0 Then
                                    '
                                    ' This Top-most page is not the RootPage, include the bid
                                    '
                                Else
                                    '
                                    ' This Top-most page is the RootPage, include no bid
                                    '
                                End If
                            End If
                        End If
                        '
                        ' 9/18/2009 - Build Submenu if child pages found
                        '
                        If pagemanager_IsWorkflowRendering() Then
                            '
                            ' If workflow mode, just assume there are child pages
                            '
                            ChildPageCount = main_GetSectionMenu_AddChildMenu_ReturnChildCount(PageID, ContentName, LinkWorking, Tier1MenuCaption, "," & EncodeText(PageID), MenuNamePrefix, 1, DepthLimit, childListSortMethodId, SectionID, AddRootButton, UseContentWatchLink)
                        Else
                            '
                            ' In production mode, use the ChildPagesFound field
                            '
                            PseudoChildPagesFound = ChildPagesFound
                            If Not PseudoChildPagesFound Then
                                '
                                ' Even when child pages is false, try it 10% of the time anyway
                                '
                                Randomize()
                                PseudoChildPagesFound = (Rnd() > 0.8)
                                If PseudoChildPagesFound Then
                                    TopMenuCaption = TopMenuCaption
                                End If
                            End If
                            If PseudoChildPagesFound Then
                                '
                                ' Child pages were found, create child menu
                                '
                                ChildPageCount = main_GetSectionMenu_AddChildMenu_ReturnChildCount(PageID, ContentName, LinkWorking, Tier1MenuCaption, "," & EncodeText(PageID), MenuNamePrefix, 1, DepthLimit, childListSortMethodId, SectionID, AddRootButton, UseContentWatchLink)
                                'ChildPageCount = main_GetSectionMenu_AddChildMenu_ReturnChildCount(pageId, ContentName, LinkWorkingNoRedirect, Tier1MenuCaption, "," & encodeText(pageId), MenuNamePrefix, 1, DepthLimit, ChildListSortMethodID, SectionID, AddRootButton, UseContentWatchLink)
                                If (True) Then
                                    If (ChildPageCount = 0) And (ChildPagesFound) Then
                                        '
                                        ' ChildPagesFound flag is true, but no pages were found - clear flag
                                        '
                                        Call db.executeSql("update ccpagecontent set ChildPagesFound=0 where id=" & PageID)
                                        'Call AppendLog("main_GetSectionMenu_IdMenu, 4-call pageManager_cache_pageContent_updateRow")
                                        Call pageManager_cache_pageContent_updateRow(PageID, pagemanager_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                                    ElseIf (ChildPageCount > 0) And (Not ChildPagesFound) Then
                                        '
                                        ' ChildPagesFlag is cleared, but pages were found -- set the flag
                                        '
                                        Call db.executeSql("update ccpagecontent set ChildPagesFound=1 where id=" & PageID)
                                        'Call AppendLog("main_GetSectionMenu_IdMenu, 5-call pageManager_cache_pageContent_updateRow")
                                        Call pageManager_cache_pageContent_updateRow(PageID, pagemanager_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                                    End If
                                End If
                            End If
                        End If
                        '
                        ' ----- main_Get the Menu Header
                        '
                        pageManager_GetSectionMenu_IdMenu = pageManager_GetSectionMenu_IdMenu & vbReplace(menuFlyout.getMenu(MenuNamePrefix & EncodeText(PageID), MenuStyle, StyleSheetPrefix), vbCrLf, "")
                        '
                        ' ----- Add in the rest of the menu details
                        ' ##### this must be here because it must go into the bake, else a baked page fails without he menus
                        '
                        pageManager_GetSectionMenu_IdMenu = pageManager_GetSectionMenu_IdMenu & menu_GetClose()
                        '
                        ' ----- Bake the completed menu
                        '
                        Call cache.setKey(BakeName, pageManager_GetSectionMenu_IdMenu, ContentName & ",Site Sections,Dynamic Menus,Dynamic Menu Section Rules")
                    End If
                End If
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("main_GetSectionMenu_IdMenu")
        End Function
        '
        '======================================================================================
        '   Add child pages to the menu system
        '       REturns the count of total child pages (with grand-child, etc)
        '       Returns -1 if child count not checked
        ' 7/21/2009 - added -1 return if the child pages are not counted to prevent the page records from being set not ChildPagesFound
        '======================================================================================
        '
        Private Function main_GetSectionMenu_AddChildMenu_ReturnChildCount(ByVal ParentMenuID As Integer, ByVal ContentName As String, ByVal DefaultLink As String, ByVal Tier1MenuCaption As String, ByVal UsedPageIDString As String, ByVal MenuNamePrefix As String, ByVal MenuDepth As Integer, ByVal MenuDepthMax As Integer, ByVal childListSortMethodId As Integer, ByVal SectionID As Integer, ByVal AddRootButton As Boolean, ByVal UseContentWatchLink As Boolean) As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00365")
            '
            Dim Active As Boolean
            Dim PseudoChildChildPagesFound As Boolean
            Dim PCCRowPtr As Integer
            Dim SortForward As Boolean
            Dim SortFieldName As String
            Dim SortPtr As Integer
            Dim Ptr As Integer
            Dim ChildPageCount As Integer
            Dim ChildPagesFoundTest As String
            Dim FieldList As String
            Dim ChildCountWithNoPubs As Integer
            Dim MenuID As Integer
            Dim MenuCaption As String
            Dim ChildCount As Integer
            Dim ChildSize As Integer
            Dim ChildPointer As Integer
            Dim ChildID() As Integer
            Dim ChildAllowChild() As Boolean
            Dim ChildCaption() As String
            Dim ChildLink() As String
            Dim ChildSortMethodID() As Integer
            Dim ChildChildPagesFound() As Boolean
            Dim ContentID As Integer
            Dim MenuLinkOverRide As String
            Dim PageID As Integer
            Dim UsedPageIDStringLocal As String
            Dim Criteria As String
            Dim MenuDepthLocal As Integer
            Dim OrderByCriteria As String
            Dim WorkingLink As String
            Dim templateId As Integer
            Dim ContentControlID As Integer
            Dim Link As String
            Dim PubDate As Date
            Dim PCCPtr As Integer
            Dim DateExpires As Date
            Dim dateArchive As Date
            Dim IsIncludedInMenu As Boolean
            Dim PCCPtrs() As Integer
            Dim PtrCnt As Integer
            Dim SortSplit() As String
            Dim SortSplitCnt As Integer
            Dim Index As coreKeyPtrIndexClass
            Dim PCCColPtr As Integer
            Dim PCCPtrsSorted As Integer()
            Dim AllowInMenus As Boolean
            '
            ' ----- Gather all child menus
            '
            ' 7/21/2009 - added -1 return if the child pages are not counted to prevent the page records from being set not ChildPagesFound
            ChildCountWithNoPubs = -1
            If (ParentMenuID > 0) And (MenuDepth <= MenuDepthMax) Then
                MenuDepthLocal = MenuDepth + 1
                UsedPageIDStringLocal = UsedPageIDString
                OrderByCriteria = db_GetSortMethodByID(childListSortMethodId)
                If OrderByCriteria = "" Then
                    OrderByCriteria = db_GetContentProperty(ContentName, "defaultsortmethod")
                End If
                If OrderByCriteria = "" Then
                    OrderByCriteria = "ID"
                End If
                '
                ' Populate PCCPtrs()
                '
                PCCPtr = pageManager_cache_pageContent_getFirstChildPtr(ParentMenuID, pagemanager_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                PtrCnt = 0
                Do While PCCPtr >= 0
                    ReDim Preserve PCCPtrs(PtrCnt)
                    PCCPtrs(PtrCnt) = PCCPtr
                    PtrCnt = PtrCnt + 1
                    PCCPtr = pageManager_cache_pageContent_parentIdIndex.getNextPtrMatch(CStr(ParentMenuID))
                Loop
                If PtrCnt > 0 Then
                    PCCPtrsSorted = pageManager_cache_pageContent_getPtrsSorted(PCCPtrs, OrderByCriteria)
                End If
                '
                Ptr = 0
                Do While Ptr < PtrCnt
                    PCCPtr = PCCPtrsSorted(Ptr)
                    DateExpires = EncodeDate(cache_pageContent(PCC_DateExpires, PCCPtr))
                    dateArchive = EncodeDate(cache_pageContent(PCC_DateArchive, PCCPtr))
                    PubDate = EncodeDate(cache_pageContent(PCC_PubDate, PCCPtr))
                    MenuCaption = Trim(EncodeText(cache_pageContent(PCC_MenuHeadline, PCCPtr)))
                    If False Then '.3.752" Then
                        AllowInMenus = (MenuCaption <> "")
                    Else
                        AllowInMenus = EncodeBoolean(cache_pageContent(PCC_AllowInMenus, PCCPtr))
                    End If
                    Active = EncodeBoolean(cache_pageContent(PCC_Active, PCCPtr))
                    IsIncludedInMenu = Active And AllowInMenus And ((PubDate = Date.MinValue) Or (PubDate < main_PageStartTime)) And ((DateExpires = Date.MinValue) Or (DateExpires > main_PageStartTime))
                    'IsIncludedInMenu = Active And AllowInMenus And ((PubDate = Date.MinValue) Or (PubDate < main_PageStartTime)) And ((DateExpires = Date.MinValue) Or (DateExpires > main_PageStartTime)) And ((DateArchive = Date.MinValue) Or (DateArchive > main_PageStartTime))
                    If IsIncludedInMenu Then
                        If MenuCaption = "" Then
                            MenuCaption = Trim(EncodeText(cache_pageContent(PCC_Name, PCCPtr)))
                        End If
                        If MenuCaption = "" Then
                            MenuCaption = "Related Page"
                        End If
                        If (MenuCaption <> "") Then
                            PageID = EncodeInteger(cache_pageContent(PCC_ID, PCCPtr))
                            If vbInstr(1, UsedPageIDStringLocal & ",", "," & EncodeText(PageID) & ",") = 0 Then
                                UsedPageIDStringLocal = UsedPageIDStringLocal & "," & EncodeText(PageID)
                                If ChildCount >= ChildSize Then
                                    ChildSize = ChildSize + 100
                                    ReDim Preserve ChildID(ChildSize)
                                    ReDim Preserve ChildCaption(ChildSize)
                                    ReDim Preserve ChildLink(ChildSize)
                                    ReDim Preserve ChildSortMethodID(ChildSize)
                                    ReDim Preserve ChildAllowChild(ChildSize)
                                    ReDim Preserve ChildChildPagesFound(ChildSize)
                                End If
                                ContentControlID = EncodeInteger(cache_pageContent(PCC_ContentControlID, PCCPtr))
                                MenuLinkOverRide = EncodeText(cache_pageContent(PCC_Link, PCCPtr))
                                '
                                ChildCaption(ChildCount) = MenuCaption
                                ChildID(ChildCount) = PageID
                                ChildAllowChild(ChildCount) = EncodeBoolean(cache_pageContent(PCC_AllowChildListDisplay, PCCPtr))
                                ChildSortMethodID(ChildCount) = EncodeInteger(cache_pageContent(PCC_ChildListSortMethodID, PCCPtr))
                                templateId = EncodeInteger(cache_pageContent(PCC_TemplateID, PCCPtr))
                                '
                                Link = pageManager_GetPageLink4(PageID, "", True, UseContentWatchLink)
                                'Link = main_GetPageDynamicLinkWithArgs(contentcontrolid, PageID, DefaultLink, False, TemplateID, SectionID, MenuLinkOverRide, UseContentWatchLink)
                                ChildLink(ChildCount) = Link
                                ChildPagesFoundTest = cache_pageContent(PCC_ChildPagesFound, PCCPtr)
                                If ChildPagesFoundTest = "" Then
                                    '
                                    ' Not initialized
                                    '
                                    ChildChildPagesFound(ChildCount) = True
                                Else
                                    ChildChildPagesFound(ChildCount) = EncodeBoolean(ChildPagesFoundTest)
                                End If
                                ChildCount = ChildCount + 1
                            End If
                        End If
                    End If
                    Ptr = Ptr + 1
                Loop
                ChildCountWithNoPubs = Ptr
                '
                ' ----- Output menu entries
                '
                If ChildCount > 0 Then
                    '
                    ' menu entry has children, output menu entry, child menu entry, and group of child entries
                    '
                    If AddRootButton Then
                        '
                        ' Root Button is a redundent menu entry at the top of tier 1 panels that links to the root page
                        '
                        Call menu_AddEntry(MenuNamePrefix & ParentMenuID & ".entry", MenuNamePrefix & ParentMenuID, "", "", DefaultLink, Tier1MenuCaption)
                        'Call main_AddMenuEntry(MenuNamePrefix & ParentMenuID & ".entry", MenuNamePrefix & ParentMenuID, "", "", main_GetLinkAliasByPageID(ParentMenuID, "", DefaultLink), Tier1MenuCaption)
                        'Call main_AddMenuEntry(MenuNamePrefix & ParentMenuID & ".entry", MenuNamePrefix & ParentMenuID, "", "", main_GetLinkAliasByLink(DefaultLink), Tier1MenuCaption)
                    End If
                    '
                    For ChildPointer = 0 To ChildCount - 1
                        MenuID = ChildID(ChildPointer)
                        MenuCaption = ChildCaption(ChildPointer)
                        WorkingLink = ChildLink(ChildPointer)
                        Call menu_AddEntry(MenuNamePrefix & MenuID, MenuNamePrefix & ParentMenuID, "", "", WorkingLink, MenuCaption)
                        'Call main_AddMenuEntry(MenuNamePrefix & MenuID, MenuNamePrefix & ParentMenuID, "", "", main_GetLinkAliasByPageID(MenuID, "", WorkingLink), MenuCaption)
                        'Call main_AddMenuEntry(MenuNamePrefix & MenuID, MenuNamePrefix & ParentMenuID, "", "", main_GetLinkAliasByLink(WorkingLink), MenuCaption)
                        '
                        ' if child pages are found, print the next menu deeper
                        '
                        If (ParentMenuID > 0) And (MenuDepthLocal <= MenuDepthMax) Then
                            If pagemanager_IsWorkflowRendering() Then
                                '
                                ' Workflow mode - go main_Get the child pages
                                '
                                ChildPageCount = main_GetSectionMenu_AddChildMenu_ReturnChildCount(MenuID, ContentName, WorkingLink, MenuCaption, UsedPageIDStringLocal, MenuNamePrefix, MenuDepthLocal, MenuDepthMax, ChildSortMethodID(ChildPointer), SectionID, False, UseContentWatchLink)
                            Else
                                '
                                ' Production mode - main_Get them only if the parent record says there are child pages
                                '
                                PseudoChildChildPagesFound = ChildChildPagesFound(ChildPointer)
                                If Not PseudoChildChildPagesFound Then
                                    '
                                    ' Even when child pages is false, try it 10% of the time anyway
                                    '
                                    Randomize()
                                    PseudoChildChildPagesFound = (Rnd() > 0.8)
                                End If
                                If PseudoChildChildPagesFound Then
                                    '
                                    ' Child pages were found, create child menu
                                    '
                                    ' 7/21/2009 - added -1 return if the child pages are not counted to prevent the page records from being set not ChildPagesFound
                                    ChildPageCount = main_GetSectionMenu_AddChildMenu_ReturnChildCount(MenuID, ContentName, WorkingLink, MenuCaption, UsedPageIDStringLocal, MenuNamePrefix, MenuDepthLocal, MenuDepthMax, ChildSortMethodID(ChildPointer), SectionID, False, UseContentWatchLink)
                                    If ChildPageCount >= 0 Then
                                        If (True) Then
                                            If ChildChildPagesFound(ChildPointer) And (ChildPageCount = 0) Then
                                                '
                                                ' no pages were found, clear the child pages found property
                                                ' child pages found property is set at admin site when a page is saved with this as the parent id
                                                '
                                                Call db.executeSql("update ccpagecontent set ChildPagesFound=0 where id=" & MenuID)
                                                'Call AppendLog("main_GetHtmlBody_GetSection_GetContentMenu_AddChildMenu, 6-call pageManager_cache_pageContent_updateRow -- fix here to NOT call pageManager_cache_pageContent_updateRow()")
                                                cache_pageContent(PCC_ChildPagesFound, ChildPointer) = "0"
                                                'Call pageManager_cache_pageContent_updateRow(MenuID, main_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                                            ElseIf (ChildPageCount > 0) And (Not ChildChildPagesFound(ChildPointer)) Then
                                                '
                                                ' pages were found, set the child pages found property
                                                '
                                                Call db.executeSql("update ccpagecontent set ChildPagesFound=1 where id=" & MenuID)
                                                'Call AppendLog("main_GetHtmlBody_GetSection_GetContentMenu_AddChildMenu, 7-call pageManager_cache_pageContent_updateRow -- fix here to NOT call pageManager_cache_pageContent_updateRow()")
                                                cache_pageContent(PCC_ChildPagesFound, ChildPointer) = "1"
                                                'Call pageManager_cache_pageContent_updateRow(MenuID, main_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    Next
                End If
            End If
            main_GetSectionMenu_AddChildMenu_ReturnChildCount = ChildCountWithNoPubs
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("main_GetSectionMenu_AddChildMenu_ReturnChildCount")
        End Function
        '
        '=============================================================================
        '   Creates the child page list used by PageContent
        '
        '   RequestedListName is the name of the ChildList (ActiveContent Child Page List)
        '       ----- New
        '       RequestedListName = "", same as "ORPHAN", same as "NONE"
        '           prints orphan list (child pages that have not printed so far (orphan list))
        '       AllowChildListDisplay - if false, no Child Page List is displayed, but authoring tags are still there
        '       Changed to friend, not public
        '       ----- Old
        '       "NONE" returns child pages with no RequestedListName
        '       "" same as "NONE"
        '       "ORPHAN" returns all child pages that have not been printed on this page
        '           - uses pageManager_ChildPageListTracking to track what has been seen
        '=============================================================================
        '
        Public Function main_GetChildPageList(ByVal RequestedListName As String, ByVal ContentName As String, ByVal parentPageID As Integer, ByVal allowChildListDisplay As Boolean, Optional ByVal ArchivePages As Boolean = False) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetChildPageList")
            '
            Dim ChildContent As String
            Dim Brief As String
            Dim UcaseRequestedListName As String
            Dim ChildListCount As Integer
            Dim Pointer As Integer
            Dim AddLink As String
            Dim BlockContentComposite As Boolean
            Dim Link As String
            Dim AllowInChildLists As Boolean
            Dim LinkedText As String
            Dim ActiveList As String
            Dim InactiveList As String
            Dim hint As String
            Dim childBranchPtr As Integer
            Dim PCCPtr As Integer
            Dim PageID As Integer
            Dim PageName As String
            Dim archiveLink As String
            Dim PageLink As String
            Dim pageBlockContent As Boolean
            Dim pageBlockPage As Boolean
            Dim pageContentControlId As Integer
            Dim pageMenuHeadline As String
            Dim pageParentListName As String
            Dim pageEditLink As String
            Dim pageAllowInChildLists As Boolean
            Dim pageActive As Boolean
            Dim pagePubDate As Date
            Dim pageDateExpires As Date
            Dim pageBriefFilename As String
            Dim pageAllowBrief As Boolean
            '
            ChildListCount = 0
            UcaseRequestedListName = vbUCase(RequestedListName)
            If (UcaseRequestedListName = "NONE") Or (UcaseRequestedListName = "ORPHAN") Then
                UcaseRequestedListName = ""
            End If
            If Not main_RenderCache_Loaded Then
                Call handleLegacyError23("Can not call main_GetChildPageList before calling getHtmlDoc() because loadRenderCache() is required.")
            End If
            '
            archiveLink = webServer.requestPathPage
            archiveLink = ConvertLinkToShortLink(archiveLink, webServer.requestDomain, web_requestVirtualFilePath)
            archiveLink = EncodeAppRootPath(archiveLink, web_requestVirtualFilePath, www_requestRootPath, webServer.requestDomain)
            '
            For childBranchPtr = 0 To main_RenderCache_ChildBranch_PCCPtrCnt - 1
                PCCPtr = EncodeInteger(main_RenderCache_ChildBranch_PCCPtrs(childBranchPtr))
                PageName = EncodeText(cache_pageContent(PCC_Name, PCCPtr))
                PageID = EncodeInteger(cache_pageContent(PCC_ID, PCCPtr))
                PageLink = pageManager_GetPageLink4(PageID, "", True, False)
                pageBlockContent = EncodeBoolean(cache_pageContent(PCC_BlockContent, PCCPtr))
                pageBlockPage = EncodeBoolean(cache_pageContent(PCC_BlockPage, PCCPtr))
                pageContentControlId = EncodeInteger(cache_pageContent(PCC_ContentControlID, PCCPtr))
                pageMenuHeadline = EncodeText(cache_pageContent(PCC_MenuHeadline, PCCPtr))
                If pageMenuHeadline = "" Then
                    pageMenuHeadline = Trim(PageName)
                    If pageMenuHeadline = "" Then
                        pageMenuHeadline = "Related Page"
                    End If
                End If
                pageParentListName = EncodeText(cache_pageContent(PCC_ParentListName, PCCPtr))
                pageEditLink = ""
                If user.isEditing(ContentName) Then
                    pageEditLink = main_GetRecordEditLink2(ContentName, PageID, True, PageName, True)
                End If
                pageAllowInChildLists = EncodeBoolean(cache_pageContent(PCC_AllowInChildLists, PCCPtr))
                pageActive = EncodeBoolean(cache_pageContent(PCC_Active, PCCPtr))
                pagePubDate = EncodeDate(cache_pageContent(PCC_PubDate, PCCPtr))
                pageDateExpires = EncodeDate(cache_pageContent(PCC_DateExpires, PCCPtr))
                pageBriefFilename = EncodeText(cache_pageContent(PCC_BriefFilename, PCCPtr))
                pageAllowBrief = EncodeBoolean(cache_pageContent(PCC_AllowBrief, PCCPtr))
                '
                If ArchivePages Then
                    Link = modifyLinkQuery(archiveLink, "bid", CStr(PageID), True)
                Else
                    Link = PageLink
                End If
                If pageBlockContent Or pageBlockPage Then
                    BlockContentComposite = Not pageManager_BypassContentBlock(pageContentControlId, PageID)
                Else
                    BlockContentComposite = False
                End If
                LinkedText = main_GetLinkedText("<a href=""" & html_EncodeHTML(Link) & """>", pageMenuHeadline)
                If (UcaseRequestedListName = "") And (pageParentListName <> "") And (Not main_RenderCache_CurrentPage_IsAuthoring) Then
                    '
                    ' ----- Requested orphan list, and this record is in a named list, and not editing, do not display
                    '
                ElseIf (UcaseRequestedListName = "") And (pageParentListName <> "") Then
                    '
                    ' ----- Requested orphan list, and this record is in a named list, but authoring, list it
                    '
                    If main_RenderCache_CurrentPage_IsAuthoring Then
                        InactiveList = InactiveList & cr & "<li name=""page" & PageID & """ name=""page" & PageID & """  id=""page" & PageID & """ class=""ccListItem"">"
                        InactiveList = InactiveList & pageEditLink
                        InactiveList = InactiveList & "[from Child Page List '" & pageParentListName & "': " & LinkedText & "]"
                        InactiveList = InactiveList & "</li>"
                    End If
                ElseIf (UcaseRequestedListName = "") And (Not allowChildListDisplay) And (Not main_RenderCache_CurrentPage_IsAuthoring) Then
                    '
                    ' ----- Requested orphan List, Not AllowChildListDisplay, not Authoring, do not display
                    '
                ElseIf (UcaseRequestedListName <> "") And (UcaseRequestedListName <> vbUCase(pageParentListName)) Then
                    '
                    ' ----- requested named list and wrong RequestedListName, do not display
                    '
                ElseIf (Not pageAllowInChildLists) Then
                    '
                    ' ----- Allow in Child Page Lists is false, display hint to authors
                    '
                    If main_RenderCache_CurrentPage_IsAuthoring Then
                        InactiveList = InactiveList & cr & "<li name=""page" & PageID & """  id=""page" & PageID & """ class=""ccListItem"">"
                        InactiveList = InactiveList & pageEditLink
                        InactiveList = InactiveList & "[Hidden (Allow in Child Lists is not checked): " & LinkedText & "]"
                        InactiveList = InactiveList & "</li>"
                    End If
                ElseIf Not pageActive Then
                    '
                    ' ----- Not active record, display hint if authoring
                    '
                    If main_RenderCache_CurrentPage_IsAuthoring Then
                        InactiveList = InactiveList & cr & "<li name=""page" & PageID & """  id=""page" & PageID & """ class=""ccListItem"">"
                        InactiveList = InactiveList & pageEditLink
                        InactiveList = InactiveList & "[Hidden (Inactive): " & LinkedText & "]"
                        InactiveList = InactiveList & "</li>"
                    End If
                ElseIf (pagePubDate <> Date.MinValue) And (pagePubDate > main_PageStartTime) Then
                    '
                    ' ----- Child page has not been published
                    '
                    If main_RenderCache_CurrentPage_IsAuthoring Then
                        InactiveList = InactiveList & cr & "<li name=""page" & PageID & """  id=""page" & PageID & """ class=""ccListItem"">"
                        InactiveList = InactiveList & pageEditLink
                        InactiveList = InactiveList & "[Hidden (To be published " & pagePubDate & "): " & LinkedText & "]"
                        InactiveList = InactiveList & "</li>"
                    End If
                ElseIf (pageDateExpires <> Date.MinValue) And (pageDateExpires < main_PageStartTime) Then
                    '
                    ' ----- Child page has expired
                    '
                    If main_RenderCache_CurrentPage_IsAuthoring Then
                        InactiveList = InactiveList & cr & "<li name=""page" & PageID & """  id=""page" & PageID & """ class=""ccListItem"">"
                        InactiveList = InactiveList & pageEditLink
                        InactiveList = InactiveList & "[Hidden (Expired " & pageDateExpires & "): " & LinkedText & "]"
                        InactiveList = InactiveList & "</li>"
                    End If
                Else
                    '
                    ' ----- display list (and authoring links)
                    '
                    ActiveList = ActiveList & cr & "<li name=""page" & PageID & """  id=""page" & PageID & """ class=""ccListItem"">"
                    If pageEditLink <> "" Then
                        ActiveList = ActiveList & pageEditLink & "&nbsp;"
                    End If
                    ActiveList = ActiveList & LinkedText
                    '
                    ' include authoring mark for content block
                    '
                    If main_RenderCache_CurrentPage_IsAuthoring Then
                        If pageBlockContent Then
                            ActiveList = ActiveList & "&nbsp;[Content Blocked]"
                        End If
                        If pageBlockPage Then
                            ActiveList = ActiveList & "&nbsp;[Page Blocked]"
                        End If
                    End If
                    '
                    ' include overview
                    ' if AllowBrief is false, BriefFilename is not loaded
                    '
                    If (pageBriefFilename <> "") And (pageAllowBrief) Then
                        Brief = Trim(cdnFiles.readFile(pageBriefFilename))
                        If Brief <> "" Then
                            ActiveList = ActiveList & "<div class=""ccListCopy"">" & Brief & "</div>"
                        End If
                    End If
                    ActiveList = ActiveList & "</li>"
                    ChildListCount = ChildListCount + 1
                    '.IsDisplayed = True
                End If
            Next
            '
            ' ----- Add Link
            '
            If (Not ArchivePages) Then
                ChildContent = main_RenderCache_CurrentPage_ContentName
                If ChildContent = "" Then
                    ChildContent = "Page Content"
                End If
                AddLink = main_GetRecordAddLink(ChildContent, "parentid=" & parentPageID & ",ParentListName=" & UcaseRequestedListName, True)
                If AddLink <> "" Then
                    InactiveList = InactiveList & cr & "<li class=""ccListItem"">" & AddLink & "</LI>"
                End If
            End If
            '
            ' ----- If there is a list, add the list start and list end
            '
            main_GetChildPageList = ""
            If ActiveList <> "" Then
                main_GetChildPageList = main_GetChildPageList & cr & "<ul id=""childPageList" & parentPageID & "_" & RequestedListName & """ class=""ccChildList"">" & kmaIndent(ActiveList) & cr & "</ul>"
            End If
            If InactiveList <> "" Then
                main_GetChildPageList = main_GetChildPageList & cr & "<ul id=""childPageList" & parentPageID & "_" & RequestedListName & """ class=""ccChildListInactive"">" & kmaIndent(InactiveList) & cr & "</ul>"
            End If
            '
            ' ----- if non-orphan list, authoring and none found, print none message
            '
            If (UcaseRequestedListName <> "") And (ChildListCount = 0) And main_RenderCache_CurrentPage_IsAuthoring Then
                main_GetChildPageList = "[Child Page List with no pages]</p><p>" & main_GetChildPageList
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_GetChildPageList")
        End Function
        '
        '=============================================================================
        '   main_Get the Section Menu
        '   MenuName blank reverse menu to legacy mode (all sections on menu)
        '=============================================================================
        '
        Public Function pageManager_GetSectionMenu(ByVal DepthLimit As Integer, ByVal MenuStyle As Integer, ByVal StyleSheetPrefix As String, ByVal DefaultTemplateLink As String, ByVal MenuID As Integer, ByVal MenuName As String, ByVal UseContentWatchLink As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("PageList_GetSectionMenu")
            '
            Dim layoutError As String
            Dim pageActive As Boolean
            Dim TCPtr As Integer
            Dim PCCPtr As Integer
            Dim rootPageId As Integer
            Dim CSSections As Integer
            Dim CSTemplates As Integer
            Dim CSPage As Integer
            Dim SectionName As String
            Dim templateId As Integer
            Dim ContentID As Integer
            Dim ContentName As String
            'Dim main_oldCacheArray_ParentBranchPointer as integer
            Dim Link As String
            Dim SectionID As Integer
            Dim AuthoringTag As String
            Dim MenuImage As String
            Dim MenuImageOver As String
            'Dim SectionCount as integer
            Dim LandingLink As String
            Dim MenuString As String
            Dim SectionCaption As String
            Dim SectionTemplateID As Integer
            Dim Criteria As String
            Dim SelectFieldList As String
            Dim ShowHiddenMenu As Boolean
            Dim HideMenu As Boolean
            'dim buildversion As String
            Dim PageContentCID As Integer
            Dim BlockPage As Boolean
            Dim BlockSection As Boolean
            Dim SQL As String
            Dim IsAllSectionsMenuMode As Boolean
            '
            '
            '
            ' fixed? - !! Problem: new upgraded site with old menu object (MenuName=""). We take the third option here, but later in the
            '   routine we use RootPageID because the check is on Version only
            '
            IsAllSectionsMenuMode = (MenuName = "")
            PageContentCID = main_GetContentID("Page Content")
            If (True) Then
                SelectFieldList = "ID, Name,TemplateID,ContentID,MenuImageFilename,Caption,MenuImageOverFilename,HideMenu,BlockSection,RootPageID"
                ShowHiddenMenu = user.isEditingAnything()
                'ShowHiddenMenu = main_IsEditing("Site Sections")
                If IsAllSectionsMenuMode Then
                    '
                    ' Section/Page connection at RootPageID, show all sections
                    '
                    CSSections = db.csOpen("Site Sections", , , , , ,, SelectFieldList)
                Else
                    '
                    ' Section/Page connection at RootPageID, only show sections connected to the menu
                    '
                    SQL = "Select Distinct S.ID" _
                        & " from ((ccSections S" _
                        & " left join ccDynamicMenuSectionRules R on R.SectionID=S.ID)" _
                        & " left join ccDynamicMenus M on M.ID=R.DynamicMenuID)" _
                        & " where M.ID=" & MenuID
                    Criteria = "ID in (" & SQL & ")"
                    CSSections = db.csOpen("Site Sections", Criteria, , , , , , SelectFieldList)
                End If
                '        '
                '        ' Section/Page connection at RootPageID
                '        '
                '        SelectFieldList = "ID, Name,TemplateID,ContentID,MenuImageFilename,Caption,MenuImageOverFilename,HideMenu,BlockSection,RootPageID"
                '        SQL = "Select Distinct S.ID" _
                '            & " from ((ccSections S" _
                '            & " left join ccDynamicMenuSectionRules R on R.SectionID=S.ID)" _
                '            & " left join ccDynamicMenus M on M.ID=R.DynamicMenuID)" _
                '            & " where M.ID=" & MenuID
                '        Criteria = "ID in (" & SQL & ")"
                '        ShowHiddenMenu = main_IsEditing("Site Sections")
                '        CSSections = app.db_csOpen("Site Sections", Criteria, , , , , SelectFieldList)
            ElseIf (True) Then
                '
                ' Multiple Menus with ccDynamicMenuSectionRules
                '
                SelectFieldList = "ID, Name,TemplateID,ContentID,MenuImageFilename,Caption,MenuImageOverFilename,HideMenu,BlockSection,0 as RootPageID"
                ShowHiddenMenu = user.isEditingAnything()
                'ShowHiddenMenu = main_IsEditing("Site Sections")
                If IsAllSectionsMenuMode Then
                    '
                    ' Section/Page connection at RootPageID, show all sections
                    '
                    CSSections = db.csOpen("Site Sections", , , , , , , SelectFieldList)
                Else
                    '
                    ' Section/Page connection at RootPageID, only show sections connected to the menu
                    '
                    SQL = "Select Distinct S.ID" _
                        & " from ((ccSections S" _
                        & " left join ccDynamicMenuSectionRules R on R.SectionID=S.ID)" _
                        & " left join ccDynamicMenus M on M.ID=R.DynamicMenuID)" _
                        & " where M.ID=" & MenuID
                    Criteria = "ID in (" & SQL & ")"
                    CSSections = db.csOpen("Site Sections", Criteria, , , , ,, SelectFieldList)
                End If
                '        SelectFieldList = "ID, Name,TemplateID,ContentID,MenuImageFilename,Caption,MenuImageOverFilename,HideMenu,BlockSection"
                '        SQL = "Select Distinct S.ID" _
                '            & " from ((ccSections S" _
                '            & " left join ccDynamicMenuSectionRules R on R.SectionID=S.ID)" _
                '            & " left join ccDynamicMenus M on M.ID=R.DynamicMenuID)" _
                '            & " where M.ID=" & MenuID
                '        Criteria = "ID in (" & SQL & ")"
                '        ShowHiddenMenu = main_IsEditing("Site Sections")
                '        CSSections = app.db_csOpen("Site Sections", Criteria, , , , , SelectFieldList)
            ElseIf db_IsSQLTableField("Default", "ccSections", "BlockSection") Then
                '
                ' All sections menu mode with block sections
                '
                SelectFieldList = "ID, Name,TemplateID,ContentID,MenuImageFilename,Caption,MenuImageOverFilename,HideMenu,BlockSection,0 as RootPageID"
                Criteria = ""
                ShowHiddenMenu = user.isEditingAnything()
                'ShowHiddenMenu = main_IsEditing("Site Sections")
                CSSections = db.csOpen("Site Sections", Criteria, , , , ,, SelectFieldList)
            ElseIf db_IsSQLTableField("Default", "ccSections", "MenuImageOverFilename") Then
                '
                ' All sections menu mode with Image Over
                '
                SelectFieldList = "ID, Name,TemplateID,ContentID,MenuImageFilename,Caption,MenuImageOverFilename,HideMenu,0 as BlockSection,0 as RootPageID"
                Criteria = ""
                ShowHiddenMenu = user.isEditingAnything()
                'ShowHiddenMenu = main_IsEditing("Site Sections")
                CSSections = db.csOpen("Site Sections", Criteria, , , , ,, SelectFieldList)
            ElseIf db_IsSQLTableField("Default", "ccSections", "HideMenu") Then
                '
                ' All sections menu mode with HideMenu
                '
                SelectFieldList = "ID, Name,TemplateID,ContentID,MenuImageFilename,Caption,'' as MenuImageOverFilename,HideMenu,0 as BlockSection,0 as RootPageID"
                Criteria = ""
                ShowHiddenMenu = user.isEditingAnything()
                'ShowHiddenMenu = main_IsEditing("Site Sections")
                CSSections = db.csOpen("Site Sections", Criteria, , , , ,, SelectFieldList)
            Else
                SelectFieldList = "ID, Name,TemplateID,ContentID,MenuImageFilename,Caption,'' as MenuImageOverFilename,0 as HideMenu,0 as BlockSection,0 as RootPageID"
                Criteria = ""
                ShowHiddenMenu = True
                CSSections = db.csOpen("Site Sections", Criteria, , , , ,, SelectFieldList)
            End If
            Do While db.cs_Ok(CSSections)
                HideMenu = db.cs_getBoolean(CSSections, "HideMenu")
                BlockSection = db.cs_getBoolean(CSSections, "BlockSection")
                SectionID = db.cs_getInteger(CSSections, "ID")
                If ShowHiddenMenu Or Not (HideMenu Or main_isSectionBlocked(SectionID, BlockSection)) Then
                    SectionName = Trim(db.cs_getText(CSSections, "Name"))
                    If SectionName = "" Then
                        SectionName = "Section " & SectionID
                        Call db.executeSql("update ccSections set Name=" & db.encodeSQLText(SectionName) & " where ID=" & SectionID)
                    End If
                    SectionCaption = db.cs_getText(CSSections, "Caption")
                    If SectionCaption = "" Then
                        SectionCaption = SectionName
                        Call db.executeSql("update ccSections set Caption=" & db.encodeSQLText(SectionCaption) & " where ID=" & SectionID)
                    End If
                    If HideMenu Then
                        SectionCaption = "[Hidden: " & SectionCaption & "]"
                    End If
                    SectionTemplateID = db.cs_getInteger(CSSections, "TemplateID")
                    ContentID = db.cs_getInteger(CSSections, "ContentID")
                    If (ContentID <> PageContentCID) And (Not db_IsWithinContent(ContentID, PageContentCID)) Then
                        ContentID = PageContentCID
                        Call db.cs_set(CSSections, "ContentID", ContentID)
                    End If
                    If ContentID = PageContentCID Then
                        ContentName = "Page Content"
                    Else
                        ContentName = metaData.getContentNameByID(ContentID)
                        If ContentName = "" Then
                            ContentName = "Page Content"
                            ContentID = main_GetContentID(ContentName)
                            Call db.executeSql("update ccSections set ContentID=" & ContentID & " where ID=" & SectionID)
                        End If
                    End If
                    MenuImage = db.cs_getText(CSSections, "MenuImageFilename")
                    If MenuImage <> "" Then
                        MenuImage = csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, MenuImage)
                    End If
                    MenuImageOver = db.cs_getText(CSSections, "MenuImageOverFilename")
                    If MenuImageOver <> "" Then
                        MenuImageOver = csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, MenuImageOver)
                    End If
                    '
                    ' main_Get Root Page for templateID
                    '
                    templateId = 0
                    BlockPage = False
                    Link = ""
                    If False Then '.3.451" Then
                        '
                        ' no blockpage,section-page connection by name
                        '
                        PCCPtr = pageManager_cache_pageContent_getFirstNamePtr(SectionName, pagemanager_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                        'SelectFieldList = "ID,TemplateID,0 as BlockPage"
                        'CSPage = app.db_csOpen(ContentName, "name=" & encodeSQLText(SectionName), "ID", , , , SelectFieldList)
                    ElseIf False Then '.3.613" Then
                        '
                        ' blockpage,section-page connection by name
                        '
                        PCCPtr = pageManager_cache_pageContent_getFirstNamePtr(SectionName, pagemanager_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                        'SelectFieldList = "ID,TemplateID,BlockPage"
                        'CSPage = app.db_csOpen(ContentName, "name=" & encodeSQLText(SectionName), "ID", , , , SelectFieldList)
                    Else
                        '
                        ' section-page connection by name
                        '
                        rootPageId = db.cs_getInteger(CSSections, "rootpageid")
                        PCCPtr = pageManager_cache_pageContent_getPtr(rootPageId, pagemanager_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                        'SelectFieldList = "ID,TemplateID,BlockPage"
                        'CSPage = main_OpenCSContentRecord_Internal(ContentName, RootPageID, , , SelectFieldList)
                    End If
                    If PCCPtr >= 0 Then
                        rootPageId = EncodeInteger(cache_pageContent(PCC_ID, PCCPtr))
                        templateId = EncodeInteger(cache_pageContent(PCC_TemplateID, PCCPtr))
                        BlockPage = EncodeBoolean(cache_pageContent(PCC_BlockPage, PCCPtr))
                        pageActive = EncodeBoolean(cache_pageContent(PCC_Active, PCCPtr))
                    End If
                    If pageActive Or ShowHiddenMenu Then
                        If PCCPtr < 0 Then
                            '
                            ' Page Missing
                            '
                            SectionCaption = "[Missing Page: " & SectionCaption & "]"
                        ElseIf Not pageActive Then
                            '
                            ' Page Inactive
                            '
                            SectionCaption = "[Inactive Page: " & SectionCaption & "]"
                        End If
                        If templateId = 0 Then
                            templateId = SectionTemplateID
                        End If
                        '
                        ' main_Get the link from either the template, or use the default link
                        '
                        If templateId <> 0 Then
                            TCPtr = pageManager_cache_pageTemplate_getPtr(templateId)
                            If TCPtr >= 0 Then
                                Link = EncodeText(cache_pageTemplate(TC_Link, TCPtr))
                            End If
                            'Link = main_GetTCLink(TCPtr)
                        End If
                        If Link = "" Then
                            Link = DefaultTemplateLink
                        End If
                        AuthoringTag = main_GetRecordEditLink2("Site Sections", SectionID, False, SectionName, user.isEditing("Site Sections"))
                        Link = modifyLinkQuery(Link, "sid", CStr(SectionID), True)
                        '
                        ' main_Get Menu, remove crlf, and parse the line with crlf
                        '
                        MenuString = pageManager_GetSectionMenu_IdMenu(rootPageId, Link, DepthLimit, MenuStyle, StyleSheetPrefix, MenuImage, MenuImageOver, SectionCaption, SectionID, UseContentWatchLink)
                        MenuString = vbReplace(AuthoringTag & MenuString, vbCrLf, "")
                        If (MenuString <> "") Then
                            If (pageManager_GetSectionMenu = "") Then
                                pageManager_GetSectionMenu = MenuString
                            Else
                                pageManager_GetSectionMenu = pageManager_GetSectionMenu & vbCrLf & MenuString
                            End If
                        End If
                    End If
                    '
                End If
                Call db.db_csGoNext(CSSections)
            Loop
            AuthoringTag = main_GetRecordAddLink("Site Sections", "MenuID=" & MenuID)
            If AuthoringTag <> "" Then
                pageManager_GetSectionMenu = pageManager_GetSectionMenu & AuthoringTag
            End If
            Call db.cs_Close(CSSections)
            '
            pageManager_GetSectionMenu = html_executeContentCommands(Nothing, pageManager_GetSectionMenu, addonContextEnum.ContextPage, user.id, user.isAuthenticated, layoutError)
            pageManager_GetSectionMenu = html_encodeContent10(pageManager_GetSectionMenu, user.id, "", 0, 0, False, False, True, True, False, True, "", "http://" & webServer.requestDomain, False, 0, "", addonContextEnum.ContextPage, user.isAuthenticated, Nothing, user.isEditingAnything)
            'pageManager_GetSectionMenu = main_EncodeContent5(pageManager_GetSectionMenu, memberID, "", 0, 0, False, False, True, True, False, True, "", "", False, 0)
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("pageManager_GetSectionMenu")
        End Function
        '
        '=============================================================================
        '   pageManager_BypassContentBlock
        '       Is This member allowed through the content block
        '=============================================================================
        '
        Public Function pageManager_BypassContentBlock(ByVal ContentID As Integer, ByVal RecordID As Integer) As Boolean
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00374")
            '
            Dim CS As Integer
            Dim SQL As String
            '
            If user.isAuthenticatedAdmin() Then
                pageManager_BypassContentBlock = True
            ElseIf user.isAuthenticatedContentManager(metaData.getContentNameByID(ContentID)) Then
                pageManager_BypassContentBlock = True
            Else
                SQL = "SELECT ccMemberRules.MemberID" _
                    & " FROM (ccPageContentBlockRules LEFT JOIN ccgroups ON ccPageContentBlockRules.GroupID = ccgroups.ID) LEFT JOIN ccMemberRules ON ccgroups.ID = ccMemberRules.GroupID" _
                    & " WHERE (((ccPageContentBlockRules.RecordID)=" & RecordID & ")" _
                    & " AND ((ccPageContentBlockRules.Active)<>0)" _
                    & " AND ((ccgroups.Active)<>0)" _
                    & " AND ((ccMemberRules.Active)<>0)" _
                    & " AND ((ccMemberRules.DateExpires) Is Null Or (ccMemberRules.DateExpires)>" & db.encodeSQLDate(main_PageStartTime) & ")" _
                    & " AND ((ccMemberRules.MemberID)=" & user.id & "));"
                CS = db.cs_openSql(SQL)
                pageManager_BypassContentBlock = db.cs_Ok(CS)
                Call db.cs_Close(CS)
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("IsContentBlocked")
        End Function
        '
        '
        '
        Public Function main_EncodeAppRootPath(ByVal Link As String) As String
            main_EncodeAppRootPath = EncodeAppRootPath(EncodeText(Link), web_requestVirtualFilePath, www_requestRootPath, webServer.requestDomain)
        End Function
        '
        '
        '
        Private Sub main_JavaStream_Add(ByVal NewString As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00375")
            '
            If main_JavaStreamCount >= main_JavaStreamSize Then
                main_JavaStreamSize = main_JavaStreamSize + main_JavaStreamChunk
                ReDim Preserve main_JavaStreamHolder(main_JavaStreamSize)
            End If
            main_JavaStreamHolder(main_JavaStreamCount) = NewString
            main_JavaStreamCount = main_JavaStreamCount + 1
            Exit Sub
            '
ErrorTrap:
            Call handleLegacyError13("main_JavaStream_Add")
        End Sub
        '
        '
        '
        Private ReadOnly Property main_JavaStream_Text() As String
            Get
                Dim MsgLabel As String
                '
                MsgLabel = "Msg" & EncodeText(GetRandomInteger)
                '
                main_JavaStream_Text = Join(main_JavaStreamHolder, "")
                main_JavaStream_Text = vbReplace(main_JavaStream_Text, "'", "'+""'""+'")
                main_JavaStream_Text = vbReplace(main_JavaStream_Text, vbCrLf, "\n")
                main_JavaStream_Text = vbReplace(main_JavaStream_Text, vbCr, "\n")
                main_JavaStream_Text = vbReplace(main_JavaStream_Text, vbLf, "\n")
                main_JavaStream_Text = "var " & MsgLabel & " = '" & main_JavaStream_Text & "'; document.write( " & MsgLabel & " ); " & vbCrLf

            End Get
        End Property
        '
        '
        '
        Public Sub main_GetPageArgs(ByVal PageID As Integer, ByVal main_IsWorkflowRendering As Boolean, ByVal main_IsQuickEditing As Boolean, ByRef return_CCID As Integer, ByRef return_TemplateID As Integer, ByRef return_ParentID As Integer, ByRef return_MenuLinkOverRide As String, ByRef return_IsRootPage As Boolean, ByRef return_SectionID As Integer, ByRef return_PageIsSecure As Boolean, ByVal UsedIDList As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetPageArgs")
            '
            Dim TCPtr As Integer
            Dim PCCPtr As Integer
            Dim PageFound As Boolean
            Dim IgnoreInteger As Integer
            Dim IgnoreString As String
            Dim IgnoreBoolean As Boolean
            Dim Ptr As Integer
            Dim SetTemplateID As Integer
            Dim pagetemplateID As Integer
            Dim SectionTemplateID As Integer

            '
            PCCPtr = pageManager_cache_pageContent_getPtr(PageID, main_IsWorkflowRendering, main_IsQuickEditing)
            If PCCPtr >= 0 Then
                PageFound = True
                return_CCID = EncodeInteger(cache_pageContent(PCC_ContentControlID, PCCPtr))
                pagetemplateID = EncodeInteger(cache_pageContent(PCC_TemplateID, PCCPtr))
                return_ParentID = EncodeInteger(cache_pageContent(PCC_ParentID, PCCPtr))
                return_MenuLinkOverRide = EncodeText(cache_pageContent(PCC_Link, PCCPtr))
                If UBound(cache_pageContent, 1) >= PCC_IsSecure Then
                    return_PageIsSecure = EncodeBoolean(cache_pageContent(PCC_IsSecure, PCCPtr))
                End If
                return_IsRootPage = (return_ParentID = 0)
            End If
            '
            If PageFound Then
                If return_ParentID = 0 Then
                    '
                    ' This is the root, main_Get the sectionID
                    '
                    If pageManager_cache_siteSection_rows = 0 Then
                        Call pageManager_cache_siteSection_getPtr(1)
                    End If
                    Ptr = pageManager_cache_siteSection_RootPageIDIndex.getPtr(CStr(PageID))
                    If Ptr >= 0 Then
                        return_SectionID = EncodeInteger(cache_siteSection(SSC_ID, Ptr))
                        SectionTemplateID = EncodeInteger(cache_siteSection(SSC_TemplateID, Ptr))
                    End If
                Else
                    '
                    ' chase further
                    '
                    If Not IsInDelimitedString(UsedIDList, CStr(return_ParentID), ",") Then
                        Call main_GetPageArgs(return_ParentID, main_IsWorkflowRendering, main_IsQuickEditing, IgnoreInteger, return_TemplateID, IgnoreInteger, IgnoreString, IgnoreBoolean, return_SectionID, IgnoreBoolean, UsedIDList & "," & return_ParentID)
                    End If
                End If
                If pagetemplateID <> 0 Then
                    return_TemplateID = pagetemplateID
                ElseIf SectionTemplateID <> 0 Then
                    return_TemplateID = SectionTemplateID
                End If
                '
                If return_TemplateID = 0 Then
                    '
                    ' no templateid still (parent and section are all blank), main_Get default templateid
                    '
                    If pageManager_cache_pageTemplate_rows > 0 Then
                        For TCPtr = 0 To pageManager_cache_pageTemplate_rows - 1
                            If vbLCase(EncodeText(cache_pageTemplate(TC_Name, TCPtr))) = "default" Then
                                Exit For
                            End If
                        Next
                        If TCPtr < pageManager_cache_pageTemplate_rows Then
                            return_TemplateID = EncodeInteger(cache_pageTemplate(TC_ID, TCPtr))
                        End If
                    End If
                    'End If
                End If
            End If
            '
            Exit Sub
            '
ErrorTrap:
            Call handleLegacyError13("main_GetPageArgs")
        End Sub
        '
        '====================================================================================================
        ' Replace with main_GetPageArgs()
        '
        ' Used Interally by main_GetPageLink to main_Get the SectionID of the parents
        '====================================================================================================
        '
        Private Function main_GetPageDynamicLink_GetSectionID(ByVal PageID As Integer, ByVal UsedIDList As String) As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetPageDynamicLink_GetSectionID")
            '
            Dim Ptr As Integer
            Dim CS As Integer
            Dim ParentID As Integer
            Dim PageName As Integer
            Dim PageName2 As String

            '
            Dim PCCPtr As Integer
            '
            PCCPtr = pageManager_cache_pageContent_getPtr(PageID, pagemanager_IsWorkflowRendering, user.isQuickEditing(""))
            If PCCPtr >= 0 Then
                PageName2 = EncodeText(cache_pageContent(PCC_Name, PCCPtr))
                ParentID = EncodeInteger(cache_pageContent(PCC_ParentID, PCCPtr))
            End If
            '
            '    CS = main_OpenCSContentRecord("Page Content", PageID, , , "Name,ParentID")
            '    If app.csv_IsCSOK(CS) Then
            '        PageName2 = db.db_GetCSText(CS, "Name")
            '        ParentID = app.db_GetCSInteger(CS, "ParentID")
            '    End If
            '    Call app.db_closeCS(CS)
            '
            ' Chase page tree to main_Get templateid
            '
            If ParentID = 0 Then
                '
                ' This is the root, use the name to main_Get the sectionID
                '
                If pageManager_cache_siteSection_rows = 0 Then
                    Call pageManager_cache_siteSection_getPtr(1)
                End If
                Ptr = pageManager_cache_siteSection_RootPageIDIndex.getPtr(CStr(PageID))
                If Ptr >= 0 Then
                    main_GetPageDynamicLink_GetSectionID = EncodeInteger(cache_siteSection(SSC_ID, Ptr))
                End If
                '        '
                '        CS = app.db_csOpen("Site Sections", "rootpageid=" & PageID, "ID", , , , "ID")
                '        If app.csv_IsCSOK(CS) Then
                '            main_GetPageDynamicLink_GetSectionID = app.db_GetCSInteger(CS, "ID")
                '        End If
                '        Call app.db_closeCS(CS)
                '        'main_GetPageDynamicLink_GetSectionID = main_GetRecordID("Site Sections", PageName2)
            Else
                '
                ' chase further
                '
                If Not IsInDelimitedString(UsedIDList, CStr(ParentID), ",") Then
                    main_GetPageDynamicLink_GetSectionID = main_GetPageDynamicLink_GetSectionID(ParentID, UsedIDList & "," & ParentID)
                End If
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError13("main_GetPageDynamicLink_GetSectionID")
        End Function
        '
        '====================================================================================================
        ' Replace with main_GetPageArgs()
        '
        ' Used Interally by main_GetPageLink to main_Get the TemplateID of the parents
        '====================================================================================================
        '
        Private Function main_GetPageDynamicLink_GetTemplateID(ByVal PageID As Integer, ByVal UsedIDList As String) As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetPageDynamicLink_GetTemplateID")
            '
            Dim CS As Integer
            Dim ParentID As Integer
            Dim templateId As Integer
            '
            '
            CS = db_csOpen("Page Content", PageID, , , "TemplateID,ParentID")
            If db.cs_Ok(CS) Then
                templateId = db.cs_getInteger(CS, "TemplateID")
                ParentID = db.cs_getInteger(CS, "ParentID")
            End If
            Call db.cs_Close(CS)
            '
            ' Chase page tree to main_Get templateid
            '
            If templateId = 0 And ParentID <> 0 Then
                If Not IsInDelimitedString(UsedIDList, CStr(ParentID), ",") Then
                    main_GetPageDynamicLink_GetTemplateID = main_GetPageDynamicLink_GetTemplateID(ParentID, UsedIDList & "," & ParentID)
                End If
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError13("main_GetPageDynamicLink_GetTemplateID")
        End Function
        '
        '====================================================================================================
        '   Return a page's Link
        '
        '   2011/6/5
        '       Always returns an absolute URL. The consumer needs to decide if the protocol and domain are
        '           needed or wanted.
        '       The results should only be used on the current domain and protocol, so if the result is included
        '           in a cache, the cache name should include the domain and protocol.
        '           - this is because the consumer may not need the abolute URL, but can not trim the domain and proto
        '               off because they don't know if it is there because it is the current one, or because
        '               it is the only domain allowed.
        '
        '   link parts:
        '       protocol
        '       domain
        '       linkPathPage
        '       linkQS
        '
        '   short templateLink (root relative to ?)
        '       pathpage = templatelink
        '       qs = calculate
        '       template domain set
        '           domain = template domain
        '       no template domain
        '           domain = current domain
        '       page secure or template secure
        '           protocol = https://
        '       else
        '           protocol = http://
        '
        '   long templateLink (protocol to ?)
        '       qs =calculate
        '
        '   empty templateLink
        '       linkalias OK
        '           pathpage = linkalias
        '           qs = empty
        '       No LinkAlias
        '           pathpage = defaultlink
        '           qs = calculate
        '           template domain set
        '               domain = template domain
        '           no template domain
        '               domain = current domain
        '           page secure or template secure
        '               protocol = https://
        '           else
        '               protocol = http://
        '
        '====================================================================================================
        '
        Public Function pageManager_GetPageLink4(ByVal PageID As Integer, ByVal QueryStringSuffix As String, ByVal AllowLinkAliasIfEnabled As Boolean, ByVal UseContentWatchNotDefaultPage As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetPageLink")
            '
            Dim main_domainIds() As String
            Dim Ptr As Integer
            Dim setdomainId As Integer
            Dim templatedomainIdList As String
            Dim linkLong As String
            Dim linkprotocol As String
            Dim linkPathPage As String
            Dim linkAlias As String
            Dim linkQS As String
            Dim linkDomain As String
            '
            Dim defaultPathPage As String
            Dim Key As String
            Dim TCPtr As Integer
            Dim ContentControlID As Integer
            Dim IsRootPage As Boolean
            Dim SectionID As Integer
            Dim MenuLinkOverRide As String
            '
            Dim ParentID As Integer
            Dim PageIsSecure As Boolean
            Dim Pos As Integer
            '
            Dim templateLink As String
            Dim templateLinkIncludesProtocol As Boolean
            Dim templateSecure As Boolean
            Dim templateId As Integer
            Dim templateDomain As String
            '
            Call main_GetPageArgs(PageID, pagemanager_IsWorkflowRendering, user.isQuickEditing(""), ContentControlID, templateId, ParentID, MenuLinkOverRide, IsRootPage, SectionID, PageIsSecure, "")
            '
            ' main_Get defaultpathpage
            '
            defaultPathPage = siteProperties.serverPageDefault
            If defaultPathPage <> "" Then
                Pos = vbInstr(1, defaultPathPage, "?")
                If Pos <> 0 Then
                    defaultPathPage = Mid(defaultPathPage, 1, Pos - 1)
                End If
                If Left(defaultPathPage, 1) <> "/" Then
                    defaultPathPage = "/" & defaultPathPage
                End If
            Else
                defaultPathPage = "/" & main_guessDefaultPage()
            End If
            '
            ' main_Get TemplateLink and secure setting
            '
            TCPtr = -1
            If pageManager_cache_pageTemplate_rows = 0 Then
                Call pageManager_cache_pageTemplate_load()
            End If
            If templateId <> 0 Then
                TCPtr = pageManager_cache_pageTemplate_getPtr(templateId)
            Else
                If pageManager_cache_pageTemplate_rows > 0 Then
                    For TCPtr = 0 To pageManager_cache_pageTemplate_rows - 1
                        If vbLCase(EncodeText(cache_pageTemplate(TC_Name, TCPtr))) = "default" Then
                            Exit For
                        End If
                    Next
                    If TCPtr = pageManager_cache_pageTemplate_rows Then
                        TCPtr = -1
                    End If
                End If
                'End If
            End If
            If TCPtr >= 0 Then
                templateLink = EncodeText(cache_pageTemplate(TC_Link, TCPtr))
                templateSecure = EncodeBoolean(cache_pageTemplate(TC_IsSecure, TCPtr))
                templateLinkIncludesProtocol = (InStr(1, templateLink, "://") <> 0)
                templatedomainIdList = EncodeText(cache_pageTemplate(TC_DomainIdList, TCPtr))
            End If
            '
            ' calc linkQS (cleared in come cases later)
            '
            If IsRootPage And (SectionID <> 0) Then
                linkQS = "sid=" & SectionID
            Else
                linkQS = "bid=" & PageID
            End If
            If QueryStringSuffix <> "" Then
                linkQS = linkQS & "&" & QueryStringSuffix
            End If
            '
            ' calculate depends on the template provided
            '
            If templateLink = "" Then
                '
                ' ----- templateLink is blank
                '
                If AllowLinkAliasIfEnabled And siteProperties.allowLinkAlias Then
                    If cache_linkAliasCnt = 0 Then
                        Call cache_linkAlias_load()
                    End If
                    If cache_linkAliasCnt > 0 Then
                        Key = vbLCase(CStr(PageID) & QueryStringSuffix)
                        Ptr = cache_linkAlias_PageIdQSSIndex.getPtr(Key)
                        If Ptr >= 0 Then
                            linkAlias = EncodeText(cache_linkAlias(1, Ptr))
                            If Mid(linkAlias, 1, 1) <> "/" Then
                                linkAlias = "/" & linkAlias
                            End If
                        End If
                    End If
                End If
                If (linkAlias = "") Then
                    linkPathPage = defaultPathPage
                Else
                    linkPathPage = linkAlias
                    linkQS = ""
                End If
                '
                ' domain (fake for now)
                '
                If (templatedomainIdList = "") Then
                    '
                    ' this template has no domain preference, use current domain
                    '
                    linkDomain = webServer.requestDomain
                ElseIf (domains.domainDetails.id = 0) Then
                    '
                    ' the current domain is not recognized, or is default - use it
                    '
                    linkDomain = webServer.requestDomain
                ElseIf (InStr(1, "," & templatedomainIdList & ",", "," & domains.domainDetails.id & ",") <> 0) Then
                    '
                    ' current domain is in the allowed domain list
                    '
                    linkDomain = webServer.requestDomain
                Else
                    '
                    ' there is an allowed domain list and current domain is not on it, or use first
                    '
                    main_domainIds = Split(templatedomainIdList, ",")
                    For Ptr = 0 To UBound(main_domainIds)
                        setdomainId = EncodeInteger(main_domainIds(Ptr))
                        If setdomainId <> 0 Then
                            Exit For
                        End If
                    Next
                    linkDomain = main_GetRecordName("domains", setdomainId)
                    If linkDomain = "" Then
                        linkDomain = webServer.requestDomain
                    End If
                End If
                '
                ' protocol
                '
                If PageIsSecure Or templateSecure Then
                    linkprotocol = "https://"
                Else
                    linkprotocol = "http://"
                End If
                linkLong = linkprotocol & linkDomain & linkPathPage
            ElseIf Not templateLinkIncludesProtocol Then
                '
                ' ----- Short TemplateLink
                '
                linkPathPage = templateLink
                '
                ' domain (fake for now)
                '
                If templateDomain <> "" Then
                    linkDomain = webServer.requestDomain
                Else
                    linkDomain = webServer.requestDomain
                End If
                '
                ' protocol
                '
                If PageIsSecure Or templateSecure Then
                    linkprotocol = "https://"
                Else
                    linkprotocol = "http://"
                End If
                linkLong = linkprotocol & linkDomain & linkPathPage
            Else
                '
                ' ----- Long TemplateLink
                '
                linkLong = templateLink
            End If
            '
            ' assemble
            '
            pageManager_GetPageLink4 = linkLong
            If linkQS <> "" Then
                pageManager_GetPageLink4 = pageManager_GetPageLink4 & "?" & linkQS
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError13("main_GetPageLink4")
        End Function
        '
        '====================================================================================================
        ' main_Get a page link if you know nothing about the page
        '   If you already have all the info, lik the parents templateid, etc, call the ...WithArgs call
        '====================================================================================================
        '
        Public Function main_GetPageLink3(ByVal PageID As Integer, ByVal QueryStringSuffix As String, ByVal AllowLinkAlias As Boolean) As String
            main_GetPageLink3 = pageManager_GetPageLink4(PageID, QueryStringSuffix, AllowLinkAlias, False)
        End Function
        '
        Public Function main_GetPageLink2(ByVal PageID As Integer, ByVal QueryStringSuffix As String) As String
            main_GetPageLink2 = pageManager_GetPageLink4(PageID, QueryStringSuffix, True, False)
            'main_GetPageLink2 = main_GetPageLink3(PageID, QueryStringSuffix, True)
        End Function
        '
        Public Function main_GetPageLink(ByVal PageID As Integer) As String
            main_GetPageLink = pageManager_GetPageLink4(PageID, "", True, False)
            'main_GetPageLink = main_GetPageLink3(PageID, "", True)
        End Function
        '
        '====================================================================================================
        ' main_Get a page link if you know nothing about the page
        '   If you already have all the info, lik the parents templateid, etc, call the ...WithArgs call
        '====================================================================================================
        '
        Public Function main_GetPageDynamicLink(ByVal PageID As Integer, ByVal UseContentWatchLink As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetPageDynamicLink")
            '
            Dim CS As Integer
            Dim CCID As Integer
            Dim DefaultLink As String
            Dim SectionID As Integer
            Dim IsRootPage As Boolean
            Dim templateId As Integer
            Dim MenuLinkOverRide As String
            Dim ParentID As Integer
            Dim PageFound As Boolean
            Dim PCCPtr As Integer
            Dim PageIsSecure As Boolean
            '
            Call main_GetPageArgs(PageID, pagemanager_IsWorkflowRendering, user.isQuickEditing(""), CCID, templateId, ParentID, MenuLinkOverRide, IsRootPage, SectionID, PageIsSecure, "")
            '    PCCPtr = pageManager_cache_pageContent_getPtr(PageID, main_IsWorkflowRendering, main_IsQuickEditing(""))
            '    If PCCPtr >= 0 Then
            '        PageFound = True
            '        CCID = encodeInteger(main_pcc(PCC_ContentControlID, PCCPtr))
            '        TemplateID = encodeInteger(main_pcc(PCC_TemplateID, PCCPtr))
            '        ParentID = encodeInteger(main_pcc(PCC_ParentID, PCCPtr))
            '        MenuLinkOverRide = encodeText(main_pcc(PCC_Link, PCCPtr))
            '        IsRootPage = (ParentID = 0)
            '    End If
            '    If TemplateID = 0 And ParentID <> 0 Then
            '        '
            '        ' Chase page tree to main_Get templateid
            '        '
            '        TemplateID = main_GetPageDynamicLink_GetTemplateID(ParentID, "")
            '    End If
            '    '
            '    ' Chase page tree after PageName, then main_Get sectionID ***** really need a page cache
            '    '
            '    SectionID = main_GetPageDynamicLink_GetSectionID(PageID, "")
            '
            ' Convert default page to default link
            '
            DefaultLink = siteProperties.serverPageDefault
            If Mid(DefaultLink, 1, 1) <> "/" Then
                DefaultLink = "/" & siteProperties.serverPageDefault
            End If
            '
            main_GetPageDynamicLink = main_GetPageDynamicLinkWithArgs(CCID, PageID, DefaultLink, IsRootPage, templateId, SectionID, MenuLinkOverRide, UseContentWatchLink)
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError13("main_GetPageDynamicLink")
        End Function
        '
        '
        '
        Private Function main_GetPageDynamicLinkWithArgs(ByVal ContentControlID As Integer, ByVal PageID As Integer, ByVal DefaultLink As String, ByVal IsRootPage As Boolean, ByVal templateId As Integer, ByVal SectionID As Integer, ByVal MenuLinkOverRide As String, ByVal UseContentWatchLink As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetPageDynamicLinkWithArgs")
            '
            Dim TCPtr As Integer
            '
            If MenuLinkOverRide <> "" Then
                main_GetPageDynamicLinkWithArgs = "?rc=" & ContentControlID & "&ri=" & PageID
            Else
                If UseContentWatchLink Then
                    '
                    ' Legacy method - lookup link from a table set during the last page hit
                    '
                    main_GetPageDynamicLinkWithArgs = main_GetContentWatchLinkByID(ContentControlID, PageID, DefaultLink, False)
                Else
                    '
                    ' Current method - all pages are in the Template, Section, Page structure
                    '
                    If templateId <> 0 Then
                        '
                        ' if template, use that
                        '
                        TCPtr = pageManager_cache_pageTemplate_getPtr(templateId)
                        ' test ???????????????????????????????????????
                        If TCPtr >= 0 Then
                            main_GetPageDynamicLinkWithArgs = EncodeText(cache_pageTemplate(TC_Link, TCPtr))
                        End If
                        'main_GetPageDynamicLinkWithArgs = main_GetTCLink(TCPtr)
                    End If
                    If main_GetPageDynamicLinkWithArgs = "" Then
                        If DefaultLink <> "" Then
                            '
                            ' if default given, use that
                            '
                            main_GetPageDynamicLinkWithArgs = DefaultLink
                        Else
                            '
                            ' fallback, use content watch
                            '
                            main_GetPageDynamicLinkWithArgs = main_GetContentWatchLinkByID(ContentControlID, PageID, , False)
                            ' ##### moved here from teh end -- do not convert a default link so https/http can be forced with default
                            'main_GetPageDynamicLinkWithArgs = ConvertLinkToShortLink(main_GetPageDynamicLinkWithArgs, main_ServerHost, main_ServerVirtualPath)
                        End If
                    End If
                    If (PageID = 0) Or (IsRootPage) Then
                        '
                        ' Link to Root Page, no bid, and include sectionid if not 0
                        '
                        If IsRootPage And (SectionID <> 0) Then
                            main_GetPageDynamicLinkWithArgs = modifyLinkQuery(main_GetPageDynamicLinkWithArgs, "sid", CStr(SectionID), True)
                        End If
                        main_GetPageDynamicLinkWithArgs = modifyLinkQuery(main_GetPageDynamicLinkWithArgs, "bid", "", False)
                    Else
                        main_GetPageDynamicLinkWithArgs = modifyLinkQuery(main_GetPageDynamicLinkWithArgs, "bid", EncodeText(PageID), True)
                        ' ##### no, leave this in if bid<>0
                        ' ##### take this out, in main_GetSectionPage, this is handled through the main_RefreshQueryString
                        If PageID <> 0 Then
                            main_GetPageDynamicLinkWithArgs = modifyLinkQuery(main_GetPageDynamicLinkWithArgs, "sid", "", False)
                        End If
                    End If
                End If
            End If
            ' ##### if the default is long, leave it long -- move this to just the content watch tree
            'main_GetPageDynamicLinkWithArgs = ConvertLinkToShortLink(main_GetPageDynamicLinkWithArgs, main_ServerHost, main_ServerVirtualPath)
            main_GetPageDynamicLinkWithArgs = EncodeAppRootPath(main_GetPageDynamicLinkWithArgs, web_requestVirtualFilePath, www_requestRootPath, webServer.requestDomain)
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError13("main_GetPageDynamicLinkWithArgs")
        End Function
        '
        '
        '
        Private Function pageManager_GetSectionLink(ByVal ShortLink As String, ByVal PageID As Integer, ByVal SectionID As Integer) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00378")
            '
            Dim QSplit() As String
            Dim QSPlitCount As Integer
            Dim QSplitPointer As Integer
            Dim NVSplit() As String
            '
            pageManager_GetSectionLink = ShortLink
            If web_RefreshQueryString <> "" Then
                QSplit = Split(web_RefreshQueryString, "&")
                QSPlitCount = UBound(QSplit) + 1
                For QSplitPointer = 0 To QSPlitCount - 1
                    NVSplit = Split(QSplit(QSplitPointer), "=")
                    If UBound(NVSplit) > 0 Then
                        pageManager_GetSectionLink = modifyLinkQuery(pageManager_GetSectionLink, NVSplit(0), NVSplit(1), True)
                    End If
                Next
            End If
            If PageID = 0 Then
                pageManager_GetSectionLink = modifyLinkQuery(pageManager_GetSectionLink, "bid", "", False)
                If SectionID = 0 Then
                    pageManager_GetSectionLink = modifyLinkQuery(pageManager_GetSectionLink, "sid", "", False)
                Else
                    pageManager_GetSectionLink = modifyLinkQuery(pageManager_GetSectionLink, "sid", CStr(SectionID), True)
                End If
            Else
                '
                ' If I have a pageID, block the sectionID
                '
                pageManager_GetSectionLink = modifyLinkQuery(pageManager_GetSectionLink, "bid", CStr(PageID), True)
                pageManager_GetSectionLink = modifyLinkQuery(pageManager_GetSectionLink, "sid", "", False)
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError13("pageManager_GetSectionLink")
        End Function
        '
        '===================================================================================================
        '   Load Template from TemplateID
        '       Template is loaded by ID
        '       If it is not found, default template is loaded
        '       If default template is not found, it is created
        '       Loaded TemplateID is returned - so you know if it loaded correctly
        '
        '       If Link is provided with protocol, it is returned with protocol
        '       If link is just a page, it is converted to a short link
        '       If link is blank, blank is returned and a redirect is not required
        '===================================================================================================
        '
        Private Function pageManager_LoadTemplateGetID(ByVal templateId As Integer) As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00379")
            '
            Dim CS As Integer
            Dim FieldList As String
            Const ContentName = "Page Templates"
            '
            If (templateId <> 0) And (main_RenderedTemplateID = templateId) Then
                '
                ' Use the previous values already loaded
                '
            Else
                main_RenderedTemplateID = templateId
                pageManager_TemplateBody = ""
                pageManager_TemplateLink = ""
                If True Then
                    FieldList = "ID,Link,BodyHTML"
                Else
                    FieldList = "ID,Link"
                End If
                CS = -1
                If templateId <> 0 Then
                    CS = db_csOpenRecord(ContentName, templateId, , , FieldList)
                End If
                If (templateId = 0) Or (Not db.cs_Ok(CS)) Then
                    '
                    ' ----- if template not found, return default template
                    '       if this operation fails, exit now -- do not continue and create new template
                    '
                    main_RenderedTemplateID = 0
                    If domains.domainDetails.defaultTemplateId <> 0 Then
                        '
                        ' ----- attempt to use the domain's default template
                        '
                        Call db.cs_Close(CS)
                        CS = db_csOpenRecord(ContentName, domains.domainDetails.defaultTemplateId, , , FieldList)
                        If Not db.cs_Ok(CS) Then
                            '
                            ' the defaultemplateid in the domain is not valid
                            '
                            Call db.executeSql("update ccdomains set defaulttemplateid=0 where defaulttemplateid=" & domains.domainDetails.defaultTemplateId)
                            Call cache.invalidateTagCommaList("domains")
                        End If
                    End If
                    If Not db.cs_Ok(CS) Then
                        '
                        ' ----- attempt to use the site's default template
                        '
                        Call db.cs_Close(CS)
                        CS = db.csOpen(ContentName, "name=" & db.encodeSQLText(TemplateDefaultName), "ID", , , , , FieldList)
                    End If
                    If db.cs_Ok(CS) Then
                        main_RenderedTemplateID = db.cs_getInteger(CS, "ID")
                        main_RenderedTemplateName = db.cs_getText(CS, "name")
                        pageManager_TemplateName = main_RenderedTemplateName
                        pageManager_TemplateLink = main_verifyTemplateLink(db.db_GetCS(CS, "Link"))
                        'pageManager_TemplateLink = app.csv_GetCS(CS, "Link")
                        If True Then
                            pageManager_TemplateBody = db.db_GetCS(CS, "BodyHTML")
                        End If
                    End If
                    Call db.cs_Close(CS)
                    '
                    ' ----- if default template not found, create a simple default template
                    '
                    If main_RenderedTemplateID = 0 Then
                        pageManager_TemplateName = TemplateDefaultName
                        pageManager_TemplateBody = TemplateDefaultBody
                        CS = db.cs_insertRecord("Page Templates")
                        If db.cs_Ok(CS) Then
                            main_RenderedTemplateID = db.cs_getInteger(CS, "ID")
                            main_RenderedTemplateName = TemplateDefaultName
                            Call db.cs_set(CS, "name", TemplateDefaultName)
                            Call db.cs_set(CS, "Link", "")
                            If True Then
                                Call db.cs_set(CS, "BodyHTML", pageManager_TemplateBody)
                            End If
                            If True Then
                                Call db.cs_set(CS, "ccGuid", DefaultTemplateGuid)
                            End If
                            Call db.cs_Close(CS)
                        End If
                        Call pageManager_cache_pageTemplate_clear()
                    End If
                    pageManager_TemplateLink = ""
                Else
                    '
                    ' ----- load template
                    '
                    If True Then
                        pageManager_TemplateBody = db.db_GetCS(CS, "BodyHTML")
                    Else
                        pageManager_TemplateBody = "<!-- Template Body support requires a Contensive database upgrade through the Application Manager. -->" & TemplateDefaultBody
                    End If
                    pageManager_TemplateName = db.db_GetCS(CS, "name")
                    pageManager_TemplateLink = main_verifyTemplateLink(db.db_GetCS(CS, "Link"))
                End If
                Call db.cs_Close(CS)
                pageManager_TemplateLink = main_verifyTemplateLink(pageManager_TemplateLink)
            End If
            '
            pageManager_LoadTemplateGetID = main_RenderedTemplateID
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError13("pageManager_LoadTemplateGetID")
        End Function
        '
        '=============================================================================
        '   Report
        '=============================================================================
        '
        Public Function main_GetReport(ByVal RowCount As Integer, ByVal ColCaption() As String, ByVal ColAlign() As String, ByVal ColWidth() As String, ByVal Cells As String(,), ByVal PageSize As Integer, ByVal PageNumber As Integer, ByVal PreTableCopy As String, ByVal PostTableCopy As String, ByVal DataRowCount As Integer, ByVal ClassStyle As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetReport")
            '
            Dim Adminui As New coreAdminUIClass(Me)
            '
            main_GetReport = Adminui.GetReport(RowCount, ColCaption, ColAlign, ColWidth, Cells, PageSize, PageNumber, PreTableCopy, PostTableCopy, DataRowCount, ClassStyle)
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_GetReport")
        End Function
        '
        '
        '
        Public Function main_GetCS2Text(ByVal CSPointer As Integer, ByVal FieldName As String) As String
            main_GetCS2Text = db.db_GetCS(EncodeInteger(CSPointer), EncodeText(FieldName))
        End Function
        '        '
        '        '=============================================================================================
        '        '   main_SetCS
        '        '       Saves the value, encoded correctly for the field type
        '        '=============================================================================================
        '        '
        '        Public Sub app.db_SetCS(ByVal CSPointer As Integer, ByVal FieldName As String, ByVal FieldValue As String)
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("SetCS")
        '            '
        '            'If Not (true) Then Exit Sub
        '            '
        '            Call app.db_SetCS(EncodeInteger(CSPointer), EncodeText(FieldName), FieldValue)
        '            '
        '            Exit Sub
        'ErrorTrap:
        '            Call handleLegacyError18("main_SetCS")
        '        End Sub
        '
        '=============================================================================================
        '   main_GetAutoSite
        '
        '       Site created from BID
        '           bid specifies the PageContent record
        '           PageContent specifies the HTMLTemplate
        '           HTMLTemplate has replacable elements for each content.
        '               replacements are AC tags
        '                   - images are already done out of Resources
        '                   - Add-ons done
        '                       - Add 'server-side' to Add-on so use the .execute function)
        '=============================================================================================
        '
        Public Function main_GetAutoSite() As String
            Call handleLegacyError23("Deprecated Method: main_GetAutoSite")
        End Function
        '
        '=============================================================================================
        '   main_GetAutoSite_Template
        '
        '       Site created from BID
        '           bid specifies the PageContent record
        '           PageContent specifies the HTMLTemplate
        '           HTMLTemplate has replacable elements for each content.
        '               replacements are AC tags
        '                   - images are already done out of Resources
        '                   - Add-ons done
        '                       - Add 'server-side' to Add-on so use the .execute function)
        '=============================================================================================
        '
        Private Function main_GetAutoSite_Template(ByVal templateId As Integer) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00389")
            '
            'If Not (true) Then Exit Function
            '
            Dim CS As Integer
            Dim BakeName As String
            Dim StyleSheetID As Integer
            Dim StyleSheetCopy As String
            '
            BakeName = "AutoSiteTemplate" & templateId
            main_GetAutoSite_Template = EncodeText(cache.getObject(Of String)(BakeName))
            If main_GetAutoSite_Template = "" Then
                If templateId = 0 Then
                    '
                    ' No template Specified, Generate something to host the content
                    '
                    main_GetAutoSite_Template = "" _
                        & vbCrLf & main_docType _
                        & vbCrLf & "<html>" _
                        & cr & "<head>" _
                        & cr2 & "<STYLE type=text/css></STYLE>" _
                        & cr & "</head>" _
                        & cr & "<body>" _
                        & vbCrLf & "<ac Type=""PageBody"">" _
                        & cr & "</body>" _
                        & vbCrLf & "</html>"
                Else
                    '
                    ' Template Specified
                    '
                    CS = db_csOpen("AutoSite Templates", templateId, , , "Copy,StyleSheetID")
                    If db.cs_Ok(CS) Then
                        main_GetAutoSite_Template = db.db_GetCS(CS, "Copy")
                        StyleSheetID = EncodeInteger(db.db_GetCS(CS, "StyleSheetID"))
                    End If
                    Call db.cs_Close(CS)
                    '
                    ' StyleSheet Specified
                    '
                    If StyleSheetID <> 0 Then
                        CS = db_csOpen("AutoSite Styles", StyleSheetID, , , "Copy")
                        If db.cs_Ok(CS) Then
                            StyleSheetCopy = db.db_GetCS(CS, "Copy")
                        End If
                        Call db.cs_Close(CS)
                    End If
                    '
                    ' Assemble Template
                    '
                End If
                Call cache.setKey(BakeName, main_GetAutoSite_Template, "AutoSite Templates")
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetAutoSite_Template")
        End Function
        '
        '=============================================================================
        '   Sets the MetaContent subsystem so the next call to main_GetLastMeta... returns the correct value
        '       And neither takes much time
        '=============================================================================
        '
        Public Sub main_SetMetaContent(ByVal ContentID As Integer, ByVal RecordID As Integer)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("SetMetaContent")
            '
            Dim KeywordList As String
            Dim CS As Integer
            Dim Criteria As String
            Dim SQL As String
            Dim FieldList As String
            Dim iContentID As Integer
            Dim iRecordID As Integer
            Dim MetaContentID As Integer
            '
            main_MetaContent_Set = True
            iContentID = EncodeInteger(ContentID)
            iRecordID = EncodeInteger(RecordID)
            If (iContentID <> 0) And (iRecordID <> 0) Then
                '
                ' main_Get ID, Description, Title
                '
                Criteria = "(ContentID=" & iContentID & ")and(RecordID=" & iRecordID & ")"
                If False Then '.3.550" Then
                    FieldList = "ID,Name,MetaDescription,'' as OtherHeadTags,'' as MetaKeywordList"
                ElseIf False Then '.3.930" Then
                    FieldList = "ID,Name,MetaDescription,OtherHeadTags,'' as MetaKeywordList"
                Else
                    FieldList = "ID,Name,MetaDescription,OtherHeadTags,MetaKeywordList"
                End If
                CS = db.csOpen("Meta Content", Criteria, , , , ,, FieldList)
                If db.cs_Ok(CS) Then
                    MetaContentID = db.cs_getInteger(CS, "ID")
                    Call main_AddPagetitle2(html_EncodeHTML(db.cs_getText(CS, "Name")), "page content")
                    Call main_addMetaDescription2(html_EncodeHTML(db.cs_getText(CS, "MetaDescription")), "page content")
                    Call main_AddHeadTag2(db.cs_getText(CS, "OtherHeadTags"), "page content")
                    If True Then
                        KeywordList = vbReplace(db.cs_getText(CS, "MetaKeywordList"), vbCrLf, ",")
                    End If
                    'main_MetaContent_Title = encodeHTML(app.csv_GetCSText(CS, "Name"))
                    'main_MetaContent_Description = encodeHTML(app.csv_GetCSText(CS, "MetaDescription"))
                    'main_MetaContent_OtherHeadTags = app.csv_GetCSText(CS, "OtherHeadTags")
                End If
                Call db.cs_Close(CS)
                '
                ' main_Get Keyword List
                '
                SQL = "select ccMetaKeywords.Name" _
                    & " From ccMetaKeywords" _
                    & " LEFT JOIN ccMetaKeywordRules on ccMetaKeywordRules.MetaKeywordID=ccMetaKeywords.ID" _
                    & " Where ccMetaKeywordRules.MetaContentID=" & MetaContentID
                CS = db.cs_openSql(SQL)
                Do While db.cs_Ok(CS)
                    KeywordList = KeywordList & "," & db.cs_getText(CS, "Name")
                    Call db.db_csGoNext(CS)
                Loop
                If KeywordList <> "" Then
                    If Left(KeywordList, 1) = "," Then
                        KeywordList = Mid(KeywordList, 2)
                    End If
                    'KeyWordList = Mid(KeyWordList, 2)
                    KeywordList = html_EncodeHTML(KeywordList)
                    Call main_addMetaKeywordList2(KeywordList, "page content")
                End If
                Call db.cs_Close(CS)
                'main_MetaContent_KeyWordList = encodeHTML(KeyWordList)
            End If

            'MetaContentID = 0
            'main_MetaContent_Title = ""
            'main_MetaContent_Description = ""
            'main_MetaContent_OtherHeadTags = ""
            'main_MetaContent_KeyWordList = ""
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_SetMetaContent")
        End Sub
        '
        '=============================================================================
        '   Returns Meta Data
        '=============================================================================
        '
        Public Function main_GetLastMetaTitle() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00392")
            '
            main_GetLastMetaTitle = main_MetaContent_Title
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetLastMetaTitle")
        End Function
        '
        '=============================================================================
        '   Returns Meta Data
        '=============================================================================
        '
        Public Function main_GetLastMetaDescription() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetLastMetaDescription")
            '
            main_GetLastMetaDescription = main_MetaContent_Description
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetLastMetaDescription")
        End Function
        '
        '=============================================================================
        '   Returns Meta Data
        '=============================================================================
        '
        Public Function main_GetLastOtherHeadTags() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetLastOtherHeadTags")
            '
            main_GetLastOtherHeadTags = main_MetaContent_OtherHeadTags
            main_MetaContent_OtherHeadTags = ""
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetLastOtherHeadTags")
        End Function
        '
        '=============================================================================
        '   Returns Meta Data
        '=============================================================================
        '
        Public Function main_GetLastMetaKeywordList() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetLastMetaKeywordList")
            '
            main_GetLastMetaKeywordList = main_MetaContent_KeyWordList
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetLastMetaKeywordList")
        End Function
        '
        '
        '
        Public Property main_SQLCommandTimeout() As Integer
            Get
                Return db.db_SQLCommandTimeout
            End Get
            Set(ByVal value As Integer)
                db.db_SQLCommandTimeout = value
            End Set
        End Property
        '
        '
        '
        Public ReadOnly Property responseRedirect() As String
            Get
                Return _docBufferRedirect
            End Get
        End Property
        '
        '
        '
        Public ReadOnly Property responseHeader() As String
            Get
                Return _docBufferResponseHeader
            End Get
        End Property
        '
        '
        '
        Public ReadOnly Property responseCookies() As String
            Get
                Return _docBufferCookies
            End Get
        End Property
        '
        '
        '
        Public ReadOnly Property responseContentType() As String
            Get
                Return _docBufferContentType
            End Get
        End Property
        '
        '
        '
        Public ReadOnly Property responseStatus() As String
            Get
                Return _docBufferResponseStatus
            End Get
        End Property
        '
        '
        '
        Public ReadOnly Property responseBuffer() As String
            Get
                Return _docBuffer
            End Get
        End Property

        '
        '
        '
        Sub main_EncodePage_SplitBody(ByVal PageSource As String, ByVal PageSourceBody As String, ByVal PageSourcePreBody As String, ByVal PageSourcePostBody As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00408")
            '
            'If Not (true) Then Exit Sub
            '
            Dim BodyStart As Integer
            Dim BodyEnd As Integer
            '
            BodyStart = vbInstr(1, PageSource, "<body", vbTextCompare)
            If BodyStart <> 0 Then
                BodyStart = vbInstr(BodyStart, PageSource, ">", vbTextCompare)
                If BodyStart <> 0 Then
                    BodyStart = BodyStart + 1
                    BodyEnd = vbInstr(BodyStart, PageSource, "</body", vbTextCompare)
                    If BodyEnd <> 0 Then
                        PageSourceBody = Mid(PageSource, BodyStart, BodyEnd - BodyStart)
                        PageSourcePreBody = Left(PageSource, BodyStart - 1)
                        PageSourcePostBody = Mid(PageSource, BodyEnd)
                    End If
                End If
            End If
            '
            Exit Sub
            '
ErrorTrap:
            Call handleLegacyError18("main_EncodePage_SplitBody")
        End Sub
        '
        '
        '
        Public Function main_GetBody(ByVal HTMLDoc As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00409")
            '
            Dim ignore0 As String
            Dim Ignore1 As String
            '
            Call main_EncodePage_SplitBody(HTMLDoc, main_GetBody, ignore0, Ignore1)
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_EncodePage_SplitBody")
        End Function
        '
        '
        '
        Public ReadOnly Property main_ServerStyleTag() As String
            Get
                Return pageManager_GetStyleTagPublic()
            End Get
        End Property

        '
        '========================================================================
        '   Returns the entire HTML page based on the bid/sid stream values
        '
        '   This code is based on the GoMethod site script
        '========================================================================
        '
        Public Function pageManager_execute() As String
            Dim returnDoc As String = ""
            Try
                Dim downloadId As Integer
                Dim Pos As Integer
                Dim htmlBody As String
                Dim htmlHead As String
                Dim TPMode As Integer
                Dim EndOfBody As String
                Dim bodyTag As String
                Dim ToolsPanel As String
                Dim bodyAddonId As Integer
                Dim bodyAddonStatusOK As Boolean
                '
                Dim Clip As String
                Dim ClipParentRecordID As Integer
                Dim ClipParentContentID As Integer
                Dim ClipParentContentName As String
                Dim ClipChildContentID As Integer
                Dim ClipChildContentName As String
                Dim ClipChildRecordID As Integer
                Dim ClipChildRecordName As String
                Dim CSClip As Integer
                'Dim ParentID As Integer
                'Dim BufferString As String
                Dim ClipBoardArray() As String
                Dim ClipBoard As String
                Dim ClipParentFieldList As String
                Dim Fields As String()
                Dim FieldCount As Integer
                '
                Dim NameValue As String
                Dim NameValues() As String
                Dim RedirectLink As String = ""
                Dim RedirectReason As String = ""
                Dim PageNotFoundReason As String = ""
                Dim PageNotFoundSource As String = ""
                Dim IsPageNotFound As Boolean = False
                '
                If docOpen Then
                    main_AdminWarning = docProperties.getText("main_AdminWarningMsg")
                    main_AdminWarningPageID = docProperties.getInteger("main_AdminWarningPageID")
                    main_AdminWarningSectionID = docProperties.getInteger("main_AdminWarningSectionID")
                    '
                    '
                    '--------------------------------------------------------------------------
                    ' Add cookie test
                    '   Ajax and RemoteMethods do not support cookie test
                    '--------------------------------------------------------------------------
                    '
                    Dim AllowCookieTest As Boolean
                    AllowCookieTest = siteProperties.allowVisitTracking And (visit_pages = 1)
                    If AllowCookieTest Then
                        Call main_AddOnLoadJavascript2("if (document.cookie && document.cookie != null){cj.ajax.qs('f92vo2a8d=" & security.encodeToken(visit_Id, main_PageStartTime) & "')};", "Cookie Test")
                    End If
                    '
                    '--------------------------------------------------------------------------
                    '   User form processing
                    '       if a form is created in the editor, process it by emailing and saving to the User Form Response content
                    '--------------------------------------------------------------------------
                    '
                    If docProperties.getInteger("ContensiveUserForm") = 1 Then
                        Dim FromAddress As String = siteProperties.getText("EmailFromAddress", "info@" & main_ServerDomain)
                        Call main_SendFormEmail(siteProperties.emailAdmin, FromAddress, "Form Submitted on " & web_requestReferer)
                        Dim cs As Integer = db.cs_insertRecord("User Form Response")
                        If db.cs_Ok(cs) Then
                            Call db.cs_set(cs, "name", "Form " & webServer.requestReferrer)
                            Dim Copy As String = ""
                            For Each kvp As KeyValuePair(Of String, docPropertiesClass) In docProperties.docPropertiesDict
                                If (kvp.Key.ToLower() <> "contensiveuserform") Then
                                    Copy &= kvp.Value.Name & "=" & kvp.Value.Value & vbCrLf
                                End If
                            Next
                            Call db.cs_set(cs, "copy", Copy)
                            Call db.cs_set(cs, "VisitId", visit_Id)
                        End If
                        Call db.cs_Close(cs)
                    End If
                    '
                    '--------------------------------------------------------------------------
                    '   Contensive Form Page Processing
                    '--------------------------------------------------------------------------
                    '
                    If docProperties.getInteger("ContensiveFormPageID") <> 0 Then
                        Call pageManager_ProcessFormPage(docProperties.getInteger("ContensiveFormPageID"))
                    End If
                    '
                    '--------------------------------------------------------------------------
                    ' ----- Automatic Redirect to a full URL
                    '   If the link field of the record is an absolution address
                    '       rc = redirect contentID
                    '       ri = redirect content recordid
                    '--------------------------------------------------------------------------
                    '
                    main_RedirectContentID = (docProperties.getInteger("rc"))
                    If (main_RedirectContentID <> 0) Then
                        main_RedirectRecordID = (docProperties.getInteger("ri"))
                        If (main_RedirectRecordID <> 0) Then
                            Dim contentName As String = metaData.getContentNameByID(main_RedirectContentID)
                            If contentName <> "" Then
                                If main_RedirectByRecord_ReturnStatus(contentName, main_RedirectRecordID) Then
                                    '
                                    'Call AppendLog("main_init(), 3210 - exit for rc/ri redirect ")
                                    '
                                    docOpen = False '--- should be disposed by caller --- Call dispose
                                    Return _docBuffer
                                Else
                                    main_AdminWarning = "<p>The site attempted to automatically jump to another page, but there was a problem with the page that included the link.<p>"
                                    main_AdminWarningPageID = main_RedirectRecordID
                                End If
                            End If
                        End If
                    End If
                    '
                    '--------------------------------------------------------------------------
                    ' ----- Tools Panel Mode
                    '       tpmode=0 movestools panel to the bottom
                    '       tpmode=1 moves tools panel to the left
                    '       tpmode=2 moves tools panel to the right
                    '       tpmode=3 moves tools panel to the top
                    '--------------------------------------------------------------------------
                    '
                    If docProperties.getText("tpmode") <> "" Then
                        Call siteProperties.setProperty("ToolsPanelMode", docProperties.getInteger("tpmode"))
                    End If
                    '
                    '--------------------------------------------------------------------------
                    ' ----- Active Download hook
                    '       downloads are actually redirects back to here
                    '       RequestNameLibraryFileID has the Encoded ID in the ccLibraryFiles table
                    '--------------------------------------------------------------------------
                    '
                    If True Then
                        Dim libraryFilePtr As Integer
                        Dim libraryFileClicks As Integer
                        Dim link As String = ""
                        Dim RecordEID As String = docProperties.getText(RequestNameLibraryFileID)
                        If (RecordEID <> "") Then
                            Dim tokenDate As Date
                            Call security.decodeToken(RecordEID, downloadId, tokenDate)
                            'downloadId = main_DecodeKeyNumber(RecordEID)
                        End If
                        If downloadId <> 0 Then
                            '
                            ' ----- lookup record and set clicks
                            '
                            Call cache_libraryFiles_loadIfNeeded()
                            libraryFilePtr = cache_libraryFilesIdIndex.getPtr(CStr(downloadId))
                            If libraryFilePtr >= 0 Then
                                libraryFileClicks = EncodeInteger(cache_libraryFiles(LibraryFilesCache_clicks, libraryFilePtr))
                                link = EncodeText(cache_libraryFiles(LibraryFilesCache_filename, libraryFilePtr))
                                Call db.executeSql("update cclibraryfiles set clicks=" & (libraryFileClicks + 1) & " where id=" & downloadId)
                            End If
                            If link <> "" Then
                                '
                                ' ----- create log entry
                                '
                                Dim CSPointer As Integer = db.cs_insertRecord("Library File Log")
                                If db.cs_Ok(CSPointer) Then
                                    Call db.cs_set(CSPointer, "FileID", downloadId)
                                    Call db.cs_set(CSPointer, "VisitId", visit_Id)
                                    Call db.cs_set(CSPointer, "MemberID", user.id)
                                End If
                                Call db.cs_Close(CSPointer)
                                '
                                ' ----- and go
                                '
                                Call web_Redirect2(web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, link), "Redirecting because the active download request variable is set to a valid Library Files record. Library File Log has been appended.", False)
                            End If
                        End If
                    End If
                    '
                    '--------------------------------------------------------------------------
                    '   Process clipboard cut/paste
                    '--------------------------------------------------------------------------
                    '
                    Clip = docProperties.getText(RequestNameCut)
                    If (Clip <> "") Then
                        '
                        ' if a cut, load the clipboard
                        '
                        Call visitProperty.setProperty("Clipboard", Clip)
                        Call modifyLinkQuery(web_RefreshQueryString, RequestNameCut, "")
                    End If
                    ClipParentContentID = docProperties.getInteger(RequestNamePasteParentContentID)
                    ClipParentRecordID = docProperties.getInteger(RequestNamePasteParentRecordID)
                    ClipParentFieldList = docProperties.getText(RequestNamePasteFieldList)
                    If (ClipParentContentID <> 0) And (ClipParentRecordID <> 0) Then
                        '
                        ' Request for a paste, clear the cliboard
                        '
                        ClipBoard = visitProperty.getText("Clipboard", "")
                        Call visitProperty.setProperty("Clipboard", "")
                        Call ModifyQueryString(web_RefreshQueryString, RequestNamePasteParentContentID, "")
                        Call ModifyQueryString(web_RefreshQueryString, RequestNamePasteParentRecordID, "")
                        ClipParentContentName = metaData.getContentNameByID(ClipParentContentID)
                        If (ClipParentContentName = "") Then
                            ' state not working...
                        ElseIf (ClipBoard = "") Then
                            ' state not working...
                        Else
                            If Not user.isAuthenticatedContentManager(ClipParentContentName) Then
                                Call error_AddUserError("The paste operation failed because you are not a content manager of the Clip Parent")
                            Else
                                '
                                ' Current identity is a content manager for this content
                                '
                                Dim Position As Integer = vbInstr(1, ClipBoard, ".")
                                If Position = 0 Then
                                    Call error_AddUserError("The paste operation failed because the clipboard data is configured incorrectly.")
                                Else
                                    ClipBoardArray = Split(ClipBoard, ".")
                                    If UBound(ClipBoardArray) = 0 Then
                                        Call error_AddUserError("The paste operation failed because the clipboard data is configured incorrectly.")
                                    Else
                                        ClipChildContentID = EncodeInteger(ClipBoardArray(0))
                                        ClipChildRecordID = EncodeInteger(ClipBoardArray(1))
                                        If Not db_IsWithinContent(ClipChildContentID, ClipParentContentID) Then
                                            Call error_AddUserError("The paste operation failed because the destination location is not compatible with the clipboard data.")
                                        Else
                                            '
                                            ' the content definition relationship is OK between the child and parent record
                                            '
                                            ClipChildContentName = metaData.getContentNameByID(ClipChildContentID)
                                            If Not ClipChildContentName <> "" Then
                                                Call error_AddUserError("The paste operation failed because the clipboard data content is undefined.")
                                            Else
                                                If (ClipParentRecordID = 0) Then
                                                    Call error_AddUserError("The paste operation failed because the clipboard data record is undefined.")
                                                ElseIf main_IsChildRecord(ClipChildContentName, ClipParentRecordID, ClipChildRecordID) Then
                                                    Call error_AddUserError("The paste operation failed because the destination location is a child of the clipboard data record.")
                                                Else
                                                    '
                                                    ' the parent record is not a child of the child record (circular check)
                                                    '
                                                    ClipChildRecordName = "record " & ClipChildRecordID
                                                    CSClip = db_csOpenRecord(ClipChildContentName, ClipChildRecordID, True, True)
                                                    If Not db.cs_Ok(CSClip) Then
                                                        Call error_AddUserError("The paste operation failed because the data record referenced by the clipboard could not found.")
                                                    Else
                                                        '
                                                        ' Paste the edit record record
                                                        '
                                                        ClipChildRecordName = db.cs_getText(CSClip, "name")
                                                        If ClipParentFieldList = "" Then
                                                            '
                                                            ' Legacy paste - go right to the parent id
                                                            '
                                                            If Not db.db_IsCSFieldSupported(CSClip, "ParentID") Then
                                                                Call error_AddUserError("The paste operation failed because the record you are pasting does not   support the necessary parenting feature.")
                                                            Else
                                                                Call db.cs_set(CSClip, "ParentID", ClipParentRecordID)
                                                            End If
                                                        Else
                                                            '
                                                            ' Fill in the Field List name values
                                                            '
                                                            Fields = Split(ClipParentFieldList, ",")
                                                            FieldCount = UBound(Fields) + 1
                                                            For FieldPointer = 0 To FieldCount - 1
                                                                Dim Pair As String
                                                                Pair = Fields(FieldPointer)
                                                                If Mid(Pair, 1, 1) = "(" And Mid(Pair, Len(Pair), 1) = ")" Then
                                                                    Pair = Mid(Pair, 2, Len(Pair) - 2)
                                                                End If
                                                                NameValues = Split(Pair, "=")
                                                                If UBound(NameValues) = 0 Then
                                                                    Call error_AddUserError("The paste operation failed because the clipboard data Field List is not configured correctly.")
                                                                Else
                                                                    If Not db.db_IsCSFieldSupported(CSClip, CStr(NameValues(0))) Then
                                                                        Call error_AddUserError("The paste operation failed because the clipboard data Field [" & CStr(NameValues(0)) & "] is not supported by the location data.")
                                                                    Else
                                                                        Call db.cs_set(CSClip, CStr(NameValues(0)), CStr(NameValues(1)))
                                                                    End If
                                                                End If
                                                            Next
                                                        End If
                                                        ''
                                                        '' Fixup Content Watch
                                                        ''
                                                        'ShortLink = main_ServerPathPage
                                                        'ShortLink = ConvertLinkToShortLink(ShortLink, main_ServerHost, main_ServerVirtualPath)
                                                        'ShortLink = modifyLinkQuery(ShortLink, "bid", CStr(ClipChildRecordID), True)
                                                        'Call main_TrackContentSet(CSClip, ShortLink)
                                                    End If
                                                    Call db.cs_Close(CSClip)
                                                    '
                                                    ' Set Child Pages Found and clear caches
                                                    '
                                                    CSClip = db_csOpen(ClipParentContentName, ClipParentRecordID, , , "ChildPagesFound")
                                                    If db.cs_Ok(CSClip) Then
                                                        Call db.cs_set(CSClip, "ChildPagesFound", True.ToString)
                                                    End If
                                                    Call db.cs_Close(CSClip)
                                                    Call pageManager_cache_pageContent_clear()
                                                    If (siteProperties.allowWorkflowAuthoring And workflow.isWorkflowAuthoringCompatible(ClipChildContentName)) Then
                                                        '
                                                        ' Workflow editing
                                                        '
                                                    Else
                                                        '
                                                        ' Live Editing
                                                        '
                                                        Call cache.invalidateTagCommaList(ClipChildContentName & "," & ClipParentContentName)
                                                        Call pageManager_cache_pageContent_clear()
                                                    End If
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                    Clip = docProperties.getText(RequestNameCutClear)
                    If (Clip <> "") Then
                        '
                        ' if a cut clear, clear the clipboard
                        '
                        Call visitProperty.setProperty("Clipboard", "")
                        Clip = visitProperty.getText("Clipboard", "")
                        Call modifyLinkQuery(web_RefreshQueryString, RequestNameCutClear, "")
                    End If
                    '
                    ' link alias and link forward
                    '
                    'Dim Custom404SourcePathPage As String = main_ServerPathPage ' refactor all of this
                    'Dim Custom404SourceNoQueryString As String = main_ServerPathPage
                    ' Dim Custom404SourceQueryString As String = main_ServerQueryString
                    If True Then
                        If True Then
                            Dim LinkAliasCriteria As String = ""
                            Dim linkAliasTest1 As String = ""
                            Dim linkAliasTest2 As String
                            Dim LinkNoProtocol As String = ""
                            Dim linkDomain As String = ""
                            Dim LinkFullPath As String = ""
                            Dim LinkFullPathNoSlash As String = ""
                            Dim isLinkForward As Boolean = False
                            Dim LinkForwardCriteria As String = ""
                            Dim Sql As String = ""
                            Dim CSPointer As Integer = -1
                            Dim IsInLinkForwardTable As Boolean = False
                            Dim Viewings As Integer = 0
                            Dim LinkSplit As String()
                            Dim IsLinkAlias As Boolean = False
                            '
                            '--------------------------------------------------------------------------
                            ' try link alias
                            '--------------------------------------------------------------------------
                            '
                            LinkAliasCriteria = ""
                            linkAliasTest1 = webServer.requestPathPage
                            If (linkAliasTest1.Substring(0, 1) = "/") Then
                                linkAliasTest1 = linkAliasTest1.Substring(1)
                            End If
                            If linkAliasTest1.Length > 0 Then
                                If (linkAliasTest1.Substring(linkAliasTest1.Length - 1, 1) = "/") Then
                                    linkAliasTest1 = linkAliasTest1.Substring(0, linkAliasTest1.Length - 1)
                                End If
                            End If

                            linkAliasTest2 = linkAliasTest1 & "/"
                            If (Not IsPageNotFound) And (webServer.requestPathPage <> "") Then
                                '
                                ' build link variations needed later
                                '
                                '
                                Pos = vbInstr(1, webServer.requestPathPage, "://", vbTextCompare)
                                If Pos <> 0 Then
                                    LinkNoProtocol = Mid(webServer.requestPathPage, Pos + 3)
                                    Pos = vbInstr(Pos + 3, webServer.requestPathPage, "/", vbBinaryCompare)
                                    If Pos <> 0 Then
                                        linkDomain = Mid(webServer.requestPathPage, 1, Pos - 1)
                                        LinkFullPath = Mid(webServer.requestPathPage, Pos)
                                        '
                                        ' strip off leading or trailing slashes, and return only the string between the leading and secton slash
                                        '
                                        If vbInstr(1, LinkFullPath, "/") <> 0 Then
                                            LinkSplit = Split(LinkFullPath, "/")
                                            LinkFullPathNoSlash = LinkSplit(0)
                                            If LinkFullPathNoSlash = "" Then
                                                If UBound(LinkSplit) > 0 Then
                                                    LinkFullPathNoSlash = LinkSplit(1)
                                                End If
                                            End If
                                        End If
                                        linkAliasTest1 = LinkFullPath
                                        linkAliasTest2 = LinkFullPathNoSlash
                                    End If
                                End If
                                '
                                '   if this has not already been recognized as a pagenot found, and the custom404source is present, try all these
                                '   Build LinkForwardCritia and LinkAliasCriteria
                                '   sample: http://www.a.com/kb/test
                                '   LinkForwardCriteria = (Sourcelink='http://www.a.com/kb/test')or(Sourcelink='http://www.a.com/kb/test/')
                                '
                                Call cache_linkForward_load()
                                If cache_linkForward <> "" Then
                                    If 0 < vbInstr(1, cache_linkForward, "," & webServer.requestPathPage & ",", vbTextCompare) Then
                                        isLinkForward = True
                                        LinkForwardCriteria = "(active<>0)and(SourceLink=" & db.encodeSQLText(webServer.requestPathPage) & ")"
                                    ElseIf 0 < vbInstr(1, cache_linkForward, "," & webServer.requestPathPage & "/,", vbTextCompare) Then
                                        isLinkForward = True
                                        LinkForwardCriteria = "(active<>0)and(SourceLink=" & db.encodeSQLText(webServer.requestPathPage & "/") & ")"
                                    ElseIf 0 < vbInstr(1, cache_linkForward, "," & LinkNoProtocol & ",", vbTextCompare) Then
                                        isLinkForward = True
                                        LinkForwardCriteria = "(active<>0)and(SourceLink=" & db.encodeSQLText(LinkNoProtocol) & ")"
                                    ElseIf 0 < vbInstr(1, cache_linkForward, "," & LinkFullPath & ",", vbTextCompare) Then
                                        isLinkForward = True
                                        LinkForwardCriteria = "(active<>0)and(SourceLink=" & db.encodeSQLText(LinkFullPath) & ")"
                                    ElseIf 0 < vbInstr(1, cache_linkForward, "," & LinkFullPathNoSlash & ",", vbTextCompare) Then
                                        isLinkForward = True
                                        LinkForwardCriteria = "(active<>0)and(SourceLink=" & db.encodeSQLText(LinkFullPathNoSlash) & ")"
                                    End If
                                    If isLinkForward Then
                                        '
                                        ' if match, go look it up and verify all OK
                                        '
                                        isLinkForward = False
                                        Sql = db_GetSQLSelect("", "ccLinkForwards", "ID,DestinationLink,Viewings,GroupID", LinkForwardCriteria, "ID", , 1)
                                        CSPointer = db.cs_openSql(Sql)
                                        If db.cs_Ok(CSPointer) Then
                                            '
                                            ' Link Forward found - update count
                                            '
                                            Dim Link As String
                                            Dim GroupID As Integer
                                            Dim groupName As String
                                            '
                                            IsInLinkForwardTable = True
                                            Viewings = db.cs_getInteger(CSPointer, "Viewings") + 1
                                            Sql = "update ccLinkForwards set Viewings=" & Viewings & " where ID=" & db.cs_getInteger(CSPointer, "ID")
                                            Call db.executeSql(Sql)
                                            Link = db.cs_getText(CSPointer, "DestinationLink")
                                            If Link <> "" Then
                                                '
                                                ' Valid Link Forward (without link it is just a record created by the autocreate function
                                                '
                                                isLinkForward = True
                                                Link = db.cs_getText(CSPointer, "DestinationLink")
                                                GroupID = db.cs_getInteger(CSPointer, "GroupID")
                                                If GroupID <> 0 Then
                                                    groupName = group_GetGroupName(GroupID)
                                                    If groupName <> "" Then
                                                        Call group_AddGroupMember(groupName)
                                                    End If
                                                End If
                                                If Link <> "" Then
                                                    RedirectLink = Link
                                                    RedirectReason = "Redirecting because the URL is a valid Link Forward entry."
                                                End If
                                            End If
                                        End If
                                        Call db.cs_Close(CSPointer)
                                    End If
                                End If
                                '
                                If (RedirectLink = "") And Not isLinkForward Then
                                    '
                                    ' Test for Link Alias
                                    '
                                    If (linkAliasTest1 & linkAliasTest2 <> "") Then
                                        Dim Ptr As Integer = cache_linkAlias_getPtrByName(linkAliasTest1)
                                        If (Ptr < 0) Then
                                            Ptr = cache_linkAlias_getPtrByName(linkAliasTest2)
                                        End If
                                        If Ptr >= 0 Then
                                            '
                                            ' Link Alias Found
                                            '
                                            IsLinkAlias = True
                                            '
                                            ' New Way - use pageid and QueryStringSuffix
                                            '
                                            Dim LinkQueryString As String = "bid=" & cache_linkAlias(linkAliasCache_pageId, Ptr) & "&" & cache_linkAlias(linkAliasCache_queryStringSuffix, Ptr)
                                            docProperties.setProperty("bid", cache_linkAlias(linkAliasCache_pageId, Ptr), False)
                                            Dim nameValuePairs As String() = Split(cache_linkAlias(linkAliasCache_queryStringSuffix, Ptr), "&")
                                            For Each nameValuePair As String In nameValuePairs
                                                Dim nameValueThing As String() = Split(nameValuePair, "=")
                                                If (nameValueThing.GetUpperBound(0) = 0) Then
                                                    docProperties.setProperty(nameValueThing(0), "", False)
                                                Else
                                                    docProperties.setProperty(nameValueThing(0), nameValueThing(1), False)
                                                End If
                                            Next
                                        End If
                                    End If
                                    '
                                    If Not IsLinkAlias Then
                                        '
                                        ' Test for favicon.ico
                                        '
                                        If (LCase(webServer.requestPathPage) = "/favicon.ico") Then
                                            '
                                            ' Handle Favicon.ico when the client did not recognize the meta tag
                                            '
                                            Dim Filename As String = siteProperties.getText("FaviconFilename", "")
                                            If Filename = "" Then
                                                '
                                                ' no favicon, 404 the call
                                                '
                                                Call web_setResponseStatus("404 Not Found")
                                                Call web_setResponseContentType("image/gif")
                                                docOpen = False '--- should be disposed by caller --- Call dispose
                                                Return _docBuffer
                                            Else
                                                Call web_Redirect2(csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, Filename), "favicon request", False)
                                                docOpen = False '--- should be disposed by caller --- Call dispose
                                                Return _docBuffer
                                            End If
                                        End If
                                        '
                                        ' Test for robots.txt
                                        '
                                        If (LCase(LinkFullPathNoSlash) = "robots.txt") Or (LCase(LinkFullPathNoSlash) = "robots_txt") Then
                                            '
                                            ' Handle Robots.txt file
                                            '
                                            Dim Filename As String = "config/RobotsTxtBase.txt"
                                            ' set this way because the preferences page needs a filename in a site property (enhance later)
                                            Call siteProperties.setProperty("RobotsTxtFilename", Filename)
                                            Dim Content As String = cdnFiles.readFile(Filename)
                                            If Content = "" Then
                                                '
                                                ' save default robots.txt
                                                '
                                                Content = "User-agent: *" & vbCrLf & "Disallow: /admin/" & vbCrLf & "Disallow: /images/"
                                                Call appRootFiles.saveFile(Filename, Content)
                                            End If
                                            Content = Content & addonCache.localCache.robotsTxt
                                            Call web_setResponseContentType("text/plain")
                                            Call writeAltBuffer(Content)
                                            docOpen = False '--- should be disposed by caller --- Call dispose
                                            Return _docBuffer
                                        End If
                                        '
                                        ' No Link Forward, no Link Alias, no RemoteMethodFromPage, not Robots.txt
                                        '
                                        If (main_PageErrorCount = 0) And siteProperties.getBoolean("LinkForwardAutoInsert") And (Not IsInLinkForwardTable) Then
                                            '
                                            ' Add a new Link Forward entry
                                            '
                                            CSPointer = db_InsertCSContent("Link Forwards")
                                            If db.cs_Ok(CSPointer) Then
                                                Call db.cs_set(CSPointer, "Name", webServer.requestPathPage)
                                                Call db.cs_set(CSPointer, "sourcelink", webServer.requestPathPage)
                                                Call db.cs_set(CSPointer, "Viewings", 1)
                                            End If
                                            Call db.cs_Close(CSPointer)
                                        End If
                                        '
                                        ' real 404
                                        '
                                        IsPageNotFound = True
                                        PageNotFoundSource = webServer.requestPathPage
                                        PageNotFoundReason = "The page could not be displayed because the URL is not a valid page, Link Forward, Link Alias or RemoteMethod."
                                    End If
                                End If
                            End If
                        End If
                    End If
                    '
                    ' ----- do anonymous access blocking
                    '
                    If Not user.isAuthenticated() Then
                        If (web_requestPath <> "/") And vbInstr(1, siteProperties.adminURL, web_requestPath, vbTextCompare) <> 0 Then
                            '
                            ' admin page is excluded from custom blocking
                            '
                        Else
                            Dim AnonymousUserResponseID As Integer = EncodeInteger(siteProperties.getText("AnonymousUserResponseID", "0"))
                            Select Case AnonymousUserResponseID
                                Case 1
                                    '
                                    ' block with login
                                    '
                                    '
                                    'Call AppendLog("main_init(), 3410 - exit for login block")
                                    '
                                    Call main_SetMetaContent(0, 0)
                                    Call writeAltBuffer(user.getLoginPage(False) & main_GetEndOfBody(False, False, False, False))
                                    docOpen = False '--- should be disposed by caller --- Call dispose
                                    Return _docBuffer
                                Case 2
                                    '
                                    ' block with custom content
                                    '
                                    '
                                    'Call AppendLog("main_init(), 3420 - exit for custom content block")
                                    '
                                    Call main_SetMetaContent(0, 0)
                                    Call main_AddOnLoadJavascript2("document.body.style.overflow='scroll'", "Anonymous User Block")
                                    Dim Copy As String = cr & html_GetContentCopy("AnonymousUserResponseCopy", "<p style=""width:250px;margin:100px auto auto auto;"">The site is currently not available for anonymous access.</p>", user.id, True, user.isAuthenticated)
                                    ' -- already encoded
                                    'Copy = EncodeContentForWeb(Copy, "copy content", 0, "", 0)
                                    Copy = "" _
                                            & main_docType _
                                            & vbCrLf & "<html>" _
                                            & cr & "<head>" _
                                            & kmaIndent(main_GetHTMLHead()) _
                                            & cr & "</head>" _
                                            & cr & TemplateDefaultBodyTag _
                                            & kmaIndent(Copy) _
                                            & cr2 & "<div>" _
                                            & cr3 & main_GetEndOfBody(True, True, False, False) _
                                            & cr2 & "</div>" _
                                            & cr & "</body>" _
                                            & vbCrLf & "</html>"
                                    '& "<body class=""ccBodyAdmin ccCon"" style=""overflow:scroll"">"
                                    Call writeAltBuffer(Copy)
                                    docOpen = False '--- should be disposed by caller --- Call dispose
                                    Return _docBuffer
                            End Select
                        End If
                    End If
                    '-------------------------------------------
                    '
                    ' run the appropriate body addon
                    '
                    bodyAddonId = EncodeInteger(siteProperties.getText("Html Body AddonId", "0"))
                    If bodyAddonId <> 0 Then
                        htmlBody = executeAddon(bodyAddonId, "", "", addonContextEnum.ContextPage, "", 0, "", "", False, 0, "", bodyAddonStatusOK, Nothing, "", Nothing, "", user.id, user.isAuthenticated)
                    Else
                        htmlBody = main_GetHtmlBody()
                    End If
                    If docOpen Then
                        '
                        ' Build Body Tag
                        '
                        htmlHead = main_GetHTMLHead()
                        If pageManager_TemplateBodyTag <> "" Then
                            bodyTag = pageManager_TemplateBodyTag
                        Else
                            bodyTag = TemplateDefaultBodyTag
                        End If
                        '
                        ' Add tools panel to body
                        '
                        htmlBody = htmlBody & cr & "<div>" & kmaIndent(main_GetEndOfBody(True, True, False, False)) & cr & "</div>"
                        '
                        ' build doc
                        '
                        returnDoc = main_assembleHtmlDoc(main_docType, htmlHead, bodyTag, responseBuffer & htmlBody)
                    End If
                End If
                '
                ' all other routes should be handled here.
                '   - this code is in initApp right now but should be migrated here.
                '   - if all other routes fail, use the defaultRoute (pagemanager at first)
                '
                If True Then
                    ' --- not reall sure what to do with this - was in appInit() and I am just sure it does not go there.
                    '
                    '--------------------------------------------------------------------------
                    ' ----- check if the custom404pathpage matches the defaultdoc
                    '       in this case, the 404 hit is a direct result of a 404 I justreturned to IIS
                    '       currently, I am redirecting to the page-not-found page with a 404 - wrong
                    '       I should realize here that this is a 404 caused by the page in the 404 custom string
                    '           and display the 404 page. Even if all I can say is "the page was not found"
                    '
                    '--------------------------------------------------------------------------
                    '
                    If vbLCase(webServer.requestPathPage) = vbLCase(www_requestRootPath & siteProperties.serverPageDefault) Then
                        '
                        ' This is a 404 caused by Contensive returning a 404
                        '   possibly because the pageid was not found or was inactive.
                        '   contensive returned a 404 error, and the IIS custom error handler is hitting now
                        '   what we returned as an error cause is lost
                        '   ( because the Custom404Source page is the default page )
                        '   send it to the 404 page
                        '
                        webServer.requestPathPage = webServer.requestPathPage
                        IsPageNotFound = True
                        PageNotFoundReason = "The page could not be displayed. The record may have been deleted, marked inactive. The page's parent pages or section may be invalid."
                    End If
                End If
                If True Then
                    '
                    ' Determine where to go next
                    '   If the current page is not the referring page, redirect to the referring page
                    '   Because...
                    '   - the page with the form (the referrer) was a link alias page. You can not post to a link alias, so internally we post to the default page, and redirect back.
                    '   - This only acts on internal Contensive forms, so developer pages are not effected
                    '   - This way, if the form post comes from a main_GetJSPage Remote Method, it posts to the Content Server,
                    '       then redirects back to the static site (with the new changed content)
                    '
                    If webServer.requestReferrer <> "" Then
                        Dim main_ServerReferrerURL As String
                        Dim main_ServerReferrerQs As String
                        Dim Position As Integer
                        main_ServerReferrerURL = webServer.requestReferrer
                        main_ServerReferrerQs = ""
                        Position = vbInstr(1, main_ServerReferrerURL, "?")
                        If Position <> 0 Then
                            main_ServerReferrerQs = Mid(main_ServerReferrerURL, Position + 1)
                            main_ServerReferrerURL = Mid(main_ServerReferrerURL, 1, Position - 1)
                        End If
                        If Right(main_ServerReferrerURL, 1) = "/" Then
                            '
                            ' Referer had no page, figure out what it should have been
                            '
                            If web_requestPage <> "" Then
                                '
                                ' If the referer had no page, and there is one here now, it must have been from an IIS redirect, use the current page as the default page
                                '
                                main_ServerReferrerURL = main_ServerReferrerURL & web_requestPage
                            Else
                                main_ServerReferrerURL = main_ServerReferrerURL & siteProperties.serverPageDefault
                            End If
                        End If
                        Dim linkDst As String
                        'main_ServerPage = main_ServerPage
                        If main_ServerReferrerURL <> web_ServerFormActionURL Then
                            '
                            ' remove any methods from referrer
                            '
                            Dim Copy As String
                            Copy = "Redirecting because a Contensive Form was detected, source URL [" & main_ServerReferrerURL & "] does not equal the current URL [" & web_ServerFormActionURL & "]. This may be from a Contensive Add-on that now needs to redirect back to the host page."
                            linkDst = web_requestReferer
                            If main_ServerReferrerQs <> "" Then
                                linkDst = main_ServerReferrerURL
                                main_ServerReferrerQs = ModifyQueryString(main_ServerReferrerQs, "method", "")
                                If main_ServerReferrerQs <> "" Then
                                    linkDst = linkDst & "?" & main_ServerReferrerQs
                                End If
                            End If
                            Call web_Redirect2(linkDst, Copy, False)
                            docOpen = False '--- should be disposed by caller --- Call dispose
                        End If
                    End If
                End If
                If True Then
                    ' - same here, this was in appInit() to prcess the pagenotfounds - maybe here (at the end, maybe in pageManager)
                    '--------------------------------------------------------------------------
                    ' ----- Process Early page-not-found
                    '--------------------------------------------------------------------------
                    '
                    If IsPageNotFound Then
                        If True Then
                            '
                            ' new way -- if a (real) 404 page is received, just convert this hit to the page-not-found page, do not redirect to it
                            '
                            Call log_appendLogPageNotFound(webServer.requestLinkSource)
                            Call web_setResponseStatus("404 Not Found")
                            docProperties.setProperty("bid", main_GetPageNotFoundPageId())
                            'Call main_mergeInStream("bid=" & main_GetPageNotFoundPageId())
                            If user.isAuthenticatedAdmin() Then
                                main_AdminWarning = PageNotFoundReason
                                main_AdminWarningPageID = 0
                                main_AdminWarningSectionID = 0
                            End If
                        Else
                            '
                            ' old way -- if a (real) 404 page is received, redirect to it to the 404 page with content
                            '
                            RedirectReason = PageNotFoundReason
                            RedirectLink = main_ProcessPageNotFound_GetLink(PageNotFoundReason, , PageNotFoundSource)
                        End If
                    End If
                End If
                '
                ' add exception list header
                '
                returnDoc = getDocExceptionHtmlList() & returnDoc
                '
            Catch ex As Exception
                Call handleLegacyError18("main_GetHTMLDoc2")
            End Try
            Return returnDoc
        End Function
        '
        ' assemble all the html parts
        '
        Public Function main_assembleHtmlDoc(ByVal docType As String, ByVal head As String, ByVal bodyTag As String, ByVal Body As String) As String
            main_assembleHtmlDoc = "" _
                & docType _
                & vbCrLf & "<html>" _
                & cr & "<head>" _
                & kmaIndent(head) _
                & cr & "</head>" _
                & cr & bodyTag _
                & kmaIndent(Body) _
                & cr & "</body>" _
                & vbCrLf & "</html>"
        End Function
        '
        ' main_Get the Head innerHTML for public pages
        '
        Public Function main_GetHTMLHead() As String
            main_GetHTMLHead = main_GetHTMLInternalHead(False)
        End Function
        '
        ' main_Get the Head innerHTML for any page
        '
        Public Function main_GetHTMLInternalHead(ByVal main_IsAdminSite As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetHTMLInternalHead")
            '
            'If Not (true) Then Exit Function
            '
            Dim Parts() As String
            Dim FileList As String
            Dim Files() As String
            Dim Ptr As Integer
            Dim Pos As Integer
            Dim BaseHref As String
            Dim StyleTag As String
            Dim IDList As String
            Dim Cnt As Integer
            Dim StyleSheetLink As String
            Dim SQL As String
            Dim CS As Integer
            Dim OtherHeadTags As String
            Dim Copy As String
            Dim VirtualFilename As String
            Dim Ext As String
            '
            If Not main_MetaContent_Set Then
                main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<!-- main_GetHTMLInternalHead called out of order. It must follow a content call, such as main_GetHtmlBody, main_GetSectionPage, and main_GetContentPage -->"
            End If
            '
            ' stylesheets first -- for performance
            ' put stylesheets inline without processing
            '
            If siteProperties.getBoolean("Allow CSS Reset") Then
                '
                ' reset styles
                '
                main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<link rel=""stylesheet"" type=""text/css"" href=""" & web_requestProtocol & main_ServerDomain & "/cclib/styles/ccreset.css"" >"
            End If
            main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<link rel=""stylesheet"" type=""text/css"" href=""/ccLib/Styles/" & defaultStyleFilename & """>"
            If Not main_IsAdminSite Then
                '
                ' site styles
                '
                main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<link rel=""stylesheet"" type=""text/css"" href=""" & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, "templates/styles.css") & """ >"
            End If
            '
            ' Template shared styles
            '
            ' !!!!! dont know why this was blocked. Running add-ons with shared styles need this in the admin site.
            FileList = main_GetSharedStyleFileList(main_MetaContent_SharedStyleIDList, main_IsAdminSite)
            main_MetaContent_SharedStyleIDList = ""
            If FileList <> "" Then
                Files = Split(FileList, vbCrLf)
                For Ptr = 0 To UBound(Files)
                    If Files(Ptr) <> "" Then
                        Parts = Split(Files(Ptr) & "<<", "<")
                        If Parts(1) <> "" Then
                            main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & decodeHtml(Parts(1))
                        End If
                        main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<link rel=""stylesheet"" type=""text/css"" href=""" & web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, Parts(0)) & """ >"
                        If Parts(2) <> "" Then
                            main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & decodeHtml(Parts(2))
                        End If
                        'End If
                    End If
                Next
            End If
            '
            ' Template exclusive styles
            '
            If main_MetaContent_TemplateStyleSheetTag <> "" Then
                main_GetHTMLInternalHead = main_GetHTMLInternalHead & main_MetaContent_TemplateStyleSheetTag
            End If
            '
            ' Page Styles
            '
            If main_MetaContent_StyleSheetTags <> "" Then
                main_GetHTMLInternalHead = main_GetHTMLInternalHead & main_MetaContent_StyleSheetTags
                main_MetaContent_StyleSheetTags = ""
            End If
            '
            ' Member Styles
            '
            If user.styleFilename <> "" Then
                Call main_AddStylesheetLink2(web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, user.styleFilename), "member style")
                user.styleFilename = ""
            End If
            '
            ' meta content
            '
            Copy = main_GetLastMetaTitle()
            If Copy <> "" Then
                main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<title>" & Copy & "</title>"
            End If
            '
            Copy = main_GetLastMetaKeywordList()
            If Copy <> "" Then
                main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<meta name=""keywords"" content=""" & Copy & """ >"
            End If
            '
            Copy = main_GetLastMetaDescription()
            If Copy <> "" Then
                main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<meta name=""description"" content=""" & Copy & """ >"
            End If
            '
            ' favicon
            '
            VirtualFilename = siteProperties.getText("faviconfilename")
            If VirtualFilename <> "" Then
                Pos = InStrRev(VirtualFilename, ".")
                If Pos > 0 Then
                    Ext = vbLCase(Mid(VirtualFilename, Pos))
                    Select Case Ext
                        Case ".ico"
                            main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<link rel=""icon"" type=""image/vnd.microsoft.icon"" href=""" & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, VirtualFilename) & """ >"
                        Case ".png"
                            main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<link rel=""icon"" type=""image/png"" href=""" & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, VirtualFilename) & """ >"
                        Case ".gif"
                            main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<link rel=""icon"" type=""image/gif"" href=""" & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, VirtualFilename) & """ >"
                        Case ".jpg"
                            main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<link rel=""icon"" type=""image/jpg"" href=""" & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, VirtualFilename) & """ >"
                    End Select
                End If
            End If
            '
            ' misc caching, etc
            '
            Dim encoding As String
            encoding = html_EncodeHTML(siteProperties.getText("Site Character Encoding", "utf-8"))
            main_GetHTMLInternalHead = main_GetHTMLInternalHead _
                & OtherHeadTags _
                & cr & "<meta http-equiv=""content-type"" content=""text/html; charset=" & encoding & """ >" _
                & cr & "<meta http-equiv=""content-language"" content=""en-us"" >" _
                & cr & "<meta http-equiv=""cache-control"" content=""no-cache"" >" _
                & cr & "<meta http-equiv=""expires"" content=""-1"" >" _
                & cr & "<meta http-equiv=""pragma"" content=""no-cache"" >" _
                & cr & "<meta name=""generator"" content=""Contensive"" >"
            '& CR & "<meta http-equiv=""cache-control"" content=""no-store"" >"
            '
            ' no-follow
            '
            If main_MetaContent_NoFollow Then
                main_GetHTMLInternalHead = main_GetHTMLInternalHead _
                    & cr & "<meta name=""robots"" content=""nofollow"" >" _
                    & cr & "<meta name=""mssmarttagspreventparsing"" content=""true"" >"
            End If
            '
            ' Base is needed for Link Alias case where a slash is in the URL (page named 1/2/3/4/5)
            '
            BaseHref = web_ServerFormActionURL
            If main_IsAdminSite Then
                '
                ' no base in admin site
                '
            ElseIf BaseHref <> "" Then
                If web_RefreshQueryString <> "" Then
                    BaseHref = BaseHref & "?" & web_RefreshQueryString
                End If
                main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<base href=""" & BaseHref & """ >"
            End If
            '
            ' Head Javascript -- (should be) last for performance
            '
            main_GetHTMLInternalHead = main_GetHTMLInternalHead _
                & cr & "<script language=""JavaScript"" type=""text/javascript""  src=""" & web_requestProtocol & main_ServerDomain & "/ccLib/ClientSide/Core.js""></script>" _
                & ""
            If main_HeadScriptCnt > 0 Then
                For Ptr = 0 To main_HeadScriptCnt - 1
                    With main_HeadScripts(Ptr)
                        If (.addedByMessage <> "") And visitProperty.getBoolean("AllowDebugging") Then
                            main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<!-- from " & .addedByMessage & " -->"
                        End If
                        If Not .IsLink Then
                            main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<script Language=""JavaScript"" type=""text/javascript"">" & .Text & cr & "</script>"
                        Else
                            main_GetHTMLInternalHead = main_GetHTMLInternalHead & cr & "<script type=""text/javascript"" src=""" & .Text & """></script>"
                        End If
                    End With
                Next
                main_HeadScriptCnt = 0
            End If
            '
            ' other head tags - always last
            '
            OtherHeadTags = main_GetLastOtherHeadTags()
            If OtherHeadTags <> "" Then
                If Left(OtherHeadTags, 2) <> vbCrLf Then
                    OtherHeadTags = vbCrLf & OtherHeadTags
                End If
                main_GetHTMLInternalHead = main_GetHTMLInternalHead & vbReplace(OtherHeadTags, vbCrLf, cr)
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_GetHTMLInternalHead")
        End Function
        '
        '=============================================================
        '
        '=============================================================
        '
        Public Function main_GetRecordID_Internal(ByVal ContentName As String, ByVal RecordName As String) As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetRecordID_Internal")
            '
            If True Then
                main_GetRecordID_Internal = db_GetRecordID(EncodeText(ContentName), EncodeText(RecordName))
            End If

            Exit Function
ErrorTrap:
            Call handleLegacyError13("main_GetRecordID_Internal")
        End Function
        '
        '=============================================================
        '
        '=============================================================
        '
        Public Function main_GetRecordID(ByVal ContentName As String, ByVal RecordName As String) As Integer
            On Error GoTo ErrorTrap
            '
            main_GetRecordID = main_GetRecordID_Internal(EncodeText(ContentName), EncodeText(RecordName))
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetRecordID")
        End Function
        '
        '=============================================================
        '
        '=============================================================
        '
        Public Function main_GetRecordName(ByVal ContentName As String, ByVal RecordID As Integer) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00414")
            '
            main_GetRecordName = db_GetRecordName(EncodeText(ContentName), EncodeInteger(RecordID))

            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetRecordName")
        End Function
        '
        '===================================================================================================
        '   Wrap the content in a common wrapper if authoring is enabled
        '===================================================================================================
        '
        Public Function main_GetAdminHintWrapper(ByVal Content As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetAdminHintWrapper")
            '
            'If Not (true) Then Exit Function
            '
            If user.isEditing("") Or user.isAuthenticatedAdmin() Then
                main_GetAdminHintWrapper = main_GetAdminHintWrapper & web_GetLegacySiteStyles()
                main_GetAdminHintWrapper = main_GetAdminHintWrapper _
                    & "<table border=0 width=""100%"" cellspacing=0 cellpadding=0><tr><td class=""ccHintWrapper"">" _
                        & "<table border=0 width=""100%"" cellspacing=0 cellpadding=0><tr><td class=""ccHintWrapperContent"">" _
                        & "<b>Administrator</b>" _
                        & "<br>" _
                        & "<br>" & EncodeText(Content) _
                        & "</td></tr></table>" _
                    & "</td></tr></table>"
            End If

            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetAdminHintWrapper")
        End Function
        ''
        ''   Buffered Site Property
        ''
        'Public ReadOnly Property app.dataBuildVersion() As String
        '    Get

        '        If Not app.dataBuildVersion_LocalLoaded Then
        '            app.dataBuildVersion_Local = csv_GetSiteProperty("BuildVersion", "0")
        '            app.dataBuildVersion_LocalLoaded = True
        '        End If
        '        app.dataBuildVersion = app.dataBuildVersion_Local
        '    End Get
        'End Property
        '
        '---------------------------------------------------------------------------
        '   Create the default landing page if it is missing
        '---------------------------------------------------------------------------
        '
        Public Function main_CreatePageGetID(ByVal PageName As String, ByVal ContentName As String, ByVal CreatedBy As Integer, ByVal pageGuid As String) As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("CreatePageGetID")
            '
            Dim CS As Integer
            Dim Id As Integer
            '
            CS = db.cs_insertRecord(ContentName, CreatedBy)
            If db.cs_Ok(CS) Then
                Id = db.cs_getInteger(CS, "ID")
                Call db.cs_set(CS, "name", PageName)
                Call db.cs_set(CS, "active", "1")
                If True Then
                    Call db.cs_set(CS, "ccGuid", pageGuid)
                End If
                Call db.db_SaveCSRecord(CS)
                Call workflow.publishEdit("Page Content", Id)
            End If
            Call db.cs_Close(CS)
            '
            main_CreatePageGetID = Id
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("main_CreatePageGetID")
        End Function
        '
        '---------------------------------------------------------------------------
        '   Create the default landing page if it is missing
        '       This can only be called when site property AllowAutoHomeSectionOnce is true
        '---------------------------------------------------------------------------
        '
        Private Function main_GetLandingPageID_CreateLandingSectionReturnID(ByVal SectionName As String, ByVal rootPageId As Integer, ByVal SectionContentID As Integer) As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetLandingPageID_CreateLandingSectionReturnID")
            '
            'If Not (true) Then Exit Function
            '
            Dim SectionTemplateID As Integer
            Dim SectionID As Integer
            Dim DefaultMenuID As Integer
            Dim CS As Integer
            Dim LoopPtr As Integer
            Dim NameOK As Boolean
            Dim SectionNameTry As String
            '
            If (main_PageErrorCount = 0) And siteProperties.getBoolean("AllowAutoHomeSectionOnce") Then
                '
                SectionTemplateID = pageManager_LoadTemplateGetID(0)
                '
                ' main_Get a unique section name
                '
                SectionNameTry = SectionName
                NameOK = False
                LoopPtr = 0
                Do While Not NameOK And (LoopPtr < 10)
                    If LoopPtr <> 0 Then
                        SectionNameTry = SectionName & " " & (LoopPtr + 1)
                    End If
                    CS = db.csOpen("Site Sections", "name=" & db.encodeSQLText(SectionNameTry), , ,, , , "ID")
                    NameOK = Not db.cs_Ok(CS)
                    Call db.cs_Close(CS)
                    LoopPtr = LoopPtr + 1
                Loop
                '
                CS = db.cs_insertRecord("Site Sections")
                If db.cs_Ok(CS) Then
                    SectionID = db.cs_getInteger(CS, "ID")
                    Call db.cs_set(CS, "Name", SectionNameTry)
                    Call db.cs_set(CS, "Caption", DefaultLandingSectionName)
                    Call db.cs_set(CS, "SortOrder", -1)
                    Call db.cs_set(CS, "HideMenu", False)
                    Call db.cs_set(CS, "contentid", SectionContentID)
                    Call db.cs_set(CS, "TemplateID", SectionTemplateID)
                    If True Then
                        Call db.cs_set(CS, "RootPageID", rootPageId)
                    End If
                    If True Then
                        Call db.cs_set(CS, "ccGuid", DefaultLandingSectionGuid)
                    End If
                End If
                Call db.cs_Close(CS)
                Call pageManager_cache_siteSection_clear()
                '
                ' main_Get the Default Menu ID
                '
                CS = db.csOpen("Dynamic Menus", "(name='Default')", "ID", , ,, , "ID")
                If db.cs_Ok(CS) Then
                    DefaultMenuID = db.cs_getInteger(CS, "ID")
                End If
                Call db.cs_Close(CS)
                '
                ' Add the new landing section to the default menu
                '
                CS = db.cs_insertRecord("Dynamic Menu Section Rules")
                If db.cs_Ok(CS) Then
                    Call db.cs_set(CS, "DynamicMenuID", DefaultMenuID)
                    Call db.cs_set(CS, "SectionID", SectionID)
                End If
                Call db.cs_Close(CS)
                '
                main_GetLandingPageID_CreateLandingSectionReturnID = SectionID
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetLandingPageID_CreateLandingSectionReturnID")
        End Function
        '
        '
        '
        Public Property main_MetaContentNoFollow() As Boolean
            Get
                Return main_MetaContent_NoFollow
            End Get
            Set(ByVal value As Boolean)
                main_MetaContent_NoFollow = value
            End Set
        End Property
        '
        '
        '
        Public Sub main_RollBackCS(ByVal CSPointer As Integer)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00419")
            '
            'If Not (true) Then Exit Sub
            '
            Call db.db_RollBackCS(EncodeInteger(CSPointer))
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_RollBackCS")
        End Sub

        '
        '
        '
        Public Function main_isSectionBlocked(ByVal SectionID As Integer, ByVal AllowSectionBlocking As Boolean) As Boolean
            On Error GoTo ErrorTrap 'Const Tn = "isSectionBlocked" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim CS As Integer
            Dim SQL As String
            Dim SQLWhere As String
            '
            main_isSectionBlocked = False
            If AllowSectionBlocking Then
                main_isSectionBlocked = True
                If user.isAuthenticatedAdmin() Then
                    '
                    ' Admin always main_Gets in
                    '
                    main_isSectionBlocked = False
                ElseIf Not user.isAuthenticated() Then
                    '
                    ' not authenticated never main_Gets in
                    '
                Else
                    '
                    ' check if this member is in one of the SectionRule groups
                    '
                    SQLWhere = "" _
                        & " M.MemberID=" & user.id _
                        & " and R.SectionID=" & SectionID _
                        & " and M.GroupID=R.GroupID" _
                        & " and R.Active<>0" _
                        & " and M.Active<>0" _
                        & " and ((M.DateExpires is null)or(M.DateExpires>" & db.encodeSQLDate(main_PageStartTime) & "))"
                    SQL = db_GetSQLSelect("", "ccmemberRules M,ccSectionBlockRules R", "M.ID", SQLWhere, , , 1)
                    CS = db.cs_openSql(SQL)
                    'SQL = "select ID" _
                    '    & " from ccMemberRules M,ccSectionBlockRules R" _
                    '    & " where M.MemberID=" & memberID _
                    '    & " and R.SectionID=" & SectionID _
                    '    & " and M.GroupID=R.GroupID" _
                    '    & " and R.Active<>0" _
                    '    & " and M.Active<>0" _
                    '    & " and ((M.DateExpires is null)or(M.DateExpires>" & main_SQlPageStartTime & "))"
                    'CS = app.db_openCsSql_rev("default", SQL, 1, 1)
                    'SQL = "select top 1 *" _
                    '    & " from ccMemberRules M,ccSectionBlockRules R" _
                    '    & " where M.MemberID=" & memberID _
                    '    & " and R.SectionID=" & SectionID _
                    '    & " and M.GroupID=R.GroupID" _
                    '    & " and R.Active<>0" _
                    '    & " and M.Active<>0" _
                    '    & " and ((M.DateExpires is null)or(M.DateExpires>" & main_SQlPageStartTime & "))"
                    'CS = app.db_openCsSql(SQL)
                    main_isSectionBlocked = Not (db.cs_Ok(CS))
                    Call db.cs_Close(CS)
                End If
            End If

            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_isSectionBlocked")
        End Function
        '
        '
        '
        Public Sub main_RequestTask(ByVal Command As String, ByVal SQL As String, ByVal ExportName As String, ByVal Filename As String)
            On Error GoTo ErrorTrap 'Const Tn = "RequestTask" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Call tasks_RequestTask(EncodeText(Command), EncodeText(SQL), EncodeText(ExportName), EncodeText(Filename), EncodeInteger(user.id))
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_RequestTask")
        End Sub
        '
        '=============================================================================
        '   Returns the link to the page that contains the record designated by the ContentRecordKey
        '       Returns DefaultLink if it can not be determined
        '=============================================================================
        '
        Public Function main_GetLinkByContentRecordKey(ByVal ContentRecordKey As String, Optional ByVal DefaultLink As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetLinkByContentRecordKey")
            '
            'If Not (true) Then Exit Function
            '
            Dim CSPointer As Integer
            Dim KeySplit() As String
            Dim ContentID As Integer
            Dim RecordID As Integer
            Dim ContentName As String
            Dim templateId As Integer
            Dim ParentID As Integer
            Dim DefaultTemplateLink As String
            Dim TableName As String
            Dim DataSource As String
            Dim ParentContentID As Integer
            Dim recordfound As Boolean
            '
            If ContentRecordKey <> "" Then
                '
                ' First try main_ContentWatch table for a link
                '
                CSPointer = db.csOpen("Content Watch", "ContentRecordKey=" & db.encodeSQLText(ContentRecordKey), , , ,, , "Link,Clicks")
                If db.cs_Ok(CSPointer) Then
                    main_GetLinkByContentRecordKey = db.cs_getText(CSPointer, "Link")
                End If
                Call db.cs_Close(CSPointer)
                '
                If main_GetLinkByContentRecordKey = "" Then
                    '
                    ' try template for this page
                    '
                    KeySplit = Split(ContentRecordKey, ".")
                    If UBound(KeySplit) = 1 Then
                        ContentID = EncodeInteger(KeySplit(0))
                        If ContentID <> 0 Then
                            ContentName = metaData.getContentNameByID(ContentID)
                            RecordID = EncodeInteger(KeySplit(1))
                            If ContentName <> "" And RecordID <> 0 Then
                                If db_GetContentTablename(ContentName) = "ccPageContent" Then
                                    CSPointer = db_csOpen(ContentName, RecordID, , , "TemplateID,ParentID")
                                    If db.cs_Ok(CSPointer) Then
                                        recordfound = True
                                        templateId = db.cs_getInteger(CSPointer, "TemplateID")
                                        ParentID = db.cs_getInteger(CSPointer, "ParentID")
                                    End If
                                    Call db.cs_Close(CSPointer)
                                    If Not recordfound Then
                                        '
                                        ' This content record does not exist - remove any records with this ContentRecordKey pointer
                                        '
                                        'Call app.db_DeleteContentRecords("Topic Rules", "ContentRecordKey=" & encodeSQLText(ContentRecordKey))
                                        'Call app.db_DeleteContentRecords("Topic Habits", "ContentRecordKey=" & encodeSQLText(ContentRecordKey))
                                        Call db.deleteContentRecords("Content Watch", "ContentRecordKey=" & db.encodeSQLText(ContentRecordKey))
                                        Call metaData_DeleteContentTracking(ContentName, RecordID, True)
                                    Else

                                        If templateId <> 0 Then
                                            CSPointer = db_csOpen("Page Templates", templateId, , , "Link")
                                            If db.cs_Ok(CSPointer) Then
                                                main_GetLinkByContentRecordKey = db.cs_getText(CSPointer, "Link")
                                            End If
                                            Call db.cs_Close(CSPointer)
                                        End If
                                        If main_GetLinkByContentRecordKey = "" And ParentID <> 0 Then
                                            TableName = db_GetContentTablename(ContentName)
                                            DataSource = main_GetContentDataSource(ContentName)
                                            CSPointer = db.db_openCsSql_rev(DataSource, "Select ContentControlID from " & TableName & " where ID=" & RecordID)
                                            If db.cs_Ok(CSPointer) Then
                                                ParentContentID = EncodeInteger(db.cs_getText(CSPointer, "ContentControlID"))
                                            End If
                                            Call db.cs_Close(CSPointer)
                                            If ParentContentID <> 0 Then
                                                main_GetLinkByContentRecordKey = main_GetLinkByContentRecordKey(CStr(ParentContentID & "." & ParentID), "")
                                            End If
                                        End If
                                        If main_GetLinkByContentRecordKey = "" Then
                                            DefaultTemplateLink = siteProperties.getText("SectionLandingLink", www_requestRootPath & siteProperties.serverPageDefault)
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                    If main_GetLinkByContentRecordKey <> "" Then
                        main_GetLinkByContentRecordKey = modifyLinkQuery(main_GetLinkByContentRecordKey, "bid", CStr(RecordID), True)
                    End If
                End If
            End If
            '
            If main_GetLinkByContentRecordKey = "" Then
                main_GetLinkByContentRecordKey = DefaultLink
            End If
            '
            main_GetLinkByContentRecordKey = EncodeAppRootPath(main_GetLinkByContentRecordKey, web_requestVirtualFilePath, www_requestRootPath, webServer.requestDomain)
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_GetLinkByContentRecordKey")
        End Function
        '
        '
        '
        Public Function main_GetWatchList(ListName As String, SortField As String, SortReverse As Boolean) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetWatchList")
            '
            'If Not (true) Then Exit Function
            '
            Dim CS As Integer
            Dim ContentID As Integer
            Dim RecordID As Integer
            Dim Link As String
            Dim LinkLabel As String
            '
            If SortReverse And (SortField <> "") Then
                CS = main_OpenCSContentWatchList(ListName, SortField & " Desc", True)
            Else
                CS = main_OpenCSContentWatchList(ListName, SortField, True)
            End If
            '
            If db.cs_Ok(CS) Then
                ContentID = main_GetContentID("Content Watch")
                Do While db.cs_Ok(CS)
                    Link = db.cs_getText(CS, "link")
                    LinkLabel = db.cs_getText(CS, "LinkLabel")
                    RecordID = db.cs_getInteger(CS, "ID")
                    If (LinkLabel <> "") Then
                        main_GetWatchList = main_GetWatchList & cr & "<li id=""main_ContentWatch" & RecordID & """ class=""ccListItem"">"
                        If (Link <> "") Then
                            main_GetWatchList = main_GetWatchList & "<a href=""http://" & main_ServerDomain & www_requestRootPath & web_requestPage & "?rc=" & ContentID & "&ri=" & RecordID & """>" & LinkLabel & "</a>"
                        Else
                            main_GetWatchList = main_GetWatchList & LinkLabel
                        End If
                        main_GetWatchList = main_GetWatchList & "</li>"
                    End If
                    Call db.db_csGoNext(CS)
                Loop
                If main_GetWatchList <> "" Then
                    main_GetWatchList = html_GetContentCopy("Watch List Caption: " & ListName, ListName, user.id, True, user.isAuthenticated) & cr & "<ul class=""ccWatchList"">" & kmaIndent(main_GetWatchList) & cr & "</ul>"
                End If
            End If
            Call db.cs_Close(CS)
            '
            If visitProperty.getBoolean("AllowAdvancedEditor") Then
                main_GetWatchList = main_GetEditWrapper("Watch List [" & ListName & "]", main_GetWatchList)
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetWatchList")
        End Function
        '
        '
        '
        Public Sub main_AddTabEntry(ByVal Caption As String, ByVal Link As String, ByVal IsHit As Boolean, Optional ByVal StylePrefix As String = "", Optional ByVal LiveBody As String = "")
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("AddTabEntry")
            '
            ' should use the ccNav object, no the ccCommon module for this code
            '
            If (main_TabObject Is Nothing) Then
                main_TabObject = New coreMenuTabClass
            End If
            Call main_TabObject.AddEntry(EncodeText(Caption), EncodeText(Link), EncodeBoolean(IsHit), EncodeText(StylePrefix))

            'Call ccAddTabEntry(encodeText(Caption), encodeText(Link), encodeBoolean(IsHit), encodeText(StylePrefix), encodeText(LiveBody))
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_AddTabEntry")
        End Sub
        '
        '
        '
        Public Function main_GetTabs() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetTabs")
            '
            ' should use the ccNav object, no the ccCommon module for this code
            '
            '
            If (main_TabObject Is Nothing) Then
                main_TabObject = New coreMenuTabClass
            End If
            main_GetTabs = main_TabObject.GetTabs()
            '    main_GetTabs = ccGetTabs()
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetTabs")
        End Function
        '
        '
        '
        Public Sub main_AddLiveTabEntry(ByVal Caption As String, ByVal LiveBody As String, Optional ByVal StylePrefix As String = "")
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("AddLiveTabEntry")
            '
            ' should use the ccNav object, no the ccCommon module for this code
            '
            If (main_LiveTabObject Is Nothing) Then
                main_LiveTabObject = New coreMenuLiveTabClass
            End If
            Call main_LiveTabObject.AddEntry(EncodeText(Caption), EncodeText(LiveBody), EncodeText(StylePrefix))
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_AddLiveTabEntry")
        End Sub
        '
        '
        '
        Public Function main_GetLiveTabs() As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetLiveTabs")
            '
            ' should use the ccNav object, no the ccCommon module for this code
            '
            If (main_LiveTabObject Is Nothing) Then
                main_LiveTabObject = New coreMenuLiveTabClass
            End If
            main_GetLiveTabs = main_LiveTabObject.GetTabs()
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetLiveTabs")
        End Function
        '
        '
        '
        Public Sub menu_AddComboTabEntry(Caption As String, Link As String, AjaxLink As String, LiveBody As String, IsHit As Boolean, ContainerClass As String)
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("AddComboTabEntry")
            '
            ' should use the ccNav object, no the ccCommon module for this code
            '
            If (html_ComboTabObject Is Nothing) Then
                html_ComboTabObject = New coreMenuComboTabClass
            End If
            Call html_ComboTabObject.AddEntry(Caption, Link, AjaxLink, LiveBody, IsHit, ContainerClass)
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_AddComboTabEntry")
        End Sub
        '
        '
        '
        Public Function menu_GetComboTabs() As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetComboTabs")
            '
            ' should use the ccNav object, no the ccCommon module for this code
            '
            If (html_ComboTabObject Is Nothing) Then
                html_ComboTabObject = New coreMenuComboTabClass
            End If
            menu_GetComboTabs = html_ComboTabObject.GetTabs()
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetComboTabs")
        End Function
        '
        '============================================================================================================
        '   the content control Id for a record, all its edit and archive records, and all its child records
        '   returns records affected
        '   the contentname contains the record, but we do not know that this is the contentcontrol for the record,
        '   read it first to main_Get the correct contentid
        '============================================================================================================
        '
        Public Function content_SetContentControl(ByVal ContentID As Integer, ByVal RecordID As Integer, ByVal NewContentControlID As Integer, Optional ByVal UsedIDString As String = "") As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("SetContentControl")
            '
            Dim SQL As String
            Dim CS As Integer
            Dim RecordTableName As String
            Dim AuthoringTableName As String
            Dim ContentName As String
            Dim HasParentID As Boolean
            Dim RecordContentID As Integer
            Dim RecordContentName As String
            Dim DataSourceName As String
            '
            If Not IsInDelimitedString(UsedIDString, CStr(RecordID), ",") Then
                ContentName = metaData.getContentNameByID(ContentID)
                CS = db_csOpen(ContentName, RecordID, False, False)
                If db.cs_Ok(CS) Then
                    HasParentID = db.db_IsCSFieldSupported(CS, "ParentID")
                    RecordContentID = db.cs_getInteger(CS, "ContentControlID")
                    RecordContentName = metaData.getContentNameByID(RecordContentID)
                End If
                Call db.cs_Close(CS)
                If RecordContentName <> "" Then
                    '
                    '
                    '
                    DataSourceName = main_GetContentDataSource(RecordContentName)
                    RecordTableName = db_GetContentTablename(RecordContentName)
                    '
                    ' either Workflow on non-workflow - it changes everything
                    '
                    SQL = "update " & RecordTableName & " set ContentControlID=" & NewContentControlID & " where ID=" & RecordID & " or EditSourceID=" & RecordID
                    Call db.executeSql(SQL, DataSourceName)
                    If HasParentID Then
                        SQL = "select contentcontrolid,ID from " & RecordTableName & " where ParentID=" & RecordID
                        CS = db.db_openCsSql_rev(DataSourceName, SQL)
                        Do While db.cs_Ok(CS)
                            Call content_SetContentControl(db.cs_getInteger(CS, "contentcontrolid"), db.cs_getInteger(CS, "ID"), NewContentControlID, UsedIDString & "," & RecordID)
                            db.db_csGoNext(CS)
                        Loop
                        Call db.cs_Close(CS)
                    End If
                    '
                    ' fix content watch
                    '
                    SQL = "update ccContentWatch set ContentID=" & NewContentControlID & ", ContentRecordKey='" & NewContentControlID & "." & RecordID & "' where ContentID=" & ContentID & " and RecordID=" & RecordID
                    Call db.executeSql(SQL)
                    '            '
                    '            ' fix Topic Rules
                    '            '
                    '            SQL = "update ccTopicRules set ContentID=" & NewContentControlID & ", ContentRecordKey='" & NewContentControlID & "." & RecordID & "' where ContentID=" & ContentID & " and RecordID=" & RecordID
                    '            Call app.executeSql( SQL)
                End If

            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_SetContentControl")
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Public Function menu_VerifyDynamicMenu(ByVal MenuName As String) As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("VerifyDynamicMenu")
            '
            'If Not (true) Then Exit Function
            '
            menu_VerifyDynamicMenu = csv_VerifyDynamicMenu(EncodeText(MenuName))
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_VerifyDynamicMenu")
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Public Function menu_GetDynamicMenuACSelect() As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetDynamicMenuACSelect")
            '
            'If Not (true) Then Exit Function
            '
            menu_GetDynamicMenuACSelect = csv_GetDynamicMenuACSelect()
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetDynamicMenuACSelect")
        End Function
        '
        ' converted to add-on
        '
        ''
        ''========================================================================
        ''
        ''========================================================================
        ''
        'public Function main_GetDynamicFormACSelect() As String
        '    On Error GoTo ErrorTrap: 'Dim th as integer: th = profileLogMethodEnter("GetDynamicFormACSelect")
        '    '
        '    'If Not (true) Then Exit Function
        '    '
        '    main_GetDynamicFormACSelect = csv_GetDynamicFormACSelect
        '    '
        '    Exit Function
        'ErrorTrap:
        '    Call main_HandleClassErrorAndResume_TrapPatch1("main_GetDynamicFormACSelect")
        'End Function
        ''
        ''========================================================================
        ''
        ''========================================================================
        ''
        'public Function Mergetemplate(EncodedTemplateHTML As String, EncodedContentHTML As String) As String
        '    On Error GoTo ErrorTrap: 'Dim th as integer: th = profileLogMethodEnter("Mergetemplate")
        '    '
        '    'If Not (true) Then Exit Function
        '    '
        '    Mergetemplate = csv_Mergetemplate(EncodedTemplateHTML, EncodedContentHTML, memberID)
        '    '
        '    Exit Function
        'ErrorTrap:
        '    Call main_HandleClassErrorAndResume_TrapPatch1("Mergetemplate")
        'End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Public Function admin_GetAdminFormBody(Caption As String, ButtonListLeft As String, ButtonListRight As String, AllowAdd As Boolean, AllowDelete As Boolean, Description As String, ContentSummary As String, ContentPadding As Integer, Content As String) As String
            Dim Adminui As New coreAdminUIClass(Me)
            '
            admin_GetAdminFormBody = Adminui.GetBody(Caption, ButtonListLeft, ButtonListRight, AllowAdd, AllowDelete, Description, ContentSummary, ContentPadding, Content)
        End Function
        '
        '
        '
        Private Function pageManager_GetDefaultBlockMessage(UseContentWatchLink As Boolean) As String
            pageManager_GetDefaultBlockMessage = ""
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("main_GetDefaultBlockMessage")
            '
            Dim CS As Integer
            Dim PageID As Integer
            '
            CS = db.csOpen("Copy Content", "name=" & db.encodeSQLText(ContentBlockCopyName), "ID", , , , , "Copy,ID")
            If db.cs_Ok(CS) Then
                pageManager_GetDefaultBlockMessage = db.db_GetCS(CS, "Copy")
            End If
            Call db.cs_Close(CS)
            '
            ' ----- Do not allow blank message - if still nothing, create default
            '
            If pageManager_GetDefaultBlockMessage = "" Then
                pageManager_GetDefaultBlockMessage = "<p>The content on this page has restricted access. If you have a username and password for this system, <a href=""?method=login"" rel=""nofollow"">Click Here</a>. For more information, please contact the administrator.</p>"
            End If
            '
            ' ----- Create Copy Content Record for future
            '
            CS = db.cs_insertRecord("Copy Content")
            If db.cs_Ok(CS) Then
                Call db.cs_set(CS, "Name", ContentBlockCopyName)
                Call db.cs_set(CS, "Copy", pageManager_GetDefaultBlockMessage)
                Call db.db_SaveCSRecord(CS)
                Call workflow.publishEdit("Copy Content", EncodeInteger(db.db_GetCS(CS, "ID")))
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_GetDefaultBlockMessage")
        End Function
        '
        ' Instruction Format
        '   Line 1 - Version FormBuilderVersion
        '   Line 2+ instruction lines
        '   blank line
        '   FormHTML
        '
        ' Instruction Line Format
        '   Type,Caption,Required,arguments
        '
        '   Types
        '       1 = People Content field
        '           arguments = FieldName
        '       2 = Group main_MemberShip
        '           arguments = GroupName
        '
        ' FormHTML
        '   All HTML with the following:
        '   ##REPEAT></REPEAT> tags -- repeated for each instruction line
        '   {{CAPTION}} tags -- main_Gets the caption for each instruction line
        '   {{FIELD}} tags -- main_Gets the form field for each instruction line
        '
        Private Function pageManager_LoadFormPageInstructions(FormInstructions As String, Formhtml As String) As main_FormPagetype
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("main_LoadFormPageInstructions")
            '
            Dim RepeatBody As String
            Dim PtrFront As Integer
            Dim PtrBack As Integer
            Dim i() As String
            Dim IPtr As Integer
            Dim IStart As Integer
            Dim IArgs() As String
            Dim IArgPtr As Integer
            Dim CSPeople As Integer
            Dim Body As String
            Dim Instruction As String
            Dim CS As Integer
            Dim HasRequiredFields As Boolean
            Dim ArgCaption As String
            Dim ArgType As Integer
            Dim ArgRequired As Boolean
            Dim GroupName As String
            Dim GroupValue As Boolean
            Dim GroupRowPtr As Integer
            Dim FormPageID As Integer
            Dim f As main_FormPagetype
            '
            If True Then
                PtrFront = vbInstr(1, Formhtml, "{{REPEATSTART", vbTextCompare)
                If PtrFront > 0 Then
                    PtrBack = vbInstr(PtrFront, Formhtml, "}}")
                    If PtrBack > 0 Then
                        f.PreRepeat = Mid(Formhtml, 1, PtrFront - 1)
                        PtrFront = vbInstr(PtrBack, Formhtml, "{{REPEATEND", vbTextCompare)
                        If PtrFront > 0 Then
                            f.RepeatCell = Mid(Formhtml, PtrBack + 2, PtrFront - PtrBack - 2)
                            PtrBack = vbInstr(PtrFront, Formhtml, "}}")
                            If PtrBack > 0 Then
                                f.PostRepeat = Mid(Formhtml, PtrBack + 2)
                                '
                                ' Decode instructions and build output
                                '
                                i = SplitCRLF(FormInstructions)
                                If UBound(i) > 0 Then
                                    If Trim(i(0)) >= "1" Then
                                        '
                                        ' decode Version 1 arguments, then start instructions line at line 1
                                        '
                                        f.AddGroupNameList = EncodeText(i(1))
                                        f.AuthenticateOnFormProcess = EncodeBoolean(i(2))
                                        IStart = 3
                                    End If
                                    '
                                    ' read in and compose the repeat lines
                                    '

                                    RepeatBody = ""
                                    CSPeople = -1
                                    ReDim f.Inst(UBound(i))
                                    For IPtr = 0 To UBound(i) - IStart
                                        With f.Inst(IPtr)
                                            IArgs = Split(i(IPtr + IStart), ",")
                                            If UBound(IArgs) >= main_IPosMax Then
                                                .Caption = IArgs(main_IPosCaption)
                                                .Type = EncodeInteger(IArgs(main_IPosType))
                                                .REquired = EncodeBoolean(IArgs(main_IPosRequired))
                                                Select Case .Type
                                                    Case 1
                                                        '
                                                        ' People Record
                                                        '
                                                        .PeopleField = IArgs(main_IPosPeopleField)
                                                    Case 2
                                                        '
                                                        ' Group main_MemberShip
                                                        '
                                                        .GroupName = IArgs(main_IPosGroupName)
                                                End Select
                                            End If
                                        End With
                                    Next
                                End If
                            End If
                        End If
                    End If
                End If
            End If
            '
            pageManager_LoadFormPageInstructions = f
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_LoadFormPageInstructions")
        End Function
        '
        '
        '
        Private Function pageManager_GetFormPage(FormPageName As String, GroupIDToJoinOnSuccess As Integer) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("main_GetFormPage")
            '
            Dim RepeatBody As String
            Dim PtrFront As Integer
            Dim PtrBack As Integer
            Dim i() As String
            Dim IPtr As Integer
            Dim IStart As Integer
            Dim IArgs() As String
            Dim IArgPtr As Integer
            Dim CSPeople As Integer
            Dim Body As String
            Dim Instruction As String
            Dim Formhtml As String
            Dim FormInstructions As String
            Dim CS As Integer
            Dim HasRequiredFields As Boolean
            Dim ArgCaption As String
            Dim ArgType As Integer
            Dim ArgRequired As Boolean
            Dim GroupName As String
            Dim GroupValue As Boolean
            Dim GroupRowPtr As Integer
            Dim FormPageID As Integer
            Dim f As main_FormPagetype
            Dim IsRetry As Boolean
            Dim CaptionSpan As String
            Dim Caption As String
            Dim IsRequiredByCDef As Boolean
            Dim PeopleCDef As coreMetaDataClass.CDefClass
            '
            IsRetry = (docProperties.getInteger("ContensiveFormPageID") <> 0)
            '
            CS = db.csOpen("Form Pages", "name=" & db.encodeSQLText(FormPageName))
            If db.cs_Ok(CS) Then
                FormPageID = db.cs_getInteger(CS, "ID")
                Formhtml = db.cs_getText(CS, "Body")
                FormInstructions = db.cs_getText(CS, "Instructions")
            End If
            Call db.cs_Close(CS)
            f = pageManager_LoadFormPageInstructions(FormInstructions, Formhtml)
            '
            '
            '
            RepeatBody = ""
            CSPeople = -1
            For IPtr = 0 To UBound(f.Inst)
                With f.Inst(IPtr)
                    Select Case .Type
                        Case 1
                            '
                            ' People Record
                            '
                            If IsRetry And docProperties.getText(.PeopleField) = "" Then
                                CaptionSpan = "<span class=""ccError"">"
                            Else
                                CaptionSpan = "<span>"
                            End If
                            If Not db.cs_Ok(CSPeople) Then
                                CSPeople = db_csOpen("people", user.id)
                            End If
                            Caption = .Caption
                            If .REquired Or EncodeBoolean(db_GetContentFieldProperty("People", .PeopleField, "Required")) Then
                                Caption = "*" & Caption
                            End If
                            If db.cs_Ok(CSPeople) Then
                                Body = f.RepeatCell
                                Body = vbReplace(Body, "{{CAPTION}}", CaptionSpan & Caption & "</span>", 1, 99, vbTextCompare)
                                Body = vbReplace(Body, "{{FIELD}}", html_GetFormInputCS(CSPeople, "People", .PeopleField), 1, 99, vbTextCompare)
                                RepeatBody = RepeatBody & Body
                                HasRequiredFields = HasRequiredFields Or .REquired
                            End If
                        Case 2
                            '
                            ' Group main_MemberShip
                            '
                            GroupValue = user.IsMemberOfGroup2(.GroupName)
                            Body = f.RepeatCell
                            Body = vbReplace(Body, "{{CAPTION}}", html_GetFormInputCheckBox2("Group" & .GroupName, GroupValue), 1, 99, vbTextCompare)
                            Body = vbReplace(Body, "{{FIELD}}", .Caption)
                            RepeatBody = RepeatBody & Body
                            GroupRowPtr = GroupRowPtr + 1
                            HasRequiredFields = HasRequiredFields Or .REquired
                    End Select
                End With
            Next
            Call db.cs_Close(CSPeople)
            If HasRequiredFields Then
                Body = f.RepeatCell
                Body = vbReplace(Body, "{{CAPTION}}", "&nbsp;", 1, 99, vbTextCompare)
                Body = vbReplace(Body, "{{FIELD}}", "*&nbsp;Required Fields")
                RepeatBody = RepeatBody & Body
            End If
            '
            pageManager_GetFormPage = "" _
            & error_GetUserError() _
            & html_GetUploadFormStart() _
            & html_GetFormInputHidden("ContensiveFormPageID", FormPageID) _
            & html_GetFormInputHidden("SuccessID", security.encodeToken(GroupIDToJoinOnSuccess, main_PageStartTime)) _
            & f.PreRepeat _
            & RepeatBody _
            & f.PostRepeat _
            & html_GetUploadFormEnd()
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_GetFormPage")
        End Function
        '
        '
        '
        Private Sub pageManager_ProcessFormPage(FormPageID As Integer)
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("main_ProcessFormPage")
            '
            Dim CS As Integer
            Dim SQL As String
            Dim Formhtml As String
            Dim FormInstructions As String
            Dim f As main_FormPagetype
            Dim Ptr As Integer
            Dim CSPeople As Integer
            Dim IsInGroup As Boolean
            Dim WasInGroup As Boolean
            Dim FormValue As String
            Dim Success As Boolean
            Dim PeopleFirstName As String
            Dim PeopleLastName As String
            Dim PeopleUsername As String
            Dim PeoplePassword As String
            Dim PeopleName As String
            Dim PeopleEmail As String
            Dim Groups() As String
            Dim GroupName As String
            Dim GroupIDToJoinOnSuccess As Integer
            '
            ' main_Get the instructions from the record
            '
            CS = db_csOpen("Form Pages", FormPageID)
            If db.cs_Ok(CS) Then
                Formhtml = db.cs_getText(CS, "Body")
                FormInstructions = db.cs_getText(CS, "Instructions")
            End If
            Call db.cs_Close(CS)
            If FormInstructions <> "" Then
                '
                ' Load the instructions
                '
                f = pageManager_LoadFormPageInstructions(FormInstructions, Formhtml)
                If f.AuthenticateOnFormProcess And Not user.isAuthenticated() And user.isRecognized() Then
                    '
                    ' If this form will authenticate when done, and their is a current, non-authenticated account -- logout first
                    '
                    Call user.logout()
                End If
                CSPeople = -1
                Success = True
                For Ptr = 0 To UBound(f.Inst)
                    With f.Inst(Ptr)
                        Select Case .Type
                            Case 1
                                '
                                ' People Record
                                '
                                FormValue = docProperties.getText(.PeopleField)
                                If (FormValue <> "") And EncodeBoolean(db_GetContentFieldProperty("people", .PeopleField, "uniquename")) Then
                                    SQL = "select count(*) from ccMembers where " & .PeopleField & "=" & db.encodeSQLText(FormValue)
                                    CS = db.cs_openSql(SQL)
                                    If db.cs_Ok(CS) Then
                                        Success = db.cs_getInteger(CS, "cnt") = 0
                                    End If
                                    Call db.cs_Close(CS)
                                    If Not Success Then
                                        error_AddUserError("The field [" & .Caption & "] must be unique, and the value [" & html_EncodeHTML(FormValue) & "] has already been used.")
                                    End If
                                End If
                                If (.REquired Or EncodeBoolean(db_GetContentFieldProperty("people", .PeopleField, "required"))) And FormValue = "" Then
                                    Success = False
                                    error_AddUserError("The field [" & html_EncodeHTML(.Caption) & "] is required.")
                                Else
                                    If Not db.cs_Ok(CSPeople) Then
                                        CSPeople = db_csOpen("people", user.id)
                                    End If
                                    If db.cs_Ok(CSPeople) Then
                                        Select Case vbUCase(.PeopleField)
                                            Case "NAME"
                                                PeopleName = FormValue
                                                Call db.cs_set(CSPeople, .PeopleField, FormValue)
                                            Case "FIRSTNAME"
                                                PeopleFirstName = FormValue
                                                Call db.cs_set(CSPeople, .PeopleField, FormValue)
                                            Case "LASTNAME"
                                                PeopleLastName = FormValue
                                                Call db.cs_set(CSPeople, .PeopleField, FormValue)
                                            Case "EMAIL"
                                                PeopleEmail = FormValue
                                                Call db.cs_set(CSPeople, .PeopleField, FormValue)
                                            Case "USERNAME"
                                                PeopleUsername = FormValue
                                                Call db.cs_set(CSPeople, .PeopleField, FormValue)
                                            Case "PASSWORD"
                                                PeoplePassword = FormValue
                                                Call db.cs_set(CSPeople, .PeopleField, FormValue)
                                            Case Else
                                                Call db.cs_set(CSPeople, .PeopleField, FormValue)
                                        End Select
                                    End If
                                End If
                            Case 2
                                '
                                ' Group main_MemberShip
                                '
                                IsInGroup = main_GetStreamBoolean2("Group" & .GroupName)
                                WasInGroup = user.IsMemberOfGroup2(.GroupName)
                                If WasInGroup And Not IsInGroup Then
                                    group_DeleteGroupMember(.GroupName)
                                ElseIf IsInGroup And Not WasInGroup Then
                                    group_AddGroupMember(.GroupName)
                                End If
                        End Select
                    End With
                Next
                '
                ' Create People Name
                '
                If PeopleName = "" And PeopleFirstName <> "" And PeopleLastName <> "" Then
                    If db.cs_Ok(CSPeople) Then
                        Call db.cs_set(CSPeople, "name", PeopleFirstName & " " & PeopleLastName)
                    End If
                End If
                Call db.cs_Close(CSPeople)
                '
                ' AuthenticationOnFormProcess requires Username/Password and must be valid
                '
                If Success Then
                    '
                    ' Authenticate
                    '
                    If f.AuthenticateOnFormProcess Then
                        Call user.authenticateById(user.id)
                    End If
                    '
                    ' Join Group requested by page that created form
                    '
                    Dim tokenDate As Date
                    Call security.decodeToken(docProperties.getText("SuccessID"), GroupIDToJoinOnSuccess, tokenDate)
                    'GroupIDToJoinOnSuccess = main_DecodeKeyNumber(main_GetStreamText2("SuccessID"))
                    If GroupIDToJoinOnSuccess <> 0 Then
                        Call group_AddGroupMember(group_GetGroupName(GroupIDToJoinOnSuccess))
                    End If
                    '
                    ' Join Groups requested by pageform
                    '
                    If f.AddGroupNameList <> "" Then
                        Groups = Split(Trim(f.AddGroupNameList), ",")
                        For Ptr = 0 To UBound(Groups)
                            GroupName = Trim(Groups(Ptr))
                            If GroupName <> "" Then
                                Call group_AddGroupMember(GroupName)
                            End If
                        Next
                    End If
                End If
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_ProcessFormPage")
        End Sub
        '
        ' Verify Registration Form Page
        '
        Private Sub main_VerifyRegistrationFormPage()
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("main_VerifyRegistrationFormPage")
            '
            Dim CS As Integer
            Dim GroupNameList As String
            Dim Copy As String
            '
            Call db.deleteContentRecords("Form Pages", "name=" & db.encodeSQLText("Registration Form"))
            CS = db.csOpen("Form Pages", "name=" & db.encodeSQLText("Registration Form"))
            If Not db.cs_Ok(CS) Then
                '
                ' create Version 1 template - just to main_Get it started
                '
                Call db.cs_Close(CS)
                GroupNameList = "Registered"
                CS = db.cs_insertRecord("Form Pages")
                If db.cs_Ok(CS) Then
                    Call db.cs_set(CS, "name", "Registration Form")
                    Copy = "" _
                        & vbCrLf & "<table border=""0"" cellpadding=""2"" cellspacing=""0"" width=""100%"">" _
                        & vbCrLf & "{{REPEATSTART}}<tr><td align=right style=""height:22px;"">{{CAPTION}}&nbsp;</td><td align=left>{{FIELD}}</td></tr>{{REPEATEND}}" _
                        & vbCrLf & "<tr><td align=right><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=135 height=1></td><td width=""100%"">&nbsp;</td></tr>" _
                        & vbCrLf & "<tr><td colspan=2>&nbsp;<br>" & main_GetPanelButtons(ButtonRegister, "Button") & "</td></tr>" _
                        & vbCrLf & "</table>"
                    Call db.cs_set(CS, "Body", Copy)
                    Copy = "" _
                        & "1" _
                        & vbCrLf & GroupNameList _
                        & vbCrLf & "true" _
                        & vbCrLf & "1,First Name,true,FirstName" _
                        & vbCrLf & "1,Last Name,true,LastName" _
                        & vbCrLf & "1,Email Address,true,Email" _
                        & vbCrLf & "1,Phone,true,Phone" _
                        & vbCrLf & "2,Please keep me informed of news and events,false,Subscribers" _
                        & ""
                    Call db.cs_set(CS, "Instructions", Copy)
                End If
            End If
            Call db.cs_Close(CS)
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_VerifyRegistrationFormPage")
        End Sub
        '
        ' Public Method to main_Get Contact Manager
        '
        Public Function contactManager_GetContactManager(Option_String As String) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("main_GetContactManager")
            '
            contactManager_GetContactManager = executeAddon_legacy5(0, "Contact Manager", "", addonContextEnum.ContextPage, "", 0, "", 0)
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_GetContactManager")
        End Function
        '
        '
        '
        Public Function pageManager_GetDynamicMenu(addonOption_String As String, UseContentWatchLink As Boolean) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetDynamicMenu")
            '
            'If Not (true) Then Exit Function
            '
            Dim EditLink As String
            Dim StylesFilename As String
            Dim MenuDepth As Integer
            Dim MenuStyle As Integer
            Dim MenuName As String
            Dim MenuStylePrefix As String
            Dim MenuDelimiter As String
            Dim DefaultTemplateLink As String
            Dim FlyoutDirection As String
            Dim FlyoutOnHover As String
            Dim Layout As String
            Dim PreButton As String
            Dim PostButton As String
            Dim MenuID As Integer
            Dim IsAuthoring As Boolean
            Dim Menu As String
            Dim MenuNew As String
            Dim CS As Integer
            Dim IsOldMenu As Boolean
            Dim CompatibilitySpanAroundButton As Boolean
            '
            IsAuthoring = user.isEditing("Dynamic Menus")
            DefaultTemplateLink = www_requestRootPath & web_requestPage
            If False Then '.292" Then
                CompatibilitySpanAroundButton = True
            Else
                CompatibilitySpanAroundButton = siteProperties.getBoolean("Compatibility Dynamic Menu Span Around Button", False)
            End If
            '
            ' Check for MenuID - if present, arguments are in the Dynamic Menu content - else it is old, and they are in the addonOption_String
            '
            If True And vbInstr(1, addonOption_String, "menu=", vbTextCompare) <> 0 Then
                MenuNew = main_GetAddonOption("menunew", addonOption_String)
                'MenuNew = Trim(decodeResponseVariable(main_GetArgument("menunew", addonOption_String, "", "&")))
                If MenuNew <> "" Then
                    '
                    ' Create New Menu
                    '
                    Menu = MenuNew
                End If
                If Menu = "" Then
                    '
                    ' No new menu, try a selected menu
                    '
                    Menu = main_GetAddonOption("menu", addonOption_String)
                    'Menu = Trim(decodeResponseVariable(main_GetArgument("menu", addonOption_String, "", "&")))
                    If Menu = "" Then
                        '
                        ' No selected, use Default
                        '
                        Menu = "Default"
                    End If
                End If
                MenuID = menu_VerifyDynamicMenu(Menu)
                '
                ' Open the Menu
                '
                CS = db_csOpen("Dynamic Menus", MenuID)
                If Not db.cs_Ok(CS) Then
                    '
                    ' ID was given, but no found in Db
                    '
                    Call db.cs_Close(CS)
                    CS = db_csOpen("Dynamic Menus", menu_VerifyDynamicMenu("Default"))
                End If
                If db.cs_Ok(CS) Then
                    '
                    ' setup arguments from Content
                    '
                    EditLink = cs_GetCSRecordEditLink(CS)
                    MenuName = db.cs_getText(CS, "Name")
                    MenuDepth = db.cs_getInteger(CS, "Depth")
                    MenuStylePrefix = db.cs_getText(CS, "StylePrefix")
                    MenuDelimiter = db.cs_getText(CS, "Delimiter")
                    FlyoutOnHover = db.cs_getBoolean(CS, "FlyoutOnHover").ToString
                    ' LookupList should return the text for the value saved - to be compatible with the old hardcoded text
                    FlyoutDirection = db.db_GetCS(CS, "FlyoutDirection")
                    Layout = db.db_GetCS(CS, "Layout")
                    MenuStyle = 0
                    '
                    ' Add exclusive styles
                    '
                    If True Then
                        StylesFilename = db.cs_getText(CS, "StylesFilename")
                        If StylesFilename <> "" Then
                            If vbLCase(Right(StylesFilename, 4)) <> ".css" Then
                                Call handleLegacyError15("Dynamic Menu [" & MenuName & "] StylesFilename is not a '.css' file, and will not display correct. Check that the field is setup as a CSSFile.", "main_GetDynamicMenu")
                            Else
                                Call main_AddStylesheetLink2(web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, StylesFilename), "dynamic menu")
                            End If
                        End If
                    End If
                End If
                Call db.cs_Close(CS)
            Else
                '
                ' Old style menu - main_Get arguments from AC tag
                '   MenuName="" is legacy mode (all sections show)
                '
                IsOldMenu = True
                MenuName = ""
                '
                MenuDepth = EncodeInteger(main_GetAddonOption("DEPTH", addonOption_String))
                MenuStylePrefix = Trim(main_GetAddonOption("STYLEPREFIX", addonOption_String))
                MenuDelimiter = main_GetAddonOption("DELIMITER", addonOption_String)
                FlyoutOnHover = main_GetAddonOption("FlyoutOnHover", addonOption_String)
                FlyoutDirection = main_GetAddonOption("FlyoutDirection", addonOption_String)
                Layout = main_GetAddonOption("Layout", addonOption_String)
                '
                ' really old value
                '
                MenuStyle = EncodeInteger(main_GetAddonOption("FORMAT", addonOption_String))
            End If
            '
            ' Check values
            '
            If MenuStylePrefix = "" Then
                MenuStylePrefix = "ccFlyout"
            End If
            '
            ' determine MenuStyle from input
            '
            If MenuStyle = 0 Then
                If EncodeBoolean(FlyoutOnHover) Then
                    MenuStyle = 8
                Else
                    MenuStyle = 4
                End If
                Select Case vbUCase(FlyoutDirection)
                    Case "RIGHT"
                        MenuStyle = MenuStyle + 1
                    Case "UP"
                        MenuStyle = MenuStyle + 2
                    Case "LEFT"
                        MenuStyle = MenuStyle + 3
                End Select
            End If
            pageManager_GetDynamicMenu = pageManager_GetSectionMenu(MenuDepth, MenuStyle, MenuStylePrefix, DefaultTemplateLink, MenuID, MenuName, UseContentWatchLink)
            '
            ' Now adjust results using arguments
            '
            If vbUCase(Layout) = "VERTICAL" Then
                '
                ' vertical menu: Set dislay block
                '
                pageManager_GetDynamicMenu = vbReplace(pageManager_GetDynamicMenu, "class=""" & MenuStylePrefix & "Button""", "style=""display:block;"" class=""" & MenuStylePrefix & "Button""")
                '
                PreButton = "<div style=""WHITE-SPACE: nowrap;"">"
                PostButton = "</div>"
                '
                If MenuDelimiter <> "" Then
                    MenuDelimiter = "<div style=""WHITE-SPACE: nowrap;"" class=""" & MenuStylePrefix & "Delimiter"">" & MenuDelimiter & "</div>"
                End If
            Else
                '
                ' horizontal menu: Set dislay inline
                '
                pageManager_GetDynamicMenu = vbReplace(pageManager_GetDynamicMenu, "class=""" & MenuStylePrefix & "Button""", "style=""display:inline;"" class=""" & MenuStylePrefix & "Button""")
                '
                If CompatibilitySpanAroundButton Then
                    PreButton = "<span style=""WHITE-SPACE: nowrap"">"
                    PostButton = "</span>"
                End If
                '
                If MenuDelimiter <> "" Then
                    MenuDelimiter = "<span style=""WHITE-SPACE: nowrap;"" class=""" & MenuStylePrefix & "Delimiter"">" & MenuDelimiter & "</span>"
                End If
            End If
            pageManager_GetDynamicMenu = PreButton & vbReplace(pageManager_GetDynamicMenu, vbCrLf, PostButton & MenuDelimiter & PreButton) & PostButton
            If user.isAdvancedEditing("") Then
                pageManager_GetDynamicMenu = "<div style=""border-bottom:1px dashed #404040; padding:5px;margin-bottom:5px;"">Dynamic Menu [" & MenuName & "]" & EditLink & "</div><div>" & pageManager_GetDynamicMenu & "</div>"
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("main_GetDynamicMenu")
        End Function
        '
        ' This is a copy of the routine in CSrv -- duplicated so I do not have to make a public until the interface is worked-out
        '
        Public Function db_GetSQLSelect(ByVal DataSourceName As String, ByVal From As String, Optional ByVal FieldList As String = "", Optional ByVal Where As String = "", Optional ByVal OrderBy As String = "", Optional ByVal GroupBy As String = "", Optional ByVal RecordLimit As Integer = 0) As String
            On Error GoTo ErrorTrap
            '
            'If Not (true) Then Exit Function
            '
            Dim SQL As String
            '
            Select Case db.db_GetDataSourceType(DataSourceName)
                Case DataSourceTypeODBCMySQL
                    SQL = "SELECT"
                    SQL &= " " & FieldList
                    SQL &= " FROM " & From
                    If Where <> "" Then
                        SQL &= " WHERE " & Where
                    End If
                    If OrderBy <> "" Then
                        SQL &= " ORDER BY " & OrderBy
                    End If
                    If GroupBy <> "" Then
                        SQL &= " GROUP BY " & GroupBy
                    End If
                    If RecordLimit <> 0 Then
                        SQL &= " LIMIT " & RecordLimit
                    End If
                Case Else
                    SQL = "SELECT"
                    If RecordLimit <> 0 Then
                        SQL &= " TOP " & RecordLimit
                    End If
                    If FieldList = "" Then
                        SQL &= " *"
                    Else
                        SQL &= " " & FieldList
                    End If
                    SQL &= " FROM " & From
                    If Where <> "" Then
                        SQL &= " WHERE " & Where
                    End If
                    If OrderBy <> "" Then
                        SQL &= " ORDER BY " & OrderBy
                    End If
                    If GroupBy <> "" Then
                        SQL &= " GROUP BY " & GroupBy
                    End If
            End Select
            db_GetSQLSelect = SQL
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("main_GetSQLSelect")
        End Function
        '
        '
        '
        Public Sub db_cs_setFormInput(ByVal CSPointer As Integer, ByVal FieldName As String, Optional ByVal RequestName As String = "")
            On Error GoTo ErrorTrap
            '
            Dim LocalRequestName As String
            Dim Filename As String
            Dim Path As String
            '
            'If Not (true) Then Exit Sub
            '
            If Not db.cs_Ok(CSPointer) Then
                Throw New ApplicationException("ContentSetPointer is invalid, empty, or end-of-file")
            ElseIf Trim(FieldName) = "" Then
                Throw New ApplicationException("FieldName is invalid or blank")
            Else
                LocalRequestName = RequestName
                If LocalRequestName = "" Then
                    LocalRequestName = FieldName
                End If
                Select Case db.db_GetCSFieldTypeId(CSPointer, FieldName)
                    Case FieldTypeIdBoolean
                        '
                        ' Boolean
                        '
                        Call db.cs_set(CSPointer, FieldName, main_GetStreamBoolean2(LocalRequestName))
                    Case FieldTypeIdCurrency, FieldTypeIdFloat, FieldTypeIdInteger, FieldTypeIdLookup, FieldTypeIdManyToMany
                        '
                        ' Numbers
                        '
                        Call db.cs_set(CSPointer, FieldName, main_GetStreamNumber2(LocalRequestName))
                    Case FieldTypeIdDate
                        '
                        ' Date
                        '
                        Call db.cs_set(CSPointer, FieldName, doc_getDate(LocalRequestName))
                    Case FieldTypeIdFile, FieldTypeIdFileImage
                        '
                        '
                        '
                        Filename = docProperties.getText(LocalRequestName)
                        If Filename <> "" Then
                            Path = db.db_GetCSFilename(CSPointer, FieldName, Filename)
                            Call db.db_SetCSField(CSPointer, FieldName, Path)
                            Path = vbReplace(Path, "\", "/")
                            Path = vbReplace(Path, "/" & Filename, "")
                            Call web_ProcessFormInputFile2(LocalRequestName, appRootFiles, Path)
                        End If
                    Case Else
                        '
                        ' text files
                        '
                        Call db.cs_set(CSPointer, FieldName, docProperties.getText(LocalRequestName))
                End Select
            End If

            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError13("main_SetCSFormInput")
        End Sub
        '
        '
        '
        Public Function pageManager_GetStyleSheet() As String
            pageManager_GetStyleSheet = pageManager_GetStyleSheet2()
        End Function
        '
        '===========================================================================================================
        '   returns the Contensive styles inline
        '===========================================================================================================
        '
        Public Function pageManager_GetStyleSheetDefault() As String
            pageManager_GetStyleSheetDefault = pageManager_GetStyleSheetDefault2()
        End Function
        '        '
        '        '
        '        '
        '        Public Function main_ProcessReplacement(ByVal NameValueLines As Object, ByVal Source As String) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00398")
        '            '
        '            main_ProcessReplacement = processReplacement(NameValueLines, Source)
        '            '
        '            Exit Function
        'ErrorTrap:
        '            Call handleLegacyError18("ProcessReplacement")
        '        End Function
        '
        '
        '
        Private Function pageManager_GetStyleTagPublic() As String
            Dim StyleSN As Integer
            '
            If siteProperties.getBoolean("Allow CSS Reset") Then
                pageManager_GetStyleTagPublic = pageManager_GetStyleTagPublic & cr & "<link rel=""stylesheet"" type=""text/css"" href=""" & web_requestProtocol & main_ServerDomain & "/cclib/styles/ccreset.css"" >"
            End If
            StyleSN = EncodeInteger(siteProperties.getText("StylesheetSerialNumber", "0"))
            If StyleSN < 0 Then
                '
                ' Linked Styles
                ' Bump the Style Serial Number so next fetch is not cached
                '
                StyleSN = 1
                Call siteProperties.setProperty("StylesheetSerialNumber", CStr(StyleSN))
                '
                ' Save new public stylesheet
                '
                'Dim kmafs As New fileSystemClass
                Call cdnFiles.saveFile(convertCdnUrlToCdnPathFilename("templates\Public" & StyleSN & ".css"), csv_getStyleSheetProcessed)
                Call cdnFiles.saveFile(convertCdnUrlToCdnPathFilename("templates\Admin" & StyleSN & ".css"), pageManager_GetStyleSheetDefault2)

            End If
            If (StyleSN = 0) Then
                '
                ' Put styles inline if requested, and if there has been an upgrade
                '
                pageManager_GetStyleTagPublic = pageManager_GetStyleTagPublic & cr & StyleSheetStart & pageManager_GetStyleSheet() & cr & StyleSheetEnd
            ElseIf (db.dataBuildVersion <> cp.Version()) Then
                '
                ' Put styles inline if requested, and if there has been an upgrade
                '
                pageManager_GetStyleTagPublic = pageManager_GetStyleTagPublic & cr & "<!-- styles forced inline because database upgrade needed -->" & StyleSheetStart & pageManager_GetStyleSheet() & cr & StyleSheetEnd
            Else
                '
                ' cached stylesheet
                '
                pageManager_GetStyleTagPublic = pageManager_GetStyleTagPublic & cr & "<link rel=""stylesheet"" type=""text/css"" href=""" & web_requestProtocol & main_ServerDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, "templates/Public" & StyleSN & ".css") & """ >"
            End If
        End Function
        '
        '
        '
        Private Function admin_GetStyleTagAdmin() As String
            Dim StyleSN As Integer
            '
            StyleSN = EncodeInteger(siteProperties.getText("StylesheetSerialNumber", "0"))
            If StyleSN = 0 Then
                admin_GetStyleTagAdmin = cr & StyleSheetStart & pageManager_GetStyleSheetDefault() & cr & StyleSheetEnd
            ElseIf (db.dataBuildVersion <> cp.Version()) Then
                admin_GetStyleTagAdmin = cr & "<!-- styles forced inline because database upgrade needed -->" & StyleSheetStart & pageManager_GetStyleSheetDefault() & cr & StyleSheetEnd
            Else
                If StyleSN < 0 Then
                    '
                    ' Linked Styles
                    ' Bump the Style Serial Number so next fetch is not cached
                    '
                    StyleSN = 1
                    Call siteProperties.setProperty("StylesheetSerialNumber", CStr(StyleSN))
                    '
                    ' Save new public stylesheet
                    '
                    'Dim kmafs As New fileSystemClass
                    Call cdnFiles.saveFile(convertCdnUrlToCdnPathFilename("templates\Public" & StyleSN & ".css"), csv_getStyleSheetProcessed)
                    Call cdnFiles.saveFile(convertCdnUrlToCdnPathFilename("templates\Admin" & StyleSN & ".css"), pageManager_GetStyleSheetDefault2)
                End If
                admin_GetStyleTagAdmin = cr & "<link rel=""stylesheet"" type=""text/css"" href=""" & web_requestProtocol & main_ServerDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, "templates/Admin" & StyleSN & ".css") & """ >"
            End If
        End Function
        '
        '
        '
        Private Function pageManager_GetLandingLink() As String
            If pageManager_LandingLink = "" Then
                pageManager_LandingLink = siteProperties.getText("SectionLandingLink", www_requestRootPath & siteProperties.serverPageDefault)
                pageManager_LandingLink = ConvertLinkToShortLink(pageManager_LandingLink, webServer.requestDomain, web_requestVirtualFilePath)
                pageManager_LandingLink = EncodeAppRootPath(pageManager_LandingLink, web_requestVirtualFilePath, www_requestRootPath, webServer.requestDomain)
            End If
            pageManager_GetLandingLink = pageManager_LandingLink
        End Function
        '
        '====================================================================================================
        '   encode content moved to csv so support cp.content.GetCopy()
        '====================================================================================================
        '
        Public Function html_encodeContent9(Source As String, personalizationPeopleId As Integer, ContextContentName As String, ContextRecordID As Integer, ContextContactPeopleID As Integer, PlainText As Boolean, AddLinkEID As Boolean, EncodeActiveFormatting As Boolean, EncodeActiveImages As Boolean, EncodeActiveEditIcons As Boolean, EncodeActivePersonalization As Boolean, AddAnchorQuery As String, ProtocolHostString As String, IsEmailContent As Boolean, DefaultWrapperID As Integer, ignore_TemplateCaseOnly_Content As String, addonContext As addonContextEnum) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("EncodeContent9")
            '
            'If Not (true) Then Exit Function
            '
            Dim returnValue As String
            '
            returnValue = html_encodeContent10(Source, personalizationPeopleId, ContextContentName, ContextRecordID, ContextContactPeopleID, PlainText, AddLinkEID, EncodeActiveFormatting, EncodeActiveImages, EncodeActiveEditIcons, EncodeActivePersonalization, AddAnchorQuery, ProtocolHostString, IsEmailContent, DefaultWrapperID, ignore_TemplateCaseOnly_Content, addonContext, user.isAuthenticated, Nothing, user.isEditingAnything)
            '
            html_encodeContent9 = returnValue
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_EncodeContent9")
        End Function
        ''
        '' To support the special case when the template calls this to encode itself, and the page content has already been rendered.
        ''
        'Public Function main_EncodeContent8(Source As String, ForMemberID As Integer, ContextContentName As String, ContextRecordID As Integer, ContextContactPeopleID As Integer, PlainText As Boolean, AddLinkEID As Boolean, EncodeActiveFormatting As Boolean, EncodeActiveImages As Boolean, EncodeActiveEditIcons As Boolean, EncodeActivePersonalization As Boolean, AddAnchorQuery As String, ProtocolHostString As String, IsEmailContent As Boolean, DefaultWrapperID As Integer, ignore_TemplateCaseOnly_Content As String, Context As addonContextEnum) As String
        '    '
        '    main_EncodeContent8 = encodeContent9(Source, ForMemberID, ContextContentName, ContextRecordID, ContextContactPeopleID, PlainText, AddLinkEID, EncodeActiveFormatting, EncodeActiveImages, EncodeActiveEditIcons, EncodeActivePersonalization, AddAnchorQuery, ProtocolHostString, IsEmailContent, DefaultWrapperID, ignore_TemplateCaseOnly_Content, Context)
        'End Function
        ''
        '' To support wrappers
        ''
        'Public Function main_EncodeContent5(Source As String, ForMemberID As Integer, ContextContentName As String, ContextRecordID As Integer, ContextContactPeopleID As Integer, PlainText As Boolean, AddLinkEID As Boolean, EncodeActiveFormatting As Boolean, EncodeActiveImages As Boolean, EncodeActiveEditIcons As Boolean, EncodeActivePersonalization As Boolean, AddAnchorQuery As String, ProtocolHostString As String, IsEmailContent As Boolean, DefaultWrapperID As Integer) As String
        '    main_EncodeContent5 = main_EncodeContent8(Source, ForMemberID, ContextContentName, ContextRecordID, ContextContactPeopleID, PlainText, AddLinkEID, EncodeActiveFormatting, EncodeActiveImages, EncodeActiveEditIcons, EncodeActivePersonalization, AddAnchorQuery, ProtocolHostString, IsEmailContent, DefaultWrapperID, "", addonContextEnum.ContextPage)
        'End Function
        ''
        '' created just to keep in sync with content server changes, needing AdminURL
        ''
        'Public Function main_EncodeContent4(Source As String, ForMemberID As Integer, ContextContentName As String, ContextRecordID As Integer, ContextContactPeopleID As Integer, PlainText As Boolean, AddLinkEID As Boolean, EncodeActiveFormatting As Boolean, EncodeActiveImages As Boolean, EncodeActiveEditIcons As Boolean, EncodeActivePersonalization As Boolean, AddAnchorQuery As String, ProtocolHostString As String, IsEmailContent As Boolean) As String
        '    main_EncodeContent4 = main_EncodeContent5(Source, ForMemberID, ContextContentName, ContextRecordID, ContextContactPeopleID, PlainText, AddLinkEID, EncodeActiveFormatting, EncodeActiveImages, EncodeActiveEditIcons, EncodeActivePersonalization, AddAnchorQuery, ProtocolHostString, False, 0)
        'End Function
        ''
        '' Added IsEmailContent
        ''
        'Public Function main_EncodeContent3(Source As String, ForMemberID As Integer, ContextContentName As String, ContextRecordID As Integer, ContextContactPeopleID As Integer, PlainText As Boolean, AddLinkEID As Boolean, EncodeActiveFormatting As Boolean, EncodeActiveImages As Boolean, EncodeActiveEditIcons As Boolean, EncodeActivePersonalization As Boolean, AddAnchorQuery As String, ProtocolHostString As String, IsEmailContent As Boolean) As String
        '    main_EncodeContent3 = main_EncodeContent4(Source, ForMemberID, ContextContentName, ContextRecordID, ContextContactPeopleID, PlainText, AddLinkEID, EncodeActiveFormatting, EncodeActiveImages, EncodeActiveEditIcons, EncodeActivePersonalization, AddAnchorQuery, ProtocolHostString, False)
        'End Function
        ''
        ''
        ''
        'Public Function main_EncodeContent2(Source As String, ForMemberID As Integer, ContextContentName As String, ContextRecordID As Integer, ContextContactPeopleID As Integer, PlainText As Boolean, AddLinkEID As Boolean, EncodeActiveFormatting As Boolean, EncodeActiveImages As Boolean, EncodeActiveEditIcons As Boolean, EncodeActivePersonalization As Boolean, AddAnchorQuery As String, ProtocolHostString As String) As String
        '    main_EncodeContent2 = main_EncodeContent3(Source, ForMemberID, ContextContentName, ContextRecordID, ContextContactPeopleID, PlainText, AddLinkEID, EncodeActiveFormatting, EncodeActiveImages, EncodeActiveEditIcons, EncodeActivePersonalization, AddAnchorQuery, ProtocolHostString, False)
        'End Function
        '        '
        '        '========================================================================
        '        ' Encode Content
        '        '========================================================================
        '        '
        '        Public Function main_EncodeContent(Source As String, Optional ForMemberID As Integer = SystemMemberID, Optional CSFormattingContext As Integer = -1, Optional PlainText As Boolean = False, Optional AddLinkEID As Boolean = False, Optional EncodeActiveFormatting As Boolean = False, Optional EncodeActiveImages As Boolean = False, Optional EncodeActiveEditIcons As Boolean = False, Optional EncodeActivePersonalization As Boolean = False, Optional AddAnchorQuery As String = "", Optional ProtocolHostString As String = "") As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("EncodeContent")
        '            '
        '            Dim ProcessACTags As Boolean
        '            ' Dim CSFormattingContext As Integer
        '            Dim FormattingContentID As Integer
        '            Dim ContextContentName As String
        '            Dim ContextRecordID As Integer
        '            Dim ContextContactPeopleID As Integer
        '            '
        '            ProcessACTags = ((EncodeActiveFormatting Or EncodeActivePersonalization Or EncodeActiveImages Or EncodeActiveEditIcons)) And (InStr(1, Source, "<ac ", vbTextCompare) <> 0)
        '            If ProcessACTags Then
        '                'CSFormattingContext = encodeEmptyInteger(CSFormattingContext, -1)
        '                If app.db_csOk(CSFormattingContext) Then
        '                    FormattingContentID = app.db_GetCSInteger(CSFormattingContext, "ContentControlID")
        '                    ContextContentName = metaData.getContentNameByID(FormattingContentID)
        '                    ContextRecordID = app.db_GetCSInteger(CSFormattingContext, "ID")
        '                    If app.db_IsCSFieldSupported(CSFormattingContext, "ContactMemberID") Then
        '                        ContextContactPeopleID = app.db_GetCSInteger(CSFormattingContext, "ContactMemberID")
        '                    End If
        '                End If
        '            End If
        '            main_EncodeContent = main_EncodeContent5(EncodeText(Source), EncodeInteger(ForMemberID), ContextContentName, ContextRecordID, ContextContactPeopleID, PlainText, AddLinkEID, EncodeActiveFormatting, EncodeActiveImages, EncodeActiveEditIcons, EncodeActivePersonalization, AddAnchorQuery, ProtocolHostString, False, app.siteProperty_DefaultWrapperID)
        '            '
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyError18("EncodeContent")
        '        End Function
        '
        '========================================================================
        ' ----- Encode Active Content AI
        '========================================================================
        '
        Public Function html_DecodeContent(ByVal Source As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("DecodeContent")
            '
            'If Not (true) Then Exit Function
            '
            html_DecodeContent = html_DecodeContent2(EncodeText(Source))
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            'Set main_DecodeHTML = Nothing
            Call handleLegacyError18("main_DecodeContent")
        End Function
        '
        '==========================================================================================================================================
        '   Encode Content call for preparing content for display on the web page
        '       BasePath is for a future addition:
        '           Each page will have its own URLName. The URLName is the part of the URL that points to this page.
        '           If an aggr object is on a page, and it offers variations depending on a QS value, the BasePath is like
        '           the main_RefreshQueryString -- it is the path that main_Gets you back here. This needs to be passed into the objects
        '           so an object can call encodecontentforweb.
        '==========================================================================================================================================
        '
        Public Function html_encodeContentForWeb(Source As String, ContextContentName As String, ContextRecordID As Integer, Ignore_BasePath As String, WrapperID As Integer) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("EncodeContentForWeb")
            '
            html_encodeContentForWeb = html_encodeContent9(Source, user.id, ContextContentName, ContextRecordID, 0, False, False, True, True, False, True, "", "", False, WrapperID, "", addonContextEnum.ContextPage)
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("EncodeContentForWeb")
        End Function
        '
        '========================================================================
        ' Print the Member Edit form
        '
        '   For instance, list out a checklist of all public groups, with the ones checked that this member belongs to
        '       PrimaryContentName = "People"
        '       PrimaryRecordID = MemberID
        '       SecondaryContentName = "Groups"
        '       SecondaryContentSelectCriteria = "ccGroups.PublicJoin<>0"
        '       RulesContentName = "Member Rules"
        '       RulesPrimaryFieldName = "MemberID"
        '       RulesSecondaryFieldName = "GroupID"
        '========================================================================
        '
        Public Function main_GetFormInputCheckList(ByVal TagName As String, ByVal PrimaryContentName As String, ByVal PrimaryRecordID As Integer, ByVal SecondaryContentName As String, ByVal RulesContentName As String, ByVal RulesPrimaryFieldname As String, ByVal RulesSecondaryFieldName As String, Optional ByVal SecondaryContentSelectCriteria As String = "", Optional ByVal CaptionFieldName As String = "", Optional ByVal readOnlyfield As Boolean = False) As String
            main_GetFormInputCheckList = main_GetFormInputCheckListCategories_Content(TagName, PrimaryContentName, PrimaryRecordID, SecondaryContentName, RulesContentName, RulesPrimaryFieldname, RulesSecondaryFieldName, SecondaryContentSelectCriteria, EncodeText(CaptionFieldName), readOnlyfield, False, "")
        End Function
        '
        '========================================================================
        '   main_Get a list of checkbox options based on a standard set of rules
        '
        '   IncludeContentFolderDivs
        '       When true, the list of options (checkboxes) are grouped by ContentFolder and wrapped in a Div with ID="ContentFolder99"
        '
        '   For instance, list out a options of all public groups, with the ones checked that this member belongs to
        '       PrimaryContentName = "People"
        '       PrimaryRecordID = MemberID
        '       SecondaryContentName = "Groups"
        '       SecondaryContentSelectCriteria = "ccGroups.PublicJoin<>0"
        '       RulesContentName = "Member Rules"
        '       RulesPrimaryFieldName = "MemberID"
        '       RulesSecondaryFieldName = "GroupID"
        '========================================================================
        '
        Public Function main_GetFormInputCheckListCategories_Content(ByVal TagName As String, ByVal PrimaryContentName As String, ByVal PrimaryRecordID As Integer, ByVal SecondaryContentName As String, ByVal RulesContentName As String, ByVal RulesPrimaryFieldname As String, ByVal RulesSecondaryFieldName As String, ByVal SecondaryContentSelectCriteria As String, ByVal CaptionFieldName As String, ByVal readOnlyField As Boolean, ByVal IncludeContentFolderDivs As Boolean, ByVal DefaultSecondaryIDList As String) As String
            Dim returnHtml As String = ""
            Try
                Dim main_MemberShipText() As String
                Dim Ptr As Integer
                Dim main_MemberShipID As Integer
                Dim main_HeadScriptCode As String = ""
                Dim ContentFolderName As String
                Dim DivName As String
                Dim DivCnt As Integer
                Dim DivID As String
                Dim OldFolderVar As String
                Dim EndDiv As String
                Dim OpenFolderID As Integer
                Dim CurrentFolderID As Integer
                Dim IsContentCategoriesSupported As Boolean
                Dim RuleCopyCaption As String
                Dim RuleCopy As String
                Dim SQL As String
                Dim CS As Integer
                Dim main_MemberShipCount As Integer
                Dim main_MemberShipSize As Integer
                Dim main_MemberShipPointer As Integer
                Dim SectionName As String
                Dim CheckBoxCnt As Integer
                Dim DivCheckBoxCnt As Integer
                Dim main_MemberShip() As Integer
                Dim main_MemberShipRuleCopy() As String
                Dim PrimaryContentID As Integer
                Dim SecondaryTablename As String
                Dim SecondaryContentID As Integer
                Dim rulesTablename As String
                Dim OptionName As String
                Dim OptionCaption As String
                Dim optionCaptionHtmlEncoded As String
                Dim CanSeeHiddenFields As Boolean
                Dim SecondaryCDef As coreMetaDataClass.CDefClass
                Dim ContentIDList As New List(Of Integer)
                Dim Found As Boolean
                Dim RecordID As Integer
                Dim SingularPrefixHtmlEncoded As String
                Dim IsRuleCopySupported As Boolean
                Dim AllowRuleCopy As Boolean
                '
                ' IsContentCategoriesSupported - if true, break checkboxes out into divs for each Content Category
                '
                IsContentCategoriesSupported = IncludeContentFolderDivs
                If IsContentCategoriesSupported Then
                    IsContentCategoriesSupported = main_IsContentFieldSupported(SecondaryContentName, "ContentCategoryID")
                End If
                '
                ' IsRuleCopySupported - if true, the rule records include an allow button, and copy
                '   This is for a checkbox like [ ] Other [enter other copy here]
                '
                IsRuleCopySupported = main_IsContentFieldSupported(RulesContentName, "RuleCopy")
                If IsRuleCopySupported Then
                    IsRuleCopySupported = IsRuleCopySupported And main_IsContentFieldSupported(SecondaryContentName, "AllowRuleCopy")
                    If IsRuleCopySupported Then
                        IsRuleCopySupported = IsRuleCopySupported And main_IsContentFieldSupported(SecondaryContentName, "RuleCopyCaption")
                    End If
                End If
                If CaptionFieldName = "" Then
                    CaptionFieldName = "name"
                End If
                CaptionFieldName = encodeEmptyText(CaptionFieldName, "name")
                If PrimaryContentName = "" Or SecondaryContentName = "" Or RulesContentName = "" Or RulesPrimaryFieldname = "" Or RulesSecondaryFieldName = "" Then
                    returnHtml = "[Checklist not configured]"
                    handleExceptionAndRethrow(New Exception("Creating checklist, all required fields were not supplied, Caption=[" & CaptionFieldName & "], PrimaryContentName=[" & PrimaryContentName & "], SecondaryContentName=[" & SecondaryContentName & "], RulesContentName=[" & RulesContentName & "], RulesPrimaryFieldName=[" & RulesPrimaryFieldname & "], RulesSecondaryFieldName=[" & RulesSecondaryFieldName & "]"))
                Else
                    '
                    ' ----- Gather all the SecondaryContent that associates to the PrimaryContent
                    '
                    PrimaryContentID = main_GetContentID(PrimaryContentName)
                    SecondaryCDef = metaData.getCdef(SecondaryContentName)
                    SecondaryTablename = SecondaryCDef.ContentTableName
                    SecondaryContentID = SecondaryCDef.Id
                    ContentIDList.Add(SecondaryContentID)
                    ContentIDList.AddRange(SecondaryCDef.childIdList)
                    '
                    '
                    '
                    rulesTablename = db_GetContentTablename(RulesContentName)
                    SingularPrefixHtmlEncoded = html_EncodeHTML(GetSingular(SecondaryContentName)) & "&nbsp;"
                    '
                    main_MemberShipCount = 0
                    main_MemberShipSize = 0
                    returnHtml = ""
                    If (SecondaryTablename <> "") And (rulesTablename <> "") Then
                        OldFolderVar = "OldFolder" & main_CheckListCnt
                        main_HeadScriptCode &= "var " & OldFolderVar & ";"
                        If PrimaryRecordID = 0 Then
                            '
                            ' New record, use the DefaultSecondaryIDList
                            '
                            If DefaultSecondaryIDList <> "" Then

                                main_MemberShipText = Split(DefaultSecondaryIDList, ",")
                                For Ptr = 0 To UBound(main_MemberShipText)
                                    main_MemberShipID = EncodeInteger(main_MemberShipText(Ptr))
                                    If main_MemberShipID <> 0 Then
                                        ReDim Preserve main_MemberShip(Ptr)
                                        main_MemberShip(Ptr) = main_MemberShipID
                                        main_MemberShipCount = Ptr + 1
                                    End If
                                Next
                                If main_MemberShipCount > 0 Then
                                    ReDim main_MemberShipRuleCopy(main_MemberShipCount - 1)
                                End If
                                'main_MemberShipCount = UBound(main_MemberShip) + 1
                                main_MemberShipSize = main_MemberShipCount
                            End If
                        Else
                            '
                            ' ----- Determine main_MemberShip (which secondary records are associated by a rule)
                            ' ----- (exclude new record issue ID=0)
                            '
                            If IsRuleCopySupported Then
                                SQL = "SELECT " & SecondaryTablename & ".ID AS ID," & rulesTablename & ".RuleCopy"
                            Else
                                SQL = "SELECT " & SecondaryTablename & ".ID AS ID,'' as RuleCopy"
                            End If
                            SQL &= "" _
                            & " FROM " & SecondaryTablename & " LEFT JOIN" _
                            & " " & rulesTablename & " ON " & SecondaryTablename & ".ID = " & rulesTablename & "." & RulesSecondaryFieldName _
                            & " WHERE " _
                            & " (" & rulesTablename & "." & RulesPrimaryFieldname & "=" & PrimaryRecordID & ")" _
                            & " AND (" & rulesTablename & ".Active<>0)" _
                            & " AND (" & SecondaryTablename & ".Active<>0)" _
                            & " And (" & SecondaryTablename & ".ContentControlID IN (" & String.Join(",", ContentIDList) & "))"
                            If SecondaryContentSelectCriteria <> "" Then
                                SQL &= "AND(" & SecondaryContentSelectCriteria & ")"
                            End If
                            If SecondaryCDef.AllowWorkflowAuthoring And siteProperties.allowWorkflowAuthoring Then
                                SQL &= "and(" & SecondaryTablename & ".editsourceid is null)"
                            End If
                            CS = db.cs_openSql(SQL)
                            If db.cs_Ok(CS) Then
                                If True Then
                                    main_MemberShipSize = 10
                                    ReDim main_MemberShip(main_MemberShipSize)
                                    ReDim main_MemberShipRuleCopy(main_MemberShipSize)
                                    Do While db.cs_Ok(CS)
                                        If main_MemberShipCount >= main_MemberShipSize Then
                                            main_MemberShipSize = main_MemberShipSize + 10
                                            ReDim Preserve main_MemberShip(main_MemberShipSize)
                                            ReDim Preserve main_MemberShipRuleCopy(main_MemberShipSize)
                                        End If
                                        main_MemberShip(main_MemberShipCount) = db.cs_getInteger(CS, "ID")
                                        main_MemberShipRuleCopy(main_MemberShipCount) = db.cs_getText(CS, "RuleCopy")
                                        main_MemberShipCount = main_MemberShipCount + 1
                                        db.db_csGoNext(CS)
                                    Loop
                                End If
                            End If
                            db.cs_Close(CS)
                        End If
                        '
                        ' ----- Gather all the Secondary Records, sorted by ContentName
                        '
                        SQL = "SELECT " & SecondaryTablename & ".ID AS ID, AllowedContent.Name AS SectionName, " & SecondaryTablename & "." & CaptionFieldName & " AS OptionCaption, " & SecondaryTablename & ".name AS OptionName, " & SecondaryTablename & ".SortOrder"
                        If IsRuleCopySupported Then
                            SQL &= "," & SecondaryTablename & ".AllowRuleCopy," & SecondaryTablename & ".RuleCopyCaption"
                        Else
                            SQL &= ",0 as AllowRuleCopy,'' as RuleCopyCaption"
                        End If
                        If IsContentCategoriesSupported Then
                            SQL &= "" _
                                & ",Folders.ID as ContentCategoryID,Folders.Name as ContentFolderName" _
                                & " FROM ((" & SecondaryTablename _
                                & " LEFT JOIN ccContent AllowedContent ON " & SecondaryTablename & ".ContentControlID = AllowedContent.ID)" _
                                & " LEFT JOIN ccContentCategories Folders ON " & SecondaryTablename & ".ContentCategoryID = Folders.ID)" _
                                & " Where (" & SecondaryTablename & ".Active<>" & SQLFalse & ")" _
                                & " And (AllowedContent.Active<>" & SQLFalse & ")" _
                                & " And (" & SecondaryTablename & ".ContentControlID IN (" & String.Join(",", ContentIDList) & "))"
                        Else
                            SQL &= "" _
                                & ",0 as ContentCategoryID,'' as ContentFolderName" _
                                & " FROM (" & SecondaryTablename _
                                & " LEFT JOIN ccContent AllowedContent ON " & SecondaryTablename & ".ContentControlID = AllowedContent.ID)" _
                                & " Where (" & SecondaryTablename & ".Active<>" & SQLFalse & ")" _
                                & " And (AllowedContent.Active<>" & SQLFalse & ")" _
                                & " And (" & SecondaryTablename & ".ContentControlID IN (" & String.Join(",", ContentIDList) & "))"
                        End If
                        If SecondaryCDef.AllowWorkflowAuthoring And siteProperties.allowWorkflowAuthoring Then
                            SQL &= "and(" & SecondaryTablename & ".editsourceid is null)"
                        End If
                        If SecondaryContentSelectCriteria <> "" Then
                            SQL &= "AND(" & SecondaryContentSelectCriteria & ")"
                        End If
                        SQL &= " GROUP BY " & SecondaryTablename & ".ID, AllowedContent.Name, " & SecondaryTablename & "." & CaptionFieldName & ", " & SecondaryTablename & ".name, " & SecondaryTablename & ".SortOrder"
                        If IsRuleCopySupported Then
                            SQL &= ", " & SecondaryTablename & ".AllowRuleCopy," & SecondaryTablename & ".RuleCopyCaption"
                        End If
                        If IsContentCategoriesSupported Then
                            SQL &= ",Folders.Name,Folders.ID"
                        End If
                        SQL &= " ORDER BY "
                        If IsContentCategoriesSupported Then
                            SQL &= "Folders.Name,Folders.ID,"
                        End If
                        SQL &= SecondaryTablename & "." & CaptionFieldName
                        CS = db.cs_openSql(SQL)
                        If Not db.cs_Ok(CS) Then
                            returnHtml = "(No choices are available.)"
                        Else
                            If True Then
                                OpenFolderID = -1
                                EndDiv = ""
                                SectionName = ""
                                CheckBoxCnt = 0
                                DivCheckBoxCnt = 0
                                DivCnt = 0
                                CanSeeHiddenFields = user.isAuthenticatedDeveloper()
                                DivName = TagName & ".All"
                                Do While db.cs_Ok(CS)
                                    OptionName = db.cs_getText(CS, "OptionName")
                                    If (Mid(OptionName, 1, 1) <> "_") Or CanSeeHiddenFields Then
                                        '
                                        ' Current checkbox is visible
                                        '
                                        CurrentFolderID = db.cs_getInteger(CS, "ContentCategoryID")
                                        If IsContentCategoriesSupported And (CurrentFolderID <> OpenFolderID) Then
                                            '
                                            ' Content Category mode, new folderID - end the previous div and start a new one
                                            '
                                            OpenFolderID = CurrentFolderID
                                            ContentFolderName = db.cs_getText(CS, "ContentFolderName")
                                            DivID = TagName & ".ContentCategoryID" & CurrentFolderID
                                            If DivCnt = 0 Then
                                                '
                                                ' First div - Add in javascript needed to store current visible div
                                                '
                                                main_HeadScriptCode &= OldFolderVar & "='" & DivID & "';"
                                                's = s & cr & "<script type=""text/javascript"">" & OldFolderVar & "='" & DivID & "'</script>" & vbCrLf
                                                'OldFolderVar = "OldFolder" & main_CheckListCnt
                                                's = s & cr & "<script type=""text/javascript"">var " & OldFolderVar & "='" & DivID & "'</script>" & vbCrLf
                                                '
                                                ' Add in the empty DIV - shows when the folder is empty
                                                '
                                                returnHtml &= cr & "<div id=""" & TagName & ".empty"" style=""display:none;"">This category is empty</div>"
                                            End If

                                            returnHtml &= EndDiv
                                            returnHtml &= cr & "<div ID=""" & DivID & """ style=""display:none;""><input type=hidden name=""" & DivName & """>"
                                            If ContentFolderName <> "" Then
                                                returnHtml &= cr & "<div>" & ContentFolderName & "</div>"
                                                returnHtml &= cr & "<div style=""padding-left:10px;padding-bottom:10px;"">"
                                            Else
                                                returnHtml &= cr & "<div>Uncategorized</div>"
                                                returnHtml &= cr & "<div style=""padding-left:10px;padding-bottom:10px;"">"
                                            End If
                                            EndDiv = cr & "</div></div>"
                                            DivCnt = DivCnt + 1
                                            DivCheckBoxCnt = 0
                                        End If

                                        RecordID = db.cs_getInteger(CS, "ID")
                                        AllowRuleCopy = db.cs_getBoolean(CS, "AllowRuleCopy")
                                        RuleCopyCaption = db.cs_getText(CS, "RuleCopyCaption")
                                        OptionCaption = db.cs_getText(CS, "OptionCaption")
                                        If OptionCaption = "" Then
                                            OptionCaption = OptionName
                                        End If
                                        If OptionCaption = "" Then
                                            optionCaptionHtmlEncoded = SingularPrefixHtmlEncoded & RecordID
                                        Else
                                            optionCaptionHtmlEncoded = html_EncodeHTML(OptionCaption)
                                        End If
                                        If DivCheckBoxCnt <> 0 Then
                                            ' leave this between checkboxes - it is searched in the admin page
                                            returnHtml &= "<br >" & vbCrLf
                                        End If
                                        RuleCopy = ""
                                        If False Then
                                            Found = False
                                            's = s & "<input type=""checkbox"" name=""" & TagName & "." & CheckBoxCnt & """ "
                                            If main_MemberShipCount <> 0 Then
                                                For main_MemberShipPointer = 0 To main_MemberShipCount - 1
                                                    If main_MemberShip(main_MemberShipPointer) = (RecordID) Then
                                                        RuleCopy = main_MemberShipRuleCopy(main_MemberShipPointer)
                                                        returnHtml &= html_GetFormInputHidden(TagName & "." & CheckBoxCnt, True)
                                                        Found = True
                                                        Exit For
                                                    End If
                                                Next
                                            End If
                                            returnHtml &= main_GetYesNo(Found) & "&nbsp;-&nbsp;"
                                        Else
                                            Found = False
                                            If main_MemberShipCount <> 0 Then
                                                For main_MemberShipPointer = 0 To main_MemberShipCount - 1
                                                    If main_MemberShip(main_MemberShipPointer) = (RecordID) Then
                                                        's = s & main_GetFormInputHidden(TagName & "." & CheckBoxCnt, True)
                                                        RuleCopy = main_MemberShipRuleCopy(main_MemberShipPointer)
                                                        Found = True
                                                        Exit For
                                                    End If
                                                Next
                                            End If
                                            ' must leave the first hidden with the value in this form - it is searched in the admin pge
                                            returnHtml &= vbCrLf
                                            returnHtml &= "<table><tr><td style=""vertical-align:top;margin-top:0;width:20px;"">"
                                            returnHtml &= "<input type=hidden name=""" & TagName & "." & CheckBoxCnt & ".ID"" value=" & RecordID & ">"
                                            If readOnlyField And Not Found Then
                                                returnHtml &= "<input type=checkbox disabled>"
                                            ElseIf readOnlyField Then
                                                returnHtml &= "<input type=checkbox disabled checked>"
                                                returnHtml &= "<input type=""hidden"" name=""" & TagName & "." & CheckBoxCnt & ".ID"" value=" & RecordID & ">"
                                            ElseIf Found Then
                                                returnHtml &= "<input type=checkbox name=""" & TagName & "." & CheckBoxCnt & """ checked>"
                                            Else
                                                returnHtml &= "<input type=checkbox name=""" & TagName & "." & CheckBoxCnt & """>"
                                            End If
                                            returnHtml &= "</td><td style=""vertical-align:top;padding-top:4px;"">"
                                            returnHtml &= SpanClassAdminNormal & optionCaptionHtmlEncoded
                                            If AllowRuleCopy Then
                                                returnHtml &= ", " & RuleCopyCaption & "&nbsp;" & html_GetFormInputText2(TagName & "." & CheckBoxCnt & ".RuleCopy", RuleCopy, 1, 20)
                                            End If
                                            returnHtml &= "</td></tr></table>"
                                        End If
                                        CheckBoxCnt = CheckBoxCnt + 1
                                        DivCheckBoxCnt = DivCheckBoxCnt + 1
                                    End If
                                    db.db_csGoNext(CS)
                                Loop
                                returnHtml &= EndDiv
                                returnHtml &= "<input type=""hidden"" name=""" & TagName & ".RowCount"" value=""" & CheckBoxCnt & """>" & vbCrLf
                            End If
                        End If
                        db.cs_Close(CS)
                        Call main_AddHeadScriptCode(main_HeadScriptCode, "CheckList Categories")
                    End If
                    'End If
                    main_CheckListCnt = main_CheckListCnt + 1
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return returnHtml
        End Function
        '
        '==========================================================================================================================================
        '   main_GetFormInputCheckList - with two panes
        '       Content Category view on the left
        '       Checkboxes for content on the right that match the left folder
        '==========================================================================================================================================
        '
        Public Function main_GetFormInputCheckListCategories(ByVal TagName As String, ByVal PrimaryContentName As String, ByVal PrimaryRecordID As Integer, ByVal SecondaryContentName As String, ByVal RulesContentName As String, ByVal RulesPrimaryFieldname As String, ByVal RulesSecondaryFieldName As String, Optional ByVal SecondaryContentSelectCriteria As String = "", Optional ByVal CaptionFieldName As String = "", Optional ByVal readOnlyField As Boolean = False, Optional ByVal RightSideHeader As String = "", Optional ByVal DefaultSecondaryIDList As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetFormInputCheckListCategories")
            '
            Dim AllNode As String
            Dim LeftPane As String
            Dim RightPane As String
            '
            Dim CS As Integer
            Dim SQL As String
            'Dim Tree As New MenuTreeClass
            Dim BakeName As String
            Dim Caption As String
            Dim Id As Integer
            Dim CurrentFolderID As Integer
            Dim Link As String
            Dim IsAuthoringMode As Boolean
            Dim LinkBase As String
            Dim OpenMenuName As String
            Dim JSCaption As String
            Dim JSSwitch As String
            Dim JSSwitchFirst As String
            Dim FirstCaption As String
            Dim EmptyDivID As String
            Dim JSSwitchAll As String
            Dim IsContentCategoriesSupported As Boolean
            '
            IsContentCategoriesSupported = main_IsContentFieldSupported(SecondaryContentName, "ContentCategoryID")
            If Not IsContentCategoriesSupported Then
                main_GetFormInputCheckListCategories = main_GetFormInputCheckListCategories_Content(TagName, PrimaryContentName, PrimaryRecordID, SecondaryContentName, RulesContentName, RulesPrimaryFieldname, RulesSecondaryFieldName, SecondaryContentSelectCriteria, CaptionFieldName, readOnlyField, False, "")
            Else
                IsAuthoringMode = True
                LinkBase = web_RefreshQueryString
                BakeName = "ContentFolderNav"
                If Not IsAuthoringMode Then
                    '          main_GetFormInputCheckListCategories = cache.cache_readBake(BakeName)
                End If

                Dim s As String

                If main_GetFormInputCheckListCategories = "" Then
                    EmptyDivID = TagName & ".empty"
                    SQL = db_GetSQLSelect("", "ccContentCategories", "ID,ContentCategoryID,Name", , "Name")
                    CS = db.cs_openSql(SQL)
                    Do While db.cs_Ok(CS)
                        Caption = db.cs_getText(CS, "name")
                        Id = db.cs_getInteger(CS, "ID")
                        CurrentFolderID = db.cs_getInteger(CS, "ContentCategoryID")
                        '
                        Caption = vbReplace(Caption, " ", "&nbsp;")
                        If FirstCaption = "" Then
                            FirstCaption = Caption
                        End If
                        JSCaption = EncodeJavascript(Caption)
                        JSSwitch = "switchContentFolderDiv( '" & TagName & ".ContentCategoryID" & Id & "',OldFolder" & main_CheckListCnt & ",'" & TagName & ".ContentCaption','" & JSCaption & "','" & EmptyDivID & "'); OldFolder" & main_CheckListCnt & "='" & TagName & ".ContentCategoryID" & Id & "';return false;"
                        If JSSwitchFirst = "" Then
                            JSSwitchFirst = JSSwitch
                        End If
                        s = s & cr & "<li class=""ccAdminSmall ccPanel""><a href=""#"" onclick=""" & JSSwitch & """>" & Caption & "</a></li>"
                        'Call Tree.AddEntry(CStr(Id), CStr(CurrentFolderID), , , Link, Caption, JSSwitch)
                        'Call Tree.AddEntry(CStr(ID), CStr(CurrentFolderID), , , Link, Caption, "switchContentFolderDiv( '" & TagName & ".ContentCategoryID" & ID & "', OldFolder" & main_CheckListCnt & ",'" & TagName & ".ContentCaption'," & JSCaption & "); OldFolder" & main_CheckListCnt & "='" & TagName & ".ContentCategoryID" & ID & "';")
                        Call db.db_csGoNext(CS)
                    Loop
                    Call db.cs_Close(CS)
                    LeftPane = cr & "<ul>" & kmaIndent(s) & cr & "</ul>"
                    'LeftPane = Tree.GetTree(CStr(0), OpenMenuName)
                    '
                    ' Add the top 'All' node
                    '
                    JSCaption = "All"
                    JSSwitchAll = "switchContentFolderDiv( '" & TagName & ".All',  OldFolder" & main_CheckListCnt & ",'" & TagName & ".ContentCaption','" & JSCaption & "','" & EmptyDivID & "'); OldFolder" & main_CheckListCnt & "='" & TagName & ".All';"
                    If vbInstr(1, LeftPane, "<LI", vbTextCompare) = 0 Then
                        AllNode = "<div class=""caption""><a href=""#"" onClick=""" & JSSwitchAll & ";return false;"">Show all</a></div>"
                        LeftPane = cr & AllNode & LeftPane
                    Else
                        AllNode = "<div class=""caption""><a href=""#"" onClick=""" & JSSwitchAll & ";return false;"">Show all</a></div>"
                        LeftPane = cr & AllNode & LeftPane
                    End If
                    '
                    ' + Add Category
                    '
                    If user.isAuthenticatedContentManager("Content Categories") Then
                        LeftPane = LeftPane & cr & "<div class=""caption""><a href=""" & siteProperties.adminURL & "?editreferer=" & EncodeRequestVariable("?" & web_RefreshQueryString) & "&cid=" & main_GetContentID("Content Categories") & "&af=4&aa=2"">+&nbsp;Add&nbsp;Category</a></div>"
                    End If
                    '
                    LeftPane = cr & "<div class=""ccCategoryListCon"">" & kmaIndent(LeftPane) & cr & "</div>"
                    '
                    ' open the current node
                    '
                    RightPane = main_GetFormInputCheckListCategories_Content(TagName, PrimaryContentName, PrimaryRecordID, SecondaryContentName, RulesContentName, RulesPrimaryFieldname, RulesSecondaryFieldName, SecondaryContentSelectCriteria, CaptionFieldName, readOnlyField, True, DefaultSecondaryIDList)
                    '
                    main_GetFormInputCheckListCategories = "" _
                        & "<div style=""border:1px solid #A0A0A0;"">" _
                        & "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%;"">" _
                        & "<tr>" _
                        & "<td class=""ccAdminTab"" style=""width:100px;padding:5px;text-align:left"">Categories<br ><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=90 height=1></td>" _
                        & "<td class=""ccAdminTab"" style=""width:1px;""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=1 height=1></td>" _
                        & "<td class=""ccAdminTab"" style=""width:90%;padding:5px;text-align:left"" ID=""" & TagName & ".ContentCaption"">" & encodeEmptyText(RightSideHeader, "&nbsp;") & "</td>" _
                        & "</td></tr>" _
                        & "<tr>" _
                        & "<td style=""width:100px;padding:10px;Background-color:white;border:0px solid #808080;vertical-align:top;text-align:left"">" & LeftPane & "</td>" _
                        & "<td class=""ccAdminTab"" style=""width:1px;""></td>" _
                        & "<td style=""width:90%;padding:10px;Background-color:white;border:0px solid #808080;vertical-align:top;text-align:left"">" & RightPane & "</td>" _
                        & "</td></tr>" _
                        & "</table>" _
                        & "</div>"
                    If Not IsAuthoringMode Then
                        Call cache.setKey(BakeName, main_GetFormInputCheckListCategories, "Content Categories," & PrimaryContentName & "," & SecondaryContentName & "," & RulesContentName)
                    End If
                    '
                    ' initialize with all open
                    '
                    Call main_AddOnLoadJavascript2(JSSwitchAll, "Checklist Categories")
                End If
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetFormInputCheckListCategories")
        End Function
        '
        '=========================================================================================================
        '   Add onLoad Javascript
        '
        '   onLoad never has a script tag
        '=========================================================================================================
        '
        Public Sub main_AddOnLoadJavascript(NewCode As String)
            Call main_AddOnLoadJavascript2(NewCode, "")
        End Sub
        '
        '
        '
        Public Sub main_AddOnLoadJavascript2(NewCode As String, addedByMessage As String)
            On Error GoTo ErrorTrap
            '
            Dim s As String
            '
            s = main_OnLoadJavascript
            If NewCode <> "" And vbInstr(1, s, NewCode, vbTextCompare) = 0 Then
                If s <> "" Then
                    s = s & ";"
                End If
                If (addedByMessage <> "") And visitProperty.getBoolean("AllowDebugging") Then
                    s = s & " /* from " & addedByMessage & " */ "
                End If
                s = s & NewCode
                main_OnLoadJavascript = s
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_AddOnLoadJavascript2")
        End Sub
        '
        '=========================================================================================================
        ' Add End-of-body javascript
        '
        '   Each entry includes its own script tag. If not provided, it is added
        '=========================================================================================================
        '
        Public Sub main_AddEndOfBodyJavascript(NewCode As String)
            Call main_AddEndOfBodyJavascript2(NewCode, "")
        End Sub
        '
        '
        '
        Public Sub main_AddEndOfBodyJavascript2(NewCode As String, addedByMessage As String)
            On Error GoTo ErrorTrap
            '
            Dim s As String
            '
            s = ""
            If NewCode <> "" And vbInstr(1, main_endOfBodyJavascript, NewCode, vbTextCompare) = 0 Then
                's = s & vbCrLf
                If (addedByMessage <> "") And visitProperty.getBoolean("AllowDebugging") Then
                    s = s & "/* from " & addedByMessage & "*/"
                End If
                s = s & NewCode
                main_endOfBodyJavascript = main_endOfBodyJavascript & vbCrLf & s
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_AddEndOfBodyJavascript2")
        End Sub
        '
        '=========================================================================================================
        ' Add Head javascript
        '
        '   Each entry includes its own script tag. If not provided, it is added
        '=========================================================================================================
        '
        Public Sub main_AddHeadJavascript(NewCode As String)
            Call main_AddHeadScriptCode(NewCode, "")
        End Sub
        '
        '
        '
        Public Sub main_AddHeadScriptCode(NewCode As String, addedByMessage As String)
            On Error GoTo ErrorTrap
            '
            Dim s As String
            Dim StartPos As Integer
            Dim EndPos As Integer
            '
            If NewCode <> "" Then
                s = NewCode
                StartPos = vbInstr(1, s, "<script", vbTextCompare)
                If StartPos <> 0 Then
                    EndPos = vbInstr(StartPos, s, "</script", vbTextCompare)
                    If EndPos <> 0 Then
                        EndPos = vbInstr(EndPos, s, ">", vbTextCompare)
                        If EndPos <> 0 Then
                            s = Left(s, StartPos - 1) & Mid(s, EndPos + 1)
                        End If
                    End If
                End If
                '
                ' I am going to regret this...
                '
                Do While vbInstr(1, NewCode, vbTab & vbTab) <> 0
                    NewCode = vbReplace(NewCode, vbTab & vbTab, vbTab)
                Loop
                Do While vbInstr(1, NewCode, cr) <> 0
                    NewCode = vbReplace(NewCode, cr, vbCrLf)
                Loop
                NewCode = vbReplace(NewCode, vbCrLf & vbCrLf, vbCrLf)
                NewCode = vbReplace(NewCode, vbCrLf & vbCrLf, vbCrLf)
                NewCode = vbReplace(NewCode, vbCrLf, cr2)
                ReDim Preserve main_HeadScripts(main_HeadScriptCnt)
                main_HeadScripts(main_HeadScriptCnt).IsLink = False
                main_HeadScripts(main_HeadScriptCnt).Text = NewCode
                main_HeadScripts(main_HeadScriptCnt).addedByMessage = vbLCase(addedByMessage)
                main_HeadScriptCnt = main_HeadScriptCnt + 1
            End If
            '    If NewCode <> "" And vbInstr(1, main_HeadScriptCode, NewCode, vbTextCompare) = 0 Then
            '        s = NewCode
            '        StartPos = vbInstr(1, s, "<script", vbTextCompare)
            '        If StartPos <> 0 Then
            '            EndPos = vbInstr(StartPos, s, "</script", vbTextCompare)
            '            If EndPos <> 0 Then
            '                EndPos = vbInstr(EndPos, s, ">", vbTextCompare)
            '                If EndPos <> 0 Then
            '                    s = Left(s, StartPos - 1) & Mid(s, EndPos + 1)
            '                End If
            '            End If
            '        End If
            '        main_HeadScriptCode = main_HeadScriptCode & cr
            '        If AddedByMessage <> "" Then
            '            main_HeadScriptCode = main_HeadScriptCode & "/* from " & AddedByMessage & " */" & cr
            '        End If
            '        main_HeadScriptCode = main_HeadScriptCode & s
            ''        If Pos = 0 Then
            ''            main_HeadScriptCode = main_HeadScriptCode & "<script Language=""JavaScript"" type=""text/javascript"">" & NewCode & "</script>"
            ''        Else
            ''            main_HeadScriptCode = main_HeadScriptCode & NewCode
            ''        End If
            '    End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_AddHeadScriptCode")
        End Sub
        '
        '
        '
        Public Sub main_AddHeadScriptLink(Filename As String, addedByMessage As String)
            On Error GoTo ErrorTrap
            '
            Dim s As String
            '
            If Filename <> "" Then
                ReDim Preserve main_HeadScripts(main_HeadScriptCnt)
                main_HeadScripts(main_HeadScriptCnt).IsLink = True
                main_HeadScripts(main_HeadScriptCnt).Text = Filename
                main_HeadScripts(main_HeadScriptCnt).addedByMessage = addedByMessage
                main_HeadScriptCnt = main_HeadScriptCnt + 1
            End If
            '    If Filename <> "" And vbInstr(1, s, Filename, vbTextCompare) = 0 Then
            '
            '        main_HeadScriptLinkList = main_HeadScriptLinkList & vbCrLf & Filename & vbTab & AddedByMessage
            '    End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_AddHeadScriptLink")
        End Sub
        '
        '=========================================================================================================
        '
        '=========================================================================================================
        '
        Public Sub main_AddPagetitle(PageTitle As String)
            Call main_AddPagetitle2(PageTitle, "")
        End Sub
        '
        '
        '
        Public Sub main_AddPagetitle2(PageTitle As String, addedByMessage As String)
            On Error GoTo ErrorTrap
            '
            If PageTitle <> "" And vbInstr(1, main_MetaContent_Title, PageTitle, vbTextCompare) = 0 Then
                If (addedByMessage <> "") And visitProperty.getBoolean("AllowDebugging") Then
                    Call main_AddHeadTag2("<!-- title from " & addedByMessage & " -->", "")
                End If
                If main_MetaContent_Title <> "" Then
                    main_MetaContent_Title = main_MetaContent_Title & ", "
                End If
                main_MetaContent_Title = main_MetaContent_Title & PageTitle
                'main_MetaContent_Title_ToBeAdded = True
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_AddPagetitle")
        End Sub
        '
        '=========================================================================================================
        '
        '=========================================================================================================
        '
        Public Sub main_addMetaDescription(MetaDescription As String)
            Call main_addMetaDescription2(MetaDescription, "")
        End Sub
        '
        '
        '
        Public Sub main_addMetaDescription2(MetaDescription As String, addedByMessage As String)
            On Error GoTo ErrorTrap
            '
            If MetaDescription <> "" And vbInstr(1, main_MetaContent_Description, MetaDescription, vbTextCompare) = 0 Then
                If (addedByMessage <> "") And visitProperty.getBoolean("AllowDebugging") Then
                    Call main_AddHeadTag2("<!-- meta description from " & addedByMessage & " -->", "")
                End If
                If main_MetaContent_Description <> "" Then
                    main_MetaContent_Description = main_MetaContent_Description & ", "
                End If
                main_MetaContent_Description = main_MetaContent_Description & MetaDescription
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_addMetaDescription2")
        End Sub
        '
        '=========================================================================================================
        '
        '=========================================================================================================
        '
        Public Sub main_AddStylesheetLink(StyleSheetLink As String)
            Call main_AddStylesheetLink2(StyleSheetLink, "")
        End Sub
        '
        '
        '
        Public Sub main_AddStylesheetLink2(StyleSheetLink As String, addedByMessage As String)
            On Error GoTo ErrorTrap
            '
            If StyleSheetLink <> "" Then
                main_MetaContent_StyleSheetTags = main_MetaContent_StyleSheetTags & cr
                If (addedByMessage <> "") And visitProperty.getBoolean("AllowDebugging") Then
                    main_MetaContent_StyleSheetTags = main_MetaContent_StyleSheetTags & "<!-- from " & addedByMessage & " -->"
                End If
                If visitProperty.getBoolean("AllowAdvancedEditor") Then
                    If vbInstr(1, StyleSheetLink, "&") <> 0 Then
                        main_MetaContent_StyleSheetTags = main_MetaContent_StyleSheetTags & "<link rel=""stylesheet"" type=""text/css"" href=""" & StyleSheetLink & """>"
                    Else
                        main_MetaContent_StyleSheetTags = main_MetaContent_StyleSheetTags & "<link rel=""stylesheet"" type=""text/css"" href=""" & StyleSheetLink & """>"
                    End If
                Else
                    main_MetaContent_StyleSheetTags = main_MetaContent_StyleSheetTags & "<link rel=""stylesheet"" type=""text/css"" href=""" & StyleSheetLink & """ >"
                End If
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_AddStylesheetLink2")
        End Sub
        '
        '=========================================================================================================
        '
        '=========================================================================================================
        '
        Public Sub main_AddSharedStyleID(styleId As Integer)
            Call main_AddSharedStyleID2(styleId, "")
        End Sub
        '
        '
        '
        Public Sub main_AddSharedStyleID2(ByVal styleId As Integer, Optional ByVal addedByMessage As String = "")
            On Error GoTo ErrorTrap
            '
            If vbInstr(1, main_MetaContent_SharedStyleIDList & ",", "," & styleId & ",") = 0 Then
                If (addedByMessage <> "") And visitProperty.getBoolean("AllowDebugging") Then
                    Call main_AddHeadTag2("<!-- shared style " & styleId & " from " & addedByMessage & " -->", "")
                End If
                main_MetaContent_SharedStyleIDList = main_MetaContent_SharedStyleIDList & "," & styleId
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_AddSharedStyleID2")
        End Sub
        '
        '=========================================================================================================
        '
        '=========================================================================================================
        '
        Public Sub main_addMetaKeywordList(MetaKeywordList As String)
            Call main_addMetaKeywordList2(MetaKeywordList, "")
        End Sub
        '
        '
        '
        Public Sub main_addMetaKeywordList2(MetaKeywordList As String, addedByMessage As String)
            On Error GoTo ErrorTrap
            '
            If MetaKeywordList <> "" And vbInstr(1, main_MetaContent_KeyWordList, MetaKeywordList, vbTextCompare) = 0 Then
                If (addedByMessage <> "") And visitProperty.getBoolean("AllowDebugging") Then
                    Call main_AddHeadTag2("<!-- meta keyword list from " & addedByMessage & " -->", "")
                End If
                If main_MetaContent_KeyWordList <> "" Then
                    main_MetaContent_KeyWordList = main_MetaContent_KeyWordList & ", "
                End If
                main_MetaContent_KeyWordList = main_MetaContent_KeyWordList & MetaKeywordList
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_addMetaKeywordList2")
        End Sub
        '
        '=========================================================================================================
        '
        '=========================================================================================================
        '
        Public Sub main_AddHeadTag(HeadTag As String)
            Call main_AddHeadTag2(HeadTag, "")
        End Sub
        '
        '
        '
        Public Sub main_AddHeadTag2(HeadTag As String, addedByMessage As String)
            On Error GoTo ErrorTrap
            '
            If HeadTag <> "" And vbInstr(1, main_MetaContent_OtherHeadTags, HeadTag, vbTextCompare) = 0 Then
                If main_MetaContent_OtherHeadTags <> "" Then
                    main_MetaContent_OtherHeadTags = main_MetaContent_OtherHeadTags & vbCrLf
                End If
                If (addedByMessage <> "") And visitProperty.getBoolean("AllowDebugging") Then
                    main_MetaContent_OtherHeadTags = main_MetaContent_OtherHeadTags & "<!-- from " & addedByMessage & " -->" & vbCrLf
                End If
                main_MetaContent_OtherHeadTags = main_MetaContent_OtherHeadTags & HeadTag
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("main_AddHeadTag")
        End Sub
        '
        '
        '
        Public Sub main_addMeta(metaName As String, metaContent As String, addedByMessage As String)
            Call main_AddHeadTag2("<meta name=""" & html_EncodeHTML(metaName) & """ content=""" & html_EncodeHTML(metaContent) & """>", addedByMessage)
        End Sub
        '
        '
        '
        Public Sub main_addMetaProperty(metaProperty As String, metaContent As String, addedByMessage As String)
            Call main_AddHeadTag2("<meta property=""" & html_EncodeHTML(metaProperty) & """ content=""" & html_EncodeHTML(metaContent) & """>", addedByMessage)
        End Sub
        '
        Friend ReadOnly Property main_ReturnAfterEdit() As Boolean
            Get
                Return True
            End Get
        End Property
        '
        '===================================================================================================
        '   Build AddonOptionLists
        '
        '   On entry:
        '       AddonOptionConstructor = the addon-encoded Version of the list that comes from the Addon Record
        '           It is line-delimited with &, and all escape characters converted
        '       InstanceOptionList = addonencoded Version of the list that comes from the HTML AC tag
        '           that means crlf line-delimited
        '
        '   On Exit:
        '       AddonOptionNameValueList
        '               pass this string to the addon when it is run, crlf delimited name=value pair.
        '               This should include just the name=values pairs, with no selectors
        '               it should include names from both Addon and Instance
        '               If the Instance has a value, include it. Otherwise include Addon value
        '       AddonOptionExpandedConstructor = pass this to the bubble editor to create the the selectr
        '===================================================================================================
        '
        Public Sub executeAddon_buildAddonOptionLists(Option_String_ForObjectCall As String, AddonOptionExpandedConstructor As String, AddonOptionConstructor As String, InstanceOptionList As String, InstanceID As String, IncludeEditWrapper As Boolean)
            Call csv_BuildAddonOptionLists(Option_String_ForObjectCall, AddonOptionExpandedConstructor, AddonOptionConstructor, InstanceOptionList, InstanceID, IncludeEditWrapper)
        End Sub
        '
        '===================================================================================================
        '   Wrap the content in a common wrapper if authoring is enabled
        '===================================================================================================
        '
        Public Function main_GetEditWrapper(ByVal Caption As String, ByVal Content As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetEditWrapper")
            '
            'If Not (true) Then Exit Function
            '
            Dim IsAuthoring As Boolean
            '
            IsAuthoring = user.isEditingAnything()
            If Not IsAuthoring Then
                main_GetEditWrapper = Content
            Else
                main_GetEditWrapper = web_GetLegacySiteStyles()
                If False Then
                    main_GetEditWrapper = main_GetEditWrapper _
                        & "<table border=0 width=""100%"" cellspacing=0 cellpadding=0><tr><td class=""ccEditWrapper"">" _
                        & "<table border=0 width=""100%"" cellspacing=0 cellpadding=0><tr><td class=""ccEditWrapperInner"">" _
                            & "<table border=0 width=""100%"" cellspacing=0 cellpadding=0><tr><td class=""ccEditWrapperCaption"">" _
                            & EncodeText(Caption) _
                            & "<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=1 height=22 align=absmiddle>" _
                            & "</td></tr></table>" _
                            & "<table border=0 width=""100%"" cellspacing=0 cellpadding=0><tr><td class=""ccEditWrapperContent"" id=""editWrapper" & pageManager_EditWrapperCnt & """>" _
                            & EncodeText(Content) _
                            & "</td></tr></table>" _
                        & "</td></tr></table>" _
                        & "</td></tr></table>"
                Else
                    main_GetEditWrapper = main_GetEditWrapper _
                        & "<table border=0 width=""100%"" cellspacing=0 cellpadding=0><tr><td class=""ccEditWrapper"">"
                    If Caption <> "" Then
                        main_GetEditWrapper = main_GetEditWrapper _
                                & "<table border=0 width=""100%"" cellspacing=0 cellpadding=0><tr><td class=""ccEditWrapperCaption"">" _
                                & EncodeText(Caption) _
                                & "<!-- <img alt=""space"" src=""/ccLib/images/spacer.gif"" width=1 height=22 align=absmiddle> -->" _
                                & "</td></tr></table>"
                    End If
                    main_GetEditWrapper = main_GetEditWrapper _
                            & "<table border=0 width=""100%"" cellspacing=0 cellpadding=0><tr><td class=""ccEditWrapperContent"" id=""editWrapper" & pageManager_EditWrapperCnt & """>" _
                            & EncodeText(Content) _
                            & "</td></tr></table>" _
                        & "</td></tr></table>"
                End If
                pageManager_EditWrapperCnt = pageManager_EditWrapperCnt + 1
            End If

            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetEditWrapper")
        End Function
        '
        '=======================================================================================================================================
        '   LinkAlias cache
        '=======================================================================================================================================
        '
        Private Sub cache_linkAlias_load()
            On Error GoTo ErrorTrap
            '
            Dim Key As String
            Dim usedKeys As String
            Dim CS As Integer
            'dim dt as datatable
            Dim Ptr As Integer
            Dim LinkAliasPageID As String
            Dim LinkAliasName As String
            Dim LinkAliasQueryStringSuffix As String
            Dim cacheArray() As Object
            ReDim cacheArray(2)
            Dim cacheTest As Object
            Dim bag As String
            '
            cache_linkAlias_PageIdQSSIndex = New coreKeyPtrIndexClass
            cache_linkAlias_NameIndex = New coreKeyPtrIndexClass
            cache_linkAliasCnt = 0
            '
            ' Load cache
            '
            On Error Resume Next
            cacheTest = cache.getObject(Of Object())(cache_linkAlias_cacheName)
            If Not pagemanager_IsWorkflowRendering() Then
                If Not IsNothing(cacheTest) Then
                    cacheArray = DirectCast(cacheTest, Object())
                    If Not IsNothing(cacheArray) Then
                        cache_linkAlias = DirectCast(cacheArray(0), String(,))
                        If Not IsNothing(cache_linkAlias) Then
                            bag = DirectCast(cacheArray(1), String)
                            If Err.Number = 0 Then
                                Call cache_linkAlias_PageIdQSSIndex.importPropertyBag(bag)
                                If Err.Number = 0 Then
                                    bag = DirectCast(cacheArray(2), String)
                                    If Err.Number = 0 Then
                                        Call cache_linkAlias_NameIndex.importPropertyBag(bag)
                                        If Err.Number = 0 Then
                                            cache_linkAliasCnt = UBound(cache_linkAlias, 2) + 1
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
            Err.Clear()
            On Error GoTo ErrorTrap
            If cache_linkAliasCnt = 0 Then
                Dim rs As DataTable
                rs = db.executeSql("select " & cache_linkAlias_fieldList & " from ccLinkAliases where (active<>0) order by id desc")
                If rs.Rows.Count > 0 Then
                    cache_linkAlias_NameIndex = New coreKeyPtrIndexClass
                    cache_linkAlias_PageIdQSSIndex = New coreKeyPtrIndexClass
                    ReDim cache_linkAlias(rs.Rows.Count, 4)
                    For Each row As DataRow In rs.Rows
                        cache_linkAlias(0, Ptr) = row(0).ToString
                        cache_linkAlias(1, Ptr) = row(1).ToString
                        cache_linkAlias(2, Ptr) = row(2).ToString
                        cache_linkAlias(3, Ptr) = row(3).ToString
                        cache_linkAlias(4, Ptr) = row(4).ToString
                        '
                        LinkAliasName = EncodeText(cache_linkAlias(1, Ptr))
                        LinkAliasPageID = EncodeText(cache_linkAlias(3, Ptr))
                        LinkAliasQueryStringSuffix = EncodeText(cache_linkAlias(4, Ptr))
                        Call cache_linkAlias_NameIndex.setPtr(LCase(LinkAliasName), Ptr)
                        Key = vbLCase(LinkAliasPageID & LinkAliasQueryStringSuffix)
                        If vbInstr(1, "," & usedKeys & ",", "," & Key & ",") = 0 Then
                            usedKeys = usedKeys & "," & Key
                            Call cache_linkAlias_PageIdQSSIndex.setPtr(Key, Ptr)
                        End If
                    Next
                End If
                '
                ' Load Index
                '
                If cache_linkAliasCnt > 0 Then
                    cache_linkAlias_NameIndex = New coreKeyPtrIndexClass
                    cache_linkAlias_PageIdQSSIndex = New coreKeyPtrIndexClass
                    For Ptr = 0 To cache_linkAliasCnt - 1
                        LinkAliasName = EncodeText(cache_linkAlias(1, Ptr))
                        LinkAliasPageID = EncodeText(cache_linkAlias(3, Ptr))
                        LinkAliasQueryStringSuffix = EncodeText(cache_linkAlias(4, Ptr))
                        Call cache_linkAlias_NameIndex.setPtr(LCase(LinkAliasName), Ptr)
                        Key = vbLCase(LinkAliasPageID & LinkAliasQueryStringSuffix)
                        If vbInstr(1, "," & usedKeys & ",", "," & Key & ",") = 0 Then
                            usedKeys = usedKeys & "," & Key
                            Call cache_linkAlias_PageIdQSSIndex.setPtr(Key, Ptr)
                        End If
                    Next
                End If
                Call cache_linkAlias_save()
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("cache_linkAlias_load")
        End Sub
        '
        '
        '
        Private Sub cache_linkAlias_save()
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("MainClass.cache_linkAlias_save")
            '
            Dim hint As String
            Dim cacheArray() As Object
            ReDim cacheArray(2)
            '
            Call cache_linkAlias_PageIdQSSIndex.getPtr("test")
            Call cache_linkAlias_NameIndex.getPtr("test")
            '
            cacheArray(0) = cache_linkAlias
            cacheArray(1) = cache_linkAlias_PageIdQSSIndex.exportPropertyBag
            cacheArray(2) = cache_linkAlias_NameIndex.exportPropertyBag
            Call cache.setKey(cache_linkAlias_cacheName, cacheArray, "link aliases")
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("cache_linkAlias_save")
        End Sub
        '
        '
        '
        Public Sub cache_linkAlias_clear()
            On Error GoTo ErrorTrap 'Const Tn = "cache_linkAlias_clear": 'Dim th as integer: th = profileLogMethodEnter(Tn)
            '
            cache_linkAliasCnt = 0
            cache_linkAlias = {}
            Call cache.setKey(cache_linkAlias_cacheName, cache_linkAlias)
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "cache_linkAlias_clear", True)
        End Sub
        '
        '
        '
        Public Function cache_linkAlias_getPtrByPageIdQss(PageID As Integer, QueryStringSuffix As String) As Integer
            On Error GoTo ErrorTrap 'Const Tn = "cache_linkAlias_getPtrByPageIdQss": 'Dim th as integer: th = profileLogMethodEnter(Tn)
            '
            Dim Key As String
            '
            cache_linkAlias_getPtrByPageIdQss = -1
            If cache_linkAliasCnt = 0 Then
                Call cache_linkAlias_load()
            End If
            If cache_linkAliasCnt > 0 Then
                Key = vbLCase(CStr(PageID) & QueryStringSuffix)
                cache_linkAlias_getPtrByPageIdQss = cache_linkAlias_PageIdQSSIndex.getPtr(Key)
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "cache_linkAlias_getPtrByPageIdQss", True)
        End Function
        '
        '
        '
        Public Function cache_linkAlias_getPtrByName(aliasName As String) As Integer
            On Error GoTo ErrorTrap 'Const Tn = "cache_linkAlias_getPtrByName": 'Dim th as integer: th = profileLogMethodEnter(Tn)
            '
            Dim Key As String
            '
            cache_linkAlias_getPtrByName = -1
            If cache_linkAliasCnt = 0 Then
                Call cache_linkAlias_load()
            End If
            If cache_linkAliasCnt > 0 Then
                Key = vbLCase(aliasName)
                cache_linkAlias_getPtrByName = cache_linkAlias_NameIndex.getPtr(Key)
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "cache_linkAlias_getPtrByName", True)
        End Function
        '
        '====================================================================================================
        '   Returns the Alias link (SourceLink) from the actual link (DestinationLink)
        '
        '====================================================================================================
        '
        Public Function main_GetLinkAliasByPageID(PageID As Integer, QueryStringSuffix As String, DefaultLink As String) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetLinkAliasByPageID")
            '
            Dim CS As Integer
            Dim Ptr As Integer
            Dim Key As String
            '
            main_GetLinkAliasByPageID = DefaultLink
            If siteProperties.allowLinkAlias Then
                Ptr = cache_linkAlias_getPtrByPageIdQss(PageID, QueryStringSuffix)
                If Ptr >= 0 Then
                    main_GetLinkAliasByPageID = EncodeText(cache_linkAlias(1, Ptr))
                    If Mid(main_GetLinkAliasByPageID, 1, 1) <> "/" Then
                        main_GetLinkAliasByPageID = "/" & main_GetLinkAliasByPageID
                    End If
                End If
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError13("main_GetLinkAliasByPageID")
        End Function
        '
        '====================================================================================================
        '   returns the actual link (DestinationLink) from the alias link (SourceLink)
        '
        '====================================================================================================
        '
        Public Function main_GetURLRewriteLink(ByVal linkAlias As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetURLRewriteLink")
            '
            Dim Ptr As Integer
            '
            If (True) And (siteProperties.allowLinkAlias) Then
                If cache_linkAliasCnt = 0 Then
                    Call cache_linkAlias_load()
                End If
                If cache_linkAliasCnt > 0 Then
                    Ptr = cache_linkAlias_NameIndex.getPtr(LCase(linkAlias))
                    main_GetURLRewriteLink = EncodeText(cache_linkAlias(2, Ptr))
                End If
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError13("main_GetURLRewriteLink")
        End Function
        ''
        ''
        ''
        'public Function main_GetCsv() As ContentServerClass
        '    On Error GoTo ErrorTrap: 'Dim th as integer: th = profileLogMethodEnter("GetCsv")
        '    '
        '    main_GetCsv = main_cmc
        '    '
        '    Exit Function
        'ErrorTrap:
        '    Call main_HandleClassErrorAndResume_TrapPatch1("main_GetCsv")
        'End Function
        '
        '
        '
        Private Function main_GetPageNotFoundPageId() As Integer
            Dim pageId As Integer
            Try
                pageId = domains.domainDetails.pageNotFoundPageId
                If pageId = 0 Then
                    '
                    ' no domain page not found, use site default
                    '
                    pageId = siteProperties.getinteger("PageNotFoundPageID", 0)
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return pageId
        End Function
        '
        '
        '
        Private Function main_ProcessPageNotFound_GetLink(ByVal adminMessage As String, Optional ByVal BackupPageNotFoundLink As String = "", Optional ByVal PageNotFoundLink As String = "", Optional ByVal EditPageID As Integer = 0, Optional ByVal EditSectionID As Integer = 0) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("ProcessPageNotFound_GetLink")
            '
            Dim Pos As Integer
            Dim DefaultLink As String
            Dim PageNotFoundPageID As Integer
            Dim PCCPtr As Integer
            Dim Link As String
            '
            PageNotFoundPageID = main_GetPageNotFoundPageId()
            If PageNotFoundPageID = 0 Then
                '
                ' No PageNotFound was set -- use the backup link
                '
                If BackupPageNotFoundLink = "" Then
                    adminMessage = adminMessage & " The Site Property 'PageNotFoundPageID' is not set so the Landing Page was used."
                    Link = pageManager_GetLandingLink()
                Else
                    adminMessage = adminMessage & " The Site Property 'PageNotFoundPageID' is not set."
                    Link = BackupPageNotFoundLink
                End If
            Else
                '
                ' main_Get the PageID for the PageNotFound
                '
                PCCPtr = pageManager_cache_pageContent_getPtr(PageNotFoundPageID, pagemanager_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                If PCCPtr < 0 Then
                    '
                    ' Page Not Found was not found -- go with landing link
                    '
                    adminMessage = adminMessage & "</p><p>The current 'Page Not Found' could not be used because it could not be found. To configure a valid 'Page Not Found' page, first create the page as a child page on your site and check the 'Page Not Found' checkbox on it's control tab. The Landing Page was used."
                    Link = pageManager_GetLandingLink()
                Else
                    '
                    ' Set link
                    '
                    Link = pageManager_GetPageLink4(PageNotFoundPageID, "", True, False)
                    DefaultLink = pageManager_GetPageLink4(0, "", True, False)
                    If Link <> DefaultLink Then
                    Else
                        adminMessage = adminMessage & "</p><p>The current 'Page Not Found' could not be used. It is not valid, or it is not associated with a valid site section. To configure a valid 'Page Not Found' page, first create the page as a child page on your site and check the 'Page Not Found' checkbox on it's control tab. The Landing Page was used."
                    End If
                End If
            End If
            '
            ' Add the Admin Message to the link
            '
            If user.isAuthenticatedAdmin() Then
                If PageNotFoundLink = "" Then
                    PageNotFoundLink = main_ServerLink
                End If
                '
                ' Add the Link to the Admin Msg
                '
                adminMessage = adminMessage & "<p>The URL was " & PageNotFoundLink & "."
                '
                ' Add the Referrer to the Admin Msg
                '
                If web_requestReferer <> "" Then
                    Pos = vbInstr(1, webServer.requestReferrer, "main_AdminWarningPageID=", vbTextCompare)
                    If Pos <> 0 Then
                        webServer.requestReferrer = Left(webServer.requestReferrer, Pos - 2)
                    End If
                    Pos = vbInstr(1, webServer.requestReferrer, "main_AdminWarningMsg=", vbTextCompare)
                    If Pos <> 0 Then
                        webServer.requestReferrer = Left(webServer.requestReferrer, Pos - 2)
                    End If
                    Pos = vbInstr(1, webServer.requestReferrer, "blockcontenttracking=", vbTextCompare)
                    If Pos <> 0 Then
                        webServer.requestReferrer = Left(webServer.requestReferrer, Pos - 2)
                    End If
                    adminMessage = adminMessage & " The referring page was " & webServer.requestReferrer & "."
                End If
                '
                adminMessage = adminMessage & "</p>"
                '
                If EditPageID <> 0 Then
                    Link = modifyLinkQuery(Link, "main_AdminWarningPageID", CStr(EditPageID), True)
                End If
                '
                If EditSectionID <> 0 Then
                    Link = modifyLinkQuery(Link, "main_AdminWarningSectionID", CStr(EditSectionID), True)
                End If
                '
                Link = modifyLinkQuery(Link, RequestNameBlockContentTracking, "1", True)
                Link = modifyLinkQuery(Link, "main_AdminWarningMsg", "<p>" & adminMessage & "</p>", True)
            End If
            '
            main_ProcessPageNotFound_GetLink = Link
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_ProcessPageNotFound_GetLink")
        End Function
        '
        '---------------------------------------------------------------------------
        '
        '---------------------------------------------------------------------------
        '
        Public Function main_GetLandingPageID() As Integer
            Dim landingPageid As Integer = 0
            Try
                Dim CS As Integer
                '
                If Not pageManager_LandingPageID_Loaded Then
                    pageManager_LandingPageID_Loaded = True
                    '
                    ' try the domain landing page first
                    '
                    CS = db.csOpen("Domains", "(name=" & db.encodeSQLText(webServer.requestDomain) & ")", , , , , , "RootPageID")
                    If db.cs_Ok(CS) Then
                        pageManager_LandingPageID = EncodeInteger(db.cs_getText(CS, "RootPageID"))
                    End If
                    Call db.cs_Close(CS)
                    If pageManager_LandingPageID = 0 Then
                        '
                        ' try the site property landing page id
                        '
                        pageManager_LandingPageID = siteProperties.getinteger("LandingPageID", 0)
                    End If
                    If pageManager_LandingPageID = 0 Then
                        '
                        ' landing page could not be determined
                        '
                        main_AdminWarning = main_AdminWarning _
                            & "<p>This page is being displayed because the Landing Page was requested, but has not been configured." _
                            & " To configure any page as your landing page, edit the page, select the 'Control' tab, and check the checkbox marked 'Set Landing Page'.</p>" _
                            & "<p>The Landing Page is the page that is displayed when the domain name is requested without a specific page.</p>"
                        '
                        pageManager_LandingPageID = main_GetPageNotFoundPageId()
                    End If
                End If
                landingPageid = pageManager_LandingPageID
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return landingPageid
        End Function
        '
        '---------------------------------------------------------------------------
        '
        '---------------------------------------------------------------------------
        '
        Public Function main_GetLandingPageName(LandingPageID As Integer) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetLandingPageName")
            '
            Dim PCCPtr As Integer
            '
            If pageManager_LandingPageName = "" Then
                PCCPtr = pageManager_cache_pageContent_getPtr(LandingPageID, pagemanager_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                If PCCPtr < 0 Then
                    '
                    ' This case should have been covered in main_GetLandingPageID -- and should not be possible
                    '
                    pageManager_LandingPageName = DefaultNewLandingPageName
                Else
                    pageManager_LandingPageName = cache_pageContent(PCC_Name, PCCPtr)
                End If
            End If
            main_GetLandingPageName = pageManager_LandingPageName
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetLandingPageName")
        End Function
        ''
        ''
        ''
        'public Function main_GetHelpLinkRemote(FieldName As String, ContentName As String, Caption As String) As String
        '    On Error GoTo ErrorTrap: 'Dim th as integer: th = profileLogMethodEnter("GetHelpLinkRemote")
        '    '
        '    Dim QueryString As String
        '    Dim LocalCode As String
        '    Dim LocalLink As String
        '    Dim LocalCaption As String
        '    Dim LocalBubbleCopy As String
        '    Dim BubbleJS As String
        '    Dim helpLink As String
        '    '
        '    If main_IsAuthenticated Then
        '        If visitProperty.getboolean("AllowHelpIcon") Then
        '            LocalCaption = encodeText(Caption)
        '            LocalBubbleCopy = "<img src=""/ccLib/images/ajax-loader-small.gif"" width=16 height=16>"
        '            BubbleJS = " onMouseOver=""HelpBubbleAjaxOn('HelpBubble" & main_HelpCodeCount & "',this,'" & ContentName & "','" & FieldName & "');return false;"" onMouseOut=""HelpBubbleOff('HelpBubble" & main_HelpCodeCount & "');return false;"""
        '            main_ClosePageHTML = main_ClosePageHTML & "<div id=""HelpBubble" & main_HelpCodeCount & """ class=""ccPanel"" style=""visibility:hidden; position:absolute; width: 200px; border-right: 1px solid #000000; border-left: 1px solid #000000;border-bottom: 1px solid #000000;border-top: 1px solid #000000;"" >" & main_GetPanel(LocalBubbleCopy) & "</div>"
        '            BubbleJS = BubbleJS & " onclick=""return false;"" "
        '            '
        '            main_GetHelpLinkRemote = "" _
        '                & "&nbsp;<a href=""" & encodeHTML(helpLink) & """ tabindex=-1 target=""_blank"" " & BubbleJS & ">" _
        '                & "<img src=""/ccLib/images/NavHelp.gif"" width=18 height=18 border=0 align=absmiddle alt=""" & LocalCaption & """ style=""cursor: help"">" _
        '                & "</A>"
        '
        '                '& "<img src=""/ccLib/images/QuestionMark1313.gif"" width=13 height=13 border=0 align=absmiddle alt=""" & LocalCaption & """ style=""cursor: help"">" _
        '
        '            If main_HelpCodeCount >= main_HelpCodeSize Then
        '                main_HelpCodeSize = main_HelpCodeSize + 10
        '                ReDim Preserve main_HelpCodes(main_HelpCodeSize)
        '                ReDim Preserve main_HelpCaptions(main_HelpCodeSize)
        '            End If
        '            main_HelpCodes(main_HelpCodeCount) = LocalCode
        '            main_HelpCaptions(main_HelpCodeCount) = LocalCaption
        '            main_HelpCodeCount = main_HelpCodeCount + 1
        '        End If
        '    End If
        '    '
        '    Exit Function
        'ErrorTrap:
        '    Call main_HandleClassErrorAndResume_TrapPatch1("main_GetLink")
        'End Function
        '
        '=================================================================================
        '   Legacy
        '       see main_executeAddon for explaination of string parsing
        '
        '       use main_GetAddonOption to main_Get a value from an AddonOptionList
        '       use decodeNvaArgument( main_GetArgument( name, string, default, "&" )) for AddonOptionStrings
        '=================================================================================
        '
        Public Function main_GetAggrOption(Name As String, Option_String As String) As String
            main_GetAggrOption = main_GetAddonOption(Name, Option_String)
        End Function
        '
        '=================================================================================
        '   True if the table exists
        '=================================================================================
        '
        Public Function main_IsSQLTable(DataSourceName As String, TableName As String) As Boolean
            '
            If (True) Then
                main_IsSQLTable = db_IsSQLTable(DataSourceName, TableName)
            End If
            '
        End Function
        '
        '=================================================================================
        '   True if the table field exists
        '=================================================================================
        '
        Public Function main_IsSQLTableField(DataSourceName As String, TableName As String, FieldName As String) As Boolean
            '
            If (True) Then
                main_IsSQLTableField = db_IsSQLTableField(DataSourceName, TableName, FieldName)
            End If
            '
        End Function
        '
        '==========================================================================================================================================
        '   Input element for Style Sheets
        '
        '   Opens a temp file in the appcache folder with the styles copies in
        '   click on one of the styles on the left, and main_Get the right pane with AJAX.
        '   then on the next click, save the results in the right page back to the temp file.
        '   on OK or save, first save the right pane results to the temp file, then copy the temp file to the real file
        '   on cancel, just delete the temp file
        '==========================================================================================================================================
        '
        Public Function main_GetFormInputStyles(ByVal TagName As String, ByVal StyleCopy As String, Optional ByVal HtmlId As String = "", Optional ByVal HtmlClass As String = "") As String
            '
            Dim FieldRows As String
            Dim FieldOptionRow As String
            Dim Copy As String
            '
            Copy = html_EncodeHTML(StyleCopy)
            main_GetFormInputStyles = html_GetFormInputTextExpandable2(TagName, StyleCopy, 10, , HtmlId, , , HtmlClass)
            'FieldRows = main_GetMemberProperty("StyleEditorRowHeight", 10)
            'FieldOptionRow = "<input TYPE=""Text"" TabIndex=-1 NAME=""" & TagName & "Rows"" SIZE=""3"" VALUE=""" & FieldRows & """ ID=""""  onchange=""" & TagName & ".rows=" & TagName & "Rows.value; return true""> Rows"
            'main_GetFormInputStyles = "<textarea NAME=""" & TagName & """ ROWS=""" & FieldRows & """ ID=""" & TagName & """ STYLE=""width: 600px;"">" & Copy & "</TEXTAREA>" & FieldOptionRow
            Exit Function
            '
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetFormInputStyles")
            '
            Dim JS As String
            Dim LeftPane As String
            Dim RightPane As String
            Dim BakeName As String
            Dim IsAuthoringMode As Boolean
            Dim LinkBase As String
            Dim RightSideHeader As String
            Dim StyleFile As String
            Dim TempFilename As String
            Dim StyleLine As String
            Dim StyleLines() As String
            Dim StyleNameList As String
            Dim Pos As Integer
            Dim Ptr As Integer
            Dim StyleName As String
            Dim StyleDetails As String
            Dim StyleCnt As Integer
            '
            RightSideHeader = "&nbsp;"
            IsAuthoringMode = True
            LinkBase = web_RefreshQueryString
            LeftPane = "List of Styles"
            RightPane = "Style Tag Editor"
            TempFilename = "AppCache\StyleTemp" & GetRandomInteger() & ".css"
            '
            StyleFile = cdnFiles.readFile(TempFilename)
            If StyleFile <> "" Then
                Call appRootFiles.saveFile(TempFilename, StyleCopy)
                'Call main_CopyVirtualFile(StylesFilename, TempFilename)
                '
                ' remove crlf
                '
                StyleFile = vbReplace(StyleFile, vbCrLf, vbLf)
                Do
                    Pos = vbInstr(1, StyleFile, vbLf)
                    If Pos > 0 Then
                        StyleFile = vbReplace(StyleFile, vbLf, " ")
                    End If
                Loop While Pos > 0
                '
                ' remove double spaces
                '
                Do
                    Pos = vbInstr(1, StyleFile, "  ")
                    If Pos > 0 Then
                        StyleFile = vbReplace(StyleFile, "  ", " ")
                    End If
                Loop While Pos > 0
                StyleLines = Split(StyleFile, "}")
                StyleCnt = UBound(StyleLines) + 1
                For Ptr = 0 To StyleCnt - 1
                    StyleLine = StyleLines(Ptr)
                    Pos = vbInstr(1, StyleLine, "{")
                    If Pos > 0 Then
                        StyleNameList = StyleNameList & vbCrLf & "<div>" & Mid(StyleLine, 1, Pos - 1) & "</div>"
                    End If
                Next
            End If
            Dim StyleEditorPtr As Integer
            StyleNameList = StyleNameList & vbCrLf & "<div><a href=""#"" onClick=""AddStyle();return false;"">Add Style</a></div>"
            StyleNameList = StyleNameList & vbCrLf & "<div>----- end of list</div>"
            StyleNameList = vbCrLf & "<div ID=""StyleEditorListWrapper" & StyleEditorPtr & """>" & vbCrLf & StyleNameList & vbCrLf & "</div>"
            JS = "" _
                & vbCrLf & "<script Language=""JavaScript"" type=""text/javascript"">" _
                & vbCrLf & "function AddStyle() {/* change add link into a text input and a save button */}" _
                & vbCrLf & "function AddStyleSave() {/* send the new style back to the server and save it in the temp file. ON return, replace the text input with a new style. Add a new Add link to the list of styles */}" _
                & vbCrLf & "</script>"

            RightPane = RightPane & main_GetFormInputStyles_Editor(StyleName, StyleDetails)
            '
            main_GetFormInputStyles = JS _
                & "<div style=""border:1px solid #A0A0A0;width:100%;"">" _
                & "<table border=""0"" cellpadding=""0"" cellspacing=""0"" style=""width:100%;"">" _
                & "<tr>" _
                & "<td class=""ccAdminTab"" style=""min-width:100px;padding:5px;text-align:left"">Styles<br ><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=90 height=1></td>" _
                & "<td class=""ccAdminTab"" style=""width:1px;""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=1 height=1></td>" _
                & "<td class=""ccAdminTab"" style=""padding:5px;text-align:left"" ID=""" & TagName & ".ContentCaption"">" & encodeEmptyText(RightSideHeader, "&nbsp;") & "</td>" _
                & "</td></tr>" _
                & "<tr>" _
                & "<td style=""padding:10px;Background-color:white;border:0px solid #808080;vertical-align:top;text-align:left"">" & StyleNameList & "</td>" _
                & "<td class=""ccAdminTab"" style=""width:1px;""></td>" _
                & "<td style=""padding:10px;Background-color:white;border:0px solid #808080;vertical-align:top;text-align:left"">" & RightPane & "</td>" _
                & "</td></tr>" _
                & "</table>" _
                & "</div>"
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetFormInputStyles")
        End Function
        '
        '==========================================================================================================================================
        '   main_Get the editor side of the FormInputStyles
        '
        '
        '==========================================================================================================================================
        '
        Public Function main_GetFormInputStyles_Editor(StyleName As String, StyleDetails As String) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetFormInputStyles_Editor")
            '
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetFormInputStyles_Editor")
        End Function
        '
        '====================================================================================================
        '   page content cache
        '====================================================================================================
        '
        Public Sub pageManager_cache_pageContent_load(main_IsWorkflowRendering As Boolean, main_IsQuickEditing As Boolean)
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("pageManager_cache_pageContent_load")
            '
            Dim bag As String
            Dim Ticks As Integer
            Dim IDList2 As New coreFastStringClass
            Dim IDList As String
            Dim PageName As String
            Dim CS As Integer
            'dim dt as datatable
            Dim Ptr As Integer
            Dim SQL As String
            Dim SelectList As String
            Dim SupportMetaContentNoFollow As Boolean
            Dim Criteria As String
            'dim buildversion As String
            Dim Id As Integer
            Dim ParentID As Integer
            Dim test As Object
            Dim arrayData() As Object
            Dim arrayTest As Object
            '
            ' Load cached PCC
            '
            pageManager_cache_pageContent_idIndex = New coreKeyPtrIndexClass
            pageManager_cache_pageContent_parentIdIndex = New coreKeyPtrIndexClass
            pageManager_cache_pageContent_nameIndex = New coreKeyPtrIndexClass
            pageManager_cache_pageContent_rows = 0
            '
            On Error Resume Next
            If Not main_IsWorkflowRendering Then
                arrayTest = cache.getObject(Of Object())(pageManager_cache_pageContent_cacheName)
                If Not IsNothing(arrayTest) Then
                    arrayData = DirectCast(arrayTest, Object())
                    If Not IsNothing(arrayData) Then
                        cache_pageContent = DirectCast(arrayData(0), String(,))
                        If Not IsNothing(cache_pageContent) Then
                            bag = DirectCast(arrayData(1), String)
                            If Err.Number = 0 Then
                                Call pageManager_cache_pageContent_idIndex.importPropertyBag(bag)
                                If Err.Number = 0 Then
                                    bag = DirectCast(arrayData(2), String)
                                    If Err.Number = 0 Then
                                        Call pageManager_cache_pageContent_nameIndex.importPropertyBag(bag)
                                        If Err.Number = 0 Then
                                            bag = DirectCast(arrayData(3), String)
                                            If Err.Number = 0 Then
                                                Call pageManager_cache_pageContent_parentIdIndex.importPropertyBag(bag)
                                                If Err.Number = 0 Then
                                                    pageManager_cache_pageContent_rows = UBound(cache_pageContent, 2) + 1
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
            Err.Clear()
            On Error GoTo ErrorTrap
            If pageManager_cache_pageContent_rows = 0 Then
                '
                Call testPoint("pageManager_cache_pageContent_load, main_PCCCnt = 0, rebuild cache")
                '
                SelectList = pageManager_cache_pageContent_fieldList
                Criteria = ""
                cache_pageContent = db.db_GetContentRows("Page Content", Criteria, , False, SystemMemberID, (main_IsWorkflowRendering Or main_IsQuickEditing), , SelectList)
                If (cache_pageContent.Length > 0) Then
                    pageManager_cache_pageContent_rows = UBound(cache_pageContent, 2) + 1
                    If pageManager_cache_pageContent_rows > 0 Then
                        '
                        ' build id and name indexes
                        '
                        Ticks = GetTickCount
                        For Ptr = 0 To pageManager_cache_pageContent_rows - 1
                            Id = EncodeInteger(cache_pageContent(PCC_ID, Ptr))
                            PageName = EncodeText(cache_pageContent(PCC_Name, Ptr))
                            IDList2.Add("," & CStr(Id))
                            Call pageManager_cache_pageContent_idIndex.setPtr(EncodeText(Id), Ptr)
                            If PageName <> "" Then
                                Call pageManager_cache_pageContent_nameIndex.setPtr(PageName, Ptr)
                            End If
                            '
                            ' if menulinkoverride is encoded, decode it
                            '
                            If vbInstr(1, cache_pageContent(PCC_Link, Ptr), "%") <> 0 Then
                                cache_pageContent(PCC_Link, Ptr) = main_DecodeUrl(cache_pageContent(PCC_Link, Ptr))
                            End If
                        Next
                        IDList = IDList2.Text
                        '
                        ' build parentid list -- after id list to check for orphas
                        '
                        For Ptr = 0 To pageManager_cache_pageContent_rows - 1
                            ParentID = EncodeInteger(cache_pageContent(PCC_ParentID, Ptr))
                            If (InStr(1, "," & IDList & ",", "," & ParentID & ",") = 0) Then
                                ParentID = 0
                            End If
                            Call pageManager_cache_pageContent_parentIdIndex.setPtr(EncodeText(ParentID), Ptr)
                        Next
                        Call pageManager_cache_pageContent_save()
                    End If
                End If
                '
                Call testPoint("pageManager_cache_pageContent_load, building took [" & (GetTickCount - Ticks) & " msec]")
                '
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description & "", "pageManager_cache_pageContent_load", True, False)
        End Sub
        '
        '
        '
        Public Sub pageManager_cache_pageContent_save()
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("MainClass.pageManager_cache_pageContent_save")
            '
            Dim cacheArray() As Object
            ReDim cacheArray(3)
            '
            If Not pagemanager_IsWorkflowRendering() Then
                Call pageManager_cache_pageContent_idIndex.getPtr("test")
                Call pageManager_cache_pageContent_nameIndex.getPtr("test")
                Call pageManager_cache_pageContent_parentIdIndex.getPtr("test")
                '
                cacheArray(0) = cache_pageContent
                cacheArray(1) = pageManager_cache_pageContent_idIndex.exportPropertyBag
                cacheArray(2) = pageManager_cache_pageContent_nameIndex.exportPropertyBag
                cacheArray(3) = pageManager_cache_pageContent_parentIdIndex.exportPropertyBag
                Call cache.setKey(pageManager_cache_pageContent_cacheName, cacheArray)
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("pageManager_cache_pageContent_save")
        End Sub
        '
        '====================================================================================================
        '   Returns a pointer into the main_pcc(x,ptr) array
        '====================================================================================================
        '
        Public Function pageManager_cache_pageContent_getPtr(PageID As Integer, main_IsWorkflowRendering As Boolean, main_IsQuickEditing As Boolean) As Integer
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("pageManager_cache_pageContent_getPtr")
            '
            Dim CS As Integer
            Dim Ptr As Integer
            Dim RS As Object
            '
            pageManager_cache_pageContent_getPtr = -1
            If pageManager_cache_pageContent_rows = 0 Then
                Call pageManager_cache_pageContent_load(main_IsWorkflowRendering, main_IsQuickEditing)
            End If
            If (PageID > 0) Then
                '
                ' pageid=0 just loads cache and returns -1 ptr
                '
                If pageManager_cache_pageContent_rows <= 0 Then
                    '
                ElseIf (pageManager_cache_pageContent_idIndex Is Nothing) Then
                    '
                Else
                    pageManager_cache_pageContent_getPtr = pageManager_cache_pageContent_idIndex.getPtr(CStr(PageID))
                    If pageManager_cache_pageContent_getPtr < 0 Then
                        '
                        ' This PageID is missing from cache - try to reload
                        '
                        Call log_appendLog("pageManager_cache_pageContent_getPtr, pageID[" & PageID & "] not found in index, attempting cache reload")
                        Call pageManager_cache_pageContent_clear()
                        Call pageManager_cache_pageContent_load(main_IsWorkflowRendering, main_IsQuickEditing)
                        If pageManager_cache_pageContent_rows > 0 Then
                            pageManager_cache_pageContent_getPtr = pageManager_cache_pageContent_idIndex.getPtr(CStr(PageID))
                        End If
                        If (pageManager_cache_pageContent_getPtr < 0) Then
                            ' do not through error, this can happen if someone deletes a page.
                            Call log_appendLog("pageManager_cache_pageContent_getPtr, pageID[" & PageID & "] not found in cache after reload. ERROR")
                            'Call Err.Raise(ignoreInteger, "cpCoreClass", "pageManager_cache_pageContent_getPtr, pageID [" & PageID & "] reload failed. ERROR")
                            'Call AppendLog("pageManager_cache_pageContent_getPtr, pageID[" & PageID & "] reload failed. ERROR")
                        End If
                        'CS = app.db_csOpen("page content", "id=" & PageID, "id", , , , "ID")
                        'If app.csv_IsCSOK(CS) Then
                        '    Call pageManager_cache_pageContent_updateRow(PageID, main_IsWorkflowRendering, main_IsQuickEditing)
                        '    If (main_PCCCnt > 0) And Not (main_PCCIDIndex Is Nothing) Then
                        '        pageManager_cache_pageContent_getPtr = main_PCCIDIndex.GetPointer(CStr(PageID))
                        '    End If
                        'End If
                        'Call app.db_closeCS(CS)
                    End If
                End If
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "pageManager_cache_pageContent_getPtr", True, False)
        End Function
        '
        '====================================================================================================
        '   Returns a pointer into the pcc(x,ptr) array
        '====================================================================================================
        '
        Public Function pageManager_cache_pageContent_get(main_IsWorkflowRendering As Boolean, main_IsQuickEditing As Boolean) As String(,)
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetPCC")
            '
            If pageManager_cache_pageContent_rows = 0 Then
                Call pageManager_cache_pageContent_load(main_IsWorkflowRendering, main_IsQuickEditing)
            End If
            pageManager_cache_pageContent_get = cache_pageContent
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "pageManager_cache_pageContent_get", True, False)
        End Function
        '
        '====================================================================================================
        '   Returns a pointer into the pcc(x,ptr) array for the first child page
        '====================================================================================================
        '
        Public Function pageManager_cache_pageContent_getFirstChildPtr(PageID As Integer, main_IsWorkflowRendering As Boolean, main_IsQuickEditing As Boolean) As Integer
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetPCCFirstChildPtr")
            '
            Dim CS As Integer
            Dim Ptr As Integer
            '
            pageManager_cache_pageContent_getFirstChildPtr = -1
            If pageManager_cache_pageContent_rows = 0 Then
                Call pageManager_cache_pageContent_load(main_IsWorkflowRendering, main_IsQuickEditing)
            End If
            If pageManager_cache_pageContent_rows > 0 Then
                Ptr = pageManager_cache_pageContent_parentIdIndex.getPtr(CStr(PageID))
                If Ptr >= 0 Then
                    pageManager_cache_pageContent_getFirstChildPtr = Ptr
                End If
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "pageManager_cache_pageContent_getFirstChildPtr", True, False)
        End Function
        '
        '====================================================================================================
        '   Returns a pointer into the pcc(x,ptr) array for the first child page
        '====================================================================================================
        '
        Public Function pageManager_cache_pageContent_getFirstNamePtr(PageName As String, main_IsWorkflowRendering As Boolean, main_IsQuickEditing As Boolean) As Integer
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetPCCFirstNamePtr")
            '
            Dim CS As Integer
            Dim Ptr As Integer
            '
            pageManager_cache_pageContent_getFirstNamePtr = -1
            If pageManager_cache_pageContent_rows = 0 Then
                Call pageManager_cache_pageContent_load(main_IsWorkflowRendering, main_IsQuickEditing)
            End If
            If pageManager_cache_pageContent_rows > 0 Then
                Ptr = pageManager_cache_pageContent_nameIndex.getPtr(PageName)
                If Ptr >= 0 Then
                    pageManager_cache_pageContent_getFirstNamePtr = Ptr
                End If
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "pageManager_cache_pageContent_getFirstNamePtr", True, False)
        End Function
        '
        '
        '
        Public Sub pageManager_cache_pageContent_updateRow(PageID As Integer, main_IsWorkflowRendering As Boolean, main_IsQuickEditing As Boolean)
            ' must clear because there is no way to updae indexes
            Call pageManager_cache_pageContent_clear()
            Exit Sub
            '
            On Error GoTo ErrorTrap
            '
            Dim PageName As String
            Dim CS As Integer
            'dim dt as datatable
            Dim ColPtr As Integer
            Dim SQL As String
            Dim SelectList As String
            Dim SupportMetaContentNoFollow As Boolean
            Dim Criteria As String
            'dim buildversion As String
            Dim Id As Integer
            Dim ParentID As Integer
            Dim test As Object
            Dim PCCRow As String(,)
            Dim RowPtr As Integer
            '
            If pageManager_cache_pageContent_rows = 0 Then
                Call pageManager_cache_pageContent_load(main_IsWorkflowRendering, main_IsQuickEditing)
            End If
            If pageManager_cache_pageContent_rows > 0 Then
                SelectList = pageManager_cache_pageContent_fieldList
                For RowPtr = 0 To pageManager_cache_pageContent_rows - 1
                    If EncodeInteger(cache_pageContent(PCC_ID, RowPtr)) = PageID Then
                        Exit For
                    End If
                Next
                Criteria = "ID=" & PageID
                CS = db.csOpen("Page Content", Criteria, , False, ,,, SelectList)
                If Not db.cs_Ok(CS) Then
                    '
                    ' Page Not Found
                    '
                    Call pageManager_cache_pageContent_removeRow(PageID, main_IsWorkflowRendering, main_IsQuickEditing)
                Else
                    PCCRow = db.db_GetCSRows(CS)
                    '
                    ' page was found in the Db - find the entry in PCC
                    '
                    If RowPtr = pageManager_cache_pageContent_rows Then
                        '
                        ' Page not found in PCC - add a new entry
                        '
                        pageManager_cache_pageContent_rows = pageManager_cache_pageContent_rows + 1
                        ReDim Preserve cache_pageContent(PCC_ColCnt - 1, pageManager_cache_pageContent_rows - 1)
                    End If
                    '
                    ' Transfer data from Db data to the PCC
                    '
                    For ColPtr = 0 To UBound(cache_pageContent, 1)
                        cache_pageContent(ColPtr, RowPtr) = PCCRow(ColPtr, 0)
                    Next
                    '
                    ' build id and name indexes
                    '
                    Id = EncodeInteger(cache_pageContent(PCC_ID, RowPtr))
                    PageName = EncodeText(cache_pageContent(PCC_Name, RowPtr))
                    '
                    Call pageManager_cache_pageContent_idIndex.setPtr(EncodeText(Id), RowPtr)
                    '
                    If PageName <> "" Then
                        Call pageManager_cache_pageContent_nameIndex.setPtr(PageName, RowPtr)
                    End If
                    '
                    If vbInstr(1, cache_pageContent(PCC_Link, RowPtr), "%") <> 0 Then
                        cache_pageContent(PCC_Link, RowPtr) = main_DecodeUrl(cache_pageContent(PCC_Link, RowPtr))
                    End If
                    '
                    ParentID = EncodeInteger(cache_pageContent(PCC_ParentID, RowPtr))
                    Call pageManager_cache_pageContent_parentIdIndex.setPtr(EncodeText(ParentID), RowPtr)
                    '
                    Call pageManager_cache_pageContent_save()
                End If
                Call db.cs_Close(CS)
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "pageManager_cache_pageContent_updateRow", True, False)
        End Sub
        '
        '
        '
        Public Sub pageManager_cache_pageContent_removeRow(PageID As Integer, main_IsWorkflowRendering As Boolean, main_IsQuickEditing As Boolean)
            On Error GoTo ErrorTrap
            '
            Dim PageName As String
            Dim CS As Integer
            'dim dt as datatable
            Dim ColPtr As Integer
            Dim SQL As String
            Dim SelectList As String
            Dim SupportMetaContentNoFollow As Boolean
            Dim Criteria As String
            'dim buildversion As String
            Dim Id As Integer
            Dim ParentID As Integer
            Dim test As Object
            Dim PCCRow As Object
            Dim RowPtr As Integer
            '
            '   can not remove rows from index - temp fix - do not remove rows from cache
            '
            Call pageManager_cache_pageContent_clear()
            Exit Sub
            '
            If pageManager_cache_pageContent_rows = 0 Then
                Call pageManager_cache_pageContent_load(main_IsWorkflowRendering, main_IsQuickEditing)
            End If
            If pageManager_cache_pageContent_rows > 0 Then
                '
                ' Find the row in the PCC
                '
                For RowPtr = 0 To pageManager_cache_pageContent_rows - 1
                    If EncodeInteger(cache_pageContent(PCC_ID, RowPtr)) = PageID Then
                        Exit For
                    End If
                Next
                If RowPtr < pageManager_cache_pageContent_rows Then
                    '
                    ' Row was found
                    '
                    Do While RowPtr < (pageManager_cache_pageContent_rows - 1)
                        For ColPtr = 0 To UBound(cache_pageContent, 1)
                            cache_pageContent(ColPtr, RowPtr) = cache_pageContent(ColPtr, RowPtr + 1)
                        Next
                        RowPtr = RowPtr + 1
                    Loop
                    pageManager_cache_pageContent_rows = pageManager_cache_pageContent_rows - 1
                    ReDim Preserve cache_pageContent(PCC_ColCnt - 1, pageManager_cache_pageContent_rows - 1)
                    If False Then
                        ReDim Preserve cache_pageContent(PCC_ColCnt - 1, pageManager_cache_pageContent_rows)
                    End If
                End If
                If Not main_IsWorkflowRendering Then
                    Call cache.setKey("PCC", cache_pageContent)
                End If
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "pageManager_cache_pageContent_removeRow", True, False)
        End Sub
        '
        '
        '
        Public Function pageManager_cache_pageContent_getPtrsSorted(PCCPtrs() As Integer, OrderByCriteria As String) As Integer()
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetPCCPtrsSorted")
            '
            Dim PtrStart As Integer
            Dim PtrEnd As Integer
            Dim PtrStep As Integer
            Dim PCCRowPtr As Integer
            Dim Ptr As Integer
            Dim Index As coreKeyPtrIndexClass
            Dim PCCSortFieldPtr As Integer
            Dim SortForward As Boolean
            Dim SortFieldName As String
            Dim PtrCnt As Integer
            Dim SortPtr As Integer
            Dim SortSplitCnt As Integer
            Dim SortSplit() As String
            Dim PCCPtrCnt As Integer
            Dim fieldType As Integer
            Dim StringValue As String
            Dim LongValue As Integer
            Dim DblValue As Double
            Dim DateValue As Date
            Dim SortFieldValue As String
            '
            ' Sort the ptrs
            '
            PCCPtrCnt = UBound(PCCPtrs) + 1
            If PCCPtrCnt > 0 Then
                SortSplit = Split(OrderByCriteria, ",")
                SortSplitCnt = UBound(SortSplit) + 1
                For SortPtr = 0 To SortSplitCnt - 1
                    SortFieldName = vbLCase(SortSplit(SortPtr))
                    SortForward = True
                    If vbInstr(1, SortFieldName, " asc", vbTextCompare) <> 0 Then
                        SortFieldName = vbReplace(SortFieldName, " asc", "")
                    ElseIf vbInstr(1, SortFieldName, " desc", vbTextCompare) <> 0 Then
                        SortFieldName = vbReplace(SortFieldName, " desc", "")
                        SortForward = False
                    End If
                    PCCSortFieldPtr = pageManager_cache_pageContent_getColPtr(SortFieldName)

                    Select Case SortFieldName
                        Case "id"
                            fieldType = FieldTypeIdInteger
                        Case "datearchive", "dateexpires", "pubdate", "dateadded", "modifieddate"
                            fieldType = FieldTypeIdDate
                        Case Else
                            fieldType = FieldTypeIdText
                    End Select
                    '
                    ' Store them in the index
                    '
                    If PCCSortFieldPtr >= 0 Then
                        Index = New coreKeyPtrIndexClass
                        For Ptr = 0 To PCCPtrCnt - 1
                            PCCRowPtr = PCCPtrs(Ptr)
                            StringValue = EncodeText(cache_pageContent(PCCSortFieldPtr, PCCRowPtr))
                            Select Case fieldType
                                Case FieldTypeIdInteger
                                    LongValue = CInt(DblValue)
                                    SortFieldValue = GetIntegerString(LongValue, 10)
                                Case FieldTypeIdDate
                                    If Not IsDate(StringValue) Then
                                        SortFieldValue = "000000000000000000"
                                    Else
                                        DateValue = CDate(StringValue)
                                        DblValue = DateValue.ToOADate * CDbl(1440)
                                        LongValue = CInt(DblValue)
                                        SortFieldValue = GetIntegerString(LongValue, 10)
                                    End If
                                Case Else
                                    SortFieldValue = StringValue
                            End Select
                            Call Index.setPtr(SortFieldValue, PCCRowPtr)

                        Next
                        '
                        ' Store them back into PCCPtrs() in the correct order
                        '
                        If SortForward Then
                            PtrStart = 0
                            PtrEnd = PCCPtrCnt - 1
                            PtrStep = 1
                        Else
                            PtrStart = PCCPtrCnt - 1
                            PtrEnd = 0
                            PtrStep = -1
                        End If

                        PCCRowPtr = Index.getFirstPtr
                        For Ptr = PtrStart To PtrEnd Step PtrStep
                            PCCPtrs(Ptr) = PCCRowPtr
                            PCCRowPtr = EncodeInteger(Index.getNextPtr)
                        Next
                    End If
                Next
            End If
            pageManager_cache_pageContent_getPtrsSorted = PCCPtrs
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "pageManager_cache_pageContent_getPtrsSorted", True, False)
        End Function
        '
        '
        '
        Public Function pageManager_cache_pageContent_getColPtr(FieldName As String) As Integer
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetPCCColPtr")
            '
            pageManager_cache_pageContent_getColPtr = -1
            Select Case vbLCase(FieldName)
                Case "active"
                    pageManager_cache_pageContent_getColPtr = PCC_Active
                Case "allowchildlistdisplay"
                    pageManager_cache_pageContent_getColPtr = PCC_AllowChildListDisplay
                Case "allowhitnotification"
                    pageManager_cache_pageContent_getColPtr = PCC_AllowHitNotification
                Case "allowmetacontentnofollow"
                    pageManager_cache_pageContent_getColPtr = PCC_AllowMetaContentNoFollow
                Case "blockcontent"
                    pageManager_cache_pageContent_getColPtr = PCC_BlockContent
                Case "blockpage"
                    pageManager_cache_pageContent_getColPtr = PCC_BlockPage
                Case "BlockSourceID"
                    pageManager_cache_pageContent_getColPtr = PCC_BlockSourceID
                Case "brieffilename"
                    pageManager_cache_pageContent_getColPtr = PCC_BriefFilename
                Case "childlistsortmethodid"
                    pageManager_cache_pageContent_getColPtr = PCC_ChildListSortMethodID
                Case "childlistinstanceoptions"
                    pageManager_cache_pageContent_getColPtr = PCC_ChildListInstanceOptions
                Case "issecure"
                    pageManager_cache_pageContent_getColPtr = PCC_IsSecure
                Case "childpagesfound"
                    pageManager_cache_pageContent_getColPtr = PCC_ChildPagesFound
                Case "contactmemberid"
                    pageManager_cache_pageContent_getColPtr = PCC_ContactMemberID
                Case "contentcontrolid"
                    pageManager_cache_pageContent_getColPtr = PCC_ContentControlID
                Case "copyFilename"
                    pageManager_cache_pageContent_getColPtr = PCC_CopyFilename
                Case "customblockmessagefilename"
                    pageManager_cache_pageContent_getColPtr = PCC_CustomBlockMessageFilename
                Case "datearchive"
                    pageManager_cache_pageContent_getColPtr = PCC_DateArchive
                Case "dateexpires"
                    pageManager_cache_pageContent_getColPtr = PCC_DateExpires
                Case "headline"
                    pageManager_cache_pageContent_getColPtr = PCC_Headline
                Case "id"
                    pageManager_cache_pageContent_getColPtr = PCC_ID
                Case "jsendbody"
                    pageManager_cache_pageContent_getColPtr = PCC_JSEndBody
                Case "jshead"
                    pageManager_cache_pageContent_getColPtr = PCC_JSHead
                Case "jsfilename"
                    pageManager_cache_pageContent_getColPtr = PCC_JSFilename
                Case "jsonload"
                    pageManager_cache_pageContent_getColPtr = PCC_JSOnLoad
                Case "link"
                    pageManager_cache_pageContent_getColPtr = PCC_Link
                Case "menuheadline"
                    pageManager_cache_pageContent_getColPtr = PCC_MenuHeadline
                Case "name"
                    pageManager_cache_pageContent_getColPtr = PCC_Name
                Case "parentid"
                    pageManager_cache_pageContent_getColPtr = PCC_ParentID
                Case "parentlistname"
                    pageManager_cache_pageContent_getColPtr = PCC_ParentListName
                Case "pubdate"
                    pageManager_cache_pageContent_getColPtr = PCC_PubDate
                Case "sortorder"
                    pageManager_cache_pageContent_getColPtr = PCC_SortOrder
                Case "registrationgroupid"
                    pageManager_cache_pageContent_getColPtr = PCC_RegistrationGroupID
                Case "templateid"
                    pageManager_cache_pageContent_getColPtr = PCC_TemplateID
                Case "triggeraddgroupid"
                    pageManager_cache_pageContent_getColPtr = PCC_TriggerAddGroupID
                Case "triggerconditiongroupid"
                    pageManager_cache_pageContent_getColPtr = PCC_TriggerConditionGroupID
                Case "triggerconditionid"
                    pageManager_cache_pageContent_getColPtr = PCC_TriggerConditionID
                Case "triggerremovegroupid"
                    pageManager_cache_pageContent_getColPtr = PCC_TriggerRemoveGroupID
                Case "triggersendsystememailid"
                    pageManager_cache_pageContent_getColPtr = PCC_TriggerSendSystemEmailID
                Case "viewings"
                    pageManager_cache_pageContent_getColPtr = PCC_Viewings
                Case "dateadded"
                    pageManager_cache_pageContent_getColPtr = PCC_DateAdded
                Case "modifieddate"
                    pageManager_cache_pageContent_getColPtr = PCC_ModifiedDate
                Case "allowinmenus"
                    pageManager_cache_pageContent_getColPtr = PCC_AllowInMenus
                Case "allowinchildlists"
                    pageManager_cache_pageContent_getColPtr = PCC_AllowInChildLists
            End Select
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "pageManager_cache_pageContent_getColPtr", True, False)
        End Function
        '
        '
        '
        'Public Function main_ImportCollectionFile(CollectionFilename As String) As Boolean
        '    On Error GoTo ErrorTrap: 'Dim th as integer: th = profileLogMethodEnter("ImportCollectionFile")
        '    '
        '        main_ImportCollectionFile = main_ImportCollection(app.publicFiles.ReadFile(CollectionFilename), False)
        '    '
        '    Exit Function
        'ErrorTrap:
        '    Call main_HandleClassError_RevArgs(Err.Number, Err.Source, Err.Description, "main_ImportCollectionFile", True, False)
        '    End Function
        '        '
        '        '
        '        '
        '        Public Function main_ImportCollection(ByVal CollectionFileData As String, IsNewBuild As Boolean) As Boolean
        '            On Error GoTo ErrorTrap : ''Dim th as integer : th = profileLogMethodEnter("ImportCollection")
        '            '
        '            Dim builder As New builderClass(me)
        '            '
        '            Call app.publicFiles.SaveFile("Install/" & CStr(main_GetRandomLong_Internal()) & ".xml", CollectionFileData)
        '            Call builder.InstallAddons(IsNewBuild)
        '            '
        '            Exit Function
        'ErrorTrap:
        '            Call main_HandleClassError_RevArgs(Err.Number, Err.Source, Err.Description, "main_ImportCollection", True, False)
        '        End Function
        '
        '
        '
        Public Function main_IISReset() As Boolean
            Throw New NotImplementedException("iisReset not implemented, may not be needed with removal of activex")
            '            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("IISReset")
            '            '

            '            Dim runAtServer As New runAtServerClass(Me)
            '            '
            '            If main_IsStreamWritten Then
            '                '
            '                ' Not as good. The IISReset page directs back to the root page after 30 seconds
            '                '
            '                Call writeAltBuffer("<script type=""text/javascript"">window.location.assign('/ccLib/Popup/WaitForIISReset.htm');</script>")
            '                Call main_FlushStream()
            '            Else
            '                '
            '                ' The IISReset page directs back to the referrer when service is alive again
            '                '
            '                Call main_Redirect2("/ccLib/Popup/WaitForIISReset.htm", "Redirecting to the 'waiting for issreset' page. If you pause before this redirect, the web server may be resetting and the next page will not be available, resulting in a 404 error. Wait 30 seconds and refresh this link.", False)
            '            End If
            '            ' added 3 seconds to the iisreset. delay here is wrong because the page needs to return and main_Get away before the delay
            '            'Call Threading.Thread.Sleep(3000)
            '            Call runAtServer.executeCmd("IISReset", "")
            '            '
            '            Exit Function
            'ErrorTrap:
            '            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "IISReset", True, False)
        End Function
        '
        '==========================================================================================================
        '
        '==========================================================================================================
        '
        Private Sub pageManager_cache_siteSection_load()
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("IISReset")
            '
            Dim IDText As String
            Dim Name As String
            Dim Id As Integer
            Dim Ptr As Integer
            Dim list As String
            Dim styleId As Integer
            Dim SelectList As String
            Dim SQL As String
            Dim SSCSize As Integer
            Dim LastRecordID As Integer
            Dim RecordID As Integer
            Dim SSCArray() As String
            Dim hint As String
            Dim LoadIndexes As Boolean
            Dim SaveCache As Boolean
            '
            Dim cacheObject As Object()
            Dim cacheTest As Object
            Dim bag As String
            '
            ' Load cache
            '
            pageManager_cache_siteSection_rows = 0
            pageManager_cache_siteSection_IDIndex = New coreKeyPtrIndexClass
            pageManager_cache_siteSection_RootPageIDIndex = New coreKeyPtrIndexClass
            pageManager_cache_siteSection_NameIndex = New coreKeyPtrIndexClass
            '
            On Error Resume Next
            If Not pagemanager_IsWorkflowRendering() Then
                cacheTest = cache.getObject(Of Object())(pageManager_cache_siteSection_cacheName)
                If Not IsNothing(cacheTest) Then
                    cacheObject = DirectCast(cacheTest, Object())
                    If Not IsNothing(cacheObject) Then
                        cache_siteSection = DirectCast(cacheObject(0), String(,))
                        If Not IsNothing(cache_siteSection) Then
                            bag = DirectCast(cacheObject(1), String)
                            If Err.Number = 0 Then
                                Call pageManager_cache_siteSection_IDIndex.importPropertyBag(bag)
                                If Err.Number = 0 Then
                                    bag = DirectCast(cacheObject(2), String)
                                    If Err.Number = 0 Then
                                        Call pageManager_cache_siteSection_RootPageIDIndex.importPropertyBag(bag)
                                        If Err.Number = 0 Then
                                            bag = DirectCast(cacheObject(3), String)
                                            If Err.Number = 0 Then
                                                Call pageManager_cache_siteSection_NameIndex.importPropertyBag(bag)
                                                If Err.Number = 0 Then
                                                    pageManager_cache_siteSection_rows = UBound(cache_siteSection, 2) + 1
                                                End If
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            End If
            Err.Clear()
            On Error GoTo ErrorTrap
            If pageManager_cache_siteSection_rows = 0 Then
                SelectList = "ID, Name,TemplateID,ContentID,MenuImageFilename,Caption,MenuImageOverFilename,HideMenu,BlockSection,RootPageID,JSOnLoad,JSHead,JSEndBody,JSFilename"
                cache_siteSection = db.db_GetContentRows("Site Sections", "(active<>0)", , False, SystemMemberID, (pagemanager_IsWorkflowRendering()), , SelectList)
                pageManager_cache_siteSection_rows = UBound(cache_siteSection, 2) + 1
                For Ptr = 0 To pageManager_cache_siteSection_rows - 1
                    '
                    ' ID Index
                    '
                    IDText = EncodeText(cache_siteSection(SSC_ID, Ptr))
                    Call pageManager_cache_siteSection_IDIndex.setPtr(IDText, Ptr)
                    '
                    ' RootPageID Index
                    '
                    Id = EncodeInteger(cache_siteSection(SSC_RootPageID, Ptr))
                    If Id <> 0 Then
                        Call pageManager_cache_siteSection_RootPageIDIndex.setPtr(EncodeText(Id), Ptr)
                    End If
                    '
                    ' Name Index
                    '
                    Name = EncodeText(cache_siteSection(SSC_Name, Ptr))
                    If Name <> "" Then
                        Call pageManager_cache_siteSection_NameIndex.setPtr(Name, Ptr)
                    End If
                Next
                Call pageManager_cache_siteSection_save()
            End If
            '

            Exit Sub
ErrorTrap:
            Call handleLegacyError18("pageManager_cache_siteSection_load")
        End Sub
        '
        '
        '
        Private Sub pageManager_cache_siteSection_save()
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("MainClass.pageManager_cache_siteSection_save")
            '
            Dim hint As String
            Dim cacheArray() As Object
            ReDim cacheArray(3)
            '
            Call pageManager_cache_siteSection_IDIndex.getPtr("test")
            Call pageManager_cache_siteSection_RootPageIDIndex.getPtr("test")
            Call pageManager_cache_siteSection_NameIndex.getPtr("test")
            '
            cacheArray(0) = cache_siteSection
            cacheArray(1) = pageManager_cache_siteSection_IDIndex.exportPropertyBag
            cacheArray(2) = pageManager_cache_siteSection_RootPageIDIndex.exportPropertyBag
            cacheArray(3) = pageManager_cache_siteSection_NameIndex.exportPropertyBag
            Call cache.setKey(pageManager_cache_siteSection_cacheName, cacheArray)
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("pageManager_cache_siteSection_save")
        End Sub
        '
        '====================================================================================================
        '
        '====================================================================================================
        '
        Public Function pageManager_cache_siteSection_getPtr(Id As Integer) As Integer
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("pageManager_cache_siteSection_getPtr")
            '
            Dim CS As Integer
            Dim Ptr As Integer
            '
            pageManager_cache_siteSection_getPtr = -1
            If Id > 0 Then
                If pageManager_cache_siteSection_rows = 0 Then
                    Call pageManager_cache_siteSection_load()
                End If
                If pageManager_cache_siteSection_rows > 0 Then
                    Ptr = pageManager_cache_siteSection_IDIndex.getPtr(CStr(Id))
                    If Ptr >= 0 Then
                        pageManager_cache_siteSection_getPtr = Ptr
                    End If
                End If
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError13("pageManager_cache_siteSection_getPtr")
        End Function
        '
        '====================================================================================================
        '
        '====================================================================================================
        '
        Public Sub pageManager_cache_siteSection_clear()
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("pageManager_cache_siteSection_clear")
            '
            Call cache.invalidateTagCommaList("site sections")
            cache_siteSection = {}
            pageManager_cache_siteSection_rows = 0
            Call cache.setKey(pageManager_cache_siteSection_cacheName, cache_siteSection)
            'Call cmc_siteSectionCache_clear
            '
            Exit Sub
            '
ErrorTrap:
            Call handleLegacyError18("pageManager_cache_siteSection_clear")
        End Sub
        '
        '====================================================================================================
        '
        '====================================================================================================
        '
        Public Function pageManager_cache_siteSection_get() As Object
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetSSC")
            '
            If pageManager_cache_siteSection_rows = 0 Then
                Call pageManager_cache_siteSection_load()
            End If
            pageManager_cache_siteSection_get = cache_siteSection
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "pageManager_cache_siteSection_get", True, False)
        End Function
        '
        '
        '
        Private Sub pageManager_cache_pageTemplate_load()
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("pageManager_cache_pageTemplate_load")
            '
            ' Dim rsdomains as datatable
            Dim ruleList As String
            Dim IsSecure As Boolean
            Dim Id As Integer
            Dim Ptr As Integer
            Dim list As String
            Dim styleId As Integer
            Dim SelectList As String
            'dim dt as datatable
            Dim SQL As String
            Dim TCSize As Integer
            Dim LastTemplateID As Integer
            Dim templateId As Integer
            Dim cacheArray As String(,)
            Dim arrayData() As Object
            Dim arrayTest As Object
            Dim bag As String
            '
            ' Load cached TC
            '
            pageManager_cache_pageTemplate_rows = 0
            pageManager_cache_pageTemplate_contentIdindex = New coreKeyPtrIndexClass
            '
            On Error Resume Next
            If Not pagemanager_IsWorkflowRendering() Then
                arrayTest = cache.getObject(Of Object())(pageManager_cache_pageTemplate_cacheName)
                If Not IsNothing(arrayTest) Then
                    arrayData = DirectCast(arrayTest, Object())
                    If Not IsNothing(arrayData) Then
                        cache_pageTemplate = DirectCast(arrayData(0), String(,))
                        If Not IsNothing(cache_pageTemplate) Then
                            bag = DirectCast(arrayData(1), String)
                            If Err.Number = 0 Then
                                Call pageManager_cache_pageTemplate_contentIdindex.importPropertyBag(bag)
                                If Err.Number = 0 Then
                                    pageManager_cache_pageTemplate_rows = UBound(cache_pageContent, 2) + 1
                                End If
                            End If
                        End If
                    End If
                End If
            End If
            Err.Clear()
            On Error GoTo ErrorTrap
            '    If Not main_IsWorkflowRendering Then
            '        cache_pageTemplate = csv_Getcache(pageManager_cache_pageTemplate_cacheName)
            '        If IsEmpty(cache_pageTemplate) Then
            '            cache_pageTemplateCnt = 0
            '        ElseIf Not IsArray(cache_pageTemplate) Then
            '            cache_pageTemplateCnt = 0
            '        ElseIf IsNull(cache_pageTemplate) Then
            '            cache_pageTemplateCnt = 0
            '        Else
            '            cacheArray = cache_pageTemplate
            '            cache_pageTemplateCnt = UBound(cacheArray, 2) + 1
            '        End If
            '    End If
            If pageManager_cache_pageTemplate_rows = 0 Then
                '
                ' Load cache
                '
                SelectList = ""
                SQL = "select t.ID,t.Name,t.Link,t.BodyHTML,t.JSOnLoad,t.JSHead,t.JSEndBody,t.StylesFilename,r.StyleID,t.MobileStylesFilename,t.MobileBodyHTML,OtherHeadTags,BodyTag,t.JSFilename,t.IsSecure as IsSecure" _
                    & " from ccTemplates t" _
                    & " Left Join ccSharedStylesTemplateRules r on r.templateid=t.id" _
                    & " where (t.active<>0)" _
                    & " order by t.id"
                Dim dt As DataTable = db.executeSql(SQL)
                If dt.Rows.Count > 0 Then
                    For Each rsDr As DataRow In dt.Rows
                        templateId = EncodeInteger(rsDr("ID"))
                        styleId = EncodeInteger(rsDr("styleid"))
                        If (templateId = LastTemplateID) Then
                            '
                            ' Another style for the same template
                            '
                            If styleId <> 0 Then
                                list = cacheArray(TC_SharedStylesIDList, Ptr)
                                If list <> "" Then
                                    list = list & ","
                                End If
                                cacheArray(TC_SharedStylesIDList, Ptr) = list & styleId
                            End If
                        Else
                            '
                            ' New template
                            '
                            LastTemplateID = templateId
                            If pageManager_cache_pageTemplate_rows >= TCSize Then
                                TCSize = TCSize + 100
                                ReDim Preserve cacheArray(TC_cnt, TCSize)
                            End If
                            Ptr = pageManager_cache_pageTemplate_rows
                            cacheArray(TC_ID, Ptr) = EncodeInteger(rsDr("ID")).ToString
                            cacheArray(TC_JSEndBody, Ptr) = EncodeText(rsDr("JSEndBody"))
                            cacheArray(TC_JSInHeadLegacy, Ptr) = EncodeText(rsDr("JSHead"))
                            cacheArray(TC_JSInHeadFilename, Ptr) = EncodeText(rsDr("JSFilename"))
                            cacheArray(TC_JSOnLoad, Ptr) = EncodeText(rsDr("JSOnLoad"))
                            cacheArray(TC_Name, Ptr) = EncodeText(rsDr("Name"))
                            cacheArray(TC_Link, Ptr) = main_verifyTemplateLink(EncodeText(rsDr("Link")))
                            '
                            cacheArray(TC_BodyHTML, Ptr) = EncodeText(rsDr("BodyHTML"))
                            cacheArray(TC_SharedStylesIDList, Ptr) = styleId.ToString
                            cacheArray(TC_StylesFilename, Ptr) = EncodeText(rsDr("StylesFilename"))
                            '
                            cacheArray(TC_MobileBodyHTML, Ptr) = EncodeText(rsDr("MobileBodyHTML"))
                            ' do not support shared styles on Mobile templates yet
                            'cacheArray(TC_MobileSharedStylesIDList, Ptr) = StyleID
                            cacheArray(TC_MobileStylesFilename, Ptr) = EncodeText(rsDr("MobileStylesFilename"))
                            cacheArray(TC_OtherHeadTags, Ptr) = EncodeText(rsDr("OtherHeadTags"))
                            cacheArray(TC_BodyTag, Ptr) = EncodeText(rsDr("BodyTag"))
                            cacheArray(TC_IsSecure, Ptr) = EncodeBoolean(rsDr("IsSecure")).ToString
                            '
                            ' gather domains for this templates
                            '
                            SQL = "select domainid from ccDomainTemplateRules where templateid=" & templateId
                            Dim dtdomains As DataTable = db.executeSql(SQL)
                            If dtdomains.Rows.Count > 0 Then
                                cacheArray(TC_DomainIdList, Ptr) = EncodeText(dtdomains.Rows.Item(0))
                                'cacheArray(TC_DomainIdList, Ptr) = rsdomains.GetString(StringFormatEnum.adClipString, , "", ",")
                            Else
                                cacheArray(TC_DomainIdList, Ptr) = ""
                            End If
                            pageManager_cache_pageTemplate_rows = pageManager_cache_pageTemplate_rows + 1
                        End If

                    Next
                End If


                '
                cache_pageTemplate = cacheArray
                '
                If pageManager_cache_pageTemplate_rows > 0 Then
                    pageManager_cache_pageTemplate_contentIdindex = New coreKeyPtrIndexClass
                    For Ptr = 0 To pageManager_cache_pageTemplate_rows - 1
                        Id = EncodeInteger(cache_pageTemplate(TC_ID, Ptr))
                        Call pageManager_cache_pageTemplate_contentIdindex.setPtr(EncodeText(Id), Ptr)
                    Next
                End If
                If Not pagemanager_IsWorkflowRendering() Then
                    Call pageManager_cache_pageTemplate_save()
                End If
            End If
            '
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("pageManager_cache_pageTemplate_load")
        End Sub
        '
        '
        '
        Public Sub pageManager_cache_pageTemplate_save()
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("MainClass.pageManager_cache_pageTemplate_save")
            '
            Dim cacheArray() As Object
            ReDim cacheArray(1)
            '
            Call pageManager_cache_pageTemplate_contentIdindex.getPtr("test")
            '
            cacheArray(0) = cache_pageTemplate
            cacheArray(1) = pageManager_cache_pageTemplate_contentIdindex.exportPropertyBag
            Call cache.setKey(pageManager_cache_pageTemplate_cacheName, cacheArray)
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("pageManager_cache_pageTemplate_save")
        End Sub
        '
        '
        '
        Public Sub pageManager_cache_pageTemplate_clear()
            On Error GoTo ErrorTrap 'Const Tn = "pageManager_cache_pageTemplate_clear": 'Dim th as integer: th = profileLogMethodEnter(Tn)
            '
            pageManager_cache_pageTemplate_rows = 0
            cache_pageTemplate = {}
            Call cache.setKey(pageManager_cache_pageTemplate_cacheName, cache_pageTemplate)
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "pageManager_cache_pageTemplate_clear", True)
        End Sub
        '
        '====================================================================================================
        '   Returns a pointer into the cache_pageTemplate(x,ptr) array
        '====================================================================================================
        '
        Public Function pageManager_cache_pageTemplate_getPtr(Id As Integer) As Integer
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("pageManager_cache_pageTemplate_getPtr")
            '
            Dim CS As Integer
            Dim Ptr As Integer
            '
            pageManager_cache_pageTemplate_getPtr = -1
            If pageManager_cache_pageTemplate_rows = 0 Then
                Call pageManager_cache_pageTemplate_load()
            End If
            If pageManager_cache_pageTemplate_rows > 0 Then
                Ptr = pageManager_cache_pageTemplate_contentIdindex.getPtr(CStr(Id))
                If Ptr >= 0 Then
                    pageManager_cache_pageTemplate_getPtr = Ptr
                End If
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError13("pageManager_cache_pageTemplate_getPtr")
        End Function
        '
        '====================================================================================================
        '   main_GetTemplateLink
        '       Added to externals (aoDynamicMenu) can main_Get hard template links
        '====================================================================================================
        '
        Public Function main_GetTemplateLink(templateId As Integer) As String
            On Error GoTo ErrorTrap
            '
            Dim Ptr As Integer
            '
            If templateId > 0 Then
                If pageManager_cache_pageTemplate_rows <= 0 Then
                    Call pageManager_cache_pageTemplate_load()
                End If
                Ptr = pageManager_cache_pageTemplate_getPtr(templateId)
                If Ptr >= 0 Then
                    main_GetTemplateLink = EncodeText(cache_pageTemplate(TC_Link, Ptr))
                End If
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError12("main_GetTemplateLink", "Trap")
        End Function
        '
        '=========================================================================================
        '   main_GetTCLink
        '       - try just returning the link field, and handling TC_isSecure with the PCC_IsSecure later
        '       - will also need to handle TC_domainId at some point anyway
        '
        '=========================================================================================
        '
        Private Function main_GetTCLink(TCPtr As Integer) As String
            '
            If TCPtr >= 0 Then
                main_GetTCLink = EncodeText(cache_pageTemplate(TC_Link, TCPtr))
            End If
            Exit Function
            '
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetTCLink")
            '
            'If Not (true) Then Exit Function
            '
            Dim Link As String
            Dim templateSecure As Boolean
            '
            If TCPtr >= 0 Then
                Link = EncodeText(cache_pageTemplate(TC_Link, TCPtr))
                templateSecure = EncodeBoolean(cache_pageTemplate(TC_IsSecure, TCPtr))
                If Link <> "" Then
                    '
                    ' Link is included in template
                    '
                    If vbInstr(1, Link, "://", vbTextCompare) <> 0 Then
                        '
                        ' Template link is Full URL, IsSecure checkbox does nothing
                        '
                    Else
                        '
                        ' Template Link is short, verify it first
                        '
                        If Mid(Link, 1, 1) <> "/" Then
                            Link = "/" & Link
                        End If
                        Link = ConvertLinkToShortLink(Link, webServer.requestDomain, web_requestVirtualFilePath)
                        Link = EncodeAppRootPath(Link, web_requestVirtualFilePath, www_requestRootPath, webServer.requestDomain)
                        If templateSecure And (Not webServer.requestSecure) Then
                            '
                            ' Short Link, and IsSecure checked but current page is not secure
                            '
                            Link = "https://" & webServer.requestDomain & Link
                        ElseIf webServer.requestSecure And (Not templateSecure) Then
                            ' (*E) comment out this
                            '
                            ' Short link, Template is not secure, but current page is
                            '
                            Link = "http://" & webServer.requestDomain & Link
                        End If
                    End If
                Else
                    '
                    ' Link is not included in template
                    '
                    If templateSecure And (Not webServer.requestSecure) Then
                        '
                        ' Secure template but current page is not secure - return default link with ssl
                        '
                        Link = "https://" & webServer.requestDomain & www_requestRootPath & siteProperties.serverPageDefault
                    ElseIf webServer.requestSecure And (Not templateSecure) Then
                        ' (*E) comment out this
                        '
                        ' Short link, Template is not secure, but current page is  - return default link with ssl
                        '
                        ' (*D)
                        ' this is the problem
                        ' the site should hard redirect to a non-secure template if the page, parent pages AND the template are not secure
                        ' what is happening here is a page is set secure, it redirects to the secure link then this
                        ' happens during the secure page draw.
                        '
                        Link = "http://" & webServer.requestDomain & www_requestRootPath & siteProperties.serverPageDefault
                    End If
                End If
                main_GetTCLink = Link
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetTCLink")
        End Function
        '
        '
        '
        Public Function main_GetOnLoadJavascript() As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("main_GetOnLoadJavascript")
            '
            'If Not (true) Then Exit Function
            '
            'main_OnLoadJavascript_ToBeAdded = False
            main_GetOnLoadJavascript = main_OnLoadJavascript
            main_OnLoadJavascript = ""
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetOnLoadJavascript")
        End Function
        '
        '
        '
        Public Function main_IsContentFieldSupported(ContentName As String, FieldName As String) As Boolean
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("IsContentFieldSupported")
            '
            'If Not (true) Then Exit Function
            '
            main_IsContentFieldSupported = metaData_IsContentFieldSupported(ContentName, FieldName)
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_IsContentFieldSupported")
        End Function
        '
        '
        '
        Public Function main_GetMobileBrowserList() As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetMobileBrowserList")
            '
            'If Not (true) Then Exit Function
            '
            Dim Filename As String
            Dim DefaultMobileBrowserList As String
            Dim DateExpires As Date
            Dim datetext As String
            '
            main_GetMobileBrowserList = EncodeText(cache.getObject(Of String)("MobileBrowserList"))
            If main_GetMobileBrowserList <> "" Then
                datetext = getLine(main_GetMobileBrowserList)
                If EncodeDate(datetext) < Now() Then
                    main_GetMobileBrowserList = ""
                End If
            End If
            If main_GetMobileBrowserList = "" Then
                Filename = "config\MobileBrowserList.txt"
                main_GetMobileBrowserList = cluster.localClusterFiles.readFile(Filename)
                If main_GetMobileBrowserList = "" Then
                    main_GetMobileBrowserList = "midp,j2me,avantg,docomo,novarra,palmos,palmsource,240x320,opwv,chtml,pda,windows ce,mmp/,blackberry,mib/,symbian,wireless,nokia,hand,mobi,phone,cdm,up.b,audio,SIE-,SEC-,samsung,HTC,mot-,mitsu,sagem,sony,alcatel,lg,erics,vx,NEC,philips,mmm,xx,panasonic,sharp,wap,sch,rover,pocket,benq,java,pt,pg,vox,amoi,bird,compal,kg,voda,sany,kdd,dbt,sendo,sgh,gradi,jb,moto"
                    main_GetMobileBrowserList = vbReplace(main_GetMobileBrowserList, ",", vbCrLf)
                    'Call app.publicFiles.SaveFile(Filename, main_GetMobileBrowserList)
                End If
                datetext = DateTime.Now.AddHours(1).ToString
                Call cache.setKey("MobileBrowserList", datetext & vbCrLf & main_GetMobileBrowserList)
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetMobileBrowserList")
        End Function
        '
        '=================================================================================================================
        '   main_GetAddonOption
        '=================================================================================================================
        '
        Public Function main_GetAddonOption(OptionName As String, Option_String As String) As String
            main_GetAddonOption = csv_GetAddonOption(OptionName, Option_String)
        End Function
        '
        '=================================================================================================================
        '   main_GetAddonOptionConstructorValue
        '
        '   I think this might be wrong.
        '       If it decodes AddonOptions delimited by crlf, then it should not need DecodeAddonOptions, b/c this is for instance options
        '
        '
        '   used internally for lists like:
        '
        '   name=value[otherstuff]
        '   name2=value2
        '
        '   Just like main_GetAddonOption, except it trims off the selectors
        '
        '   Used internally to main_GetAddonOption for non-record based Add-ons that can not be called through main_GetAddonContent.
        '   The important difference is this call Decodes Addon Arguments and removes the Selector
        '
        '=================================================================================================================
        '
        Public Function main_GetAddonOptionConstructorValue(OptionName As String, AddonOptionConstructorList As String) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetAddonOptionConstructorValue")
            '
            Dim Pos As Integer
            Dim s As String
            '
            s = main_GetAddonOption(OptionName, AddonOptionConstructorList)
            Pos = vbInstr(1, s, "[")
            If Pos > 0 Then
                s = Left(s, Pos - 1)
            End If
            s = decodeNvaArgument(s)
            '
            main_GetAddonOptionConstructorValue = s
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetAddonOptionConstructorValue")
        End Function
        '
        '========================================================================
        ' main_DeleteChildRecords
        '========================================================================
        '
        Public Function pageManager_DeleteChildRecords(ByVal ContentName As String, ByVal RecordID As Integer, Optional ByVal ReturnListWithoutDelete As Boolean = False) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("DeleteChildRecords")
            '
            Dim QuickEditing As Boolean
            Dim SQL As String
            'dim dt as datatable
            Dim IDList As String
            Dim IDs() As String
            Dim IDCnt As Integer
            Dim Ptr As Integer
            Dim CS As Integer
            '
            Dim ChildList As String
            Dim SingleEntry As Boolean
            '
            '
            ' For now, the child delete only works in non-workflow
            '
            CS = db.csOpen(ContentName, "parentid=" & RecordID, , , , ,, "ID")
            Do While db.cs_Ok(CS)
                pageManager_DeleteChildRecords = pageManager_DeleteChildRecords & "," & db.cs_getInteger(CS, "ID")
                db.db_csGoNext(CS)
            Loop
            Call db.cs_Close(CS)
            If pageManager_DeleteChildRecords <> "" Then
                pageManager_DeleteChildRecords = Mid(pageManager_DeleteChildRecords, 2)
                '
                ' main_Get a list of all pages, but do not delete anything yet
                '
                IDs = Split(pageManager_DeleteChildRecords, ",")
                IDCnt = UBound(IDs) + 1
                SingleEntry = (IDCnt = 1)
                For Ptr = 0 To IDCnt - 1
                    ChildList = pageManager_DeleteChildRecords(ContentName, EncodeInteger(IDs(Ptr)), True)
                    If ChildList <> "" Then
                        pageManager_DeleteChildRecords = pageManager_DeleteChildRecords & "," & ChildList
                        SingleEntry = False
                    End If
                Next
                If Not ReturnListWithoutDelete Then
                    '
                    ' Do the actual delete
                    '
                    IDs = Split(pageManager_DeleteChildRecords, ",")
                    IDCnt = UBound(IDs) + 1
                    SingleEntry = (IDCnt = 1)
                    QuickEditing = user.isQuickEditing("page content")
                    For Ptr = 0 To IDCnt - 1
                        Call db_DeleteContentRecord("page content", EncodeInteger(IDs(Ptr)))
                        Call pageManager_cache_pageContent_removeRow(EncodeInteger(IDs(Ptr)), pagemanager_IsWorkflowRendering, QuickEditing)
                    Next
                End If
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_DeleteChildRecords")
        End Function
        '
        '========================================================================
        '   Process manual changes needed for Page Content Special Cases
        '       If workflow, only call this routine on a publish - it changes live records
        '========================================================================
        '
        Public Sub main_ProcessSpecialCaseAfterSave(IsDelete As Boolean, ContentName As String, RecordID As Integer, RecordName As String, RecordParentID As Integer, UseContentWatchLink As Boolean)
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("ProcessSpecialCaseAfterSave")
            '
            Dim addonId As Integer
            Dim Option_String As String
            Dim Filename As String
            Dim FilenameExt As String
            Dim FilenameNoExt As String
            Dim FilePath As String
            Dim Pos As Integer
            Dim AltSizeList As String
            'Dim innovaEditor As innovaEditorAddonClassFPO
            Dim sf As coreImageEditClass
            Dim RebuildSizes As Boolean
            Dim AddonStatusOK As Boolean
            Dim pageContentName As String
            Dim PageContentID As Integer
            Dim rootPageId As Integer
            Dim Cmd As String
            Dim CS As Integer
            Dim TableName As String
            Dim PageName As String
            Dim ContentID As Integer
            Dim ActivityLogOrganizationID As Integer
            Dim ActivityLogName As String
            Dim hint As String
            '
            'hint = hint & ",000"
            ContentID = main_GetContentID(ContentName)
            TableName = db_GetContentTablename(ContentName)
            Call pageManager_MarkRecordReviewed(ContentName, RecordID)
            '
            ' Test for parentid=id loop
            '
            ' needs to be finished
            '
            '    If (RecordParentID <> 0) And main_IsContentFieldSupported(ContentName, "parentid") Then
            '
            '    End If
            'hint = hint & ",100"
            Select Case vbLCase(TableName)
                Case "linkaliases"
                    'Call cache_linkAlias_clear
                Case "ccmembers"
                    '
                    ' Log Activity for changes to people and organizattions
                    '
                    'hint = hint & ",110"
                    CS = db_csOpenRecord("people", RecordID, , , "Name,OrganizationID")
                    If db.cs_Ok(CS) Then
                        ActivityLogOrganizationID = db.cs_getInteger(CS, "OrganizationID")
                    End If
                    Call db.cs_Close(CS)
                    If IsDelete Then
                        Call log_LogActivity2("deleting user #" & RecordID & " (" & RecordName & ")", RecordID, ActivityLogOrganizationID)
                    Else
                        Call log_LogActivity2("saving changes to user #" & RecordID & " (" & RecordName & ")", RecordID, ActivityLogOrganizationID)
                    End If
                Case "organizations"
                    '
                    ' Log Activity for changes to people and organizattions
                    '
                    'hint = hint & ",120"
                    If IsDelete Then
                        Call log_LogActivity2("deleting organization #" & RecordID & " (" & RecordName & ")", 0, RecordID)
                    Else
                        Call log_LogActivity2("saving changes to organization #" & RecordID & " (" & RecordName & ")", 0, RecordID)
                    End If
                Case "ccsetup"
                    '
                    ' Site Properties
                    '
                    'hint = hint & ",130"
                    Select Case vbLCase(RecordName)
                        Case "allowlinkalias"
                            Call cache.invalidateTagCommaList("Page Content")
                        Case "sectionlandinglink"
                            Call cache.invalidateTagCommaList("Page Content")
                        Case siteproperty_serverPageDefault_name
                            Call cache.invalidateTagCommaList("Page Content")
                    End Select
                Case "ccpagecontent"
                    '
                    ' set ChildPagesFound true for parent page
                    '
                    'hint = hint & ",140"
                    If RecordParentID > 0 Then
                        Call pageManager_cache_pageContent_updateRow(RecordParentID, False, False)
                        If Not IsDelete Then
                            Call db.executeSql("update ccpagecontent set ChildPagesfound=1 where ID=" & RecordParentID)
                        End If
                    End If
                    '
                    ' Page Content special cases for delete
                    '
                    If IsDelete Then
                        '
                        ' If this was a section's root page, clear the rootpageid so a new page will be created
                        '
                        Call db.executeSql("update ccsections set RootPageID=0 where RootPageID=" & RecordID)
                        Call pageManager_cache_siteSection_clear()
                        '
                        ' Clear the Landing page and page not found site properties
                        '

                        If vbLCase(TableName) = "ccpagecontent" Then
                            Call pageManager_cache_pageContent_removeRow(RecordID, pagemanager_IsWorkflowRendering, False)
                            If RecordID = EncodeInteger(siteProperties.getText("PageNotFoundPageID", "0")) Then
                                Call siteProperties.setProperty("PageNotFoundPageID", "0")
                            End If
                            If RecordID = EncodeInteger(siteProperties.getText("LandingPageID", "0")) Then
                                Call siteProperties.setProperty("LandingPageID", "0")
                            End If
                        End If
                        '
                        ' Delete Link Alias entries with this PageID
                        '
                        Call db.executeSql("delete from cclinkAliases where PageID=" & RecordID)
                        Call cache_linkAlias_clear()
                    Else
                        '
                        ' Attempt to update the PageContentCache (PCC) array stored in the PeristantVariants
                        '
                        Call pageManager_cache_pageContent_updateRow(RecordID, False, False)
                    End If
                Case "cctemplates", "ccsharedstyles"
                    '
                    ' Attempt to update the PageContentCache (PCC) array stored in the PeristantVariants
                    '
                    'hint = hint & ",150"
                    Call pageManager_cache_pageTemplate_clear()
                    If Not IsNothing(cache_addonStyleRules) Then
                        Call cache_addonStyleRules.clear()
                    End If

                Case "ccsections"
                    '
                    ' Attempt to update
                    '
                    'hint = hint & ",160"
                    CS = db_csOpen("Site Sections", RecordID)
                    If db.cs_Ok(CS) Then
                        PageContentID = db.cs_getInteger(CS, "ContentID")
                        If PageContentID = 0 Then
                            PageContentID = main_GetContentID("Page Content")
                            Call db.cs_set(CS, "ContentID", PageContentID)
                        End If
                        rootPageId = db.cs_getInteger(CS, "RootPageID")
                        If rootPageId = 0 Then
                            PageName = db.cs_getText(CS, "Name")
                            If PageName = "" Then
                                PageName = "Page " & db.cs_getInteger(CS, "ID")
                            End If
                            pageContentName = metaData.getContentNameByID(PageContentID)
                            If pageContentName = "" Then
                                pageContentName = "Page Content"
                            End If
                            Call db.cs_set(CS, "RootPageID", main_CreatePageGetID(PageName, "Page Content", user.id, ""))
                            Call pageManager_cache_pageContent_clear()
                        End If
                    End If
                    Call db.cs_Close(CS)
                    Call pageManager_cache_siteSection_clear()
                Case "ccaggregatefunctions"
                    '
                    ' Update wysiwyg addon menus
                    '
                    'hint = hint & ",170"
                    Call addonCache.clear()
                    If Not IsNothing(cache_addonStyleRules) Then
                        Call cache_addonStyleRules.clear()
                    End If

                    Call cache_addonIncludeRules_clear()
                Case "ccsharedstylesaddonrules"
                    '
                    ' Update wysiwyg addon menus
                    '
                    'hint = hint & ",175"
                    If Not IsNothing(cache_addonStyleRules) Then
                        Call cache_addonStyleRules.clear()
                    End If

                    Call addonCache.clear()
                Case "cclibraryfiles"
                    '
                    ' if a AltSizeList is blank, make large,medium,small and thumbnails
                    '
                    'hint = hint & ",180"
                    If (siteProperties.getBoolean("ImageAllowSFResize", True)) Then
                        If Not IsDelete Then
                            CS = db_csOpen("library files", RecordID)
                            If db.cs_Ok(CS) Then
                                Filename = db.db_GetCS(CS, "filename")
                                Pos = InStrRev(Filename, "/")
                                If Pos > 0 Then
                                    FilePath = Mid(Filename, 1, Pos)
                                    Filename = Mid(Filename, Pos + 1)
                                End If
                                Call db.cs_set(CS, "filesize", main_GetFileSize(appRootFiles.rootLocalFolderPath & FilePath & Filename))
                                Pos = InStrRev(Filename, ".")
                                If Pos > 0 Then
                                    FilenameExt = Mid(Filename, Pos + 1)
                                    FilenameNoExt = Mid(Filename, 1, Pos - 1)
                                    If vbInstr(1, "jpg,gif,png", FilenameExt, vbTextCompare) <> 0 Then
                                        sf = New coreImageEditClass
                                        If sf.load(appRootFiles.rootLocalFolderPath & FilePath & Filename) Then
                                            '
                                            '
                                            '
                                            Call db.cs_set(CS, "height", sf.height)
                                            Call db.cs_set(CS, "width", sf.width)
                                            AltSizeList = db.cs_getText(CS, "AltSizeList")
                                            RebuildSizes = (AltSizeList = "")
                                            If RebuildSizes Then
                                                AltSizeList = ""
                                                '
                                                ' Attempt to make 640x
                                                '
                                                If sf.width >= 640 Then
                                                    sf.height = CInt(sf.height * (640 / sf.width))
                                                    sf.width = 640
                                                    Call sf.save(appRootFiles.rootLocalFolderPath & FilePath & FilenameNoExt & "-640x" & sf.height & "." & FilenameExt)
                                                    AltSizeList = AltSizeList & vbCrLf & "640x" & sf.height
                                                End If
                                                '
                                                ' Attempt to make 320x
                                                '
                                                If sf.width >= 320 Then
                                                    sf.height = CInt(sf.height * (320 / sf.width))
                                                    sf.width = 320
                                                    Call sf.save(appRootFiles.rootLocalFolderPath & FilePath & FilenameNoExt & "-320x" & sf.height & "." & FilenameExt)

                                                    AltSizeList = AltSizeList & vbCrLf & "320x" & sf.height
                                                End If
                                                '
                                                ' Attempt to make 160x
                                                '
                                                If sf.width >= 160 Then
                                                    sf.height = CInt(sf.height * (160 / sf.width))
                                                    sf.width = 160
                                                    Call sf.save(appRootFiles.rootLocalFolderPath & FilePath & FilenameNoExt & "-160x" & sf.height & "." & FilenameExt)
                                                    AltSizeList = AltSizeList & vbCrLf & "160x" & sf.height
                                                End If
                                                '
                                                ' Attempt to make 80x
                                                '
                                                If sf.width >= 80 Then
                                                    sf.height = CInt(sf.height * (80 / sf.width))
                                                    sf.width = 80
                                                    Call sf.save(appRootFiles.rootLocalFolderPath & FilePath & FilenameNoExt & "-180x" & sf.height & "." & FilenameExt)
                                                    AltSizeList = AltSizeList & vbCrLf & "80x" & sf.height
                                                End If
                                                Call db.cs_set(CS, "AltSizeList", AltSizeList)
                                            End If
                                            Call sf.Dispose()
                                            sf = Nothing
                                        End If
                                        '                                sf.Algorithm = encodeInteger(main_GetSiteProperty("ImageResizeSFAlgorithm", "5"))
                                        '                                On Error Resume Next
                                        '                                sf.LoadFromFile (app.publicFiles.rootFullPath & FilePath & Filename)
                                        '                                If Err.Number = 0 Then
                                        '                                    Call app.db_SetCS(CS, "height", sf.Height)
                                        '                                    Call app.db_SetCS(CS, "width", sf.Width)
                                        '                                Else
                                        '                                    Err.Clear
                                        '                                End If
                                        '                                AltSizeList = db.db_GetCSText(CS, "AltSizeList")
                                        '                                RebuildSizes = (AltSizeList = "")
                                        '                                If RebuildSizes Then
                                        '                                    AltSizeList = ""
                                        '                                    '
                                        '                                    ' Attempt to make 640x
                                        '                                    '
                                        '                                    If sf.Width >= 640 Then
                                        '                                        sf.Width = 640
                                        '                                        Call sf.DoResize
                                        '                                        Call sf.SaveToFile(app.publicFiles.rootFullPath & FilePath & FilenameNoExt & "-640x" & sf.Height & "." & FilenameExt)
                                        '                                        AltSizeList = AltSizeList & vbCrLf & "640x" & sf.Height
                                        '                                    End If
                                        '                                    '
                                        '                                    ' Attempt to make 320x
                                        '                                    '
                                        '                                    If sf.Width >= 320 Then
                                        '                                        sf.Width = 320
                                        '                                        Call sf.DoResize
                                        '                                        Call sf.SaveToFile(app.publicFiles.rootFullPath & FilePath & FilenameNoExt & "-320x" & sf.Height & "." & FilenameExt)
                                        '                                        AltSizeList = AltSizeList & vbCrLf & "320x" & sf.Height
                                        '                                    End If
                                        '                                    '
                                        '                                    ' Attempt to make 160x
                                        '                                    '
                                        '                                    If sf.Width >= 160 Then
                                        '                                        sf.Width = 160
                                        '                                        Call sf.DoResize
                                        '                                        Call sf.SaveToFile(app.publicFiles.rootFullPath & FilePath & FilenameNoExt & "-160x" & sf.Height & "." & FilenameExt)
                                        '                                        AltSizeList = AltSizeList & vbCrLf & "160x" & sf.Height
                                        '                                    End If
                                        '                                    '
                                        '                                    ' Attempt to make 80x
                                        '                                    '
                                        '                                    If sf.Width >= 80 Then
                                        '                                        sf.Width = 80
                                        '                                        Call sf.DoResize
                                        '                                        Call sf.SaveToFile(app.publicFiles.rootFullPath & FilePath & FilenameNoExt & "-80x" & sf.Height & "." & FilenameExt)
                                        '                                        AltSizeList = AltSizeList & vbCrLf & "80x" & sf.Height
                                        '                                    End If
                                        '                                    Call app.db_SetCS(CS, "AltSizeList", AltSizeList)
                                        '                                End If
                                        '                                sf = Nothing
                                    End If
                                End If
                            End If
                            Call db.cs_Close(CS)
                        End If
                    End If
                    Call cache_libraryFiles_clear()
                Case Else
                    '
                    '
                    '
            End Select
            '
            ' Process Addons marked to trigger a process call on content change
            '
            'hint = hint & ",190"
            If True Then
                'hint = hint & ",200 content=[" & ContentID & "]"
                CS = db.csOpen("Add-on Content Trigger Rules", "ContentID=" & ContentID, , , , , , "addonid")
                Option_String = "" _
                    & vbCrLf & "action=contentchange" _
                    & vbCrLf & "contentid=" & ContentID _
                    & vbCrLf & "recordid=" & RecordID _
                    & ""
                Do While db.cs_Ok(CS)
                    addonId = db.cs_getInteger(CS, "Addonid")
                    'hint = hint & ",210 addonid=[" & addonId & "]"
                    Call executeAddonAsProcess(CStr(addonId), Option_String)
                    Call db.db_csGoNext(CS)
                Loop
                Call db.cs_Close(CS)
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_ProcessSpecialCaseAfterSave, Hint=" & hint)
        End Sub
        '
        '================================================================================================================
        '   main_Get SharedStyleFilelist
        '
        '   SharedStyleFilelist is a list of filenames (with conditional comments) that should be included on pages
        '   that call out the SharedFileIDList
        '
        '   Suffix and Prefix are for Conditional Comments around the style tag
        '
        '   SharedStyleFileList is
        '       crlf filename < Prefix< Suffix
        '       crlf filename < Prefix< Suffix
        '       ...
        '       Prefix and Suffix are htmlencoded
        '
        '   SharedStyleMap file
        '       crlf StyleID tab StyleFilename < Prefix < Suffix, IncludedStyleFilename < Prefix < Suffix, ...
        '       crlf StyleID tab StyleFilename < Prefix < Suffix, IncludedStyleFilename < Prefix < Suffix, ...
        '       ...
        '       StyleID is 0 if Always include is set
        '       The Prefix and Suffix have had crlf removed, and comma replaced with &#44;
        '================================================================================================================
        '
        Private Function main_GetSharedStyleFileList(SharedStyleIDList As String, main_IsAdminSite As Boolean) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetSharedStyleFileList")
            '
            Dim Prefix As String
            Dim Suffix As String
            Dim Files() As String
            Dim Pos As Integer
            Dim SrcID As Integer
            Dim Srcs() As String
            Dim SrcCnt As Integer
            Dim IncludedStyleFilename As String
            Dim styleId As Integer
            Dim LastStyleID As Integer
            Dim CS As Integer
            Dim Ptr As Integer
            Dim MapList As String
            Dim Map() As String
            Dim MapCnt As Integer
            Dim MapRow As Integer
            Dim StyleSheetLink As String
            Dim Filename As String
            Dim FileList As String
            Dim SQL As String
            Dim BakeName As String
            '
            If main_IsAdminSite Then
                BakeName = "SharedStyleMap-Admin"
            Else
                BakeName = "SharedStyleMap-Public"
            End If
            MapList = EncodeText(cache.getObject(Of String)(BakeName))
            If MapList = "" Then
                '
                ' BuildMap
                '
                MapList = ""
                If True Then
                    '
                    ' add prefix and suffix conditional comments
                    '
                    SQL = "select s.ID,s.Stylefilename,s.Prefix,s.Suffix,i.StyleFilename as iStylefilename,s.AlwaysInclude,i.Prefix as iPrefix,i.Suffix as iSuffix" _
                        & " from ((ccSharedStyles s" _
                        & " left join ccSharedStylesIncludeRules r on r.StyleID=s.id)" _
                        & " left join ccSharedStyles i on i.id=r.IncludedStyleID)" _
                        & " where ( s.active<>0 )and((i.active is null)or(i.active<>0))"
                End If
                CS = db.cs_openSql(SQL)
                LastStyleID = 0
                Do While db.cs_Ok(CS)
                    styleId = db.cs_getInteger(CS, "ID")
                    If styleId <> LastStyleID Then
                        Filename = db.db_GetCS(CS, "StyleFilename")
                        Prefix = vbReplace(main_encodeHTML(db.db_GetCS(CS, "Prefix")), ",", "&#44;")
                        Suffix = vbReplace(main_encodeHTML(db.db_GetCS(CS, "Suffix")), ",", "&#44;")
                        If (Not main_IsAdminSite) And db.cs_getBoolean(CS, "alwaysinclude") Then
                            MapList = MapList & vbCrLf & "0" & vbTab & Filename & "<" & Prefix & "<" & Suffix
                        Else
                            MapList = MapList & vbCrLf & styleId & vbTab & Filename & "<" & Prefix & "<" & Suffix
                        End If
                    End If
                    IncludedStyleFilename = db.cs_getText(CS, "iStylefilename")
                    Prefix = main_encodeHTML(db.db_GetCS(CS, "iPrefix"))
                    Suffix = main_encodeHTML(db.db_GetCS(CS, "iSuffix"))
                    If IncludedStyleFilename <> "" Then
                        MapList = MapList & "," & IncludedStyleFilename & "<" & Prefix & "<" & Suffix
                    End If
                    Call db.db_csGoNext(CS)
                Loop
                If MapList = "" Then
                    MapList = ","
                End If
                Call cache.setKey(BakeName, MapList, "Shared Styles")
            End If
            If (MapList <> "") And (MapList <> ",") Then
                Srcs = Split(SharedStyleIDList, ",")
                SrcCnt = UBound(Srcs) + 1
                Map = Split(MapList, vbCrLf)
                MapCnt = UBound(Map) + 1
                '
                ' Add stylesheets with AlwaysInclude set (ID is saved as 0 in Map)
                '
                FileList = ""
                For MapRow = 0 To MapCnt - 1
                    If vbInstr(1, Map(MapRow), "0" & vbTab) = 1 Then
                        Pos = vbInstr(1, Map(MapRow), vbTab)
                        If Pos > 0 Then
                            FileList = FileList & "," & Mid(Map(MapRow), Pos + 1)
                        End If
                    End If
                Next
                '
                ' create a filelist of everything that is needed, might be duplicates
                '
                For Ptr = 0 To SrcCnt - 1
                    SrcID = EncodeInteger(Srcs(Ptr))
                    If SrcID <> 0 Then
                        For MapRow = 0 To MapCnt - 1
                            If vbInstr(1, Map(MapRow), SrcID & vbTab) <> 0 Then
                                Pos = vbInstr(1, Map(MapRow), vbTab)
                                If Pos > 0 Then
                                    FileList = FileList & "," & Mid(Map(MapRow), Pos + 1)
                                End If
                            End If
                        Next
                    End If
                Next
                '
                ' dedup the filelist and convert it to crlf delimited
                '
                If FileList <> "" Then
                    Files = Split(FileList, ",")
                    For Ptr = 0 To UBound(Files)
                        Filename = Files(Ptr)
                        If vbInstr(1, main_GetSharedStyleFileList, Filename, vbTextCompare) = 0 Then
                            main_GetSharedStyleFileList = main_GetSharedStyleFileList & vbCrLf & Filename
                        End If
                    Next
                End If
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("main_GetSharedStyleFileList")
        End Function
        '
        '========================================================================
        '   Parse a list of html tags and produce a list of styles
        '========================================================================
        '
        Private Function main_GetStyleListFromHTML(Doc As String, BasePath As String, SourceHost As String) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetStyleListFromHTML")
            '
            '
            Dim StyleTag As String
            Dim LinkType As String
            Dim Link As String
            Dim ElementCount As Integer
            Dim TagCount As Integer
            Dim TagName As String
            Dim kmaParse As coreHtmlParseClass
            Dim ElementPointer As Integer
            Dim Output As New coreFastStringClass
            Dim ElementText As String
            Dim RootRelativeLink As String
            Dim TagDone As Boolean
            '
            kmaParse = New coreHtmlParseClass(Me)
            Call kmaParse.Load(Doc)
            ElementPointer = 0
            ElementCount = kmaParse.ElementCount
            '
            Do While ElementPointer < ElementCount
                ElementText = kmaParse.Text(ElementPointer)
                If kmaParse.IsTag(ElementPointer) Then
                    TagCount = TagCount + 1
                    TagName = kmaParse.TagName(ElementPointer)
                    Select Case vbUCase(TagName)
                        Case "LINK"
                            '
                            Link = kmaParse.ElementAttribute(ElementPointer, "HREF")
                            LinkType = kmaParse.ElementAttribute(ElementPointer, "TYPE")
                            If (IsLinkToThisHost(SourceHost, Link)) And (LCase(LinkType) = "text/css") Then
                                RootRelativeLink = ConvertLinkToRootRelative(Link, BasePath)
                                main_GetStyleListFromHTML = main_GetStyleListFromHTML & vbCrLf & main_GetStyleListFromLink(Link, BasePath, SourceHost, "")
                            End If
                        Case "STYLE"
                            '
                            ' Skip to the </Style> TAG, main_Get the stylesheet between for processing
                            '
                            TagDone = False
                            Do While (Not TagDone) And (ElementPointer < ElementCount)
                                '
                                ' Process the next segment
                                '
                                ElementPointer = ElementPointer + 1
                                ElementText = kmaParse.Text(ElementPointer)
                                If kmaParse.IsTag(ElementPointer) Then
                                    '
                                    ' Process a tag (should just be </SCRIPT>, but go until it is
                                    '
                                    TagCount = TagCount + 1
                                    TagDone = (kmaParse.TagName(ElementPointer) = "/" & TagName)
                                End If
                                If Not TagDone Then
                                    StyleTag = StyleTag & ElementText
                                End If
                            Loop
                            main_GetStyleListFromHTML = main_GetStyleListFromHTML & vbCrLf & main_GetStyleListFromStylesheet(StyleTag, BasePath, SourceHost, "")
                    End Select
                End If
                'Output.Add( ElementText
                ElementPointer = ElementPointer + 1
            Loop
            'main_GetStyleListFromHTML = Output.Text
            '
            kmaParse = Nothing
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "main_GetStyleListFromHTML", True, False)
        End Function
        '
        ' ================================================================================================
        '   conversion pass 3
        ' ================================================================================================
        '
        '
        '
        '
        Private Function main_GetStyleListFromLink(Link As String, BasePath As String, SourceHost As String, BlockRootRelativeLinkList As String) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("GetStyleListFromLink")
            '
            Dim Pos As Integer
            Dim ImportedStyle As String
            Dim HTTP As New coreHttpRequestClass()
            Dim Filename As String
            Dim RootRelativeLink As String
            Dim ImportLink As String
            Dim LinkPath As String
            '
            RootRelativeLink = ConvertLinkToRootRelative(Link, BasePath)
            main_GetStyleListFromLink = ""
            If vbInstr(1, BlockRootRelativeLinkList, RootRelativeLink, vbTextCompare) = 0 Then
                ImportLink = SourceHost & RootRelativeLink
                ImportedStyle = HTTP.getURL(ImportLink)
                Dim HTTPStatus As String
                HTTPStatus = getLine(HTTP.responseHeader)
                If vbInstr(1, HTTPStatus, "200") = 0 Then
                    main_GetStyleListFromLink = ""
                Else
                End If

                Pos = InStrRev(RootRelativeLink, "/")
                If Pos > 0 Then
                    LinkPath = Mid(RootRelativeLink, 1, Pos)
                End If
                main_GetStyleListFromLink = main_GetStyleListFromStylesheet(ImportedStyle, LinkPath, SourceHost, BlockRootRelativeLinkList & "," & RootRelativeLink)
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "main_GetStyleListFromLink", True, False)
        End Function
        '
        '
        '
        Private Function main_GetStyleListFromStylesheet(StyleSheet As String, BasePath As String, SourceHost As String, BlockRootRelativeLinkList As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetStyleListFromStylesheet")
            '
            Dim PosURLStart As Integer
            Dim PosURLEnd As Integer
            Dim URLCommand As String
            Dim Value As String
            Dim Loopcnt2 As Integer
            Dim Name As String
            Dim NameValue As String
            Dim PtrStart As Integer
            Dim PtrEnd As Integer
            Dim Line As String
            Dim Lines() As String
            Dim LineCnt As Integer
            Dim LinePtr As Integer
            Dim Ptr As Integer
            Dim Pos As Integer
            Dim PosStart As Integer
            Dim PosEnd As Integer
            Dim Link As String
            Dim RootRelativeLink As String
            Dim LoopCnt As Integer
            Dim ImportedStyle As String
            Dim HTTP As New coreHttpRequestClass()
            Dim Output As String
            '
            Pos = 1
            Output = StyleSheet
            '
            ' convert imports
            '
            Do While (Pos <> 0) And LoopCnt < 100
                Pos = vbInstr(Pos, StyleSheet, "@import", vbTextCompare)
                If Pos <> 0 Then
                    '
                    ' style includes an import -- convert filename and load the file
                    '
                    Pos = vbInstr(Pos, StyleSheet, "url", vbTextCompare)
                    If Pos <> 0 Then
                        PosStart = vbInstr(Pos, StyleSheet, "(", vbTextCompare)
                        If PosStart <> 0 Then
                            PosStart = PosStart + 1
                            PosEnd = vbInstr(PosStart, StyleSheet, ")", vbTextCompare)
                            If PosEnd <> 0 Then
                                PosEnd = PosEnd - 1
                                Link = Mid(StyleSheet, PosStart, PosEnd - PosStart + 1)
                                Output = Output & vbCrLf & main_GetStyleListFromLink(Link, BasePath, SourceHost, BlockRootRelativeLinkList)
                                Pos = PosStart
                            End If
                        End If
                    End If
                End If
                LoopCnt = LoopCnt + 1
            Loop
            '
            ' Done
            '
            main_GetStyleListFromStylesheet = Output
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "main_GetStyleListFromStylesheet", True, False)
        End Function
        '
        '=================================================================================================================================================
        '   main_AddLinkAlias
        '
        '   Link Alias
        '       A LinkAlias name is a unique string that identifies a page on the site.
        '       A page on the site is generated from the PageID, and the QueryStringSuffix
        '       PageID - obviously, this is the ID of the page
        '       QueryStringSuffix - other things needed on the Query to display the correct content.
        '           The Suffix is needed in cases like when an Add-on is embedded in a page. The URL to that content becomes the pages
        '           Link, plus the suffix needed to find the content.
        '
        '       When you make the menus, look up the most recent Link Alias entry with the pageID, and a blank QueryStringSuffix
        '
        '   The Link Alias table no longer needs the Link field.
        '
        '=================================================================================================================================================
        '
        ' +++++ 9/8/2011 4.1.482, added main_AddLinkAlias to csv and changed main to call
        '
        Public Sub main_AddLinkAlias(ByVal linkAlias As String, ByVal PageID As Integer, ByVal QueryStringSuffix As String, Optional ByVal OverRideDuplicate As Boolean = False, Optional ByVal DupCausesWarning As Boolean = False)
            On Error GoTo ErrorTrap
            '
            Dim warningMessage As String
            '
            Call app_addLinkAlias2(linkAlias, PageID, QueryStringSuffix, OverRideDuplicate, DupCausesWarning, warningMessage)
            If warningMessage <> "" Then
                Call error_AddUserError(warningMessage)
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "main_AddLinkAlias", True, False)
        End Sub
        '
        '
        '
        Public Sub pageManager_MarkRecordReviewed(ContentName As String, RecordID As Integer)
            '
            Dim SQL As String
            'Dim SQLNow As String
            Dim DataSourceName As String
            Dim TableName As String

            '
            If main_IsContentFieldSupported(ContentName, "DateReviewed") Then
                'SQLNow = encodeSQLDate(Now)
                DataSourceName = main_GetContentDataSource(ContentName)
                TableName = db_GetContentTablename(ContentName)
                '
                SQL = "update " & TableName & " set DateReviewed=" & db.encodeSQLDate(main_PageStartTime)
                If main_IsContentFieldSupported(ContentName, "ReviewedBy") Then
                    SQL &= ",ReviewedBy=" & user.id
                End If
                '
                ' Mark the live record
                '
                Call db.executeSql(SQL, DataSourceName & " where id=" & RecordID)
                '
                ' Mark the edit record if in workflow
                '
                If main_IsContentFieldSupported(ContentName, "editsourceid") Then
                    Call db.executeSql(SQL, DataSourceName & " where (editsourceid=" & RecordID & ")and(editarchive=0)")
                End If
            End If
        End Sub
        '
        '   Used in reports
        '
        Public Function main_GetPleaseWaitStart() As String
            '
            main_GetPleaseWaitStart = cluster.localClusterFiles.readFile("ccLib\Popup\WaitPageOpen.htm")
            '
        End Function
        '
        '   Used in reports
        '
        Public Sub main_WritePleaseWaitStart()
            '
            If Not main_PleaseWaitStarted Then
                main_PleaseWaitStarted = True
                Call writeAltBuffer(main_GetPleaseWaitStart)
                Call main_FlushStream()
            End If
            '
        End Sub
        '
        '   Used in reports
        '
        Public Function main_GetPleaseWaitEnd() As String
            '
            main_GetPleaseWaitEnd = cluster.localClusterFiles.readFile("ccLib\Popup\WaitPageClose.htm")
            '
        End Function
        '
        '   Used in reports
        '
        Public Sub main_WritePleaseWaitEnd()
            If main_PleaseWaitStarted Then
                Call writeAltBuffer(main_GetPleaseWaitEnd)
                Call main_FlushStream()
            End If
        End Sub
        ''
        ''   Pass-through to AppService main_LogActivity
        ''
        'Public Sub main_LogActivity(Message As String)
        '    Call log_LogActivity2(Message, 0, 0)
        'End Sub
        '
        '
        '
        Public Sub log_LogActivity2(Message As String, SubjectMemberID As Integer, SubjectOrganizationID As Integer)
            Call log_logActivity(Message, user.id, SubjectMemberID, SubjectOrganizationID, main_ServerLink, visitor_id, visit_Id)
        End Sub
        '
        '=================================================================================================
        '   Run and return results from a remotequery call from cj.ajax.data(handler,key,args,pagesize,pagenumber)
        '
        '   This routine builds an xml object inside a <result></result> node.
        '       Right now, the response is in JSON format, and conforms to the google data visualization spec 0.5
        '
        '
        '=================================================================================================
        '
        Private Function init_ProcessAjaxData() As String
            Dim result As String = ""
            Try
                Dim SetNameValue() As String
                Dim SetPairs() As String
                Dim Pos As Integer
                Dim FieldValue As String
                Dim SetPairString As String
                Dim RecordID As Integer
                Dim HelpMessage As String
                Dim ArgCnt As Integer
                Dim RowDelim As String
                Dim ColDelim As String
                Dim s As New coreFastStringClass
                Dim Rows As String
                Dim Cols As String
                'Dim CDef As CDefType
                Dim FieldList As String
                Dim SelectFields() As String
                Dim SrcPtr As Integer
                Dim FieldName As String
                Dim FieldCaption As String
                Dim LCaseFieldName As String
                Dim ColumnName() As String
                Dim ColumnCaption() As String
                Dim ColumnType() As String
                '
                Dim fieldType As String
                Dim test As String
                Dim Copy As String
                Dim PageSize As Integer
                Dim FieldCount As Integer
                Dim RowMax As Integer
                Dim ColMax As Integer
                'Dim RecordField As Field
                Dim RowStart As String
                Dim RowEnd As String
                Dim ColumnStart As String
                Dim ColumnEnd As String
                Dim RowPtr As Integer
                Dim ColPtr As Integer
                Dim CellData As Object
                Dim Cnt As Integer
                'dim dt as datatable
                Dim ErrorNumber As Integer
                Dim ErrorDescription As String
                Dim Cells As Object
                Dim ArgArray() As String
                Dim RemoteKey As String
                Dim EncodedArgs As String
                Dim Args As String
                Dim PageNumber As Integer
                Dim CS As Integer
                Dim DataSource As String
                Dim SQLQuery As String
                Dim maxRows As Integer
                Dim ArgName() As String
                Dim ArgValue() As String
                Dim ArgPairs() As String
                Dim Ptr As Integer
                Dim QueryType As Integer
                Dim ContentName As String
                Dim Criteria As String
                Dim SortFieldList As String
                Dim AllowInactiveRecords As String
                Dim AllowInactiveRecords2 As Boolean

                Dim SelectFieldList As String
                Dim gd As New GoogleDataType
                Dim gv As New GoogleVisualizationType
                Dim RemoteFormat As RemoteFormatEnum
                '
                gv.status = GoogleVisualizationStatusEnum.OK
                gd.IsEmpty = True
                '
                RemoteKey = docProperties.getText("key")
                EncodedArgs = docProperties.getText("args")

                PageSize = docProperties.getInteger("pagesize")
                PageNumber = docProperties.getInteger("pagenumber")
                Select Case vbLCase(docProperties.getText("responseformat"))
                    Case "jsonnamevalue"
                        RemoteFormat = RemoteFormatEnum.RemoteFormatJsonNameValue
                    Case "jsonnamearray"
                        RemoteFormat = RemoteFormatEnum.RemoteFormatJsonNameArray
                    Case Else 'jsontable
                        RemoteFormat = RemoteFormatEnum.RemoteFormatJsonTable
                End Select
                '
                ' Handle common work
                '
                If PageNumber = 0 Then
                    PageNumber = 1
                End If
                If PageSize = 0 Then
                    PageSize = 100
                End If
                If maxRows <> 0 And PageSize > maxRows Then
                    PageSize = maxRows
                End If
                '
                If EncodedArgs <> "" Then
                    Args = EncodedArgs
                    ArgArray = Split(Args, "&")
                    ArgCnt = UBound(ArgArray) + 1
                    ReDim ArgName(ArgCnt)
                    ReDim ArgValue(ArgCnt)
                    For Ptr = 0 To ArgCnt - 1
                        Pos = vbInstr(1, ArgArray(Ptr), "=")
                        If Pos > 0 Then
                            ArgName(Ptr) = DecodeResponseVariable(Mid(ArgArray(Ptr), 1, Pos - 1))
                            ArgValue(Ptr) = DecodeResponseVariable(Mid(ArgArray(Ptr), Pos + 1))
                        End If
                    Next
                End If
                '
                ' main_Get values out of the remote query record
                '
                If gv.status = GoogleVisualizationStatusEnum.OK Then
                    CS = db.csOpen("Remote Queries", "((VisitId=" & visit_Id & ")and(remotekey=" & db.encodeSQLText(RemoteKey) & "))")
                    If db.cs_Ok(CS) Then
                        '
                        ' Use user definied query
                        '
                        SQLQuery = db.cs_getText(CS, "sqlquery")
                        DataSource = db.getDataSourceNameByID(db.cs_getInteger(CS, "datasourceid"))
                        maxRows = db.cs_getInteger(CS, "maxrows")
                        QueryType = db.cs_getInteger(CS, "QueryTypeID")
                        ContentName = db.db_GetCS(CS, "ContentID")
                        Criteria = db.cs_getText(CS, "Criteria")
                        SortFieldList = db.cs_getText(CS, "SortFieldList")
                        AllowInactiveRecords2 = db.cs_getBoolean(CS, "AllowInactiveRecords")
                        SelectFieldList = db.cs_getText(CS, "SelectFieldList")
                        SetPairString = ""
                    Else
                        '
                        ' Try Hardcoded queries
                        '
                        Select Case vbLCase(RemoteKey)
                            Case "ccfieldhelpupdate"
                                '
                                ' developers editing field help
                                '
                                If Not user.isDeveloper Then
                                    gv.status = GoogleVisualizationStatusEnum.ErrorStatus
                                    If IsArray(gv.errors) Then
                                        Ptr = 0
                                    Else
                                        Ptr = UBound(gv.errors) + 1
                                    End If
                                    ReDim gv.errors(Ptr)
                                    gv.errors(Ptr) = "permission error"
                                Else
                                    QueryType = QueryTypeUpdateContent
                                    ContentName = "Content Field Help"
                                    Criteria = ""
                                    AllowInactiveRecords2 = False
                                End If
                                'Case Else
                                '    '
                                '    ' query not found
                                '    '
                                '    gv.status = GoogleVisualizationStatusEnum.ErrorStatus
                                '    If IsArray(gv.errors) Then
                                '        Ptr = 0
                                '    Else
                                '        Ptr = UBound(gv.errors) + 1
                                '    End If
                                '    ReDim gv.errors(Ptr)
                                '    gv.errors(Ptr) = "query not found"
                        End Select
                    End If
                    Call db.cs_Close(CS)
                    '
                    If gv.status = GoogleVisualizationStatusEnum.OK Then
                        Select Case QueryType
                        'Case QueryTypeSQL
                        '    '
                        '    ' ----- Run a SQL
                        '    '
                        '    If SQLQuery <> "" Then
                        '        For Ptr = 0 To ArgCnt - 1
                        '            SQLQuery = vbReplace(SQLQuery, ArgName(Ptr), ArgValue(Ptr), vbTextCompare)
                        '            'Criteria = vbReplace(Criteria, ArgName(Ptr), ArgValue(Ptr), vbTextCompare)
                        '        Next
                        '        On Error Resume Next
                        '        RS = main_ExecuteSQLCommand(DataSource, SQLQuery, 30, PageSize, PageNumber)
                        '        ErrorNumber = Err.Number
                        '        ErrorDescription = Err.Description
                        '        Err.Clear()
                        '        On Error GoTo ErrorTrap
                        '        If ErrorNumber <> 0 Then
                        '            '
                        '            ' ----- Error
                        '            '
                        '            gv.status = GoogleVisualizationStatusEnum.ErrorStatus
                        '            Ptr = UBound(gv.errors) + 1
                        '            ReDim gv.errors(Ptr)
                        '            gv.errors(Ptr) = "Error: " & Err.Description
                        '        ElseIf (Not isDataTableOk(rs)) Then
                        '            '
                        '            ' ----- no result
                        '            '
                        '        ElseIf (RS.State <> 1) Then
                        '            '
                        '            ' ----- no result
                        '            '
                        '        ElseIf (rs.rows.count = 0) Then
                        '            '
                        '            ' ----- no result
                        '            '
                        '        Else
                        '            PageSize = RS.PageSize
                        '            Cells = RS.GetRows(PageSize)
                        '            '
                        '            gd.IsEmpty = False
                        '            RowMax = UBound(Cells, 2)
                        '            ColMax = UBound(Cells, 1)
                        '            '
                        '            ' Build headers
                        '            '
                        '            ReDim gd.col(ColMax)
                        '            For ColPtr = 0 To ColMax
                        '                RecordField = RS.Fields.Item(ColPtr)
                        '                gd.col(ColPtr).Id = RecordField.Name
                        '                gd.col(ColPtr).Label = RecordField.Name
                        '                gd.col(ColPtr).Type = ConvertRSTypeToGoogleType(RecordField.Type)
                        '            Next
                        '            'RS.Close()
                        '            'RS = Nothing
                        '            '
                        '            ' Build output table
                        '            '
                        '            ReDim gd.row(RowMax)
                        '            For RowPtr = 0 To RowMax
                        '                With gd.row(RowPtr)
                        '                    ReDim .Cell(ColMax)
                        '                    For ColPtr = 0 To ColMax
                        '                        .Cell(ColPtr).v = EncodeText(Cells(ColPtr, RowPtr))
                        '                    Next
                        '                End With
                        '            Next
                        '        End If
                        '        If (isDataTableOk(rs)) Then
                        '            If False Then
                        '                'RS.Close()
                        '            End If
                        '            'RS = Nothing
                        '        End If
                        '    End If
                        'Case QueryTypeOpenContent
                        '    '
                        '    ' Contensive Content Select, args are criteria replacements
                        '    '

                        '    CDef = app.getCdef(ContentName)
                        '    CS = app.db_csOpen(ContentName, Criteria, SortFieldList, AllowInactiveRecords, , , SelectFieldList)
                        '    Cells = app.csv_GetCSRows(CS)
                        '    FieldList = app.db_GetCSSelectFieldList(CS)
                        '    '
                        '    RowMax = UBound(Cells, 2)
                        '    ColMax = UBound(Cells, 1)
                        '    If RowMax = 0 And ColMax = 0 Then
                        '        '
                        '        ' Single result, display with no table
                        '        '
                        '        Copy = EncodeText(Cells(0, 0))
                        '    Else
                        '        '
                        '        ' Build headers
                        '        '
                        '        gd.IsEmpty = False
                        '        RowMax = UBound(Cells, 2)
                        '        ColMax = UBound(Cells, 1)
                        '        '
                        '        ' Build headers
                        '        '
                        '        ReDim gd.col(ColMax)
                        '        For ColPtr = 0 To ColMax
                        '            RecordField = RS.Fields.Item(RowPtr)
                        '            gd.col(ColPtr).Id = RecordField.Name
                        '            gd.col(ColPtr).Label = RecordField.Name
                        '            gd.col(ColPtr).Type = ConvertRSTypeToGoogleType(RecordField.Type)
                        '        Next
                        '        '
                        '        ' Build output table
                        '        '
                        '        'RowStart = vbCrLf & "<Row>"
                        '        'Rowend = "</Row>"
                        '        For RowPtr = 0 To RowMax
                        '            With gd.row(RowPtr)
                        '                For ColPtr = 0 To ColMax
                        '                    .Cell(ColPtr).v = Cells(ColPtr, RowPtr)
                        '                Next
                        '            End With
                        '        Next
                        '    End If
                            Case QueryTypeUpdateContent
                                '
                                ' Contensive Content Update, args are field=value updates
                                ' !!!! only allow inbound hits with a referrer from this site - later use the aggregate access table
                                '
                                '
                                ' Go though args and main_Get Set and Criteria
                                '
                                SetPairString = ""
                                Criteria = ""
                                For Ptr = 0 To ArgCnt - 1
                                    If vbLCase(ArgName(Ptr)) = "setpairs" Then
                                        SetPairString = ArgValue(Ptr)
                                    ElseIf vbLCase(ArgName(Ptr)) = "criteria" Then
                                        Criteria = ArgValue(Ptr)
                                    End If
                                Next
                                '
                                ' Open the content and cycle through each setPair
                                '
                                CS = db.csOpen(ContentName, Criteria, SortFieldList, AllowInactiveRecords2, , ,, SelectFieldList)
                                If db.cs_Ok(CS) Then
                                    '
                                    ' update by looping through the args and setting name=values
                                    '
                                    SetPairs = Split(SetPairString, "&")
                                    For Ptr = 0 To UBound(SetPairs)
                                        If SetPairs(Ptr) <> "" Then
                                            Pos = vbInstr(1, SetPairs(Ptr), "=")
                                            If Pos > 0 Then
                                                FieldValue = DecodeResponseVariable(Mid(SetPairs(Ptr), Pos + 1))
                                                FieldName = DecodeResponseVariable(Mid(SetPairs(Ptr), 1, Pos - 1))
                                                If Not main_IsContentFieldSupported(ContentName, FieldName) Then
                                                    Dim errorMessage As String = "result, QueryTypeUpdateContent, key [" & RemoteKey & "], bad field [" & FieldName & "] skipped"
                                                    Call handleExceptionAndRethrow(New ApplicationException(errorMessage))
                                                Else
                                                    Call db.cs_set(CS, FieldName, FieldValue)
                                                End If
                                            End If
                                        End If
                                    Next
                                End If
                                Call db.cs_Close(CS)
                                'Case QueryTypeInsertContent
                                '    '
                                '    ' !!!! only allow inbound hits with a referrer from this site - later use the aggregate access table
                                '    '
                                '    '
                                '    ' Contensive Content Insert, args are field=value
                                '    '
                                '    'CS = main_InsertCSContent(ContentName)
                            Case Else
                        End Select
                        '
                        ' output
                        '
                        Copy = main_FormatRemoteQueryOutput(gd, RemoteFormat)
                        Copy = html_EncodeHTML(Copy)
                        result = "<data>" & Copy & "</data>"
                    End If
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return result
        End Function
        '
        '
        '
        Public Function main_GetRemoteQueryKey(ByVal SQL As String, Optional ByVal DataSourceName As String = "", Optional ByVal maxRows As Integer = 1000) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetRemoteQueryKey")
            '
            Dim CS As Integer
            Dim RemoteKey As String
            Dim DataSourceID As Integer
            'Dim GUIDGenerator As New guidClass
            '
            If maxRows = 0 Then
                maxRows = 1000
            End If
            CS = db_InsertCSContent("Remote Queries")
            If db.cs_Ok(CS) Then
                RemoteKey = Guid.NewGuid.ToString()
                DataSourceID = main_GetRecordID("Data Sources", DataSourceName)
                Call db.cs_set(CS, "remotekey", RemoteKey)
                Call db.cs_set(CS, "datasourceid", DataSourceID)
                Call db.cs_set(CS, "sqlquery", SQL)
                Call db.cs_set(CS, "maxRows", maxRows)
                Call db.cs_set(CS, "dateexpires", db.encodeSQLDate(main_PageStartTime.AddDays(1)))
                Call db.cs_set(CS, "QueryTypeID", QueryTypeSQL)
                Call db.cs_set(CS, "VisitId", visit_Id)
            End If
            Call db.cs_Close(CS)
            '
            main_GetRemoteQueryKey = RemoteKey
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "main_GetRemoteQueryKey", True, False)
        End Function
        '
        '
        '
        Public Function main_FormatRemoteQueryOutput(gd As GoogleDataType, RemoteFormat As RemoteFormatEnum) As String
            '
            Dim s As coreFastStringClass
            Dim ColDelim As String
            Dim RowDelim As String
            Dim ColPtr As Integer
            Dim RowPtr As Integer
            '
            ' Select output format
            '
            s = New coreFastStringClass
            Select Case RemoteFormat
                Case RemoteFormatEnum.RemoteFormatJsonNameValue
                    '
                    '
                    '
                    Call s.Add("{")
                    If Not gd.IsEmpty Then
                        ColDelim = ""
                        For ColPtr = 0 To UBound(gd.col)
                            Call s.Add(ColDelim & gd.col(ColPtr).Id & ":'" & gd.row(0).Cell(ColPtr).v & "'")
                            ColDelim = ","
                        Next
                    End If
                    Call s.Add("}")
                Case RemoteFormatEnum.RemoteFormatJsonNameArray
                    '
                    '
                    '
                    Call s.Add("{")
                    If Not gd.IsEmpty Then
                        ColDelim = ""
                        For ColPtr = 0 To UBound(gd.col)
                            Call s.Add(ColDelim & gd.col(ColPtr).Id & ":[")
                            ColDelim = ","
                            RowDelim = ""
                            For RowPtr = 0 To UBound(gd.row)
                                With gd.row(RowPtr).Cell(ColPtr)
                                    s.Add(RowDelim & "'" & .v & "'")
                                    RowDelim = ","
                                End With
                            Next
                            Call s.Add("]")
                        Next
                    End If
                    Call s.Add("}")
                Case RemoteFormatEnum.RemoteFormatJsonTable
                    '
                    '
                    '
                    Call s.Add("{")
                    If Not gd.IsEmpty Then
                        Call s.Add("cols: [")
                        ColDelim = ""
                        For ColPtr = 0 To UBound(gd.col)
                            With gd.col(ColPtr)
                                Call s.Add(ColDelim & "{id: '" & EncodeJavascript(.Id) & "', label: '" & EncodeJavascript(.Label) & "', type: '" & EncodeJavascript(.Type) & "'}")
                                ColDelim = ","
                            End With
                        Next
                        Call s.Add("],rows:[")
                        RowDelim = ""
                        For RowPtr = 0 To UBound(gd.row)
                            s.Add(RowDelim & "{c:[")
                            RowDelim = ","
                            ColDelim = ""
                            For ColPtr = 0 To UBound(gd.col)
                                With gd.row(RowPtr).Cell(ColPtr)
                                    Call s.Add(ColDelim & "{v: '" & EncodeJavascript(.v) & "'}")
                                    ColDelim = ","
                                End With
                            Next
                            s.Add("]}")
                        Next
                        Call s.Add("]")
                    End If
                    Call s.Add("}")
            End Select
            main_FormatRemoteQueryOutput = s.Text
            '
        End Function
        '
        '
        '
        Private Sub log_appendLogPageNotFound(PageNotFoundLink As String)
            Try
                Call log_appendLog("""" & FormatDateTime(main_PageStartTime, vbGeneralDate) & """,""App=" & appConfig.name & """,""main_VisitId=" & visit_Id & """,""" & PageNotFoundLink & """,""Referrer=" & webServer.requestReferrer & """", "performance", "pagenotfound")
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
        End Sub
        '
        '
        '
        Public ReadOnly Property main_docType() As String
            Get
                Return siteProperties.docTypeDeclaration()
            End Get
        End Property
        '
        '
        '
        Public ReadOnly Property main_DocTypeAdmin() As String
            Get
                Return siteProperties.docTypeDeclarationAdmin
            End Get
        End Property
        '
        '
        '
        'Private Sub main_ErrorTemplate(Argument as object)
        '    On Error GoTo ErrorTrap: 'Dim th as integer: th = profileLogMethodEnter("Proc00313")
        '    '
        '    'If Not (true) Then Exit Sub
        '    '
        '    Dim iArgument As String
        '    '
        '    iArgument = encodeText(Argument)
        '    '
        '    Exit Sub
        '    '
        'ErrorTrap:
        '    Call main_HandleClassErrorAndBubble_TrapPatch1("main_ErrorTemplate")
        'End Sub
        '
        '
        '
        '========================================================================
        ' ----- main_Get an XML nodes attribute based on its name
        '========================================================================
        '
        Private Function main_GetXMLAttribute(ByVal Found As Boolean, ByVal Node As XmlNode, ByVal Name As String, ByVal DefaultIfNotFound As String) As String
            On Error GoTo ErrorTrap
            '
            Dim NodeAttribute As XmlAttribute
            Dim ResultNode As XmlNode
            Dim UcaseName As String
            '
            Found = False
            ResultNode = Node.Attributes.GetNamedItem(Name)
            If (ResultNode Is Nothing) Then
                UcaseName = vbUCase(Name)
                For Each NodeAttribute In Node.Attributes
                    If vbUCase(NodeAttribute.Name) = UcaseName Then
                        main_GetXMLAttribute = NodeAttribute.Value
                        Found = True
                        Exit For
                    End If
                Next
            Else
                main_GetXMLAttribute = ResultNode.Value
                Found = True
            End If
            If Not Found Then
                main_GetXMLAttribute = DefaultIfNotFound
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError13("main_GetXMLAttribute")
        End Function
        '        '
        '        '=============================================================================================
        '        '   Legacy
        '        '=============================================================================================
        '        '
        '        Public Function main_GetStreamText2(ByVal RequestName As String) As String
        '            On Error GoTo ErrorTrap
        '            '
        '            main_GetStreamText = main_GetStreamText2(EncodeText(RequestName))
        '            '
        '            Exit Function
        'ErrorTrap:
        '            Call handleLegacyError18("main_GetStreamText")
        '        End Function
        '
        '=============================================================================================
        '   Legacy
        '=============================================================================================
        '
        Public Function main_GetStreamNumber(ByVal RequestName As String) As Double
            On Error GoTo ErrorTrap
            '
            main_GetStreamNumber = EncodeNumber(docProperties.getText(EncodeText(RequestName)))
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetStreamNumber")
        End Function
        '
        '=============================================================================================
        '   Legacy
        '=============================================================================================
        '
        Public Function doc_getInteger(ByVal RequestName As String) As Integer
            On Error GoTo ErrorTrap
            '
            doc_getInteger = EncodeInteger(docProperties.getText(EncodeText(RequestName)))
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetStreamInteger")
        End Function
        '
        '=============================================================================================
        '   Legacy
        '=============================================================================================
        '
        Public Function doc_getBoolean(ByVal RequestName As String) As Boolean
            On Error GoTo ErrorTrap
            '
            doc_getBoolean = EncodeBoolean(docProperties.getText(RequestName))
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetStreamBoolean")
        End Function
        '
        '========================================================================
        ' main_Get a Text string from request
        '   if empty, returns null
        '   if RequestBlock true, tries only querystring
        '========================================================================
        '
        Public Function doc_getActiveContent(ByVal RequestName As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetStreamActiveContent")
            '
            'Dim innovaEditor As New innovaEditorAddonClassFPO
            '
            If True Then
                doc_getActiveContent = docProperties.getText(RequestName)
                If doc_getActiveContent <> "" Then
                    doc_getActiveContent = html_DecodeContent2(EncodeText(doc_getActiveContent))
                End If
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetStreamActiveContent")
        End Function
        '
        '=============================================================================================
        '   Legacy
        '=============================================================================================
        '
        Public Function doc_getDate(ByVal RequestName As String) As Date
            On Error GoTo ErrorTrap
            '
            doc_getDate = EncodeDate(docProperties.getText(EncodeText(RequestName)))
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetStreamDate")
        End Function
        '
        '=============================================================================================
        '
        '=============================================================================================
        '
        Public Function main_GetStreamDate2(ByVal RequestName As String) As Date
            On Error GoTo ErrorTrap
            '
            main_GetStreamDate2 = EncodeDate(docProperties.getText(RequestName))
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("main_GetStreamDate2")
        End Function
        '
        '=============================================================================================
        '
        '=============================================================================================
        '
        Public Function main_GetStreamBoolean2(ByVal RequestName As String) As Boolean
            On Error GoTo ErrorTrap
            '
            main_GetStreamBoolean2 = EncodeBoolean(docProperties.getText(RequestName))
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetStreamBoolean2")
        End Function
        '
        '=============================================================================================
        '
        '=============================================================================================
        '
        Public Function main_GetStreamNumber2(ByVal RequestName As String) As Double
            On Error GoTo ErrorTrap
            '
            main_GetStreamNumber2 = EncodeNumber(docProperties.getText(RequestName))
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("main_GetStreamNumber2")
        End Function
        '        '
        '        '=============================================================================================
        '        '   Legacy
        '        '=============================================================================================
        '        '
        '        Public Function app.db_GetCS(ByVal CSPointer As Integer, ByVal FieldName As String) As String
        '            On Error GoTo ErrorTrap
        '            '
        '            main_GetCS = app.db_GetCS(EncodeInteger(CSPointer), EncodeText(FieldName))
        '            '
        '            Exit Function
        'ErrorTrap:
        '            Call handleLegacyError18("main_GetCS")
        '        End Function
        '        '
        '        '=============================================================================================
        '        '   main_GetCS
        '        '       Returns the field value in text format, encoded from file if needed
        '        '=============================================================================================
        '        '
        '        Public Function app.db_GetCS(ByVal CSPointer As Integer, ByVal FieldName As String) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetCS2")
        '            '
        '            If True Then
        '                main_GetCS2 = app.db_GetCS(CSPointer, FieldName)
        '            End If
        '            '
        '            Exit Function
        'ErrorTrap:
        '            Call handleLegacyError18("main_GetCS2")
        '        End Function
        '
        '
        '
        Private Function web_GetLegacySiteStyles() As String
            On Error GoTo ErrorTrap
            '
            If Not main_Private_LegacySiteSites_Loaded Then
                main_Private_LegacySiteSites_Loaded = True
                '
                ' compatibility with old sites - if they do not main_Get the default style sheet, put it in here
                '
                If False Then
                    web_GetLegacySiteStyles = "" _
                        & cr & "<!-- compatibility with legacy framework --><style type=text/css>" _
                        & cr & " .ccEditWrapper {border-top:1px solid #6a6;border-left:1px solid #6a6;border-bottom:1px solid #cec;border-right:1px solid #cec;}" _
                        & cr & " .ccEditWrapperInner {border-top:1px solid #cec;border-left:1px solid #cec;border-bottom:1px solid #6a6;border-right:1px solid #6a6;}" _
                        & cr & " .ccEditWrapperCaption {text-align:left;border-bottom:1px solid #888;padding:4px;background-color:#40C040;color:black;}" _
                        & cr & " .ccEditWrapperContent{padding:4px;}" _
                        & cr & " .ccHintWrapper {border:1px dashed #888;margin-bottom:10px}" _
                        & cr & " .ccHintWrapperContent{padding:10px;background-color:#80E080;color:black;}" _
                        & "</style>"
                Else
                    web_GetLegacySiteStyles = "" _
                        & cr & "<!-- compatibility with legacy framework --><style type=text/css>" _
                        & cr & " .ccEditWrapper {border:1px dashed #808080;}" _
                        & cr & " .ccEditWrapperCaption {text-align:left;border-bottom:1px solid #808080;padding:4px;background-color:#40C040;color:black;}" _
                        & cr & " .ccEditWrapperContent{padding:4px;}" _
                        & cr & " .ccHintWrapper {border:1px dashed #808080;margin-bottom:10px}" _
                        & cr & " .ccHintWrapperContent{padding:10px;background-color:#80E080;color:black;}" _
                        & "</style>"
                End If
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("main_GetLegacySiteStyles")
        End Function
        '
        '
        '
        Public Function main_IsViewingProperty(ByVal PropertyName As String) As Boolean
            Return Not docProperties.containsKey(PropertyName)
        End Function
        '
        '
        '
        Private Function main_GetFileSize(ByVal VirtualFilePathPage As String) As Integer
            Dim files As IO.FileInfo() = appRootFiles.getFileList(VirtualFilePathPage)
            Return CInt(files(0).Length)
        End Function
        '
        '=========================================================================================
        '   In Init(), Print Hard Coded Pages
        '       A Hard coded page replaces the entire output with an HTML compatible page
        '=========================================================================================
        '
        Private Function executeRoute_hardCodedPage(ByVal HardCodedPage As String) As Boolean
            Dim return_allowPostInitExecuteAddon As Boolean = False
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Init_PrintHardCodedPage")
            '
            Dim blockSiteWithLogin As Boolean
            Dim allowPageWithoutSectionDisplay As Boolean
            Dim InsertTestOK As Boolean
            Dim ConfirmOrderID As Integer
            Dim PageSize As Integer
            Dim PageNumber As Integer
            Dim ContentName As String
            Dim MsgLabel As String
            Dim PageID As Integer
            Dim rootPageId As Integer
            Dim Pos As Integer
            Dim TrapID As Integer
            Dim CS As Integer
            Dim Name As String
            Dim Copy As String
            Dim Ptr As Integer
            Dim ArgList As String
            Dim Args() As String
            Dim ArgNameValue() As String
            Dim gd As GoogleDataType
            Dim PropertyName As String
            Dim PropertyValue As String
            Dim Recipient As String
            Dim Sender As String
            Dim subject As String
            Dim Message As String
            Dim Email As String
            '
            Dim LinkObjectName As String
            Dim EditorObjectName As String
            Dim BodyOpen As String
            Dim AllowChildPage As Boolean
            Dim autoPrintText As String
            Dim RootPageName As String
            Dim PageCopy As String
            Dim OrderByClause As String
            '
            Select Case vbLCase(HardCodedPage)
                Case HardCodedPageSendPassword
                    '
                    ' send password to the email address in the querystring
                    '
                    Email = docProperties.getText("email")
                    If Email <> "" Then
                        Call user.sendPassword(Email)
                        Copy = "" _
                            & "<div style=""width:300px;margin:100px auto 0 auto;"">" _
                            & "<p>An attempt to send login information for email address '" & Email & "' has been made.</p>" _
                            & "<p><a href=""?" & web_RefreshQueryString & """>Return to the Site.</a></p>" _
                            & "</div>"
                        Call writeAltBuffer(Copy)
                        executeRoute_hardCodedPage = True
                    Else
                        executeRoute_hardCodedPage = False
                    End If
                Case HardCodedPagePrinterVersion
                    '
                    ' ----- Page Content Printer main_version
                    '
                    Call web_addRefreshQueryString(RequestNameHardCodedPage, HardCodedPagePrinterVersion)
                    pageManager_printVersion = True
                    autoPrintText = docProperties.getText("AutoPrint")
                    '
                    If ContentName = "" Then
                        ContentName = "Page Content"
                    End If
                    If autoPrintText = "" Then
                        autoPrintText = siteProperties.getText("AllowAutoPrintDialog", "1")
                    End If
                    If RootPageName = "" Then
                        blockSiteWithLogin = False
                        PageCopy = main_GetHtmlBody_GetSection(AllowChildPage, False, False, blockSiteWithLogin)
                        'PageCopy = main_GetSectionPage(AllowChildPage, False)
                    Else
                        OrderByClause = docProperties.getText(RequestNameOrderByClause)
                        PageID = docProperties.getInteger("bid")
                        '
                        ' 5/12/2008 - converted to RootPageID call because we do not use RootPageName anymore
                        '
                        allowPageWithoutSectionDisplay = siteProperties.getBoolean(spAllowPageWithoutSectionDisplay, spAllowPageWithoutSectionDisplay_default)
                        If Not allowPageWithoutSectionDisplay Then
                            allowPageWithoutSectionDisplay = user.isAuthenticatedContentManager(ContentName)
                        End If
                        PageCopy = main_GetHtmlBody_GetSection_GetContent(PageID, rootPageId, ContentName, OrderByClause, False, False, False, 0, siteProperties.useContentWatchLink, allowPageWithoutSectionDisplay)
                        If pageManager_RedirectLink <> "" Then
                            Call web_Redirect2(pageManager_RedirectLink, pageManager_RedirectReason, False)
                        End If
                        'PageCopy = main_GetContentPage(RootPageName, ContentName, OrderByClause, AllowChildPage, False, PageID)
                    End If
                    '
                    If EncodeBoolean(autoPrintText) Then
                        Call main_AddOnLoadJavascript2("window.print(); window.close()", "Print Page")
                    End If
                    BodyOpen = "<body class=""ccBodyPrint"">"

                    'Call AppendLog("call main_getEndOfBody, from main_init_printhardcodedpage")
                    Call writeAltBuffer("" _
                        & main_docType _
                        & vbCrLf & "<html>" _
                        & cr & "<head>" & main_GetHTMLHead() _
                        & cr & "</head>" _
                        & vbCrLf & BodyOpen _
                        & cr & "<div align=""left"">" _
                        & cr2 & "<table border=""0"" cellpadding=""20"" cellspacing=""0"" width=""100%""><tr><td width=""100%"">" _
                        & cr3 & "<p>" _
                        & kmaIndent(PageCopy) _
                        & cr3 & "</p>" _
                        & cr2 & "</td></tr></table>" _
                        & cr & "</div>" _
                        & kmaIndent(main_GetEndOfBody(False, False, False, False)) _
                        & cr & "</body>" _
                        & vbCrLf & "</html>" _
                        & "")

                    executeRoute_hardCodedPage = True
                'Case HardCodedPageMyProfile
                '    '
                '    ' Print a User Profile page with the current member
                '    '
                '    Call web_addRefreshQueryString(RequestNameHardCodedPage, HardCodedPageMyProfile)
                '    Call writeAltBuffer(main_GetMyProfilePage())
                '    executeRoute_hardCodedPage = True
                Case HardCodedPageResourceLibrary
                    '
                    ' main_Get FormIndex (the index to the InsertImage# function called on selection)
                    '
                    Call web_addRefreshQueryString(RequestNameHardCodedPage, HardCodedPageResourceLibrary)
                    EditorObjectName = docProperties.getText("EditorObjectName")
                    LinkObjectName = docProperties.getText("LinkObjectName")
                    If EditorObjectName <> "" Then
                        '
                        ' Open a page compatible with a dialog
                        '
                        Call web_addRefreshQueryString("EditorObjectName", EditorObjectName)
                        Call main_AddHeadScriptLink("/ccLib/ClientSide/dialogs.js", "Resource Library")
                        'Call AddHeadScript("<script type=""text/javascript"" src=""/ccLib/ClientSide/dialogs.js""></script>")
                        Call main_SetMetaContent(0, 0)
                        Call main_AddOnLoadJavascript2("document.body.style.overflow='scroll';", "Resource Library")
                        Copy = main_GetResourceLibrary2("", True, EditorObjectName, LinkObjectName, True)
                        'Call AppendLog("call main_getEndOfBody, from main_init_printhardcodedpage2b")
                        Copy = "" _
                            & main_docType _
                            & "<html>" _
                            & cr & "<head>" _
                            & kmaIndent(main_GetHTMLHead()) _
                            & cr & "</head>" _
                            & cr & "<body class=""ccBodyAdmin ccCon"" style=""overflow:scroll"">" _
                            & kmaIndent(main_GetPanelHeader("Contensive Resource Library")) _
                            & cr & "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%""><tr><td>" _
                            & cr2 & "<div style=""border-top:1px solid white;border-bottom:1px solid black;height:2px""><img alt=""spacer"" src=""/ccLib/images/spacer.gif"" width=1 height=1></div>" _
                            & kmaIndent(Copy) _
                            & cr & "</td></tr>" _
                            & cr & "<tr><td>" _
                            & kmaIndent(main_GetEndOfBody(False, False, False, False)) _
                            & cr & "</td></tr></table>" _
                            & cr & "<script language=javascript type=""text/javascript"">fixDialog();</script>" _
                            & cr & "</body>" _
                            & "</html>"
                        Call writeAltBuffer(Copy)
                        executeRoute_hardCodedPage = True
                        'Call main_GetEndOfBody(False, False)
                        ''--- should be disposed by caller --- Call dispose
                        'Call main_CloseStream
                        'true = False
                        'Set main_cmc = Nothing
                        'Exit Sub
                        'Call main_CloseStream
                    ElseIf LinkObjectName <> "" Then
                        '
                        ' Open a page compatible with a dialog
                        '
                        Call web_addRefreshQueryString("LinkObjectName", LinkObjectName)
                        Call main_AddHeadScriptLink("/ccLib/ClientSide/dialogs.js", "Resource Library")
                        'Call AddHeadScript("<script type=""text/javascript"" src=""/ccLib/ClientSide/dialogs.js""></script>")
                        Call main_SetMetaContent(0, 0)
                        Call main_AddOnLoadJavascript2("document.body.style.overflow='scroll';", "Resource Library")
                        Copy = main_GetResourceLibrary2("", True, EditorObjectName, LinkObjectName, True)
                        'Call AppendLog("call main_getEndOfBody, from main_init_printhardcodedpage2c")
                        Copy = "" _
                            & main_docType _
                            & cr & "<html>" _
                            & cr & "<head>" _
                            & kmaIndent(main_GetHTMLHead()) _
                            & cr & "</head>" _
                            & cr & "<body class=""ccBodyAdmin ccCon"" style=""overflow:scroll"">" _
                            & main_GetPanelHeader("Contensive Resource Library") _
                            & cr & "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%""><tr><td>" _
                            & Copy _
                            & cr & "</td></tr><tr><td>" & main_GetEndOfBody(False, False, False, False) & "</td></tr></table>" _
                            & cr & "<script language=javascript type=text/javascript>fixDialog();</script>" _
                            & cr & "</body>" _
                            & vbCrLf & "</html>"
                        Call writeAltBuffer(Copy)
                        executeRoute_hardCodedPage = True
                    End If
                Case HardCodedPageLoginDefault
                    '
                    ' 9/4/2012 added to prevent lockout if login addon fails
                    web_RefreshQueryString = webServer.requestQueryString
                    'Call main_AddRefreshQueryString("method", "")
                    Call writeAltBuffer(user.getLoginPage(True))
                    executeRoute_hardCodedPage = True
                Case HardCodedPageLogin, HardCodedPageLogoutLogin
                    '
                    ' 7/8/9 - Moved from intercept pages
                    '
                    ' Print the Login form as an intercept page
                    ' Special case - set the current URL to the Refresh Query String
                    ' Because you want the form created to save the refresh values
                    '
                    If vbUCase(HardCodedPage) = "LOGOUTLOGIN" Then
                        Call user.logout()
                    End If
                    web_RefreshQueryString = webServer.requestQueryString
                    'Call main_AddRefreshQueryString("method", "")
                    Call writeAltBuffer(user.getLoginPage(False))
                    'Call writeAltBuffer(main_GetLoginPage2(false) & main_GetEndOfBody(False, False, False))
                    executeRoute_hardCodedPage = True
                Case HardCodedPageLogout
                    '
                    ' ----- logout the current member
                    '
                    Call user.logout()
                    executeRoute_hardCodedPage = False
                Case HardCodedPageSiteExplorer
                    '
                    ' 7/8/9 - Moved from intercept pages
                    '
                    Call web_addRefreshQueryString(RequestNameHardCodedPage, HardCodedPageSiteExplorer)
                    LinkObjectName = docProperties.getText("LinkObjectName")
                    If LinkObjectName <> "" Then
                        '
                        ' Open a page compatible with a dialog
                        '
                        Call web_addRefreshQueryString("LinkObjectName", LinkObjectName)
                        Call main_AddPagetitle("Site Explorer")
                        Call main_SetMetaContent(0, 0)
                        Copy = executeAddon_legacy5(0, "Site Explorer", "", addonContextEnum.ContextPage, "", 0, "", 0)
                        Call main_AddOnLoadJavascript2("document.body.style.overflow='scroll';", "Site Explorer")
                        'Call AppendLog("call main_getEndOfBody, from main_init_printhardcodedpage2d")
                        Copy = "" _
                            & main_docType _
                            & cr & "<html>" _
                            & cr & "<head>" _
                            & kmaIndent(main_GetHTMLHead()) _
                            & cr & "</head>" _
                            & cr & "<body class=""ccBodyAdmin ccCon"" style=""overflow:scroll"">" _
                            & kmaIndent(main_GetPanelHeader("Contensive Site Explorer")) _
                            & cr & "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%""><tr><td>" _
                            & kmaIndent(Copy) _
                            & cr & "</td></tr><tr><td>" & main_GetEndOfBody(False, False, False, False) & "</td></tr></table>" _
                            & cr & "</body>" _
                            & cr & "</html>"
                        'Set Obj = Nothing
                        Call writeAltBuffer(Copy)
                        executeRoute_hardCodedPage = True
                    End If
                Case HardCodedPageStatus
                    '
                    ' Status call
                    '
                    web_BlockClosePageCopyright = True
                    '
                    ' test default data connection
                    '
                    On Error Resume Next
                    Err.Clear()
                    InsertTestOK = False
                    CS = db.cs_insertRecord("Trap Log")
                    If Not db.cs_Ok(CS) Then
                        Call handleLegacyError10(ignoreInteger, "dll", "Error during Status. Called InsertCSRecord to insert 'Trap Log' test, record set was not OK.", "Init", False, True)
                    Else
                        InsertTestOK = True
                        TrapID = db.cs_getInteger(CS, "ID")
                    End If
                    Call db.cs_Close(CS)
                    If InsertTestOK Then
                        If TrapID = 0 Then
                            Call handleLegacyError10(ignoreInteger, "dll", "Error during Status. Called InsertCSRecord to insert 'Trap Log' test, record set was OK, but ID=0.", "Init", False, True)
                        Else
                            Call db_DeleteContentRecord("Trap Log", TrapID)
                        End If
                    End If
                    If Err.Number <> 0 Then
                        Call handleLegacyError10(ignoreInteger, "dll", "Error during Status. After traplog insert, " & GetErrString(Err), "Init", False, True)
                        Err.Clear()
                    End If
                    '
                    ' Close page
                    '
                    Call main_ClearStream()
                    If main_PageErrorCount = 0 Then
                        Call writeAltBuffer("Contensive OK")
                    Else
                        Call writeAltBuffer("Contensive Error Count = " & main_PageErrorCount)
                    End If
                    web_BlockClosePageCopyright = True
                    main_BlockClosePageLink = True
                    'Call AppendLog("call main_getEndOfBody, from main_init_printhardcodedpage2f")
                    Call main_GetEndOfBody(False, False, False, False)
                    executeRoute_hardCodedPage = True
                Case HardCodedPageGetJSPage
                    '
                    ' ----- Create a Javascript page that outputs a page content record
                    '
                    Name = docProperties.getText("name")
                    If Name <> "" Then
                        web_BlockClosePageCopyright = True
                        '
                        ' Determine bid (PageID) from referer querystring
                        '
                        Copy = webServer.requestReferrer
                        Pos = vbInstr(1, Copy, "bid=")
                        If Pos <> 0 Then
                            Copy = Trim(Mid(Copy, Pos + 4))
                            Pos = vbInstr(1, Copy, "&")
                            If Pos <> 0 Then
                                Copy = Trim(Mid(Copy, 1, Pos))
                            End If
                            PageID = EncodeInteger(Copy)
                        End If
                        '
                        ' main_Get the page
                        '
                        rootPageId = main_GetRecordID("Page Content", Name)
                        allowPageWithoutSectionDisplay = siteProperties.getBoolean(spAllowPageWithoutSectionDisplay, spAllowPageWithoutSectionDisplay_default)
                        If Not allowPageWithoutSectionDisplay Then
                            allowPageWithoutSectionDisplay = user.isAuthenticatedContentManager(ContentName)
                        End If
                        Copy = main_GetHtmlBody_GetSection_GetContent(PageID, rootPageId, "Page Content", "", True, True, False, 0, siteProperties.useContentWatchLink, allowPageWithoutSectionDisplay)
                        'Call AppendLog("call main_getEndOfBody, from main_init_printhardcodedpage2g")
                        Copy = Copy & main_GetEndOfBody(False, True, False, False)
                        Copy = vbReplace(Copy, "'", "'+""'""+'")
                        Copy = vbReplace(Copy, vbCr, "\n")
                        Copy = vbReplace(Copy, vbLf, " ")
                        '
                        ' Write the page to the stream, with a javascript wrapper
                        '
                        MsgLabel = "Msg" & EncodeText(GetRandomInteger)
                        Call web_setResponseContentType("text/plain")
                        Call writeAltBuffer("var " & MsgLabel & " = '" & Copy & "'; " & vbCrLf)
                        Call writeAltBuffer("document.write( " & MsgLabel & " ); " & vbCrLf)
                    End If
                    executeRoute_hardCodedPage = True
                Case HardCodedPageGetJSLogin
                    '
                    ' ----- Create a Javascript login page
                    '
                    web_BlockClosePageCopyright = True
                    Copy = Copy & "<p align=""center""><CENTER>"
                    If Not user.isAuthenticated() Then
                        Copy = Copy & user.getLoginPanel()
                    ElseIf user.isAuthenticatedContentManager("Page Content") Then
                        'Copy = Copy & main_GetToolsPanel
                    Else
                        Copy = Copy & "You are currently logged in as " & user.name & ". To logout, click <a HREF=""" & web_ServerFormActionURL & "?Method=logout"" rel=""nofollow"">Here</A>."
                    End If
                    'Call AppendLog("call main_getEndOfBody, from main_init_printhardcodedpage2h")
                    Copy = Copy & main_GetEndOfBody(True, True, False, False)
                    Copy = Copy & "</CENTER></p>"
                    Copy = vbReplace(Copy, "'", "'+""'""+'")
                    Copy = vbReplace(Copy, vbCr, "")
                    Copy = vbReplace(Copy, vbLf, "")
                    'Copy = "<b>login Page</b>"
                    '
                    ' Write the page to the stream, with a javascript wrapper
                    '
                    MsgLabel = "Msg" & EncodeText(GetRandomInteger)
                    Call web_setResponseContentType("text/plain")
                    Call writeAltBuffer("var " & MsgLabel & " = '" & Copy & "'; " & vbCrLf)
                    Call writeAltBuffer("document.write( " & MsgLabel & " ); " & vbCrLf)
                    executeRoute_hardCodedPage = True
                Case HardCodedPageRedirect
                    '
                    ' ----- Redirect with RC and RI
                    '
                    main_RedirectContentID = docProperties.getInteger("rc")
                    main_RedirectRecordID = docProperties.getInteger("ri")
                    If main_RedirectContentID <> 0 And main_RedirectRecordID <> 0 Then
                        ContentName = metaData.getContentNameByID(main_RedirectContentID)
                        If ContentName <> "" Then
                            Call main_RedirectByRecord_ReturnStatus(ContentName, main_RedirectRecordID)
                        End If
                    End If
                    web_BlockClosePageCopyright = True
                    main_BlockClosePageLink = True
                    return_allowPostInitExecuteAddon = False '--- should be disposed by caller --- Call dispose
                    executeRoute_hardCodedPage = True
                Case HardCodedPageExportAscii
                    '
                    '----------------------------------------------------
                    '   Should be a remote method in commerce
                    '----------------------------------------------------
                    '
                    If Not user.isAuthenticatedAdmin() Then
                        '
                        ' Administrator required
                        '
                        Call writeAltBuffer("Error: You must be an administrator to use the ExportAscii method")
                    Else
                        web_BlockClosePageCopyright = True
                        ContentName = docProperties.getText("content")
                        PageSize = docProperties.getInteger("PageSize")
                        If PageSize = 0 Then
                            PageSize = 20
                        End If
                        PageNumber = docProperties.getInteger("PageNumber")
                        If PageNumber = 0 Then
                            PageNumber = 1
                        End If
                        If (ContentName = "") Then
                            Call writeAltBuffer("Error: ExportAscii method requires ContentName")
                        Else
                            Call writeAltBuffer(exportAscii_GetAsciiExport(ContentName, PageSize, PageNumber))
                        End If
                    End If
                    executeRoute_hardCodedPage = True
                    web_BlockClosePageCopyright = True
                    main_BlockClosePageLink = True
                    return_allowPostInitExecuteAddon = False '--- should be disposed by caller --- Call dispose
                    executeRoute_hardCodedPage = True
                Case HardCodedPagePayPalConfirm
                    '
                    '
                    '----------------------------------------------------
                    '   Should be a remote method in commerce
                    '----------------------------------------------------
                    '
                    '
                    ConfirmOrderID = docProperties.getInteger("item_name")
                    If ConfirmOrderID <> 0 Then
                        '
                        ' Confirm the order
                        '
                        CS = db.csOpen("Orders", "(ID=" & ConfirmOrderID & ") and ((OrderCompleted=0)or(OrderCompleted is Null))")
                        If db.cs_Ok(CS) Then
                            Call db.cs_set(CS, "OrderCompleted", True)
                            Call db.cs_set(CS, "DateCompleted", main_PageStartTime)
                            Call db.cs_set(CS, "ccAuthCode", docProperties.getText("txn_id"))
                            Call db.cs_set(CS, "ccActionCode", docProperties.getText("payment_status"))
                            Call db.cs_set(CS, "ccRefCode", docProperties.getText("pending_reason"))
                            Call db.cs_set(CS, "PayMethod", "PayPal " & docProperties.getText("payment_type"))
                            Call db.cs_set(CS, "ShipName", docProperties.getText("first_name") & " " & docProperties.getText("last_name"))
                            Call db.cs_set(CS, "ShipAddress", docProperties.getText("address_street"))
                            Call db.cs_set(CS, "ShipCity", docProperties.getText("address_city"))
                            Call db.cs_set(CS, "ShipState", docProperties.getText("address_state"))
                            Call db.cs_set(CS, "ShipZip", docProperties.getText("address_zip"))
                            Call db.cs_set(CS, "BilleMail", docProperties.getText("payer_email"))
                            Call db.cs_set(CS, "ContentControlID", main_GetContentID("Orders Completed"))
                            Call db.db_SaveCSRecord(CS)
                        End If
                        Call db.cs_Close(CS)
                        '
                        ' Empty the cart
                        '
                        CS = db.csOpen("Visitors", "OrderID=" & ConfirmOrderID)
                        If db.cs_Ok(CS) Then
                            Call db.cs_set(CS, "OrderID", 0)
                            Call db.db_SaveCSRecord(CS)
                        End If
                        Call db.cs_Close(CS)
                        '
                        ' TEmp fix until HardCodedPage is complete
                        '
                        Recipient = siteProperties.getText("EmailOrderNotifyAddress", siteProperties.emailAdmin)
                        If vbInstr(EncodeText(Recipient), "@") = 0 Then
                            Call handleLegacyError12("Init", "PayPal confirmation Order Process Notification email was not sent because EmailOrderNotifyAddress SiteProperty is not valid")
                        Else
                            Sender = siteProperties.getText("EmailOrderFromAddress")
                            subject = main_ServerDomain & " Online Order Pending, #" & ConfirmOrderID
                            Message = "<p>An order confirmation has been recieved from PayPal for " & main_ServerDomain & "</p>"
                            Call main_SendEmail(Recipient, Sender, subject, Message, , False, True)
                        End If
                    End If
                    web_BlockClosePageCopyright = True
                    main_BlockClosePageLink = True
                    return_allowPostInitExecuteAddon = False '--- should be disposed by caller --- Call dispose
                    executeRoute_hardCodedPage = True
            End Select
            '
            '
            Return return_allowPostInitExecuteAddon
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "main_Init_PrintHardCodedPage", True, False)
            Return return_allowPostInitExecuteAddon
        End Function
        '
        '========================================================================
        ' Print the active editor form
        '========================================================================
        '
        Public Function main_GetActiveEditor(ByVal ContentName As String, ByVal RecordID As Integer, ByVal FieldName As String, Optional ByVal FormElements As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("GetActiveEditor")
            '
            'If Not (true) Then Exit Function
            '
            Dim ContentID As Integer
            Dim CSPointer As Integer
            Dim Copy As String
            Dim Filename As String
            Dim Stream As String
            Dim ButtonPanel As String
            Dim EditorPanel As String
            Dim PanelCopy As String
            '
            Dim intContentName As String
            Dim intRecordId As Integer
            Dim strFieldName As String
            '
            intContentName = EncodeText(ContentName)
            intRecordId = EncodeInteger(RecordID)
            strFieldName = EncodeText(FieldName)
            '
            EditorPanel = ""
            ContentID = main_GetContentID(intContentName)
            If (ContentID < 1) Or (intRecordId < 1) Or (strFieldName = "") Then
                PanelCopy = SpanClassAdminNormal & "The information you have selected can not be accessed.</span>"
                EditorPanel = EditorPanel & main_GetPanel(PanelCopy)
            Else
                intContentName = metaData.getContentNameByID(ContentID)
                If intContentName <> "" Then
                    CSPointer = db.csOpen(intContentName, "ID=" & intRecordId)
                    If Not db.cs_Ok(CSPointer) Then
                        PanelCopy = SpanClassAdminNormal & "The information you have selected can not be accessed.</span>"
                        EditorPanel = EditorPanel & main_GetPanel(PanelCopy)
                    Else
                        Copy = db.db_GetCS(CSPointer, strFieldName)
                        EditorPanel = EditorPanel & html_GetFormInputHidden("Type", FormTypeActiveEditor)
                        EditorPanel = EditorPanel & html_GetFormInputHidden("cid", ContentID)
                        EditorPanel = EditorPanel & html_GetFormInputHidden("ID", intRecordId)
                        EditorPanel = EditorPanel & html_GetFormInputHidden("fn", strFieldName)
                        EditorPanel = EditorPanel & EncodeText(FormElements)
                        EditorPanel = EditorPanel & html_GetFormInputHTML3("ContentCopy", Copy, "3", "45", False, True)
                        'EditorPanel = EditorPanel & main_GetFormInputActiveContent( "ContentCopy", Copy, 3, 45)
                        ButtonPanel = main_GetPanelButtons(ButtonCancel & "," & ButtonSave, "button")
                        EditorPanel = EditorPanel & ButtonPanel
                    End If
                End If
            End If
            Stream = Stream & main_GetPanelHeader("Contensive Active Content Editor")
            Stream = Stream & main_GetPanel(EditorPanel)
            Stream = html_GetFormStart() & Stream & html_GetFormEnd()
            main_GetActiveEditor = Stream
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError11("main_GetActiveEditor", "trap")
        End Function
        '
        '========================================================================
        ' ----- Process the active editor form
        '========================================================================
        '
        Public Sub main_ProcessActiveEditor()
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("innovaEditorAddonClassFPO.ProcessActiveEditor")
            '
            Dim MethodName As String
            Dim CS As Integer
            Dim Button As String
            Dim ContentID As Integer
            Dim ContentName As String
            Dim RecordID As Integer
            Dim FieldName As String
            Dim ContentCopy As String
            Dim Filename As String
            Dim TableName As String
            '
            MethodName = "main_ProcessActiveEditor()"
            '
            '
            ' ----- Read in Button and process
            '
            Button = docProperties.getText("Button")
            Select Case Button
                Case ButtonCancel
                    '
                    ' ----- Do nothing, the form will reload with the previous contents
                    '
                Case ButtonSave
                    '
                    ' ----- read the form fields
                    '
                    ContentID = docProperties.getInteger("cid")
                    RecordID = docProperties.getInteger("id")
                    FieldName = docProperties.getText("fn")
                    ContentCopy = docProperties.getText("ContentCopy")
                    '
                    ' ----- convert editor active edit icons
                    '
                    ContentCopy = html_DecodeContent(ContentCopy)
                    '
                    ' ----- save the content
                    '
                    ContentName = metaData.getContentNameByID(ContentID)
                    If ContentName <> "" Then
                        CS = db.csOpen(ContentName, "ID=" & db.encodeSQLNumber(RecordID), , False)
                        If db.cs_Ok(CS) Then
                            Call db.cs_set(CS, FieldName, ContentCopy)
                        End If
                        Call db.cs_Close(CS)
                    End If
            End Select
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError11("main_ProcessActiveEditor", "trap")
        End Sub
        '
        '==========================================================================
        '   returns the site structure xml
        '==========================================================================
        '
        Public ReadOnly Property main_SiteStructure() As String
            Get
                Dim returnStatus As Boolean = False
                If Not main_Private_SiteStructure_LocalLoaded Then
                    main_Private_SiteStructure = executeAddon_legacy2(0, "{8CDD7960-0FCA-4042-B5D8-3A65BE487AC4}", "", addonContextEnum.ContextSimple, "", 0, "", "", False, -1, "", returnStatus, Nothing)
                    main_Private_SiteStructure_LocalLoaded = True
                End If
                main_SiteStructure = main_Private_SiteStructure

            End Get
        End Property
        '
        '========================================================================
        '   Apply a wrapper to content
        '========================================================================
        '
        Public Function executeAddon_WrapContent(ByVal Content As String, ByVal WrapperID As Integer, Optional ByVal WrapperSourceForComment As String = "") As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("WrapContent")
            '
            Dim Pos As Integer
            Dim CS As Integer
            Dim JSFilename As String
            Dim Copy As String
            Dim s As String
            Dim SelectFieldList As String
            Dim Wrapper As String
            Dim wrapperName As String
            Dim SourceComment As String
            Dim TargetString As String
            '
            s = Content
            SelectFieldList = "name,copytext,javascriptonload,javascriptbodyend,stylesfilename,otherheadtags,JSFilename,targetString"
            CS = db_csOpen("Wrappers", WrapperID, , , SelectFieldList)
            If db.cs_Ok(CS) Then
                Wrapper = db.cs_getText(CS, "copytext")
                wrapperName = db.cs_getText(CS, "name")
                TargetString = db.cs_getText(CS, "targetString")
                '
                SourceComment = "wrapper " & wrapperName
                If WrapperSourceForComment <> "" Then
                    SourceComment = SourceComment & " for " & WrapperSourceForComment
                End If
                Call main_AddOnLoadJavascript2(db.cs_getText(CS, "javascriptonload"), SourceComment)
                Call main_AddEndOfBodyJavascript2(db.cs_getText(CS, "javascriptbodyend"), SourceComment)
                Call main_AddHeadTag2(db.cs_getText(CS, "OtherHeadTags"), SourceComment)
                '
                JSFilename = db.cs_getText(CS, "jsfilename")
                If JSFilename <> "" Then
                    JSFilename = web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, JSFilename)
                    Call main_AddHeadScriptLink(JSFilename, SourceComment)
                End If
                Copy = db.cs_getText(CS, "stylesfilename")
                If Copy <> "" Then
                    If vbInstr(1, Copy, "://") <> 0 Then
                    ElseIf Left(Copy, 1) = "/" Then
                    Else
                        Copy = web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, Copy)
                    End If
                    Call main_AddStylesheetLink2(Copy, SourceComment)
                End If
                '
                If Wrapper <> "" Then
                    Pos = vbInstr(1, Wrapper, TargetString, vbTextCompare)
                    If Pos <> 0 Then
                        s = vbReplace(Wrapper, TargetString, s, 1, 99, vbTextCompare)
                    Else
                        s = "" _
                            & "<!-- the selected wrapper does not include the Target String marker to locate the position of the content. -->" _
                            & Wrapper _
                            & s
                    End If
                End If
            End If
            Call db.cs_Close(CS)
            '
            executeAddon_WrapContent = s
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("WrapContent")
        End Function
        '
        '=========================================================================================
        '
        '=========================================================================================
        '
        Public Sub html_AddEvent(ByVal HtmlId As String, ByVal DOMEvent As String, ByVal Javascript As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("AddEvent")
            '
            Dim JSCodeAsString As String
            '
            JSCodeAsString = Javascript
            JSCodeAsString = vbReplace(JSCodeAsString, "'", "'+""'""+'")
            JSCodeAsString = vbReplace(JSCodeAsString, vbCrLf, "\n")
            JSCodeAsString = vbReplace(JSCodeAsString, vbCr, "\n")
            JSCodeAsString = vbReplace(JSCodeAsString, vbLf, "\n")
            JSCodeAsString = "'" & JSCodeAsString & "'"
            '
            Call main_AddOnLoadJavascript("" _
                & "cj.addListener(" _
                    & "document.getElementById('" & HtmlId & "')" _
                    & ",'" & DOMEvent & "'" _
                    & ",function(){eval(" & JSCodeAsString & ")}" _
                & ")")
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18("AddEvent")
        End Sub
        '
        '
        '
        Public Function html_GetFormInputField(ByVal ContentName As String, ByVal FieldName As String, Optional ByVal htmlName As String = "", Optional ByVal HtmlValue As String = "", Optional ByVal HtmlClass As String = "", Optional ByVal HtmlId As String = "", Optional ByVal HtmlStyle As String = "", Optional ByVal ManyToManySourceRecordID As Integer = 0) As String
            On Error GoTo ErrorTrap 'Const Tn = "main_GetFormInputField" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim IgnoreBoolean As Boolean
            Dim LookupContentName As String
            Dim LookupList As String
            Dim fieldType As Integer
            Dim InputName As String
            Dim GroupID As Integer
            Dim CDef As coreMetaDataClass.CDefClass
            Dim MTMContent0 As String
            Dim MTMContent1 As String
            Dim MTMRuleContent As String
            Dim MTMRuleField0 As String
            Dim MTMRuleField1 As String
            Dim FieldPtr As Integer
            Dim arrayOfFields As coreMetaDataClass.CDefFieldClass()
            '
            InputName = htmlName
            If InputName = "" Then
                InputName = FieldName
            End If
            '
            fieldType = EncodeInteger(db_GetContentFieldProperty(ContentName, FieldName, "type"))
            Select Case fieldType
                Case FieldTypeIdBoolean
                    '
                    '
                    '
                    html_GetFormInputField = html_GetFormInputCheckBox2(InputName, EncodeBoolean(HtmlValue) = True, HtmlId, False, HtmlClass)
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                Case FieldTypeIdFileCSS
                    '
                    '
                    '
                    html_GetFormInputField = html_GetFormInputTextExpandable2(InputName, HtmlValue, , , HtmlId, False, False, HtmlClass)
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                Case FieldTypeIdCurrency
                    '
                    '
                    '
                    html_GetFormInputField = html_GetFormInputText2(InputName, HtmlValue, , , HtmlId, False, False, HtmlClass)
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                Case FieldTypeIdDate
                    '
                    '
                    '
                    html_GetFormInputField = html_GetFormInputDate(InputName, HtmlValue, , HtmlId)
                    If HtmlClass <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " class=""" & HtmlClass & """>")
                    End If
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                Case FieldTypeIdFile
                    '
                    '
                    '
                    If HtmlValue = "" Then
                        html_GetFormInputField = html_GetFormInputFile2(InputName, HtmlId, HtmlClass)
                    Else
                        html_GetFormInputField = html_GetFormInputField & "<a href=""http://" & EncodeURL(webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, HtmlValue)) & """ target=""_blank"">" & SpanClassAdminSmall & "[" & GetFilename(HtmlValue) & "]</A>"
                        html_GetFormInputField = html_GetFormInputField & "&nbsp;&nbsp;&nbsp;Delete:&nbsp;" & html_GetFormInputCheckBox2(InputName & ".Delete", False)
                        html_GetFormInputField = html_GetFormInputField & "&nbsp;&nbsp;&nbsp;Change:&nbsp;" & html_GetFormInputFile2(InputName, HtmlId, HtmlClass)
                    End If
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                Case FieldTypeIdFloat
                    '
                    '
                    '
                    html_GetFormInputField = html_GetFormInputText2(InputName, HtmlValue, , , HtmlId, False, False, HtmlClass)
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                Case FieldTypeIdFileImage
                    '
                    '
                    '
                    If HtmlValue = "" Then
                        html_GetFormInputField = html_GetFormInputFile2(InputName, HtmlId, HtmlClass)
                    Else
                        html_GetFormInputField = html_GetFormInputField & "<a href=""http://" & EncodeURL(webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, HtmlValue)) & """ target=""_blank"">" & SpanClassAdminSmall & "[" & GetFilename(HtmlValue) & "]</A>"
                        html_GetFormInputField = html_GetFormInputField & "&nbsp;&nbsp;&nbsp;Delete:&nbsp;" & html_GetFormInputCheckBox2(InputName & ".Delete", False)
                        html_GetFormInputField = html_GetFormInputField & "&nbsp;&nbsp;&nbsp;Change:&nbsp;" & html_GetFormInputFile2(InputName, HtmlId, HtmlClass)
                    End If
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                Case FieldTypeIdInteger
                    '
                    '
                    '
                    html_GetFormInputField = html_GetFormInputText2(InputName, HtmlValue, , , HtmlId, False, False, HtmlClass)
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                Case FieldTypeIdFileJavascript
                    '
                    '
                    '
                    html_GetFormInputField = html_GetFormInputTextExpandable2(InputName, HtmlValue, , , HtmlId, False, False, HtmlClass)
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                Case FieldTypeIdLink
                    '
                    '
                    '
                    html_GetFormInputField = html_GetFormInputText2(InputName, HtmlValue, , , HtmlId, False, False, HtmlClass)
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                Case FieldTypeIdLookup
                    '
                    '
                    '
                    CDef = metaData.getCdef(ContentName)
                    LookupContentName = ""
                    With CDef
                        For Each keyValuePair As KeyValuePair(Of String, coreMetaDataClass.CDefFieldClass) In CDef.fields
                            Dim field As coreMetaDataClass.CDefFieldClass = keyValuePair.Value
                            With field
                                If vbUCase(.nameLc) = vbUCase(FieldName) Then
                                    If .lookupContentID <> 0 Then
                                        LookupContentName = EncodeText(metaData.getContentNameByID(.lookupContentID))
                                    End If
                                    If LookupContentName <> "" Then
                                        html_GetFormInputField = main_GetFormInputSelect2(InputName, EncodeInteger(HtmlValue), LookupContentName, "", "Select One", HtmlId, IgnoreBoolean, HtmlClass)
                                    ElseIf .lookupList <> "" Then
                                        html_GetFormInputField = main_GetFormInputSelectList2(InputName, EncodeInteger(HtmlValue), .lookupList, "Select One", HtmlId, HtmlClass)
                                    End If
                                    If HtmlStyle <> "" Then
                                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                                    End If
                                    Exit For
                                End If
                            End With
                        Next
                    End With
                Case FieldTypeIdManyToMany
                    '
                    '
                    '
                    CDef = metaData.getCdef(ContentName)
                    With CDef.fields(FieldName.ToLower())
                        MTMContent0 = metaData.getContentNameByID(.contentId)
                        MTMContent1 = metaData.getContentNameByID(.manyToManyContentID)
                        MTMRuleContent = metaData.getContentNameByID(.manyToManyRuleContentID)
                        MTMRuleField0 = .ManyToManyRulePrimaryField
                        MTMRuleField1 = .ManyToManyRuleSecondaryField
                    End With
                    html_GetFormInputField = main_GetFormInputCheckListCategories(InputName, MTMContent0, ManyToManySourceRecordID, MTMContent1, MTMRuleContent, MTMRuleField0, MTMRuleField1, , , False, MTMContent1, HtmlValue)
                Case FieldTypeIdMemberSelect
                    '
                    '
                    '
                    GroupID = EncodeInteger(db_GetContentFieldProperty(ContentName, FieldName, "memberselectgroupid"))
                    html_GetFormInputField = main_GetFormInputMemberSelect(InputName, EncodeInteger(HtmlValue), GroupID, , , HtmlId)
                    If HtmlClass <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " class=""" & HtmlClass & """>")
                    End If
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                Case FieldTypeIdResourceLink
                    '
                    '
                    '
                    html_GetFormInputField = html_GetFormInputText2(InputName, HtmlValue, , , HtmlId, False, False, HtmlClass)
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                Case FieldTypeIdText
                    '
                    '
                    '
                    html_GetFormInputField = html_GetFormInputText2(InputName, HtmlValue, , , HtmlId, False, False, HtmlClass)
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                Case FieldTypeIdLongText, FieldTypeIdFileTextPrivate
                    '
                    '
                    '
                    html_GetFormInputField = html_GetFormInputTextExpandable2(InputName, HtmlValue, , , HtmlId, False, False, HtmlClass)
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                Case FieldTypeIdFileXML
                    '
                    '
                    '
                    html_GetFormInputField = html_GetFormInputTextExpandable2(InputName, HtmlValue, , , HtmlId, False, False, HtmlClass)
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                Case FieldTypeIdHTML, FieldTypeIdFileHTMLPrivate
                    '
                    '
                    '
                    html_GetFormInputField = html_GetFormInputHTML(InputName, HtmlValue)
                    If HtmlStyle <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " style=""" & HtmlStyle & """>")
                    End If
                    If HtmlClass <> "" Then
                        html_GetFormInputField = vbReplace(html_GetFormInputField, ">", " class=""" & HtmlClass & """>")
                    End If
                Case Else
                    '
                    ' unsupported field type
                    '
            End Select
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            handleExceptionAndRethrow(New Exception("Unexpected exception"))
            '
        End Function
        ''
        ''   renamed to AllowDebugging
        ''
        'Public ReadOnly Property visitProperty_AllowVerboseReporting() As Boolean
        '    Get
        '        Return visitProperty.getBoolean("AllowDebugging")
        '    End Get
        'End Property
        '        '
        '        '
        '        '
        '        Public Function main_parseJSON(ByVal Source As String) As Object
        '            On Error GoTo ErrorTrap 'Const Tn = "parseJSON" : ''Dim th as integer : th = profileLogMethodEnter(Tn)    '
        '            '
        '            main_parseJSON = common_jsonDeserialize(Source)
        '            '
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            handleExceptionAndRethrow(New Exception("Unexpected exception"))
        '            '
        '        End Function
        '
        '
        '
        Public Function main_GetStyleSheet2(ByVal ContentType As csv_contentTypeEnum, Optional ByVal templateId As Integer = 0, Optional ByVal EmailID As Integer = 0) As String
            main_GetStyleSheet2 = html_getStyleSheet2(ContentType, templateId, EmailID)
        End Function
        '
        '
        '
        Public Function main_GetEditorAddonListJSON(ByVal ContentType As csv_contentTypeEnum) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("main_GetEditorAddonListJSON")
            '
            Dim AddonName As String
            Dim LastAddonName As String
            Dim CSAddons As Integer
            Dim DefaultAddonOption_String As String
            Dim UseAjaxDefaultAddonOptions As Boolean
            'Dim AddonName As String
            Dim PtrTest As Integer
            Dim s As String
            Dim IconWidth As Integer
            Dim IconHeight As Integer
            Dim IconSprites As Integer
            Dim IsInline As Boolean
            'Dim addonid as integer
            Dim AddonGuid As String
            Dim IconIDControlString As String
            Dim IconImg As String
            Dim NameValuePair As String
            Dim AddonContentName As String
            Dim ObjectProgramID As Integer
            Dim ObjectProgramID2 As String
            Dim Pos As Integer
            Dim OptionName As String
            Dim OptionValue As String
            Dim OptionSelector As String
            'Dim cmc As cpCoreClass
            Dim LoopPtr As Integer
            Dim FieldCaption As String
            Dim SelectList As String
            Dim IconFilename As String
            Dim HintCnt As Integer
            Dim CS As Integer
            Dim SourceFilename As String
            Dim Copy As String
            Dim SourceEditor As String
            Dim CutPosition As Integer
            '
            Dim iDefaultValue As String
            Dim EditorObjectName As String
            Dim iWidth As String
            Dim iHeight As String
            Dim PixelHeight As Integer
            Dim SourceMenu As String
            Dim Out As String
            Dim QuerySplit() As String
            Dim NameValue As String
            Dim Pointer As Integer
            Dim CSFields As Integer
            Dim FieldName As String
            Dim ArgumentList As String
            Dim Index As coreKeyPtrIndexClass
            Dim Items() As String
            Dim ItemsSize As Integer
            Dim ItemsCnt As Integer
            Dim ItemsPtr As Integer
            Dim LastName2 As String
            Dim LastName As String
            Dim Criteria As String
            Dim CSLists As Integer
            Dim FieldList As String
            Dim hint As String
            'dim buildversion As String
            Dim cacheKey As String
            '
            '   BuildVersion = app.dataBuildVersion
            '
            ' can not save this because there are multiple main_versions
            '
            cacheKey = "editorAddonList:" & ContentType
            main_GetEditorAddonListJSON = docProperties.getText(cacheKey)
            If (main_GetEditorAddonListJSON = "") Then
                '
                ' ----- AC Tags, Would like to replace these with Add-ons eventually
                '
                ItemsSize = 100
                ReDim Items(100)
                ItemsCnt = 0
                Index = New coreKeyPtrIndexClass
                'Set main_cmc = main_GetCsv()
                '
                ' AC StartBlockText
                '
                IconIDControlString = "AC," & ACTypeAggregateFunction & ",0,Block Text,"
                IconImg = GetAddonIconImg(siteProperties.adminURL, 0, 0, 0, True, IconIDControlString, "", appConfig.cdnFilesNetprefix, "Text Block Start", "Block text to all except selected groups starting at this point", "", 0)
                IconImg = EncodeJavascript(IconImg)
                Items(ItemsCnt) = "['Block Text','" & IconImg & "']"
                Call Index.setPtr("Block Text", ItemsCnt)
                ItemsCnt = ItemsCnt + 1
                '
                ' AC EndBlockText
                '
                IconIDControlString = "AC," & ACTypeAggregateFunction & ",0,Block Text End,"
                IconImg = GetAddonIconImg(siteProperties.adminURL, 0, 0, 0, True, IconIDControlString, "", appConfig.cdnFilesNetprefix, "Text Block End", "End of text block", "", 0)
                IconImg = EncodeJavascript(IconImg)
                Items(ItemsCnt) = "['Block Text End','" & IconImg & "']"
                Call Index.setPtr("Block Text", ItemsCnt)
                ItemsCnt = ItemsCnt + 1
                '
                If (ContentType = csv_contentTypeEnum.contentTypeEmail) Or (ContentType = csv_contentTypeEnum.contentTypeEmailTemplate) Then
                    '
                    ' ----- Email Only AC tags
                    '
                    ' Editing Email Body or Templates - Since Email can not process Add-ons, it main_Gets the legacy AC tags for now
                    '
                    ' Personalization Tag
                    '
                    FieldList = db_GetContentProperty("people", "SelectFieldList")
                    FieldList = vbReplace(FieldList, ",", "|")
                    IconIDControlString = "AC,PERSONALIZATION,0,Personalization,field=[" & FieldList & "]"
                    IconImg = GetAddonIconImg(siteProperties.adminURL, 0, 0, 0, True, IconIDControlString, "", appConfig.cdnFilesNetprefix, "Any Personalization Field", "Renders as any Personalization Field", "", 0)
                    IconImg = EncodeJavascript(IconImg)
                    Items(ItemsCnt) = "['Personalization','" & IconImg & "']"
                    Call Index.setPtr("Personalization", ItemsCnt)
                    ItemsCnt = ItemsCnt + 1
                    '
                    If (ContentType = csv_contentTypeEnum.contentTypeEmailTemplate) Then
                        '
                        ' Editing Email Templates
                        '   This is a special case
                        '   Email content processing can not process add-ons, and PageContentBox and TextBox are needed
                        '   So I added the old AC Tag into the menu for this case
                        '   Need a more consistant solution later
                        '
                        IconIDControlString = "AC," & ACTypeTemplateContent & ",0,Template Content,"
                        IconImg = GetAddonIconImg(siteProperties.adminURL, 52, 64, 0, False, IconIDControlString, "/ccLib/images/ACTemplateContentIcon.gif", appConfig.cdnFilesNetprefix, "Content Box", "Renders as the content for a template", "", 0)
                        IconImg = EncodeJavascript(IconImg)
                        Items(ItemsCnt) = "['Content Box','" & IconImg & "']"
                        'Items(ItemsCnt) = "['Template Content','<img onDblClick=""window.parent.OpenAddonPropertyWindow(this);"" alt=""Add-on"" title=""Rendered as the Template Content"" id=""AC," & ACTypeTemplateContent & ",0,Template Content,"" src=""/ccLib/images/ACTemplateContentIcon.gif"" WIDTH=52 HEIGHT=64>']"
                        Call Index.setPtr("Content Box", ItemsCnt)
                        ItemsCnt = ItemsCnt + 1
                        '
                        IconIDControlString = "AC," & ACTypeTemplateText & ",0,Template Text,Name=Default"
                        IconImg = GetAddonIconImg(siteProperties.adminURL, 52, 52, 0, False, IconIDControlString, "/ccLib/images/ACTemplateTextIcon.gif", appConfig.cdnFilesNetprefix, "Template Text", "Renders as a template text block", "", 0)
                        IconImg = EncodeJavascript(IconImg)
                        Items(ItemsCnt) = "['Template Text','" & IconImg & "']"
                        'Items(ItemsCnt) = "['Template Text','<img onDblClick=""window.parent.OpenAddonPropertyWindow(this);"" alt=""Add-on"" title=""Rendered as the Template Text"" id=""AC," & ACTypeTemplateText & ",0,Template Text,Name=Default"" src=""/ccLib/images/ACTemplateTextIcon.gif"" WIDTH=52 HEIGHT=52>']"
                        Call Index.setPtr("Template Text", ItemsCnt)
                        ItemsCnt = ItemsCnt + 1
                    End If
                Else
                    '
                    ' ----- Web Only AC Tags
                    '
                    ' Watch Lists
                    '
                    CSLists = db.csOpen("Content Watch Lists", , "Name,ID", , , , , "Name,ID", 20, 1)
                    If db.cs_Ok(CSLists) Then
                        Do While db.cs_Ok(CSLists)
                            FieldName = Trim(db.cs_getText(CSLists, "name"))
                            If FieldName <> "" Then
                                FieldCaption = "Watch List [" & FieldName & "]"
                                IconIDControlString = "AC,WATCHLIST,0," & FieldName & ",ListName=" & FieldName & "&SortField=[DateAdded|Link|LinkLabel|Clicks|WhatsNewDateExpires]&SortDirection=Z-A[A-Z|Z-A]"
                                IconImg = GetAddonIconImg(siteProperties.adminURL, 0, 0, 0, True, IconIDControlString, "", appConfig.cdnFilesNetprefix, FieldCaption, "Rendered as the " & FieldCaption, "", 0)
                                IconImg = EncodeJavascript(IconImg)
                                FieldCaption = EncodeJavascript(FieldCaption)
                                Items(ItemsCnt) = "['" & FieldCaption & "','" & IconImg & "']"
                                'Items(ItemsCnt) = "['" & FieldCaption & "','<img onDblClick=""window.parent.OpenAddonPropertyWindow(this);"" alt=""Add-on"" title=""Rendered as the " & FieldCaption & """ id=""AC,WATCHLIST,0," & FieldName & ",ListName=" & FieldName & "&SortField=[DateAdded|Link|LinkLabel|Clicks|WhatsNewDateExpires]&SortDirection=Z-A[A-Z|Z-A]"" src=""/ccLib/images/ACWatchList.GIF"">']"
                                Call Index.setPtr(FieldCaption, ItemsCnt)
                                ItemsCnt = ItemsCnt + 1
                                If ItemsCnt >= ItemsSize Then
                                    ItemsSize = ItemsSize + 100
                                    ReDim Preserve Items(ItemsSize)
                                End If
                            End If
                            db.db_csGoNext(CSLists)
                        Loop
                    End If
                    Call db.cs_Close(CSLists)
                End If
                '
                ' ----- Add-ons (AC Aggregate Functions)
                '
                If (False) And (ContentType = csv_contentTypeEnum.contentTypeEmail) Then
                    '
                    ' Email did not support add-ons
                    '
                Else
                    '
                    ' Either non-email or > 4.0.325
                    '
                    Criteria = "(1=1)"
                    If (ContentType = csv_contentTypeEnum.contentTypeEmail) Then
                        '
                        ' select only addons with email placement (dont need to check main_version bc if email, must be >4.0.325
                        '
                        Criteria = Criteria & "and(email<>0)"
                    Else
                        If True Then
                            If (ContentType = csv_contentTypeEnum.contentTypeWeb) Then
                                '
                                ' Non Templates
                                '
                                Criteria = Criteria & "and(content<>0)"
                            Else
                                '
                                ' Templates
                                '
                                Criteria = Criteria & "and(template<>0)"
                            End If
                        End If
                    End If
                    AddonContentName = "Add-ons"
                    SelectList = "Name,Link,ID,ArgumentList,ObjectProgramID,IconFilename,IconWidth,IconHeight,IconSprites,IsInline,ccguid"
                    CSAddons = db.csOpen(AddonContentName, Criteria, "Name,ID", , , , , SelectList)
                    If db.cs_Ok(CSAddons) Then
                        Do While db.cs_Ok(CSAddons)
                            AddonGuid = db.cs_getText(CSAddons, "ccguid")
                            ObjectProgramID2 = db.cs_getText(CSAddons, "ObjectProgramID")
                            If (ContentType = csv_contentTypeEnum.contentTypeEmail) And (ObjectProgramID2 <> "") Then
                                '
                                ' Block activex addons from email
                                '
                                ObjectProgramID2 = ObjectProgramID2
                            Else
                                AddonName = Trim(db.db_GetCS(CSAddons, "name"))
                                If AddonName <> "" And (AddonName <> LastAddonName) Then
                                    '
                                    ' Icon (fieldtyperesourcelink)
                                    '
                                    IsInline = db.cs_getBoolean(CSAddons, "IsInline")
                                    IconFilename = db.db_GetCS(CSAddons, "Iconfilename")
                                    If IconFilename = "" Then
                                        IconWidth = 0
                                        IconHeight = 0
                                        IconSprites = 0
                                    Else
                                        IconWidth = db.cs_getInteger(CSAddons, "IconWidth")
                                        IconHeight = db.cs_getInteger(CSAddons, "IconHeight")
                                        IconSprites = db.cs_getInteger(CSAddons, "IconSprites")
                                    End If
                                    '
                                    ' Calculate DefaultAddonOption_String
                                    '
                                    UseAjaxDefaultAddonOptions = True
                                    If UseAjaxDefaultAddonOptions Then
                                        DefaultAddonOption_String = ""
                                    Else
                                        ArgumentList = Trim(db.db_GetCS(CSAddons, "ArgumentList"))
                                        DefaultAddonOption_String = main_GetDefaultAddonOption_String(ArgumentList, AddonGuid, IsInline)
                                        DefaultAddonOption_String = main_encodeHTML(DefaultAddonOption_String)
                                    End If
                                    '
                                    ' Changes necessary to support commas in AddonName and OptionString
                                    '   Remove commas in Field Name
                                    '   Then in Javascript, when spliting on comma, anything past position 4, put back onto 4
                                    '
                                    LastAddonName = AddonName
                                    IconIDControlString = "AC,AGGREGATEFUNCTION,0," & AddonName & "," & DefaultAddonOption_String & "," & AddonGuid
                                    IconImg = GetAddonIconImg(siteProperties.adminURL, IconWidth, IconHeight, IconSprites, IsInline, IconIDControlString, IconFilename, appConfig.cdnFilesNetprefix, AddonName, "Rendered as the Add-on [" & AddonName & "]", "", 0)
                                    Items(ItemsCnt) = "['" & EncodeJavascript(AddonName) & "','" & EncodeJavascript(IconImg) & "']"
                                    Call Index.setPtr(AddonName, ItemsCnt)
                                    ItemsCnt = ItemsCnt + 1
                                    If ItemsCnt >= ItemsSize Then
                                        ItemsSize = ItemsSize + 100
                                        ReDim Preserve Items(ItemsSize)
                                    End If
                                End If
                            End If
                            db.db_csGoNext(CSAddons)
                        Loop
                    End If
                    Call db.cs_Close(CSAddons)
                End If
                '
                ' Build output sting in alphabetical order by name
                '
                s = ""
                ItemsPtr = Index.getFirstPtr
                Do While ItemsPtr >= 0 And LoopPtr < ItemsCnt
                    s = s & vbCrLf & "," & Items(ItemsPtr)
                    PtrTest = Index.getNextPtr
                    If PtrTest < 0 Then
                        Exit Do
                    Else
                        ItemsPtr = PtrTest
                    End If
                    LoopPtr = LoopPtr + 1
                Loop
                If s <> "" Then
                    s = "[" & Mid(s, 4) & "]"
                End If
                '
                main_GetEditorAddonListJSON = s
                Call docProperties.setProperty(cacheKey, main_GetEditorAddonListJSON, False)
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError11("main_GetEditorAddonListJSON, hint=[" & hint & "]", "trap")
        End Function
        '
        '
        '
        Public Function main_GetDefaultAddonOption_String(ByVal ArgumentList As String, ByVal AddonGuid As String, ByVal IsInline As Boolean) As String
            'public Function main_GetDefaultAddonOption_String(ArgumentList As String, AddonGuid As String, IsInline As Boolean, cmc As cpCoreClass) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("main_GetDefaultAddonOption_String")
            '
            Dim AddonName As String
            Dim LastAddonName As String
            Dim NameValuePair As String
            Dim Pos As Integer
            Dim OptionName As String
            Dim OptionValue As String
            Dim OptionSelector As String
            Dim QuerySplit() As String
            Dim NameValue As String
            Dim Ptr As Integer
            '
            ArgumentList = vbReplace(ArgumentList, vbCrLf, vbCr)
            ArgumentList = vbReplace(ArgumentList, vbLf, vbCr)
            ArgumentList = vbReplace(ArgumentList, vbCr, vbCrLf)
            If (InStr(1, ArgumentList, "wrapper", vbTextCompare) = 0) Then
                '
                ' Add in default constructors, like wrapper
                '
                If ArgumentList <> "" Then
                    ArgumentList = ArgumentList & vbCrLf
                End If
                If vbLCase(AddonGuid) = vbLCase(ContentBoxGuid) Then
                    ArgumentList = ArgumentList & AddonOptionConstructor_BlockNoAjax
                ElseIf IsInline Then
                    ArgumentList = ArgumentList & AddonOptionConstructor_Inline
                Else
                    ArgumentList = ArgumentList & AddonOptionConstructor_Block
                End If
            End If
            If ArgumentList <> "" Then
                '
                ' Argument list is present, translate from AddonConstructor to AddonOption format (see main_executeAddon for details)
                '
                QuerySplit = SplitCRLF(ArgumentList)
                main_GetDefaultAddonOption_String = ""
                For Ptr = 0 To UBound(QuerySplit)
                    NameValue = QuerySplit(Ptr)
                    If NameValue <> "" Then
                        '
                        ' Execute list functions
                        '
                        OptionName = ""
                        OptionValue = ""
                        OptionSelector = ""
                        '
                        ' split on equal
                        '
                        NameValue = vbReplace(NameValue, "\=", vbCrLf)
                        Pos = vbInstr(1, NameValue, "=")
                        If Pos = 0 Then
                            OptionName = NameValue
                        Else
                            OptionName = Mid(NameValue, 1, Pos - 1)
                            OptionValue = Mid(NameValue, Pos + 1)
                        End If
                        OptionName = vbReplace(OptionName, vbCrLf, "\=")
                        OptionValue = vbReplace(OptionValue, vbCrLf, "\=")
                        '
                        ' split optionvalue on [
                        '
                        OptionValue = vbReplace(OptionValue, "\[", vbCrLf)
                        Pos = vbInstr(1, OptionValue, "[")
                        If Pos <> 0 Then
                            OptionSelector = Mid(OptionValue, Pos)
                            OptionValue = Mid(OptionValue, 1, Pos - 1)
                        End If
                        OptionValue = vbReplace(OptionValue, vbCrLf, "\[")
                        OptionSelector = vbReplace(OptionSelector, vbCrLf, "\[")
                        '
                        ' Decode AddonConstructor format
                        '
                        OptionName = DecodeAddonConstructorArgument(OptionName)
                        OptionValue = DecodeAddonConstructorArgument(OptionValue)
                        '
                        ' Encode AddonOption format
                        '
                        'main_GetAddonSelector expects value to be encoded, but not name
                        'OptionName = encodeNvaArgument(OptionName)
                        OptionValue = encodeNvaArgument(OptionValue)
                        '
                        ' rejoin
                        '
                        NameValuePair = pageManager_GetAddonSelector(OptionName, OptionValue, OptionSelector)
                        NameValuePair = EncodeJavascript(NameValuePair)
                        main_GetDefaultAddonOption_String = main_GetDefaultAddonOption_String & "&" & NameValuePair
                        If vbInstr(1, NameValuePair, "=") = 0 Then
                            main_GetDefaultAddonOption_String = main_GetDefaultAddonOption_String & "="
                        End If
                    End If
                Next
                If main_GetDefaultAddonOption_String <> "" Then
                    ' remove leading "&"
                    main_GetDefaultAddonOption_String = Mid(main_GetDefaultAddonOption_String, 2)
                End If
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError11("main_GetDefaultAddonOption_String", "trap")
        End Function
        ''
        ''========================================================================
        ''   Encode a string to be used as either a name or value in an optionstring (name=value&name=value&etc)
        ''       use this to create a string by encoding the name and then adding to the string
        ''========================================================================
        ''
        'Public Function encodeNvaArgument(ByVal argToEncode As String) As String
        '    encodeNvaArgument = encodeNvaArgument(argToEncode)
        'End Function
        '
        '========================================================================
        ' main_Get FieldEditorList
        '
        '   FieldEditorList is a comma delmited list of addonids, one for each fieldtype
        '   to use it, split the list on comma and use the fieldtype as index
        '========================================================================
        '
        Public Function getFieldTypeDefaultEditorAddonIdList() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("main_GetDefaultAddonOption_String")
            '
            Dim editorAddonIds() As String
            Dim SQL As String
            Dim RS As DataTable
            Dim fieldTypeID As Integer
            '
            If Not pageManager_Private_FieldEditorList_Loaded Then
                '
                ' load default editors into editors() - these are the editors used when there is no editorPreference
                '   editors(fieldtypeid) = addonid
                '
                ReDim editorAddonIds(FieldTypeIdMax)
                SQL = "select t.id,t.editorAddonId" _
                    & " from ccFieldTypes t" _
                    & " left join ccaggregatefunctions a on a.id=t.editorAddonId" _
                    & " where (t.active<>0)and(a.active<>0) order by t.id"
                RS = db.executeSql(SQL)
                For Each dr As DataRow In RS.Rows
                    fieldTypeID = EncodeInteger(dr("id"))
                    If (fieldTypeID <= FieldTypeIdMax) Then
                        editorAddonIds(fieldTypeID) = EncodeText(dr("editorAddonId"))
                    End If
                Next
                pageManager_Private_FieldEditorList = Join(editorAddonIds, ",")
                pageManager_Private_FieldEditorList_Loaded = True
            End If
            getFieldTypeDefaultEditorAddonIdList = pageManager_Private_FieldEditorList
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError11("main_GetDefaultAddonOption_String", "trap")
        End Function
        '
        '------------------------------------------------------------------------------------------------------------
        '   encode an argument to be used in a 'name=value&' string
        '       - ohter characters are reserved to do further parsing, see EncodeNvaArgument
        '------------------------------------------------------------------------------------------------------------
        '
        Public Function main_encodeNvaArgument(ByVal Arg As String) As String
            main_encodeNvaArgument = encodeNvaArgument(Arg)
        End Function
        '
        '------------------------------------------------------------------------------------------------------------
        '   decode an argument that came from parsing a name or value from a 'name=value&' string
        '       split on '&', then on '=', then decode each of the two arguments from either side
        '       - other characters are reserved to do further parsing, see EncodeNvaArgument
        '------------------------------------------------------------------------------------------------------------
        '
        Public Function main_decodeNvaArgument(ByVal EncodedArg As String) As String
            main_decodeNvaArgument = decodeNvaArgument(EncodedArg)
        End Function
        '
        '=================================================================================================================
        '   main_GetNvaValue
        '       main_Gets the value from a simple 'name=value&' list, assuming it was assembled using encodeNvaArgument
        '=================================================================================================================
        '
        Public Function main_GetNvaValue(ByVal Name As String, ByVal nvaEncodedString As String) As String
            On Error GoTo ErrorTrap
            '
            Dim s As String
            Dim encodedName As String
            '
            encodedName = encodeNvaArgument(Name)
            s = getSimpleNameValue(encodedName, nvaEncodedString, "", "&")
            s = decodeNvaArgument(s)
            main_GetNvaValue = Trim(s)
            '
            Exit Function
ErrorTrap:
            handleLegacyError3(appConfig.name, "", "dll", "cpCoreClass", "main_GetNvaValue", Err.Number, Err.Source, Err.Description, True, False, "")
        End Function
        '
        '
        '
        Private Function main_guessDefaultPage() As String
            On Error GoTo ErrorTrap
            '
            'Dim kmafs As New fileSystemClass
            '
            main_guessDefaultPage = "index.php"
            If Not appRootFiles.fileExists(serverConfig.clusterPath & appConfig.appRootFilesPath & main_guessDefaultPage) Then
                main_guessDefaultPage = "index.asp"
                If Not appRootFiles.fileExists(serverConfig.clusterPath & appConfig.appRootFilesPath & main_guessDefaultPage) Then
                    main_guessDefaultPage = "default.asp"
                    If Not appRootFiles.fileExists(serverConfig.clusterPath & appConfig.appRootFilesPath & main_guessDefaultPage) Then
                        main_guessDefaultPage = "default.aspx"
                        If Not appRootFiles.fileExists(serverConfig.clusterPath & appConfig.appRootFilesPath & main_guessDefaultPage) Then
                            main_guessDefaultPage = "index.php"
                            If Not appRootFiles.fileExists(serverConfig.clusterPath & appConfig.appRootFilesPath & main_guessDefaultPage) Then
                                main_guessDefaultPage = ""
                            End If
                        End If
                    End If
                End If
            End If

            '
            Exit Function
ErrorTrap:
            handleLegacyError3(appConfig.name, "", "dll", "cpCoreClass", "main_guessDefaultPage", Err.Number, Err.Source, Err.Description, True, False, "")
        End Function
        '
        ' Verify a link from the template link field to be used as a Template Link
        '
        Private Function main_verifyTemplateLink(ByVal linkSrc As String) As String
            On Error GoTo ErrorTrap
            '
            '
            ' ----- Check Link Format
            '
            main_verifyTemplateLink = linkSrc
            If main_verifyTemplateLink <> "" Then
                If vbInstr(1, main_verifyTemplateLink, "://") <> 0 Then
                    '
                    ' protocol provided, do not fixup
                    '
                    main_verifyTemplateLink = EncodeAppRootPath(main_verifyTemplateLink, web_requestVirtualFilePath, www_requestRootPath, webServer.requestDomain)
                Else
                    '
                    ' no protocol, convert to short link
                    '
                    If Left(main_verifyTemplateLink, 1) <> "/" Then
                        '
                        ' page entered without path, assume it is in root path
                        '
                        main_verifyTemplateLink = "/" & main_verifyTemplateLink
                    End If
                    main_verifyTemplateLink = ConvertLinkToShortLink(main_verifyTemplateLink, webServer.requestDomain, web_requestVirtualFilePath)
                    main_verifyTemplateLink = EncodeAppRootPath(main_verifyTemplateLink, web_requestVirtualFilePath, www_requestRootPath, webServer.requestDomain)
                End If
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError11("main_verifyTemplateLink", "trap")
        End Function
        '
        '===========================================================================================
        ' main_ServerDomainCrossList
        '   comma delimited list of domains that should share in cross domain cookie save
        '===========================================================================================
        '
        Public ReadOnly Property main_ServerDomainCrossList() As String
            Get
                Dim SQL As String
                'dim dt as datatable
                '
                Const cacheName = "Domain Content Cross List Cache"
                '
                If Not pageManager_Private_ServerDomainCrossList_Loaded Then
                    pageManager_Private_ServerDomainCrossList = EncodeText(cache.getObject(Of String)(cacheName))
                    If True And (pageManager_Private_ServerDomainCrossList = "") Then
                        pageManager_Private_ServerDomainCrossList = ","
                        SQL = "select name from ccDomains where (typeId=1)and(allowCrossLogin<>0)"
                        Dim dt As DataTable = db.executeSql(SQL)
                        For Each dr As DataRow In dt.Rows
                            pageManager_Private_ServerDomainCrossList &= dr(0).ToString
                        Next
                        Call cache.setKey(cacheName, pageManager_Private_ServerDomainCrossList, "domains")
                    End If
                    pageManager_Private_ServerDomainCrossList_Loaded = True
                End If
                main_ServerDomainCrossList = appConfig.domainList(0) & pageManager_Private_ServerDomainCrossList
            End Get
        End Property

        '        '
        '
        '
        Private Function main_GetDefaultTemplateId() As Integer
            On Error GoTo ErrorTrap
            '
            Dim CS As Integer
            '
            CS = db.csOpen("page templates", "name=" & db.encodeSQLText(TemplateDefaultName), "ID", , , , , "id")
            If db.cs_Ok(CS) Then
                main_GetDefaultTemplateId = db.cs_getInteger(CS, "ID")
            End If
            Call db.cs_Close(CS)
            '
            ' ----- if default template not found, create a simple default template
            '
            If main_GetDefaultTemplateId = 0 Then
                CS = db.cs_insertRecord("Page Templates")
                If db.cs_Ok(CS) Then
                    main_GetDefaultTemplateId = db.cs_getInteger(CS, "ID")
                    Call db.cs_set(CS, "name", TemplateDefaultName)
                    Call db.cs_set(CS, "Link", "")
                    If True Then
                        Call db.cs_set(CS, "BodyHTML", pageManager_TemplateBody)
                    End If
                    If True Then
                        Call db.cs_set(CS, "ccGuid", DefaultTemplateGuid)
                    End If
                    Call db.cs_Close(CS)
                End If
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError11("main_GetDefaultTemplateId", "trap")
        End Function
        '        '
        '        '
        '        '
        '        Private Sub main_mergeInStream(ByVal LinkQueryString As String)
        '            On Error GoTo ErrorTrap
        '            '
        '            Dim inStreamPtr As Integer
        '            Dim ampSplit() As String
        '            Dim ampSplitCount As Integer
        '            Dim ampSplitPointer As Integer
        '            Dim newNameValue As String
        '            Dim equalPtr As Integer
        '            Dim NewName As String
        '            Dim NewValue As String
        '            '
        '            ' Merge the Link Querystring (QS in the Link from the Alias lookup)
        '            ' into the QS originally to the right of a ? in the Alias itself (from custom programming)
        '            ' If names match, use the custom programming main_version (originial QS, not the LinkQueryString)
        '            '
        '            ampSplit = Split(LinkQueryString, "&")
        '            ampSplitCount = UBound(ampSplit) + 1
        '            If ampSplitCount > 0 Then
        '                For ampSplitPointer = 0 To ampSplitCount - 1
        '                    newNameValue = ampSplit(ampSplitPointer)
        '                    If newNameValue <> "" Then
        '                        equalPtr = vbInstr(1, newNameValue, "=")
        '                        If equalPtr > 0 Then
        '                            NewName = main_DecodeUrl(Mid(newNameValue, 1, equalPtr - 1))
        '                            NewValue = Mid(newNameValue, equalPtr + 1)
        '                        Else
        '                            NewValue = ""
        '                            NewName = newNameValue
        '                        End If
        '                        If docPropertiesArrayCount > 0 Then
        '                            For inStreamPtr = 0 To docPropertiesArrayCount - 1
        '                                If vbLCase(NewName) = vbLCase(docPropertiesDict(inStreamPtr).Name) Then
        '                                    '
        '                                    ' Current entry found
        '                                    '
        '                                    Exit For
        '                                End If
        '                            Next
        '                        End If
        '                        If inStreamPtr = docPropertiesArrayCount Then
        '                            '
        '                            ' Add a new InStream entry
        '                            '
        '                            If docPropertiesArrayCount >= docPropertiesArraySize Then
        '                                docPropertiesArraySize = docPropertiesArraySize + 10
        '                                ReDim Preserve docPropertiesDict(docPropertiesArraySize)
        '                            End If
        '                            docPropertiesArrayCount = docPropertiesArrayCount + 1
        '                            web.requestQueryString = ModifyQueryString(web.requestQueryString, NewName, NewValue)
        '                        End If
        '                        '
        '                        ' Populate the entry at InStreamPtr
        '                        '
        '                        With docPropertiesDict(inStreamPtr)
        '                            .NameValue = newNameValue
        '                            .Name = NewName
        '                            .Value = NewValue
        '                            .FileContent = {}
        '                            .IsFile = False
        '                            .IsForm = False
        '                        End With
        '                    End If
        '                Next
        '            End If
        '            '
        '            Exit Sub
        'ErrorTrap:
        '            Call handleLegacyError11("main_mergeInStream", "trap")
        '        End Sub
        '
        '========================================================================
        ' main_encodeCookieName
        '   replace invalid cookie characters with %hex
        '========================================================================
        '
        Private Function main_encodeCookieName(ByVal Source As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("main_encodeCookieName")
            '
            Dim SourcePointer As Integer
            Dim Character As String
            Dim localSource As String
            '
            If Source <> "" Then
                localSource = Source
                For SourcePointer = 1 To Len(localSource)
                    Character = Mid(localSource, SourcePointer, 1)
                    If vbInstr(1, "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789.-_!*()", Character, vbTextCompare) <> 0 Then
                        main_encodeCookieName = main_encodeCookieName & Character
                    Else
                        main_encodeCookieName = main_encodeCookieName & "%" & Hex(Asc(Character))
                    End If
                Next
            End If
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError18("main_encodeCookieName")
        End Function
        ''
        ''========================================================================
        ''   legacy
        ''========================================================================
        ''
        'Public Function main_SendMemberEmail(ByVal ToMemberID As Integer, ByVal From As String, ByVal subject As String, ByVal Body As String, ByVal Immediate As Boolean, ByVal HTML As Boolean) As String
        '    main_SendMemberEmail = main_SendMemberEmail2(ToMemberID, From, subject, Body, Immediate, HTML, 0, "", False)
        'End Function
        '        '
        '        '========================================================================
        '        '   main_SendMemberEmail2( ToMemberID, From, Subject, Body, Immediate, HTML, emailIdForLog ) As String
        '        '       Returns "" if send is OK, otherwise it returns an error message
        '        '========================================================================
        '        '
        '        Public Function main_SendMemberEmail2(ByVal ToMemberID As Integer, ByVal From As String, ByVal subject As String, ByVal Body As String, ByVal Immediate As Boolean, ByVal HTML As Boolean, ByVal emailIdForLog As Integer, template As String, emailAllowLinkEID As Boolean) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("SendMemberEmail2")
        '            '
        '            'If Not (true) Then Exit Function
        '            '
        '            main_SendMemberEmail2 = csv_SendMemberEmail3(EncodeInteger(ToMemberID), EncodeText(From), EncodeText(subject), EncodeText(Body), EncodeBoolean(Immediate), EncodeBoolean(HTML), emailIdForLog, "", False)
        '            '
        '            Exit Function
        '            '
        'ErrorTrap:
        '            Call handleLegacyError18("main_SendMemberEmail2")
        '        End Function
        ''
        ''========================================================================
        ''   Legacy
        ''========================================================================
        ''
        'Public Function main_SendMemberEmail_Fast(ByVal ToMemberID As Integer, ByVal From As String, ByVal subject As String, ByVal Body As String, ByVal Immediate As Boolean, ByVal HTML As Boolean) As String
        '    main_SendMemberEmail_Fast = csv_SendMemberEmail3(ToMemberID, From, subject, Body, Immediate, HTML, 0, "", False)
        'End Function
        '
        '========================================================================
        ''' <summary>
        ''' Send Email to address
        ''' </summary>
        ''' <param name="ToAddress"></param>
        ''' <param name="FromAddress"></param>
        ''' <param name="SubjectMessage"></param>
        ''' <param name="BodyMessage"></param>
        ''' <param name="optionalEmailIdForLog"></param>
        ''' <param name="Immediate"></param>
        ''' <param name="HTML"></param>
        ''' <returns>Returns OK if successful, otherwise returns user status</returns>
        Public Function main_SendEmail(ByVal ToAddress As String, ByVal FromAddress As String, ByVal SubjectMessage As String, ByVal BodyMessage As String, Optional ByVal optionalEmailIdForLog As Integer = 0, Optional ByVal Immediate As Boolean = True, Optional ByVal HTML As Boolean = False) As String
            Dim returnStatus As String = ""
            Try
                returnStatus = email_send3(EncodeText(ToAddress), EncodeText(FromAddress), EncodeText(SubjectMessage), EncodeText(BodyMessage), "", "", "", Immediate, EncodeBoolean(HTML), EncodeInteger(optionalEmailIdForLog))
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return returnStatus
        End Function
        '
        '====================================================================================================
        ''' <summary>
        ''' send the confirmation email as a test
        ''' </summary>
        ''' <param name="EmailID"></param>
        ''' <param name="ConfirmationMemberID"></param>
        Public Sub email_sendEmailConfirmationTest(ByVal EmailID As Integer, ByVal ConfirmationMemberID As Integer)
            Try
                Dim ConfirmFooter As String
                Dim TotalCnt As Integer
                Dim BlankCnt As Integer
                Dim DupCnt As Integer
                Dim DupList As String
                Dim BadCnt As Integer
                Dim BadList As String

                Dim EmailLen As Integer
                Dim Pos As Integer

                Dim LastEmail As String
                Dim Email As String
                Dim LastDupEmail As String
                Dim EmailLine As String
                Dim TotalList As String
                Dim EMailName As String
                Dim EmailMemberID As Integer
                Dim Posat As Integer
                Dim PosDot As Integer
                Dim CS As Integer
                Dim EmailSubject As String
                Dim EmailBody As String
                Dim EmailTemplate As String
                Dim EMailTemplateID As Integer
                Dim CSTemplate As Integer
                Dim SpamFooter As String
                Dim CSPeople As Integer
                Dim SQL As String
                Dim EmailStatus As String
                Dim emailstyles As String
                Dim layoutError As String
                '
                CS = db_csOpen("email", EmailID)
                If Not db.cs_Ok(CS) Then
                    Call error_AddUserError("There was a problem sending the email confirmation. The email record could not be found.")
                Else
                    EmailSubject = db.db_GetCS(CS, "Subject")
                    EmailBody = db.db_GetCS(CS, "copyFilename")
                    '
                    ' merge in template
                    '
                    EmailTemplate = ""
                    EMailTemplateID = db.cs_getInteger(CS, "EmailTemplateID")
                    If EMailTemplateID <> 0 Then
                        CSTemplate = db_csOpen("Email Templates", EMailTemplateID, , , "BodyHTML")
                        If db.cs_Ok(CSTemplate) Then
                            EmailTemplate = db.db_GetCS(CSTemplate, "BodyHTML")
                        End If
                        Call db.cs_Close(CSTemplate)
                    End If
                    '
                    ' styles
                    '
                    emailstyles = email_getEmailStyles(EmailID)
                    EmailBody = emailstyles & EmailBody
                    '
                    ' spam footer
                    '
                    If db.cs_getBoolean(CS, "AllowSpamFooter") Then
                        '
                        ' This field is default true, and non-authorable
                        ' It will be true in all cases, except a possible unforseen exception
                        '
                        EmailBody = EmailBody & "<div style=""clear:both;padding:10px;"">" & main_GetLinkedText("<a href=""" & html_EncodeHTML(web_requestProtocol & webServer.requestDomain & www_requestRootPath & siteProperties.serverPageDefault & "?" & RequestNameEmailSpamFlag & "=#member_email#") & """>", siteProperties.getText("EmailSpamFooter", DefaultSpamFooter)) & "</div>"
                        EmailBody = vbReplace(EmailBody, "#member_email#", "UserEmailAddress")
                    End If
                    '
                    ' Confirm footer
                    '
                    SQL = main_GetGroupEmailSQL(False, EmailID)
                    'SQL = main_GetGroupEmailSQL(db.db_GetCSBoolean(CS, "ToAll"), EmailID)
                    CSPeople = db.cs_openSql(SQL)
                    If Not db.cs_Ok(CSPeople) Then
                        error_AddUserError("There are no valid recipients of this email, other than the confirmation address. Either no groups or topics were selected, or those selections contain no people with both a valid email addresses and 'Allow Group Email' enabled.")
                    Else
                        'TotalList = TotalList & "--- all recipients ---" & BR
                        LastEmail = "empty"
                        Do While db.cs_Ok(CSPeople)
                            Email = db.db_GetCS(CSPeople, "email")
                            EMailName = db.db_GetCS(CSPeople, "name")
                            EmailMemberID = db.cs_getInteger(CSPeople, "ID")
                            If EMailName = "" Then
                                EMailName = "no name (member id " & EmailMemberID & ")"
                            End If
                            EmailLine = Email & " for " & EMailName
                            If Email = "" Then
                                BlankCnt = BlankCnt + 1
                            Else
                                If Email = LastEmail Then
                                    DupCnt = DupCnt + 1
                                    If Email <> LastDupEmail Then
                                        DupList = DupList & "<div class=i>" & Email & "</div>" & BR
                                        LastDupEmail = Email
                                    End If
                                End If
                            End If
                            EmailLen = Len(Email)
                            Posat = vbInstr(1, Email, "@")
                            PosDot = InStrRev(Email, ".")
                            If EmailLen < 6 Then
                                BadCnt = BadCnt + 1
                                BadList = BadList & EmailLine & BR
                            ElseIf (Posat < 2) Or (Posat > (EmailLen - 4)) Then
                                BadCnt = BadCnt + 1
                                BadList = BadList & EmailLine & BR
                            ElseIf (PosDot < 4) Or (PosDot > (EmailLen - 2)) Then
                                BadCnt = BadCnt + 1
                                BadList = BadList & EmailLine & BR
                            End If
                            TotalList = TotalList & EmailLine & BR
                            LastEmail = Email
                            TotalCnt = TotalCnt + 1
                            Call db.db_csGoNext(CSPeople)
                        Loop
                        'TotalList = TotalList & "--- end all recipients ---" & BR
                    End If
                    Call db.cs_Close(CSPeople)
                    '
                    If DupCnt = 1 Then
                        Call error_AddUserError("There is 1 duplicate email address. See the test email for details.")
                        ConfirmFooter = ConfirmFooter & "<div style=""clear:all"">WARNING: There is 1 duplicate email address. Only one email will be sent to each address. If the email includes personalization, or if you are using link authentication to automatically log in the user, you may want to correct duplicates to be sure the email is created correctly.<div style=""margin:20px;"">" & DupList & "</div></div>"
                    ElseIf DupCnt > 1 Then
                        Call error_AddUserError("There are " & DupCnt & " duplicate email addresses. See the test email for details")
                        ConfirmFooter = ConfirmFooter & "<div style=""clear:all"">WARNING: There are " & DupCnt & " duplicate email addresses. Only one email will be sent to each address. If the email includes personalization, or if you are using link authentication to automatically log in the user, you may want to correct duplicates to be sure the email is created correctly.<div style=""margin:20px;"">" & DupList & "</div></div>"
                    End If
                    '
                    If BadCnt = 1 Then
                        Call error_AddUserError("There is 1 invalid email address. See the test email for details.")
                        ConfirmFooter = ConfirmFooter & "<div style=""clear:all"">WARNING: There is 1 invalid email address<div style=""margin:20px;"">" & BadList & "</div></div>"
                    ElseIf BadCnt > 1 Then
                        Call error_AddUserError("There are " & BadCnt & " invalid email addresses. See the test email for details")
                        ConfirmFooter = ConfirmFooter & "<div style=""clear:all"">WARNING: There are " & BadCnt & " invalid email addresses<div style=""margin:20px;"">" & BadList & "</div></div>"
                    End If
                    '
                    If BlankCnt = 1 Then
                        Call error_AddUserError("There is 1 blank email address. See the test email for details")
                        ConfirmFooter = ConfirmFooter & "<div style=""clear:all"">WARNING: There is 1 blank email address.</div>"
                    ElseIf BlankCnt > 1 Then
                        Call error_AddUserError("There are " & DupCnt & " blank email addresses. See the test email for details.")
                        ConfirmFooter = ConfirmFooter & "<div style=""clear:all"">WARNING: There are " & BlankCnt & " blank email addresses.</div>"
                    End If
                    '
                    If TotalCnt = 0 Then
                        ConfirmFooter = ConfirmFooter & "<div style=""clear:all"">WARNING: There are no recipients for this email.</div>"
                    ElseIf TotalCnt = 1 Then
                        ConfirmFooter = ConfirmFooter & "<div style=""clear:all"">There is 1 recipient<div style=""margin:20px;"">" & TotalList & "</div></div>"
                    Else
                        ConfirmFooter = ConfirmFooter & "<div style=""clear:all"">There are " & TotalCnt & " recipients<div style=""margin:20px;"">" & TotalList & "</div></div>"
                    End If
                    '
                    If ConfirmationMemberID = 0 Then
                        error_AddUserError("No confirmation email was send because a Confirmation member is not selected")
                    Else
                        EmailBody = EmailBody & "<div style=""clear:both;padding:10px;margin:10px;border:1px dashed #888;"">Administrator<br><br>" & ConfirmFooter & "</div>"
                        EmailStatus = email_sendMemberEmail3(ConfirmationMemberID, db.cs_getText(CS, "FromAddress"), EmailSubject, EmailBody, True, True, EmailID, EmailTemplate, False)
                        If EmailStatus <> "ok" Then
                            error_AddUserError(EmailStatus)
                        End If
                    End If
                End If
                Call db.cs_Close(CS)
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
        End Sub
        '
        '========================================================================
        ' main_SendFormEmail
        '   sends an email with the contents of a form
        '========================================================================
        '
        Public Sub main_SendFormEmail(ByVal SendTo As String, ByVal SendFrom As String, ByVal SendSubject As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("SendFormEmail")
            '
            'If Not (true) Then Exit Sub
            '
            Dim Message As String
            Dim subject As String
            Dim Result As String
            Dim RequestFormElementVariant As Object
            Dim MethodName As String
            Dim iSendTo As String
            Dim iSendFrom As String
            Dim iSendSubject As String
            Dim Pointer As Integer
            '
            iSendTo = EncodeText(SendTo)
            iSendFrom = EncodeText(SendFrom)
            iSendSubject = EncodeText(SendSubject)
            '
            MethodName = "main_SendFormEmail"
            '
            If ((InStr(iSendTo, "@") = 0)) Then
                iSendTo = siteProperties.getText("TrapEmail")
                iSendSubject = "EmailForm with bad Sendto address"
                Message = "Subject: " & iSendSubject
                Message = Message & vbCrLf
            End If
            Message = Message & "The form was submitted " & main_PageStartTime & vbCrLf
            Message = Message & vbCrLf
            Message = Message & "All text fields are included, completed or not." & vbCrLf
            Message = Message & "Only those checkboxes that are checked are included." & vbCrLf
            Message = Message & "Entries are not in the order they appeared on the form." & vbCrLf
            Message = Message & vbCrLf
            For Each kvp As KeyValuePair(Of String, docPropertiesClass) In docProperties.docPropertiesDict
                With kvp.Value
                    If .IsForm Then
                        If vbUCase(.Value) = "ON" Then
                            Message = Message & .Name & ": Yes" & vbCrLf & vbCrLf
                        Else
                            Message = Message & .Name & ": " & .Value & vbCrLf & vbCrLf
                        End If
                    End If
                End With
            Next
            '
            Call main_SendEmail(iSendTo, iSendFrom, iSendSubject, Message, , False, False)
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        '
        '
        Public Sub main_SendGroupEmail(ByVal GroupList As String, ByVal FromAddress As String, ByVal subject As String, ByVal Body As String, ByVal Immediate As Boolean, ByVal HTML As Boolean)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("Proc00271")
            '
            'If Not (true) Then Exit Sub
            '
            Dim rootUrl As String
            Dim MethodName As String
            Dim Groups() As String
            Dim GroupCount As Integer
            Dim GroupPointer As Integer
            Dim iiGroupList As String
            Dim ParsePosition As Integer
            Dim iGroupList As String
            Dim iFromAddress As String
            Dim iSubjectSource As String
            Dim iSubject As String
            Dim iBodySource As String
            Dim iBody As String
            Dim iImmediate As Boolean
            Dim iHTML As Boolean
            Dim SQL As String
            Dim CSPointer As Integer
            Dim ToMemberID As Integer
            '
            MethodName = "main_SendGroupEmail"
            '
            iGroupList = EncodeText(GroupList)
            iFromAddress = EncodeText(FromAddress)
            iSubjectSource = EncodeText(subject)
            iBodySource = EncodeText(Body)
            iImmediate = EncodeBoolean(Immediate)
            iHTML = EncodeBoolean(HTML)
            '
            ' Fix links for HTML send - must do it now before encodehtml so eid links will attach
            '
            rootUrl = "http://" & main_ServerDomain & www_requestRootPath
            iBodySource = ConvertLinksToAbsolute(iBodySource, rootUrl)
            '
            ' Build the list of groups
            '
            If iGroupList <> "" Then
                iiGroupList = iGroupList
                Do While iiGroupList <> ""
                    ReDim Preserve Groups(GroupCount)
                    ParsePosition = vbInstr(1, iiGroupList, ",")
                    If ParsePosition = 0 Then
                        Groups(GroupCount) = iiGroupList
                        iiGroupList = ""
                    Else
                        Groups(GroupCount) = Mid(iiGroupList, 1, ParsePosition - 1)
                        iiGroupList = Mid(iiGroupList, ParsePosition + 1)
                    End If
                    GroupCount = GroupCount + 1
                Loop
            End If
            If GroupCount > 0 Then
                '
                ' Build the SQL statement
                '
                SQL = "SELECT DISTINCT ccMembers.ID" _
                    & " FROM (ccMembers LEFT JOIN ccMemberRules ON ccMembers.ID = ccMemberRules.MemberID) LEFT JOIN ccgroups ON ccMemberRules.GroupID = ccgroups.ID" _
                    & " WHERE (((ccMembers.Active)<>0) AND ((ccMembers.AllowBulkEmail)<>0) AND ((ccMemberRules.Active)<>0) AND ((ccgroups.Active)<>0) AND ((ccgroups.AllowBulkEmail)<>0)AND((ccMemberRules.DateExpires is null)OR(ccMemberRules.DateExpires>" & db.encodeSQLDate(main_PageStartTime) & ")) AND ("
                For GroupPointer = 0 To GroupCount - 1
                    If GroupPointer = 0 Then
                        SQL &= "(ccgroups.Name=" & db.encodeSQLText(Groups(GroupPointer)) & ")"
                    Else
                        SQL &= "OR(ccgroups.Name=" & db.encodeSQLText(Groups(GroupPointer)) & ")"
                    End If
                Next
                SQL &= "));"
                CSPointer = db.cs_openSql(SQL)
                Do While db.cs_Ok(CSPointer)
                    ToMemberID = EncodeInteger(db.cs_getInteger(CSPointer, "ID"))
                    iSubject = iSubjectSource
                    iBody = iBodySource
                    '


                    ' send
                    '
                    Call email_sendMemberEmail3(ToMemberID, iFromAddress, iSubject, iBody, iImmediate, iHTML, 0, "", False)
                    Call db.db_csGoNext(CSPointer)
                Loop
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError18(MethodName)
            '
        End Sub
        '
        ' ----- Need to test this and make it public
        '
        '   This is what the admin site should call for both test and group email
        '   Making it public lets developers send email that administrators can control
        '
        Public Sub main_SendSystemEmail(ByVal EMailName As String, Optional ByVal AdditionalCopy As String = "", Optional ByVal AdditionalMemberID As Integer = 0)
            Dim EmailStatus As String
            '
            EmailStatus = csv_SendSystemEmail(EncodeText(EMailName), EncodeText(AdditionalCopy), EncodeInteger(AdditionalMemberID))
            If user.isAuthenticatedAdmin() And (EmailStatus <> "") Then
                error_AddUserError("Administrator: There was a problem sending the confirmation email, " & EmailStatus)
            End If
            Exit Sub
        End Sub
        '
        '========================================================================
        ' Set the email sql for all members marked to receive the email
        '   Used to send the email and as body on the email test
        '========================================================================
        '
        Public Function main_GetGroupEmailSQL(ByVal ignore_ToAll As Boolean, ByVal EmailID As Integer) As String
            main_GetGroupEmailSQL = email_getGroupEmailSQL(False, EmailID)
            Exit Function
        End Function

        '
        '========================================================================
        ' ----- Get an XML nodes attribute based on its name
        '========================================================================
        '
        Private Function csv_GetXMLAttribute(ByVal Found As Boolean, ByVal Node As XmlNode, ByVal Name As String, ByVal DefaultIfNotFound As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("csv_GetXMLAttribute")
            '
            Dim NodeAttribute As XmlAttribute
            Dim ResultNode As XmlNode
            Dim UcaseName As String
            '
            Found = False
            ResultNode = Node.Attributes.GetNamedItem(Name)
            If (ResultNode Is Nothing) Then
                UcaseName = vbUCase(Name)
                For Each NodeAttribute In Node.Attributes
                    If vbUCase(NodeAttribute.Name) = UcaseName Then
                        csv_GetXMLAttribute = NodeAttribute.Value
                        Found = True
                        Exit For
                    End If
                Next
            Else
                csv_GetXMLAttribute = ResultNode.Value
                Found = True
            End If
            If Not Found Then
                csv_GetXMLAttribute = DefaultIfNotFound
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError6("csv_GetXMLAttribute", "trap")
        End Function
        '
        '=============================================================================================================
        '   Get Addon Content - internal (to support include add-ons)
        '
        '   Argument field in addons is encode as "AddonOptionConstructor"
        '   the input argument OptionString to executeAddon is encoded as "OptionString"
        '       delmited with "&" and all elements encoded with encodeNvaArgument
        '   the optionstring passed to addons is like OptionString encoding, except it is crlf delimited
        '       only ever decode with main_GetAddonOption( name, string )
        '
        '
        '   OptionString
        '       This is a string, similar to a QueryString.
        '           It is used (htmlencoded) in AC Edit Icons to hold instance properties in the 5th comma delimited position of the AC Tag's ID attribute
        '           It is (htmlencoded) in AC Tags as the QueryString value "... Querystring=OptionString ..."
        '           It is used internally to carry properties from the csv to the websclient for:
        '               1) AC tags that have to be executed at the webclient but are interpreted in the cmc.csv_
        '                   not htmlencoded
        '                   like {{ACTextBox?name=&new name=text name}}
        '               2) Addons found in csv during csv_EncodeContent that must be executed in the webclient.
        '                   htmlencoded
        '                   <!-- Addon "acname","htmlencodedOptionString","instanceid" -->
        '       This is called "AddonOption" format, or AddonOptionEncoding
        '       It usually contains the instance prefernces for the Add-on placed in the content
        '       It's basic form is:
        '           name=value[selector]&name=value[selector]
        '           ( why are the selector's necessary, since the add-on will be looked up before arguments are prepared for any editor )
        '       To get a value from the string:
        '           value = csv_GetAddonOption( OptionString )
        '           csv_DecodeAddonOptionArgument(RemoveSelector(GetArgument(name,string,default,"&")))
        '       To add a value to the string
        '           s = s & "&" & encodeNvaArgument(name) & "=" & encodeNvaArgument(value)
        '       "&" delimits the name=value pairs
        '       encodeNvaArgument() is used to encode each name and value
        '       csv_DecodeAddonOptionArgument() is used to decode each name and value
        '       Previously, I wrote:
        '           this is the name=value&name=value set of arguments that come from the AC tag in the content
        '           it includes all name=value pairs set the last time the page was edited.
        '           it may contain names that are not in the add-on, these may be valid
        '
        '   AddonOptionConstructor
        '       This is the format saved in the addon record in the argument field.
        '       This is as crlf delimited list of name=default[selector] that is stored in the Add-on record and controls the building of the instance selectors
        '       It's basic form is:
        '           name=DefaultValue[selector]descriptor
        '           name=DefaultValue[option:integer|option:integer]descriptor
        '           name=DefaultValue[option:integer|option:integer]descriptor
        '           name=DefaultValue[list(contentname)]descriptor
        '       for example:
        '           link=http://www.contensive.com/index.asp?i=1\&u=2
        '
        '       This is called "AddonConstructor" format, or AddonConstructorEncoding
        '           ConstructorEncoding is similiar to how javascript encodes strings
        '           This standard is used because it is visible to the end user
        '           name can not include:
        '               '\', instead use '\\'
        '               '=', instead use '\='
        '           DefaultValue can not include:
        '               '\', instead use '\\'
        '               '[', instead use '\['
        '               ']', instead use '\]'
        '               ':', instead use '\:'
        '               newline, instead use '\n'
        '           selector can not include:
        '               '['
        '               ']'
        '               '|'
        '
        '       crlf delimits arguments
        '       EncodeAddonConstructorArgument() is used to encode each name and value
        '       DecodeAddonConstructorArgument() is used to decode each name and value
        '
        '   AddonOptionNameValueList
        '       This is as crlf delimited list of name=value that is sent to the Add-ons in the OptionString
        '
        '   AddonOptionExpandedConstructor
        '       passed to the editors to create instance selectors
        '       Similar to the AddonOptionConstructor, but all the list and listid functions are expanded
        '
        '
        '
        '   Wrappers
        '       Instance WrapperID is forced into the Instance properies, choose from:
        '           none = -1
        '           default = 0, use the DefaultWrapperId passed into the call
        '           or id of a wrapper record
        '
        '   Context
        '       These values represent the situation around the call for execute addon. This determines the
        '       type of data returned, and other actions taken. For instance, a ContextPage is used when the add-on
        '       results will be put on a page for output. In this case, javascript in the add-on will be put into
        '       the current document head.
        '       * these are in addonContextEnum and are duplicated in the contentserver object also
        '       ContextPage = 1
        '       ContextAdmin = 2
        '       ContextTemplate = 3
        '       ContextEmail = 4
        '       ContextRemoteMethod = 5
        '       ContextOnNewVisit = 6
        '       ContextOnPageEnd = 7
        '       ContextOnPageStart = 8
        '       ContextEditor = 9
        '       ContextHelpUser = 10
        '       ContextHelpAdmin = 11
        '       ContextHelpDeveloper = 12
        '       ContextOnContentChange = 13
        '       ContextFilter = 14
        '       ContextSimple = 15
        '       ContextOnBodyStart = 16
        '       ContextOnBodyEnd = 17
        '
        '=============================================================================================================
        '
        '====================================================================================================
        ''' <summary>
        ''' execute addon
        ''' </summary>
        ''' <param name="addonId">The Id of the addon to execute.</param>
        ''' <param name="properties">properties are nameValue pairs consumable by the addon during execution. These properties are added to docProperties and made available. Originally this argument was for the nameValues modified in the page instance where the addon was placed.</param>
        ''' <param name="context">member of addonContextEnum</param>
        ''' <returns></returns>
        Public Function executeAddon(ByVal addonId As Integer, properties As Dictionary(Of String, String), context As addonContextEnum) As Object
            Dim optionString As String = ""
            Dim return_StatusOk As Boolean
            For Each kvp As KeyValuePair(Of String, String) In properties
                If Not String.IsNullOrEmpty(kvp.Key) Then
                    optionString &= "&" & EncodeRequestVariable(kvp.Key) & "=" & EncodeRequestVariable(kvp.Value)
                End If
            Next
            If Not String.IsNullOrEmpty(optionString) Then
                optionString = optionString.Substring(1)
            End If
            Return executeAddon(addonId, "", optionString, context, "", 0, "", "", False, 0, "", return_StatusOk, Nothing, "", Nothing, "", 0, False)
        End Function
        '
        '====================================================================================================
        ''' <summary>
        ''' 
        ''' </summary>
        ''' <param name="addonId"></param>
        ''' <param name="AddonNameOrGuid"></param>
        ''' <param name="OptionString"></param>
        ''' <param name="Context"></param>
        ''' <param name="HostContentName"></param>
        ''' <param name="HostRecordID"></param>
        ''' <param name="HostFieldName"></param>
        ''' <param name="ACInstanceID"></param>
        ''' <param name="IsIncludeAddon"></param>
        ''' <param name="DefaultWrapperID"></param>
        ''' <param name="ignore_TemplateCaseOnly_PageContent"></param>
        ''' <param name="return_StatusOK"></param>
        ''' <param name="nothingObject"></param>
        ''' <param name="ignore_addonCallingItselfIdList"></param>
        ''' <param name="nothingObject2"></param>
        ''' <param name="ignore_AddonsRunOnThisPageIdList"></param>
        ''' <param name="personalizationPeopleId"></param>
        ''' <param name="personalizationIsAuthenticated"></param>
        ''' <returns></returns>
        Public Function executeAddon(ByVal addonId As Integer, ByVal AddonNameOrGuid As String, ByVal OptionString As String, ByVal Context As addonContextEnum, ByVal HostContentName As String, ByVal HostRecordID As Integer, ByVal HostFieldName As String, ByVal ACInstanceID As String, ByVal IsIncludeAddon As Boolean, ByVal DefaultWrapperID As Integer, ByVal ignore_TemplateCaseOnly_PageContent As String, ByRef return_StatusOK As Boolean, ByVal nothingObject As Object, ByVal ignore_addonCallingItselfIdList As String, ByVal nothingObject2 As Object, ByVal ignore_AddonsRunOnThisPageIdList As String, ByVal personalizationPeopleId As Integer, ByVal personalizationIsAuthenticated As Boolean) As String
            Dim returnVal As String = ""
            Try
                '
                Dim styleId As Integer
                Dim inlineScriptContent As String
                Dim inlineScript As String
                Dim blockJavascriptAndCss As Boolean
                Dim JSOnLoad As String
                Dim JSBodyEnd As String
                Dim JSFilename As String
                Dim DefaultStylesFilename As String
                Dim CustomStylesFilename As String
                Dim TestString As String
                Dim addon_IncludedAddonIDList As String
                Dim includedAddonId As Integer
                Dim includedAddonIds() As String
                Dim ReplaceSource As String
                Dim ReplaceValue As String
                Dim AddonStylesEditIcon As String
                Dim SiteStylesEditIcon As String
                Dim DialogList As String
                Dim ToolBar As String
                Dim ScriptingTimeout As Integer
                Dim ScriptCallbackContent As String
                Dim errorMessageForAdmin As String
                Dim CollectionGuid As String
                Dim DotNetClassFullName As String
                Dim CodeFilename As String
                Dim ScriptingEntryPoint As String
                Dim scriptinglanguageid As Integer
                Dim ScriptingLanguage As String
                Dim ScriptingCode As String
                Dim AddonStatusOK As Boolean
                Dim EditWrapperHTMLID As String
                Dim AddonNameOrGuid_Local As String
                Dim AddonName As String
                Dim AddonGuid As String
                Dim QS As String
                Dim QSSplit() As String
                Dim NVPair As String
                Dim NVSplit() As String
                Dim FrameID As String
                Dim AsAjaxID As String
                Dim AsAjaxContent As String
                'Dim runAtServer As runAtServerClass
                Dim OptionNames() As String
                Dim OptionValues() As String
                Dim OptionsForCPVars() As NameValuePrivateType
                Dim OptionsForCPVars_Cnt As Integer
                'Dim IsProcess As Boolean
                Dim SelectFieldList As String
                Dim RemoteAssetContent As String
                'Dim runAtServer As New runAtServerClass
                Dim kmaHTTP As coreHttpRequestClass
                Dim WorkingLink As String
                Dim FormContent As String
                Dim ExitRequest As Boolean
                Dim RemoteAssetLink As String
                Dim AsAjax As Boolean
                Dim InFrame As Boolean
                Dim IncludeEditWrapper As Boolean
                Dim Copy As String
                Dim Wrapper As String
                Dim wrapperName As String
                Dim AddedByName As String
                Dim AddonCommentName As String
                Dim IncludeContent As String
                Dim GroupIDList As String
                Dim AddonOptionConstructor As String
                Dim AddonOptionExpandedConstructor As String
                Dim OptionString_ForObjectCall As String
                Dim SrcNameValues() As String
                Dim SrcName As String
                Dim SrcSelector As String
                Dim SrcPtr As Integer
                Dim InstanceNameValues() As String
                Dim InstanceNames() As String
                Dim InstanceValues() As String
                Dim InstanceCnt As Integer
                Dim InstanceName As String
                Dim InstanceValue As String
                Dim IPtr As Integer
                Dim Pos As Integer
                Dim Ptr As Integer
                Dim SQL As String
                Dim CSRules As Integer
                Dim HelpIcon As String
                Dim InstanceSettingsEditIcon As String
                Dim OptionPair() As String
                Dim OptionPtr As Integer
                Dim OptionCnt As Integer
                Dim AggrObject As Object
                Dim hint As String
                'Dim addonCallingItselfIdList_Save As String
                Dim CS As Integer
                Dim Link As String
                Dim ProgramID As String
                Dim Options() As String
                Dim OptionName As String
                Dim OptionValue As String
                Dim s As String
                Dim HTMLContent As String
                Dim TextContent As String
                Dim ObjectContent As String
                Dim AssemblyContent As String
                Dim ScriptContent As String
                Dim helpCopy As String
                Dim helpLink As String
                Dim PageTitle As String
                Dim MetaDescription As String
                Dim MetaKeywordList As String
                Dim OtherHeadTags As String
                '
                Dim AddonEditIcon As String
                Dim OptionStringParsed As String
                Dim Err_Number As Integer
                Dim Err_Source As String
                Dim Err_Description As String
                Dim ErrString As String
                Dim FoundAddon As Boolean
                Dim FormXML As String
                Dim WrapperID As Integer
                Dim ContainerCssID As String
                Dim ContainerCssClass As String
                Dim IsInline As Boolean
                Dim WorkingOptionString As String
                Dim HTMLViewerEditIcon As String
                'Dim CollectionID as integer
                Dim AddonBlockEditTools As Boolean
                Dim ReplaceCnt As Integer
                Dim ReplaceNames() As String
                Dim ReplaceValues() As String
                Dim isMainOk As Boolean
                Dim StartTickCount As Integer
                Dim sqlCriteria As String
                Dim addonCachePtr As Integer
                Dim addonNameGuidOrId As String
                Dim addonCollectionId As Integer

                '
                ' ----- OptionString and FilterInput values before this call are saved on the stack
                '
                Dim PushOptionString As String
                PushOptionString = OptionString
                '
                isMainOk = True
                '
                ' ----- Debug timer
                '
                If isMainOk Then
                    StartTickCount = GetTickCount
                End If
                return_StatusOK = True
                WrapperID = DefaultWrapperID
                If (personalizationPeopleId = 0) And isMainOk Then
                    '
                    ' just in case - during transition from cpCoreClass to csv, in case a call is missing.
                    '
                    personalizationPeopleId = user.id
                    personalizationIsAuthenticated = user.isAuthenticated()
                End If
                '
                ' ----- Set WorkingOptionString to what came in from the tag of the object
                '       This may be replaced later if the tag is empty, and the actual add-on arguments have default values
                '
                WorkingOptionString = OptionString
                '
                ' ----- Lookup the addon
                '
                If addonId <> 0 Then
                    addonCachePtr = addonCache.getPtr(CStr(addonId))
                Else
                    addonCachePtr = addonCache.getPtr(AddonNameOrGuid)
                End If
                If (addonCachePtr < 0) Then
                    FoundAddon = False
                Else
                    FoundAddon = True
                    ProgramID = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_ObjectProgramID)
                    AddonName = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_name)
                    addonId = EncodeInteger(addonCache.localCache.addonList(addonCachePtr).addonCache_Id)
                    addonCollectionId = EncodeInteger(addonCache.localCache.addonList(addonCachePtr).addonCache_collectionid)
                    AddonGuid = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_ccguid)
                    If AddonGuid <> "" Then
                        AddonNameOrGuid_Local = AddonGuid
                    Else
                        AddonNameOrGuid_Local = AddonName
                    End If
                    HTMLContent = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_Copy)
                    Link = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_Link)
                    DotNetClassFullName = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_DotNetClass)
                    AddonOptionConstructor = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_ArgumentList)
                    AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbCrLf, vbCr)
                    AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbLf, vbCr)
                    AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbCr, vbCrLf)
                    '
                    AddonBlockEditTools = False
                    TextContent = ""
                    FormXML = ""
                    TextContent = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_CopyText)
                    IsInline = EncodeBoolean(addonCache.localCache.addonList(addonCachePtr).addonCache_IsInline)
                    '
                    ' Support BlockDefaultStyles and CustomStylesFilename
                    '
                    If Not addonCache.localCache.addonList(addonCachePtr).addonCache_BlockDefaultStyles Then
                        '
                        ' Add default styles
                        '
                        DefaultStylesFilename = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_StylesFilename)
                    End If
                    '
                    ' Add custom styles
                    '
                    CustomStylesFilename = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_CustomStylesFilename)
                    FormXML = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_formxml)
                    RemoteAssetLink = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_RemoteAssetLink)
                    AsAjax = EncodeBoolean(addonCache.localCache.addonList(addonCachePtr).addonCache_AsAjax)
                    InFrame = EncodeBoolean(addonCache.localCache.addonList(addonCachePtr).addonCache_InFrame)
                    ScriptingEntryPoint = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_ScriptingEntryPoint)
                    scriptinglanguageid = EncodeInteger(addonCache.localCache.addonList(addonCachePtr).addonCache_ScriptingLanguageID)
                    '
                    ' Get Language
                    '
                    ScriptingLanguage = ""
                    If scriptinglanguageid <> 0 Then
                        ScriptingLanguage = db_GetRecordName("Scripting Languages", scriptinglanguageid)
                    End If
                    If ScriptingLanguage = "" Then
                        ScriptingLanguage = "VBScript"
                    End If
                    ScriptingCode = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_ScriptingCode)
                    AddonBlockEditTools = EncodeBoolean(addonCache.localCache.addonList(addonCachePtr).addonCache_BlockEditTools)
                    ScriptingTimeout = EncodeInteger(addonCache.localCache.addonList(addonCachePtr).addonCache_ScriptingTimeout)
                    inlineScript = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_inlineScript)
                    helpCopy = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_help)
                    helpLink = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_helpLink)
                    JSOnLoad = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_JavaScriptOnLoad)
                    JSBodyEnd = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_JavaScriptBodyEnd)
                    PageTitle = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_PageTitle)
                    MetaDescription = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_MetaDescription)
                    MetaKeywordList = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_MetaKeywordList)
                    OtherHeadTags = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_OtherHeadTags)
                    JSFilename = EncodeText(addonCache.localCache.addonList(addonCachePtr).addonCache_JSFilename)
                    If JSFilename <> "" Then
                        JSFilename = web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, JSFilename)
                    End If
                End If
                If Not String.IsNullOrEmpty(ProgramID) Then
                    '
                    ' addons with activeX components are deprecated
                    '
                    handleExceptionAndRethrow(New ApplicationException("This add-on [#" & addonId & ", " & AddonName & "] is no longer supported because it contains an active-X component."))
                Else
                    '
                    '----------------------------------------------------------------------------------------------------
                    ' add shared styles
                    '----------------------------------------------------------------------------------------------------
                    '
                    Dim addonIdKey As String
                    addonIdKey = addonId.ToString
                    Ptr = cache_addonStyleRules.getFirstPtr(addonIdKey)
                    Do While Ptr >= 0
                        styleId = EncodeInteger(cache_addonStyleRules.getValue(Ptr))
                        Call main_AddSharedStyleID2(styleId, AddonName)
                        Ptr = cache_addonStyleRules.getNextPtr()
                    Loop
                    '
                    '----------------------------------------------------------------------------------------------------
                    ' Add ScriptingCode
                    '----------------------------------------------------------------------------------------------------
                    '
                    If ScriptingEntryPoint <> "" Then
                        '
                        ' Get Modules
                        '
                        SQL = "select c.code from ccScriptingModules c left join ccAddonScriptingModuleRules r on r.ScriptingModuleID=c.id where r.Addonid=" & addonId & " order by c.sortorder"
                        CSRules = db.db_openCsSql_rev("default", SQL)
                        Do While db.cs_Ok(CSRules)
                            CodeFilename = db.db_GetCS(CSRules, "code")
                            If CodeFilename <> "" Then
                                ScriptingCode = ScriptingCode & vbCrLf & cdnFiles.readFile(CodeFilename)
                            End If
                            Call db.db_csGoNext(CSRules)
                        Loop
                        Call db.cs_Close(CSRules)
                    End If
                    '
                    '----------------------------------------------------------------------------------------------------
                    ' Add the common addon options to the AddonOptionConstructor
                    '----------------------------------------------------------------------------------------------------
                    '
                    If AddonOptionConstructor <> "" Then
                        AddonOptionConstructor = AddonOptionConstructor & vbCrLf
                    End If
                    '
                    ' temporary fix for Content Box not handling ajax or inframe
                    '
                    If vbLCase(AddonGuid) = vbLCase(ContentBoxGuid) Then
                        AsAjax = False
                        InFrame = False
                        AddonOptionConstructor = AddonOptionConstructor & AddonOptionConstructor_BlockNoAjax
                    ElseIf IsInline Then
                        AddonOptionConstructor = AddonOptionConstructor & AddonOptionConstructor_Inline
                    Else
                        AddonOptionConstructor = AddonOptionConstructor & AddonOptionConstructor_Block
                    End If
                    '
                    If Not FoundAddon Then
                        '
                        '-----------------------------------------------------------------------------------------------------
                        ' Build-in Add-ons
                        '-----------------------------------------------------------------------------------------------------
                        '
                        If vbLCase(AddonName) = "block text" Then
                            AddonNameOrGuid_Local = AddonName
                            FoundAddon = True
                            'IsProcess = False
                            addonId = 0
                            Link = ""
                            ProgramID = ""
                            AddonOptionConstructor = AddonOptionConstructor_ForBlockText
                            TextContent = ""
                            DefaultStylesFilename = ""
                            CustomStylesFilename = ""
                            helpCopy = ""
                            helpLink = ""
                            JSOnLoad = ""
                            'JSInHead = ""
                            JSFilename = ""
                            JSBodyEnd = ""
                            PageTitle = ""
                            MetaDescription = ""
                            MetaKeywordList = ""
                            OtherHeadTags = ""
                            AddonEditIcon = ""
                            IsInline = True
                            GroupIDList = csv_GetAddonOption("AllowGroups", WorkingOptionString)
                            GroupIDList = Trim(GroupIDList)
                            ' not webonly anymore
                            If Not user.isMemberOfGroupIdList(personalizationPeopleId, personalizationIsAuthenticated, GroupIDList) Then
                                HTMLContent = BlockTextStartMarker
                            End If
                            'If isMainOk Then
                            '    '
                            '    ' web-only
                            '    '
                            '    If Not main_IsAdmin() Then
                            '        If Not csv_IsGroupIDListMember(personalizationPeopleid, personalizationIsAuthenticated, GroupIDList) Then
                            '            HTMLContent = BlockTextStartMarker
                            '        End If
                            '    End If
                            ' End If
                            '
                        ElseIf vbLCase(AddonName) = "block text end" Then
                            AddonNameOrGuid_Local = AddonName
                            FoundAddon = True
                            'IsProcess = False
                            addonId = 0
                            HTMLContent = BlockTextEndMarker
                            Link = ""
                            ProgramID = ""
                            AddonOptionConstructor = AddonOptionConstructor_ForBlockTextEnd
                            TextContent = ""
                            DefaultStylesFilename = ""
                            CustomStylesFilename = ""
                            helpCopy = ""
                            helpLink = ""
                            JSOnLoad = ""
                            'JSInHead = ""
                            JSFilename = ""
                            JSBodyEnd = ""
                            PageTitle = ""
                            MetaDescription = ""
                            MetaKeywordList = ""
                            OtherHeadTags = ""
                            AddonEditIcon = ""
                            IsInline = True
                        End If
                    End If
                    If Not FoundAddon Then
                        '
                        '-----------------------------------------------------------------------------------------------------
                        ' The add-on was not found for real
                        '-----------------------------------------------------------------------------------------------------
                        '
                        return_StatusOK = False
                        '
                        ' web-only
                        '
                        If (Context = addonContextEnum.contextEmail) Or (Context = addonContextEnum.ContextRemoteMethod) Or (Context = addonContextEnum.ContextSimple) Then
                            '
                            ' Block all output even on error
                            '
                        ElseIf user.isAuthenticatedAdmin() Or user.isAuthenticatedContentManager("Page Content") Then
                            '
                            ' Provide hint to administrators
                            '
                            If AddonName = "" And addonId <> 0 Then
                                AddonName = "Addon #" & addonId
                            End If
                            If Context = addonContextEnum.ContextAdmin Then
                                s = "The Add-on '" & AddonName & "' could not be found. It may have been deleted or marked inactive. If you are receiving this message after clicking an Add-on from the Navigator, their may be a problem with this Add-on. If you are receiving this message from the main admin page, your Dashboard Add-on may be set incorrectly. Use the Admin tab under Preferences to select the Dashboard, or <a href=""?" & RequestNameDashboardReset & "=" & visit_Id & """>click here</a> to automatically reset the dashboard."
                            Else
                                s = "The Add-on '" & AddonName & "' could not be found. It may have been deleted or marked inactive. Please use the Add-on Manager to replace it, or edit this page and remove it."
                            End If
                            s = main_GetAdminHintWrapper(s)
                        End If
                        If (addonId > 0) Then
                            Call handleLegacyError7("executeAddon", "The Add-on could not be found by id [" & addonId & "] or name/guid [" & AddonNameOrGuid & "]")
                        Else
                            Call handleLegacyError7("executeAddon", "The Add-on could not be found by name/guid [" & AddonNameOrGuid & "]")
                        End If
                    End If
                    '
                    '-----------------------------------------------------------------
                    ' Process the Add-on
                    '-----------------------------------------------------------------
                    '
                    If FoundAddon Then
                        '
                        'determine if it has already run once (if so, block javascript and styles)
                        '
                        If addonsRunOnThisPageIdList.Contains(addonId) Then
                            blockJavascriptAndCss = True
                        Else
                            addonsRunOnThisPageIdList.Add(addonId)
                        End If
                        'blockJavascriptAndCss = (InStr(1, "," & csv_ExecuteAddon_AddonsRunOnThisPageIdList & ",", "," & addonId & ",") <> 0)
                        'csv_ExecuteAddon_AddonsRunOnThisPageIdList = csv_ExecuteAddon_AddonsRunOnThisPageIdList & "," & addonId
                        '
                        '-----------------------------------------------------------------
                        ' Enable Edit Wrapper for Page Content and Dynamic Menu for edit mode
                        '-----------------------------------------------------------------
                        '
                        If isMainOk Then
                            IncludeEditWrapper =
                                (Not AddonBlockEditTools) _
                                And (Context <> addonContextEnum.ContextEditor) _
                                And (Context <> addonContextEnum.contextEmail) _
                                And (Context <> addonContextEnum.ContextRemoteMethod) _
                                And (Context <> addonContextEnum.ContextSimple) _
                                And (Not IsIncludeAddon)
                            If IncludeEditWrapper Then
                                IncludeEditWrapper = IncludeEditWrapper _
                                    And (visitProperty.getBoolean("AllowAdvancedEditor") _
                                    And ((Context = addonContextEnum.ContextAdmin) Or user.isEditing(HostContentName)))
                                'IncludeEditWrapper = IncludeEditWrapper _
                                '    And ( _
                                '        ( _
                                '            (csv_VisitProperty_AllowAdvancedEditor And ((Context = ContextAdmin) Or IsEditing(HostContentName))) _
                                '        ) Or ( _
                                '            (csv_VisitProperty_AllowEditing And ((AddonGuid = ContentBoxGuid) Or (AddonGuid = DynamicMenuGuid) Or (AddonGuid = TextBoxGuid))) _
                                '        ) _
                                '    )
                            End If
                        End If
                        '
                        ' ----- Test if this Addon is already in use
                        '
                        If addonsCurrentlyRunningIdList.Contains(addonId) Then
                            '
                            ' This addon is running, can not reenter
                            '
                            Call log_appendLog("executeAddon, Addon [" & AddonName & "] was called by itself. This is not allowed. AddonID [" & addonId & "], AddonNameOrGuid [" & AddonNameOrGuid_Local & "]")
                        Else
                            addonsCurrentlyRunningIdList.Add(addonId)
                            'csv_ExecuteAddon_AddonsCurrentlyRunningIdList = csv_ExecuteAddon_AddonsCurrentlyRunningIdList & "," & addonId
                            '
                            '-----------------------------------------------------------------------------------------------------
                            ' Preprocess arguments into OptionsForCPVars, and set generic instance values wrapperid and asajax
                            '-----------------------------------------------------------------------------------------------------
                            '
                            ' Setup InstanceOptions - if InstanceOptionString is empty, use the defaults from the Addon Arguments
                            '
                            OptionCnt = 0
                            If WorkingOptionString <> "" Then
                                If vbInstr(1, WorkingOptionString, vbCrLf) <> 0 Then
                                    '
                                    ' this should never be the case
                                    '
                                    Options = SplitCRLF(WorkingOptionString)
                                    OptionCnt = UBound(Options) + 1
                                Else
                                    '
                                    '
                                    '
                                    Options = Split(WorkingOptionString, "&")
                                    OptionCnt = UBound(Options) + 1
                                End If
                                OptionsForCPVars_Cnt = OptionCnt
                                ReDim OptionsForCPVars(OptionCnt - 1)
                                ReDim OptionNames(OptionCnt - 1)
                                ReDim OptionValues(OptionCnt - 1)
                                For OptionPtr = 0 To OptionCnt - 1
                                    With OptionsForCPVars(OptionPtr)
                                        .Name = Trim(Options(OptionPtr))
                                        If vbInstr(1, .Name, "=") <> 0 Then
                                            OptionPair = Split(.Name, "=")
                                            .Name = Trim(EncodeText(OptionPair(0)))
                                            .Value = EncodeText(OptionPair(1))
                                            '
                                            ' added this because when a row of apostrophes were added to an instance argument, they showed up here
                                            ' so it appears (though not documented very well) that the WorkingOptionString argument is really
                                            ' the Addon Encoded Instance OptionString
                                            ' So, as I parse it for use in the add-on, I need to unencode it
                                            '
                                            .Name = Trim(decodeNvaArgument(.Name))
                                            .Value = decodeNvaArgument(.Value)
                                            '
                                            '
                                            If vbLCase(.Name) = "wrapper" Then
                                                WrapperID = EncodeInteger(.Value)
                                                If WrapperID = 0 Then
                                                    WrapperID = DefaultWrapperID
                                                End If
                                            ElseIf vbLCase(.Name) = "as ajax" Then
                                                If EncodeBoolean(.Value) Then
                                                    AsAjax = True
                                                End If
                                            ElseIf vbLCase(.Name) = "css container id" Then
                                                ContainerCssID = .Value
                                            ElseIf vbLCase(.Name) = "css container class" Then
                                                ContainerCssClass = .Value
                                            End If
                                            OptionNames(OptionPtr) = OptionsForCPVars(OptionPtr).Name
                                            OptionValues(OptionPtr) = OptionsForCPVars(OptionPtr).Value
                                        End If
                                    End With
                                Next
                            End If
                            If AddonOptionConstructor <> "" Then
                                '        If WorkingOptionString = "" Then
                                'WorkingOptionString = AddonOptionConstructor
                                '
                                ' convert from AddonConstructor format (crlf delimited, constructorincoded) to AddonOption format without selector (& delimited, addonencoded)
                                '
                                AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbCrLf, vbCr)
                                AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbLf, vbCr)
                                AddonOptionConstructor = vbReplace(AddonOptionConstructor, vbCr, vbCrLf)
                                Options = SplitCRLF(AddonOptionConstructor)
                                OptionCnt = UBound(Options) + 1
                                For OptionPtr = 0 To OptionCnt - 1
                                    OptionName = Options(OptionPtr)
                                    OptionValue = ""
                                    '
                                    OptionName = vbReplace(OptionName, "\=", vbCrLf)
                                    If vbInstr(1, OptionName, "=") <> 0 Then
                                        OptionPair = Split(OptionName, "=")
                                        OptionName = OptionPair(0)
                                        OptionPair(0) = ""
                                        OptionValue = Mid(Join(OptionPair, "="), 2)
                                    End If
                                    OptionName = vbReplace(OptionName, vbCrLf, "\=")
                                    OptionValue = vbReplace(OptionValue, vbCrLf, "\=")
                                    '
                                    Do While (Mid(OptionName, 1, 1) = vbTab) And Len(OptionName) > 1
                                        OptionName = Mid(OptionName, 2)
                                    Loop
                                    OptionName = Trim(OptionName)
                                    '
                                    ' split on [, throw out the right side
                                    OptionValue = vbReplace(OptionValue, "\[", vbCrLf)
                                    If vbInstr(1, OptionValue, "[") <> 0 Then
                                        OptionValue = Left(OptionValue, vbInstr(1, OptionValue, "[") - 1)
                                    End If
                                    OptionValue = vbReplace(OptionValue, vbCrLf, "\[")
                                    '
                                    ' Decode Constructor format
                                    '
                                    OptionName = DecodeAddonConstructorArgument(OptionName)
                                    OptionValue = DecodeAddonConstructorArgument(OptionValue)
                                    '
                                    ' check for duplicates
                                    '
                                    For Ptr = 0 To OptionsForCPVars_Cnt - 1
                                        If vbLCase(OptionName) = vbLCase(OptionsForCPVars(Ptr).Name) Then
                                            Exit For
                                        End If
                                    Next
                                    If Ptr = OptionsForCPVars_Cnt Then
                                        '
                                        ' not found, add it to option pairs
                                        '
                                        ReDim Preserve OptionsForCPVars(Ptr)
                                        OptionsForCPVars(Ptr).Name = Trim(OptionName)
                                        OptionsForCPVars(Ptr).Value = OptionValue
                                        OptionsForCPVars_Cnt = OptionsForCPVars_Cnt + 1
                                    End If
                                Next
                            End If
                            '
                            ' this is a hack -- add instanceID to the OptionsForCPVars. do the same in executeAddonAsProcess
                            '   it is also added in csv_BuildAddonOptionLists() which is called by both, but does not effect OptionsForCPVars.
                            '   the cpCoreClass execute should call executeAsProcess and share all this code.
                            '
                            If ACInstanceID <> "" Then
                                ReDim Preserve OptionsForCPVars(OptionsForCPVars_Cnt)
                                OptionsForCPVars(OptionsForCPVars_Cnt).Name = "instanceid"
                                OptionsForCPVars(OptionsForCPVars_Cnt).Value = ACInstanceID
                                OptionsForCPVars_Cnt = OptionsForCPVars_Cnt + 1
                            End If
                            '
                            '-----------------------------------------------------------------------------------------------------
                            ' Build ReplaceName, ReplaceValue pairs for call to cmc.csv_ExecuteScript
                            '-----------------------------------------------------------------------------------------------------
                            '
                            ReplaceCnt = OptionsForCPVars_Cnt
                            If ReplaceCnt > 0 Then
                                ReDim ReplaceNames(ReplaceCnt - 1)
                                ReDim ReplaceValues(ReplaceCnt - 1)
                                For Ptr = 0 To ReplaceCnt - 1
                                    With OptionsForCPVars(Ptr)
                                        If .Name <> "" Then
                                            ReplaceNames(Ptr) = .Name
                                            'ReplaceNames(Ptr) = "$" & .Name & "$"
                                            ReplaceValues(Ptr) = .Value
                                        End If
                                    End With
                                Next
                            End If
                            '
                            '-----------------------------------------------------------------------------------------------------
                            '   Common to Add-ons and built-in Add-ons
                            '-----------------------------------------------------------------------------------------------------
                            '
                            ' Update the option selector from the addon record
                            '
                            '!!!!!
                            ' instanceId option pair is added here, but OptionsForCPVars() is already constructed and does not have it -- so scripts will not get it
                            ' instanceId needs to be added early in preprocess so it gets picked up in OptionsForCPVars()
                            '!!!!!
                            Call csv_BuildAddonOptionLists(OptionString_ForObjectCall, AddonOptionExpandedConstructor, AddonOptionConstructor, WorkingOptionString, ACInstanceID, IncludeEditWrapper)
                            '
                            ' set global public value that can be accessed by scripts
                            '
                            OptionString = OptionString_ForObjectCall
                            '
                            '
                            '-----------------------------------------------------------------------------------------------------
                            ' Process the content for each context as needed
                            '-----------------------------------------------------------------------------------------------------
                            '
                            If (InFrame And (Context <> addonContextEnum.ContextRemoteMethod)) Then
                                '
                                '-----------------------------------------------------------------
                                ' inFrame and this is NOT the callback - setup the iframe for a callback
                                ' js,styles and other features are NOT added to the host page, they go to the remotemethod page
                                '-----------------------------------------------------------------
                                '
                                If isMainOk Then
                                    '
                                    ' web-only
                                    '
                                    Link = web_requestProtocol & webServer.requestDomain & www_requestRootPath & siteProperties.serverPageDefault
                                    If vbInstr(1, Link, "?") = 0 Then
                                        Link = Link & "?"
                                    Else
                                        Link = Link & "&"
                                    End If
                                    Link = Link _
                                        & "nocache=" & Rnd() _
                                        & "&HostContentName=" & EncodeRequestVariable(HostContentName) _
                                        & "&HostRecordID=" & HostRecordID _
                                        & "&remotemethodaddon=" & EncodeURL(AddonNameOrGuid_Local) _
                                        & "&optionstring=" & EncodeRequestVariable(WorkingOptionString) _
                                        & ""
                                    FrameID = "frame" & getRandomLong()
                                    s = "<iframe src=""" & Link & """ id=""" & FrameID & """ onload=""cj.setFrameHeight('" & FrameID & "');"" class=""ccAddonFrameCon"" frameborder=""0"" scrolling=""no"">This content is not visible because your browser does not support iframes</iframe>" _
                                        & cr & "<script language=javascript type=""text/javascript"">" _
                                        & cr & "// Safari and Opera need a kick-start." _
                                        & cr & "var e=document.getElementById('" & FrameID & "');if(e){var iSource=e.src;e.src='';e.src = iSource;}" _
                                        & cr & "</script>"
                                End If
                            ElseIf (AsAjax And (Context <> addonContextEnum.ContextRemoteMethod)) Then
                                '
                                '-----------------------------------------------------------------
                                ' AsAjax and this is NOT the callback - setup the ajax callback
                                ' js,styles and other features from the addon record are added to the host page
                                ' during the remote method, these are blocked, but if any are added during
                                '   DLL processing, they have to be handled
                                '-----------------------------------------------------------------
                                '
                                If isMainOk Then
                                    AsAjaxID = "asajax" & getRandomLong()
                                    QS = "" _
                                        & RequestNameRemoteMethodAddon & "=" & EncodeRequestVariable(AddonNameOrGuid_Local) _
                                        & "&HostContentName=" & EncodeRequestVariable(HostContentName) _
                                        & "&HostRecordID=" & HostRecordID _
                                        & "&HostRQS=" & EncodeRequestVariable(web_RefreshQueryString) _
                                        & "&HostQS=" & EncodeRequestVariable(webServer.requestQueryString) _
                                        & "&HostForm=" & EncodeRequestVariable(webServer.requestFormString) _
                                        & "&optionstring=" & EncodeRequestVariable(WorkingOptionString) _
                                        & ""
                                    If IsInline Then
                                        s = cr & "<div ID=" & AsAjaxID & " Class=""ccAddonAjaxCon"" style=""display:inline;""><img src=""/ccLib/images/ajax-loader-small.gif"" width=""16"" height=""16""></div>"
                                    Else
                                        s = cr & "<div ID=" & AsAjaxID & " Class=""ccAddonAjaxCon""><img src=""/ccLib/images/ajax-loader-small.gif"" width=""16"" height=""16""></div>"
                                    End If
                                    s = s _
                                        & cr & "<script Language=""javaScript"" type=""text/javascript"">" _
                                        & cr & "cj.ajax.qs('" & QS & "','','" & AsAjaxID & "');AdminNavPop=true;" _
                                        & cr & "</script>"
                                    '
                                    ' Problem - AsAjax addons must add styles, js and meta to the head
                                    '   Adding them to the host page covers most cases, but sometimes the DLL itself
                                    '   adds styles, etc during processing. These have to be added during the remote method processing.
                                    '   appending the .innerHTML of the head works for FF, but ie blocks it.
                                    '   using .createElement works in ie, but the tag system right now not written
                                    '   to save links, etc, it is written to store the entire tag.
                                    '   Also, OtherHeadTags can not be added this was.
                                    '
                                    ' Short Term Fix
                                    '   For Ajax, Add javascript and style features to head of host page
                                    '   Then during remotemethod, clear these strings before dll processing. Anything
                                    '   that is added must have come from the dll. So far, the only addons we have that
                                    '   do this load styles, so instead of putting in the the head (so ie fails), add styles inline.
                                    '
                                    '   This is because ie does not allow innerHTML updates to head tag
                                    '   scripts and js could be handled with .createElement if only the links were saved, but
                                    '   otherhead could not.
                                    '   The case this does not cover is if the addon itself manually adds one of these entries.
                                    '   In no case can ie handle the OtherHead, however, all the others can be done with .createElement.
                                    ' Long Term Fix
                                    '   Convert js, style, and meta tag system to use .createElement during remote method processing
                                    '
                                    Call main_AddPagetitle2(PageTitle, AddedByName)
                                    Call main_addMetaDescription2(MetaDescription, AddedByName)
                                    Call main_addMetaKeywordList2(MetaKeywordList, AddedByName)
                                    Call main_AddHeadTag2(OtherHeadTags, AddedByName)
                                    If Not blockJavascriptAndCss Then
                                        '
                                        ' add javascript and styles if it has not run already
                                        '
                                        Call main_AddOnLoadJavascript2(JSOnLoad, AddedByName)
                                        Call main_AddEndOfBodyJavascript2(JSBodyEnd, AddedByName)
                                        Call main_AddHeadScriptLink(JSFilename, AddedByName)
                                        If DefaultStylesFilename <> "" Then
                                            Call main_AddStylesheetLink2(web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, DefaultStylesFilename), AddonName & " default")
                                        End If
                                        If CustomStylesFilename <> "" Then
                                            Call main_AddStylesheetLink2(web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, CustomStylesFilename), AddonName & " custom")
                                        End If
                                    End If
                                End If
                            Else
                                '
                                '-----------------------------------------------------------------
                                ' otherwise - produce the content from the addon
                                '   setup RQS as needed - RQS provides the querystring for add-ons to create links that return to the same page
                                '-----------------------------------------------------------------------------------------------------
                                '
                                If (InFrame And (Context = addonContextEnum.ContextRemoteMethod)) Then
                                    '
                                    ' Add-on setup for InFrame, running the call-back - this page must think it is just the remotemethod
                                    '
                                    If isMainOk Then
                                        Call web_addRefreshQueryString(RequestNameRemoteMethodAddon, AddonNameOrGuid_Local)
                                        Call web_addRefreshQueryString("optionstring", WorkingOptionString)
                                    End If
                                ElseIf (AsAjax And (Context = addonContextEnum.ContextRemoteMethod)) Then
                                    '
                                    ' Add-on setup for AsAjax, running the call-back - put the referring page's QS as the RQS
                                    ' restore form values
                                    '
                                    If isMainOk Then
                                        QS = docProperties.getText("Hostform")
                                        If QS <> "" Then
                                            Call docProperties.addQueryString(QS)
                                        End If
                                        '
                                        ' restore refresh querystring values
                                        '
                                        QS = docProperties.getText("HostRQS")
                                        QSSplit = Split(QS, "&")
                                        For Ptr = 0 To UBound(QSSplit)
                                            NVPair = QSSplit(Ptr)
                                            If NVPair <> "" Then
                                                NVSplit = Split(NVPair, "=")
                                                If UBound(NVSplit) > 0 Then
                                                    Call web_addRefreshQueryString(NVSplit(0), NVSplit(1))
                                                End If
                                            End If
                                        Next
                                        '
                                        ' restore query string
                                        '
                                        QS = docProperties.getText("HostQS")
                                        Call docProperties.addQueryString(QS)
                                        '
                                        ' Clear the style,js and meta features that were delivered to the host page
                                        ' After processing, if these strings are not empty, they must have been added by the DLL
                                        '
                                        '
                                        JSOnLoad = ""
                                        JSBodyEnd = ""
                                        PageTitle = ""
                                        MetaDescription = ""
                                        MetaKeywordList = ""
                                        OtherHeadTags = ""
                                        DefaultStylesFilename = ""
                                        CustomStylesFilename = ""
                                    End If
                                End If
                                '
                                '-----------------------------------------------------------------
                                ' gather list of included add-ons
                                ' do not run yet because CP has not been created
                                ' moved here from below to catch scripting entry
                                ' moved to within the CP check bc this call includes CP which has not been created
                                '-----------------------------------------------------------------
                                '
                                Ptr = cache_addonIncludeRules_getFirstPtr(addonId)
                                Do While Ptr >= 0
                                    addon_IncludedAddonIDList = addon_IncludedAddonIDList & "," & cache_addonIncludeRules.item(addonIncludeRulesCache_includedAddonId, Ptr)
                                    Ptr = cache_addonIncludeRules.addonIdIndex.getNextPtrMatch(CStr(addonId))
                                Loop
                                '
                                '-----------------------------------------------------------------
                                ' Do replacements from Option String and Pick out WrapperID, and AsAjax
                                '-----------------------------------------------------------------
                                '
                                TestString = HTMLContent & TextContent & PageTitle & MetaDescription & MetaKeywordList & OtherHeadTags & FormXML
                                If (TestString <> "") And (ReplaceCnt > 0) Then
                                    For Ptr = 0 To ReplaceCnt - 1
                                        ReplaceSource = "$" & ReplaceNames(Ptr) & "$"
                                        ' this section takes 15msec every addon, 32 addons is 480msec.
                                        ' 20131221 - 4.2.317 - try test first to save time
                                        If isInStr(1, TestString, ReplaceSource) Then
                                            ReplaceValue = ReplaceValues(Ptr)
                                            HTMLContent = vbReplace(HTMLContent, ReplaceSource, ReplaceValue, 1, 99, vbTextCompare)
                                            TextContent = vbReplace(TextContent, ReplaceSource, ReplaceValue, 1, 99, vbTextCompare)
                                            PageTitle = vbReplace(PageTitle, ReplaceSource, ReplaceValue, 1, 99, vbTextCompare)
                                            MetaDescription = vbReplace(MetaDescription, ReplaceSource, ReplaceValue, 1, 99, vbTextCompare)
                                            MetaKeywordList = vbReplace(MetaKeywordList, ReplaceSource, ReplaceValue, 1, 99, vbTextCompare)
                                            OtherHeadTags = vbReplace(OtherHeadTags, ReplaceSource, ReplaceValue, 1, 99, vbTextCompare)
                                            FormXML = vbReplace(FormXML, ReplaceSource, ReplaceValue, 1, 99, vbTextCompare)
                                        End If
                                    Next
                                End If
                                '
                                '-----------------------------------------------------------------
                                ' CP compatible section
                                '-----------------------------------------------------------------
                                '
                                If (addon_IncludedAddonIDList <> "") Or (ScriptingCode <> "") Or (DotNetClassFullName <> "") Then
                                    'hint = "Processing Addon [" & AddonName & "], adding Options to Environment"
                                    For Ptr = 0 To UBound(OptionsForCPVars)
                                        'hint = hint & ",1"
                                        Call cp.AddVar(OptionsForCPVars(Ptr).Name, OptionsForCPVars(Ptr).Value)
                                        'hint = hint & ",2"
                                    Next
                                    '
                                    ' ----- run included add-ons before their parent
                                    ' should be the first executable to run so includes run first
                                    ' moved here from above because CP is needed
                                    '
                                    'hint = hint & ",3"
                                    If addon_IncludedAddonIDList <> "" Then
                                        'hint = hint & ",4"
                                        includedAddonIds = Split(addon_IncludedAddonIDList, ",")
                                        'hint = hint & ",5"
                                        For Ptr = 0 To UBound(includedAddonIds)
                                            'hint = hint & ",6"
                                            includedAddonId = EncodeInteger(includedAddonIds(Ptr))
                                            'hint = hint & ",7"
                                            If includedAddonId <> 0 Then
                                                'IsAuthenticated = 0
                                                'If isMainOk Then
                                                '    IsAuthenticated = main_IsAuthenticated
                                                'End If
                                                'hint = hint & ",8"
                                                IncludeContent = IncludeContent & executeAddon(includedAddonId, "", "", addonContextEnum.ContextAdmin, HostContentName, HostRecordID, HostFieldName, ACInstanceID, True, DefaultWrapperID, ignore_TemplateCaseOnly_PageContent, AddonStatusOK, Nothing, ignore_addonCallingItselfIdList & "," & addonId, Nothing, ignore_AddonsRunOnThisPageIdList, personalizationPeopleId, personalizationIsAuthenticated)
                                            End If
                                        Next
                                    End If
                                    '
                                    ' ----- Scripting
                                    '
                                    'hint = hint & ",9"
                                    If (ScriptingCode <> "") Then
                                        'hint = "Processing Addon [" & AddonName & "], calling script component."
                                        Try
                                            ScriptContent = executeAddon_executeScript4(ScriptingLanguage, ScriptingCode, ScriptingEntryPoint, errorMessageForAdmin, ScriptingTimeout, "Addon [" & AddonName & "]", ReplaceCnt, ReplaceNames, ReplaceValues)
                                        Catch ex As Exception
                                            handleExceptionAndRethrow(ex, "There was an error executing the script component of Add-on [" & AddonName & "], AddonOptionString [" & WorkingOptionString & "]. The details of this error follow.</p><p>" & errorMessageForAdmin & "")
                                        End Try
                                    End If
                                    '
                                    ' ----- Dot Net Addons
                                    '   Get path to the addon from the collection guid
                                    '   If no collection, just look in the /addon path
                                    '
                                    'hint = hint & ",10"
                                    If DotNetClassFullName <> "" Then
                                        '
                                        Dim csTmp As Integer
                                        csTmp = db.db_openCsSql_rev("default", "select ccGuid from ccAddonCollections where id=" & addonCollectionId)
                                        If db.cs_Ok(csTmp) Then
                                            CollectionGuid = db.cs_getText(csTmp, "ccGuid")
                                        End If
                                        Call db.cs_Close(csTmp)
                                        '
                                        AssemblyContent = executeAddon_executeAssembly(addonId, AddonName, DotNetClassFullName, CollectionGuid, Nothing, errorMessageForAdmin)
                                        If (errorMessageForAdmin <> "") Then
                                            '
                                            ' log the error
                                            '
                                            Call handleLegacyError8("Error during cmc.csv_ExecuteAssembly [" & errorMessageForAdmin & "]", "cpCoreClass.ExecuteAddon_internal", True)
                                            '
                                            ' Put up an admin hint
                                            '
                                            If (Not isMainOk) Or (Context = addonContextEnum.contextEmail) Or (Context = addonContextEnum.ContextRemoteMethod) Or (Context = addonContextEnum.ContextSimple) Then
                                                '
                                                ' Block all output even on error
                                                '
                                            ElseIf user.isAuthenticatedAdmin() Then
                                                '
                                                ' Provide hint to administrators
                                                '
                                                If AddonName = "" And addonId <> 0 Then
                                                    AddonName = "Addon #" & addonId
                                                End If
                                                AssemblyContent = main_GetAdminHintWrapper("<p>There was an error executing the assembly component of Add-on [" & AddonName & "], AddonOptionString [" & WorkingOptionString & "] with class name [" & DotNetClassFullName & "]. The details of this error follow.</p><p>" & errorMessageForAdmin & "</p>")
                                            End If
                                        End If
                                    End If
                                End If
                                ''
                                ''-----------------------------------------------------------------
                                '' ActiveX Addons
                                ''-----------------------------------------------------------------
                                ''
                                ''hint = "Processing Addon [" & AddonName & "], ActiveX Addons section"
                                'If ProgramID <> "" Then
                                '    '
                                '    ' Go ahead
                                '    '
                                '    Try
                                '        ObjectContent = csv_ExecuteActiveX(ProgramID, AddonName, OptionString_ForObjectCall, WorkingOptionString, errorMessageForAdmin)
                                '    Catch ex As Exception
                                '        handleException(ex, "There was an error executing the activex component of Add-on [" & AddonName & "], AddonOptionString [" & WorkingOptionString & "], with Program ID [" & ProgramID & "]. The details of this error follow.</p><p>" & errorMessageForAdmin & "")
                                '    End Try
                                '    AggrObject = Nothing
                                'End If
                                ''hint = ""
                                '
                                '-----------------------------------------------------------------------------------------------------
                                '   Script Include
                                '       Adds a comment with a script include file
                                '-----------------------------------------------------------------------------------------------------
                                '
                                If (True) And (inlineScript <> "") Then
                                    inlineScriptContent = "<!-- inlineScript(" & csv_ConnectionID & ")[" & html_EncodeHTML(inlineScript) & "] -->"
                                End If
                                '
                                '-----------------------------------------------------------------------------------------------------
                                '   RemoteAssetLink
                                '-----------------------------------------------------------------------------------------------------
                                '
                                If (True) Then
                                    If RemoteAssetLink <> "" Then
                                        WorkingLink = RemoteAssetLink
                                        If vbInstr(1, WorkingLink, "://") = 0 Then
                                            If isMainOk Then
                                                '
                                                ' use request object to build link
                                                '
                                                If Mid(WorkingLink, 1, 1) = "/" Then
                                                    WorkingLink = web_requestProtocol & webServer.requestDomain & WorkingLink
                                                Else
                                                    WorkingLink = web_requestProtocol & webServer.requestDomain & web_requestVirtualFilePath & WorkingLink
                                                End If
                                            Else
                                                '
                                                ' use assumptions
                                                '
                                                If Mid(WorkingLink, 1, 1) = "/" Then
                                                    WorkingLink = "http://" & appConfig.domainList(0) & WorkingLink
                                                Else
                                                    WorkingLink = "http://" & appConfig.domainList(0) & "/" & WorkingLink
                                                End If
                                            End If
                                        End If
                                        Dim PosStart As Integer
                                        kmaHTTP = New coreHttpRequestClass()
                                        RemoteAssetContent = kmaHTTP.getURL(WorkingLink)
                                        Pos = vbInstr(1, RemoteAssetContent, "<body", vbTextCompare)
                                        If Pos > 0 Then
                                            Pos = vbInstr(Pos, RemoteAssetContent, ">")
                                            If Pos > 0 Then
                                                PosStart = Pos + 1
                                                Pos = vbInstr(Pos, RemoteAssetContent, "</body", vbTextCompare)
                                                If Pos > 0 Then
                                                    RemoteAssetContent = Mid(RemoteAssetContent, PosStart, Pos - PosStart)
                                                End If
                                            End If
                                        End If

                                    End If
                                End If
                                '
                                '-----------------------------------------------------------------------------------------------------
                                '   FormXML
                                '-----------------------------------------------------------------------------------------------------
                                '
                                If isMainOk And (FormXML <> "") Then
                                    FormContent = executeAddon_getFormContent(Nothing, FormXML, ExitRequest)
                                    If ExitRequest Then
                                        '
                                        ' This is really messy
                                        '
                                        GoTo exitNoError
                                        'Exit Function
                                    End If
                                End If
                                '
                                '-----------------------------------------------------------------
                                ' Script Callback
                                '-----------------------------------------------------------------
                                '
                                '#If traceExecuteAddon Then
                                'ticksNow = GetTickCount : Ticks = (ticksNow - ticksLast) : ticksLast = ticksNow : Trace = Trace & vbCrLf & traceSN & "(" & Ticks & ") z"
                                '#End If
                                If isMainOk And (Link <> "") Then
                                    If WorkingOptionString <> "" Then
                                        If vbInstr(1, Link, "?") = 0 Then
                                            Link = Link & "?" & WorkingOptionString
                                        Else
                                            Link = Link & "&" & WorkingOptionString
                                        End If
                                    End If
                                    Link = modifyLinkQuery(Link, RequestNameJSForm, "1", True)
                                    Link = EncodeAppRootPath(Link, web_requestVirtualFilePath, www_requestRootPath, webServer.requestDomain)
                                    ScriptCallbackContent = "<SCRIPT LANGUAGE=""JAVASCRIPT"" SRC=""" & Link & """></SCRIPT>"
                                End If
                                '
                                '-----------------------------------------------------------------
                                ' Add javascripts and other features to page
                                '-----------------------------------------------------------------
                                '
                                AddedByName = AddonName & " addon"
                                '
                                '#If traceExecuteAddon Then
                                'ticksNow = GetTickCount : Ticks = (ticksNow - ticksLast) : ticksLast = ticksNow : Trace = Trace & vbCrLf & traceSN & "(" & Ticks & ") aa"
                                '#End If
                                If isMainOk Then
                                    Call main_AddPagetitle2(PageTitle, AddedByName)
                                    Call main_addMetaDescription2(MetaDescription, AddedByName)
                                    Call main_addMetaKeywordList2(MetaKeywordList, AddedByName)
                                    Call main_AddHeadTag2(OtherHeadTags, AddedByName)
                                    If Not blockJavascriptAndCss Then
                                        Call main_AddOnLoadJavascript2(JSOnLoad, AddedByName)
                                        Call main_AddEndOfBodyJavascript2(JSBodyEnd, AddedByName)
                                        Call main_AddHeadScriptLink(JSFilename, AddedByName)
                                        If DefaultStylesFilename <> "" Then
                                            Call main_AddStylesheetLink2(web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, DefaultStylesFilename), AddonName & " default")
                                        End If
                                        If CustomStylesFilename <> "" Then
                                            Call main_AddStylesheetLink2(web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, CustomStylesFilename), AddonName & " custom")
                                        End If
                                    End If
                                End If
                                '
                                '-----------------------------------------------------------------
                                ' 2012-6-8 Merge together all the pieces
                                '   - moved the encode content call here from below so the content parts can be encoded and not the rest
                                '   - below, the csv_EncodeContent addonContext was being hard-coded to contextAdmin, which makes no sense.
                                '   - now I let the original context get through, but only call executeContentCommand on the content part (that the admin controls)
                                '   - csv_executeContentCommands on only the content parts
                                '   - csv_EncodeContent on everything
                                '-----------------------------------------------------------------
                                '
                                '#If traceExecuteAddon Then
                                'ticksNow = GetTickCount : Ticks = (ticksNow - ticksLast) : ticksLast = ticksNow : Trace = Trace & vbCrLf & traceSN & "(" & Ticks & ") ab"
                                '#End If
                                Dim layoutErrors As String
                                If (Context = addonContextEnum.ContextEditor) Then
                                    '
                                    ' editor -- no encoding and no contentcommands
                                    '
                                    s = TextContent & HTMLContent
                                    s = s & IncludeContent & ScriptCallbackContent & FormContent & RemoteAssetContent & ScriptContent & ObjectContent & AssemblyContent & inlineScriptContent
                                    '
                                    ' csv_EncodeContent everything
                                    '
                                    's = csv_EncodeContent9(s, personalizationPeopleId, HostContentName, HostRecordID, 0, False, False, True, True, False, True, "", "", (Context = ContextEmail),  WrapperID, ignore_TemplateCaseOnly_PageContent, Context, personalizationIsAuthenticated, nothing, False)
                                Else
                                    '
                                    ' encode the content parts of the addon
                                    '
                                    s = TextContent & HTMLContent
                                    If s <> "" Then
                                        s = html_executeContentCommands(Nothing, s, addonContextEnum.ContextAdmin, personalizationPeopleId, personalizationIsAuthenticated, layoutErrors)
                                        's = csv_EncodeContent9(s, personalizationPeopleId, HostContentName, HostRecordID, 0, False, False, True, True, False, True, "", "", (Context = ContextEmail), WrapperID, ignore_TemplateCaseOnly_PageContent, Context, personalizationIsAuthenticated, nothing, False)
                                    End If
                                    '
                                    ' add in the rest
                                    '
                                    s = s & IncludeContent & ScriptCallbackContent & FormContent & RemoteAssetContent & ScriptContent & ObjectContent & AssemblyContent & inlineScriptContent
                                    '
                                    ' csv_EncodeContent everything
                                    '
                                    s = html_encodeContent10(s, personalizationPeopleId, HostContentName, HostRecordID, 0, False, False, True, True, False, True, "", "", (Context = addonContextEnum.contextEmail), WrapperID, ignore_TemplateCaseOnly_PageContent, Context, personalizationIsAuthenticated, Nothing, False)
                                End If
                                ''
                                '' +++++ 9/8/2011, 4.1.482
                                ''
                                's = TextContent & HTMLContent & IncludeContent & ScriptCallbackContent & FormContent & RemoteAssetContent & ScriptContent & ObjectContent & AssemblyContent & inlineScriptContent
                                's = vbReplace(s, "{%", "{<!---->%")
                                '
                                '-----------------------------------------------------------------
                                ' check for xml contensive process instruction
                                '   This is also handled in Encode Content, but here we can return the admin error message
                                '   Once processed, it will skip the csv_EncodeContent processesing anyway
                                '-----------------------------------------------------------------
                                '
                                '#If traceExecuteAddon Then
                                'ticksNow = GetTickCount : Ticks = (ticksNow - ticksLast) : ticksLast = ticksNow : Trace = Trace & vbCrLf & traceSN & "(" & Ticks & ") ac"
                                '#End If
                                Pos = vbInstr(1, s, "<?contensive", vbTextCompare)
                                If Pos > 0 Then
                                    Throw New ApplicationException("xml structured commands are no longer supported")
                                    ''
                                    ''output is xml structured data
                                    '' pass the data in as an argument to the structured data processor
                                    '' and return its result
                                    ''
                                    's = Mid(s, Pos)
                                    'LayoutEngineOptionString = "data=" & encodeNvaArgument(s)
                                    'Dim structuredData As New core_primitivesStructuredDataClass(Me)
                                    's = structuredData.execute()
                                    's = csv_ExecuteActiveX("aoPrimitives.StructuredDataClass", "Structured Data Engine", LayoutEngineOptionString, "data=(structured data)", errorMessageForAdmin)
                                    'If (errorMessageForAdmin <> "") Then
                                    '    '
                                    '    ' Put up an admin hint
                                    '    '
                                    '    If (Not isMainOk) Or (Context = addonContextEnum.contextEmail) Or (Context = addonContextEnum.ContextRemoteMethod) Or (Context = addonContextEnum.ContextSimple) Then
                                    '        '
                                    '        ' Block all output even on error
                                    '        '
                                    '    ElseIf user.user_isAdmin() Then
                                    '        '
                                    '        ' Provide hint to administrators
                                    '        '
                                    '        If AddonName = "" And addonId <> 0 Then
                                    '            AddonName = "Addon #" & addonId
                                    '        End If
                                    '        s = s & main_GetAdminHintWrapper("<p>There was an error executing the Layout Engine for addon [" & AddonName & "], AddonOptionString [" & WorkingOptionString & "], with Program ID [" & ProgramID & "]. The details of this error follow.</p><p>" & errorMessageForAdmin & "</p>")
                                    '    End If
                                    'End If
                                End If
                                '
                                '-----------------------------------------------------------------
                                ' Add Css containers
                                '-----------------------------------------------------------------
                                '
                                '#If traceExecuteAddon Then
                                'ticksNow = GetTickCount : Ticks = (ticksNow - ticksLast) : ticksLast = ticksNow : Trace = Trace & vbCrLf & traceSN & "(" & Ticks & ") ad"
                                '#End If
                                If ContainerCssID <> "" Or ContainerCssClass <> "" Then
                                    If IsInline Then
                                        s = cr & "<div id=""" & ContainerCssID & """ class=""" & ContainerCssClass & """ style=""display:inline;"">" & s & "</div>"
                                    Else
                                        s = cr & "<div id=""" & ContainerCssID & """ class=""" & ContainerCssClass & """>" & kmaIndent(s) & cr & "</div>"
                                    End If
                                End If
                            End If
                            '
                            '-----------------------------------------------------------------
                            '   Add Wrappers to content
                            '-----------------------------------------------------------------
                            '
                            '#If traceExecuteAddon Then
                            'ticksNow = GetTickCount : Ticks = (ticksNow - ticksLast) : ticksLast = ticksNow : Trace = Trace & vbCrLf & traceSN & "(" & Ticks & ") ae"
                            '#End If
                            If isMainOk Then
                                If (InFrame And (Context = addonContextEnum.ContextRemoteMethod)) Then
                                    '
                                    ' Return IFrame content
                                    '   Framed in content, during the remote method call
                                    '   add in the rest of the html page
                                    '
                                    Call main_SetMetaContent(0, 0)
                                    s = "" _
                                        & main_docType _
                                        & vbCrLf & "<html>" _
                                        & cr & "<head>" _
                                        & vbCrLf & kmaIndent(main_GetHTMLHead()) _
                                        & cr & "</head>" _
                                        & cr & TemplateDefaultBodyTag _
                                        & cr & "</body>" _
                                        & vbCrLf & "</html>"
                                ElseIf (AsAjax And (Context = addonContextEnum.ContextRemoteMethod)) Then
                                    '
                                    ' Return Ajax content
                                    '   AsAjax addon, during the Ajax callback
                                    '   need to create an onload event that runs everything appended to onload within this content
                                    '
                                    s = s
                                ElseIf (Context = addonContextEnum.ContextRemoteMethod) Then
                                    '
                                    ' Return non-ajax/non-Iframe remote method content (no wrapper)
                                    '
                                ElseIf (Context = addonContextEnum.contextEmail) Then
                                    '
                                    ' Return Email context (no wrappers)
                                    '
                                ElseIf (Context = addonContextEnum.ContextSimple) Then
                                    '
                                    ' Add-on called by another add-on, subroutine style (no wrappers)
                                    '
                                Else
                                    '
                                    ' Return all other types
                                    '
                                    If IncludeEditWrapper Then
                                        '
                                        ' Add Edit Wrapper
                                        '
                                        EditWrapperHTMLID = "eWrapper" & pageManager_PageAddonCnt
                                        'HelpIcon = main_GetHelpLink("", "Add-on " & AddonName, helpCopy, helpLink)
                                        '
                                        ' Edit Icon
                                        '
                                        If (addonId <> 0) Then
                                            If visitProperty.getBoolean("AllowAdvancedEditor") Then
                                                AddonEditIcon = GetIconSprite("", 0, "/ccLib/images/tooledit.png", 22, 22, "Edit the " & AddonName & " Add-on", "Edit the " & AddonName & " Add-on", "", True, "")
                                                AddonEditIcon = "<a href=""" & siteProperties.adminURL & "?cid=" & metaData.getContentId("add-ons") & "&id=" & addonId & "&af=4&aa=2&ad=1"" tabindex=""-1"">" & AddonEditIcon & "</a>"
                                                InstanceSettingsEditIcon = executeAddon_getInstanceBubble(AddonName, AddonOptionExpandedConstructor, HostContentName, HostRecordID, HostFieldName, ACInstanceID, Context, DialogList)
                                                AddonStylesEditIcon = executeAddon_getAddonStylesBubble(addonId, DialogList)
                                                HTMLViewerEditIcon = executeAddon_getHTMLViewerBubble(addonId, "editWrapper" & pageManager_EditWrapperCnt, DialogList)
                                                HelpIcon = executeAddon_getHelpBubble(addonId, helpCopy, addonCollectionId, DialogList)
                                                ToolBar = InstanceSettingsEditIcon & AddonEditIcon & AddonStylesEditIcon & SiteStylesEditIcon & HTMLViewerEditIcon & HelpIcon
                                                ToolBar = vbReplace(ToolBar, "&nbsp;", "", 1, 99, vbTextCompare)
                                                s = main_GetEditWrapper("<div class=""ccAddonEditTools"">" & ToolBar & "&nbsp;" & AddonName & DialogList & "</div>", s)
                                                's = GetEditWrapper("<div class=""ccAddonEditCaption"">" & AddonName & "</div><div class=""ccAddonEditTools"">" & ToolBar & "</div>", s)
                                            ElseIf visitProperty.getBoolean("AllowEditing") Then
                                                s = main_GetEditWrapper("<div class=""ccAddonEditCaption"">" & AddonName & "&nbsp;" & HelpIcon & "</div>", s)
                                            End If
                                        End If
                                    End If
                                    ' moved to calling routines - so if this is called from an add-on without context, the data may not be html
                                    '
                                    ' Add Comment wrapper - to help debugging except email, remote methods and admin (empty is used to detect no result)
                                    '
                                    If isMainOk And (Context <> addonContextEnum.ContextAdmin) And (Context <> addonContextEnum.contextEmail) And (Context <> addonContextEnum.ContextRemoteMethod) And (Context <> addonContextEnum.ContextSimple) Then
                                        If visitProperty.getBoolean("AllowDebugging") Then
                                            AddonCommentName = vbReplace(AddonName, "-->", "..>")
                                            If IsInline Then
                                                s = "<!-- Add-on " & AddonCommentName & " -->" & s & "<!-- /Add-on " & AddonCommentName & " -->"
                                            Else
                                                s = "" _
                                                    & cr & "<!-- Add-on " & AddonCommentName & " -->" _
                                                    & kmaIndent(s) _
                                                    & cr & "<!-- /Add-on " & AddonCommentName & " -->"
                                            End If
                                        End If
                                    End If
                                    '
                                    ' Add Design Wrapper
                                    '
                                    If (s <> "") And (Not IsInline) And (WrapperID > 0) And (True) Then
                                        s = executeAddon_WrapContent(s, WrapperID, "for Add-on " & AddonName)
                                    End If
                                End If
                            End If
                            '
                            ' this completes the execute of this addon. remove it from the 'running' list
                            '
                            addonsCurrentlyRunningIdList.Remove(addonId)
                            'csv_ExecuteAddon_AddonsCurrentlyRunningIdList = vbReplace(csv_ExecuteAddon_AddonsCurrentlyRunningIdList & ",", "," & addonId & ",", ",")
                        End If
                    End If
                End If
                '================================================================================================================================
exitNoError:
                '
                ' Pop the previous values for Optionstring and FilterInput back
                '
                OptionString = PushOptionString
                '
                pageManager_PageAddonCnt = pageManager_PageAddonCnt + 1
                executeAddon = s
            Catch ex As Exception
                '
                ' protect environment from addon error
                '
                handleExceptionAndNoThrow(ex)
            End Try
        End Function
        '
        '
        '
        Private Function executeAddon_getFormContent(ByVal nothingObject As Object, ByVal FormXML As String, ByRef return_ExitRequest As Boolean) As String
            'Const Tn = "ExecuteAddon_internal_getFormContent" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Const LoginMode_None = 1
            Const LoginMode_AutoRecognize = 2
            Const LoginMode_AutoLogin = 3
            '
            Dim PageSize As Integer
            Dim FieldCount As Integer
            Dim RowMax As Integer
            Dim ColumnMax As Integer
            'Dim RecordField As Field
            Dim SQLPageSize As Integer
            'dim dt as datatable
            Dim ErrorNumber As Integer
            Dim ErrorDescription As String
            Dim something As Object(,)
            Dim RecordID As Integer
            'Dim XMLTools As New xmlToolsclass(me)
            Dim fieldfilename As String
            'Dim fs As New fileSystemClass
            Dim FieldDataSource As String
            Dim FieldSQL As String
            Dim LoginMode As Integer
            Dim Help As String
            Dim Content As New coreFastStringClass
            Dim Copy As String
            Dim Button As String
            Dim PageNotFoundPageID As String
            Dim Adminui As New coreAdminUIClass(Me)
            Dim ButtonList As String
            Dim AllowLinkAlias As Boolean
            Dim LinkForwardAutoInsert As Boolean
            Dim SectionLandingLink As String
            Dim LandingPageID As String
            Dim AllowAutoRecognize As Boolean
            Dim AllowMobileTemplates As Boolean
            Dim Filename As String
            Dim NonEncodedLink As String
            Dim EncodedLink As String
            Dim VirtualFilePath As String
            Dim OptionString As String
            Dim TabName As String
            Dim TabDescription As String
            Dim TabHeading As String
            Dim TabCnt As Integer
            Dim TabCell As coreFastStringClass
            Dim loadOK As Boolean = True
            Dim FieldValue As String
            Dim FieldDescription As String
            Dim FieldDefaultValue As String
            Dim IsFound As Boolean
            Dim Name As String
            Dim Description As String
            Dim LoopPtr As Integer
            Dim XMLFile As String
            Dim Doc As New XmlDocument
            Dim TabNode As XmlNode
            Dim SettingNode As XmlNode
            Dim CS As Integer
            Dim FieldName As String
            Dim FieldCaption As String
            Dim FieldAddon As String
            Dim FieldReadOnly As Boolean
            Dim FieldHTML As Boolean
            Dim fieldType As String
            Dim FieldSelector As String
            Dim DefaultFilename As String
            '
            Button = docProperties.getText(RequestNameButton)
            If Button = ButtonCancel Then
                '
                ' Cancel just exits with no content
                '
                return_ExitRequest = True
                Exit Function
            ElseIf Not user.isAuthenticatedAdmin() Then
                '
                ' Not Admin Error
                '
                ButtonList = ButtonCancel
                Content.Add(Adminui.GetFormBodyAdminOnly())
            Else
                If True Then
                    loadOK = True
                    Try
                        Doc.LoadXml(FormXML)
                    Catch ex As Exception
                        ButtonList = ButtonCancel
                        Content.Add("<div class=""ccError"" style=""margin:10px;padding:10px;background-color:white;"">There was a problem with the Setting Page you requested.</div>")
                        loadOK = False
                    End Try
                    If loadOK Then
                        '
                        ' data is OK
                        '
                        If vbLCase(Doc.DocumentElement.Name) <> "form" Then
                            '
                            ' error - Need a way to reach the user that submitted the file
                            '
                            ButtonList = ButtonCancel
                            Content.Add("<div class=""ccError"" style=""margin:10px;padding:10px;background-color:white;"">There was a problem with the Setting Page you requested.</div>")
                        Else
                            '
                            ' ----- Process Requests
                            '
                            If (Button = ButtonSave) Or (Button = ButtonOK) Then
                                With Doc.DocumentElement
                                    For Each SettingNode In .ChildNodes
                                        Select Case vbLCase(SettingNode.Name)
                                            Case "tab"
                                                For Each TabNode In SettingNode.ChildNodes
                                                    Select Case vbLCase(TabNode.Name)
                                                        Case "siteproperty"
                                                            '
                                                            FieldName = csv_GetXMLAttribute(IsFound, TabNode, "name", "")
                                                            FieldValue = docProperties.getText(FieldName)
                                                            fieldType = csv_GetXMLAttribute(IsFound, TabNode, "type", "")
                                                            Select Case vbLCase(fieldType)
                                                                Case "integer"
                                                                    '
                                                                    If FieldValue <> "" Then
                                                                        FieldValue = EncodeInteger(FieldValue).ToString
                                                                    End If
                                                                    Call siteProperties.setProperty(FieldName, FieldValue)
                                                                Case "boolean"
                                                                    '
                                                                    If FieldValue <> "" Then
                                                                        FieldValue = EncodeBoolean(FieldValue).ToString
                                                                    End If
                                                                    Call siteProperties.setProperty(FieldName, FieldValue)
                                                                Case "float"
                                                                    '
                                                                    If FieldValue <> "" Then
                                                                        FieldValue = EncodeNumber(FieldValue).ToString
                                                                    End If
                                                                    Call siteProperties.setProperty(FieldName, FieldValue)
                                                                Case "date"
                                                                    '
                                                                    If FieldValue <> "" Then
                                                                        FieldValue = EncodeDate(FieldValue).ToString
                                                                    End If
                                                                    Call siteProperties.setProperty(FieldName, FieldValue)
                                                                Case "file", "imagefile"
                                                                    '
                                                                    If doc_getBoolean(FieldName & ".DeleteFlag") Then
                                                                        Call siteProperties.setProperty(FieldName, "")
                                                                    End If
                                                                    If FieldValue <> "" Then
                                                                        VirtualFilePath = "Settings/" & FieldName
                                                                        Call web_ProcessFormInputFile(FieldName, VirtualFilePath)
                                                                        FieldValue = VirtualFilePath & "/" & FieldValue
                                                                        Call siteProperties.setProperty(FieldName, FieldValue)
                                                                    End If
                                                                Case "textfile"
                                                                    '
                                                                    DefaultFilename = "Settings/" & FieldName & ".txt"
                                                                    Filename = siteProperties.getText(FieldName, DefaultFilename)
                                                                    If Filename = "" Then
                                                                        Filename = DefaultFilename
                                                                        Call siteProperties.setProperty(FieldName, DefaultFilename)
                                                                    End If
                                                                    Call appRootFiles.saveFile(Filename, FieldValue)
                                                                Case "cssfile"
                                                                    '
                                                                    DefaultFilename = "Settings/" & FieldName & ".css"
                                                                    Filename = siteProperties.getText(FieldName, DefaultFilename)
                                                                    If Filename = "" Then
                                                                        Filename = DefaultFilename
                                                                        Call siteProperties.setProperty(FieldName, DefaultFilename)
                                                                    End If
                                                                    Call appRootFiles.saveFile(Filename, FieldValue)
                                                                Case "xmlfile"
                                                                    '
                                                                    DefaultFilename = "Settings/" & FieldName & ".xml"
                                                                    Filename = siteProperties.getText(FieldName, DefaultFilename)
                                                                    If Filename = "" Then
                                                                        Filename = DefaultFilename
                                                                        Call siteProperties.setProperty(FieldName, DefaultFilename)
                                                                    End If
                                                                    Call appRootFiles.saveFile(Filename, FieldValue)
                                                                Case "currency"
                                                                    '
                                                                    If FieldValue <> "" Then
                                                                        FieldValue = EncodeNumber(FieldValue).ToString
                                                                        FieldValue = FormatCurrency(FieldValue)
                                                                    End If
                                                                    Call siteProperties.setProperty(FieldName, FieldValue)
                                                                Case "link"
                                                                    Call siteProperties.setProperty(FieldName, FieldValue)
                                                                Case Else
                                                                    Call siteProperties.setProperty(FieldName, FieldValue)
                                                            End Select
                                                        Case "copycontent"
                                                            '
                                                            ' A Copy Content block
                                                            '
                                                            FieldReadOnly = EncodeBoolean(csv_GetXMLAttribute(IsFound, TabNode, "readonly", ""))
                                                            If Not FieldReadOnly Then
                                                                FieldName = csv_GetXMLAttribute(IsFound, TabNode, "name", "")
                                                                FieldHTML = EncodeBoolean(csv_GetXMLAttribute(IsFound, TabNode, "html", "false"))
                                                                If FieldHTML Then
                                                                    '
                                                                    ' treat html as active content for now.
                                                                    '
                                                                    FieldValue = doc_getActiveContent(FieldName)
                                                                Else
                                                                    FieldValue = docProperties.getText(FieldName)
                                                                End If

                                                                CS = db.csOpen("Copy Content", "name=" & db.encodeSQLText(FieldName), "ID")
                                                                If Not db.cs_Ok(CS) Then
                                                                    Call db.cs_Close(CS)
                                                                    CS = db.cs_insertRecord("Copy Content", user.id)
                                                                End If
                                                                If db.cs_Ok(CS) Then
                                                                    Call db.cs_set(CS, "name", FieldName)
                                                                    '
                                                                    ' Set copy
                                                                    '
                                                                    Call db.cs_set(CS, "copy", FieldValue)
                                                                    '
                                                                    ' delete duplicates
                                                                    '
                                                                    Call db.db_csGoNext(CS)
                                                                    Do While db.cs_Ok(CS)
                                                                        Call db.db_DeleteCSRecord(CS)
                                                                        Call db.db_csGoNext(CS)
                                                                    Loop
                                                                End If
                                                                Call db.cs_Close(CS)
                                                            End If

                                                        Case "filecontent"
                                                            '
                                                            ' A File Content block
                                                            '
                                                            FieldReadOnly = EncodeBoolean(csv_GetXMLAttribute(IsFound, TabNode, "readonly", ""))
                                                            If Not FieldReadOnly Then
                                                                FieldName = csv_GetXMLAttribute(IsFound, TabNode, "name", "")
                                                                fieldfilename = csv_GetXMLAttribute(IsFound, TabNode, "filename", "")
                                                                FieldValue = docProperties.getText(FieldName)
                                                                Call appRootFiles.saveFile(fieldfilename, FieldValue)
                                                            End If
                                                        Case "dbquery"
                                                            '
                                                            ' dbquery has no results to process
                                                            '
                                                    End Select
                                                Next
                                            Case Else
                                        End Select
                                    Next
                                End With
                            End If
                            If (Button = ButtonOK) Then
                                '
                                ' Exit on OK or cancel
                                '
                                return_ExitRequest = True
                                Exit Function
                            End If
                            '
                            ' ----- Display Form
                            '
                            Content.Add(Adminui.EditTableOpen)
                            Name = csv_GetXMLAttribute(IsFound, Doc.DocumentElement, "name", "")
                            With Doc.DocumentElement
                                For Each SettingNode In .ChildNodes
                                    Select Case vbLCase(SettingNode.Name)
                                        Case "description"
                                            Description = SettingNode.InnerText
                                        Case "tab"
                                            TabCnt = TabCnt + 1
                                            TabName = csv_GetXMLAttribute(IsFound, SettingNode, "name", "")
                                            TabDescription = csv_GetXMLAttribute(IsFound, SettingNode, "description", "")
                                            TabHeading = csv_GetXMLAttribute(IsFound, SettingNode, "heading", "")
                                            If TabHeading = "Debug and Trace Settings" Then
                                                TabHeading = TabHeading
                                            End If
                                            TabCell = New coreFastStringClass
                                            For Each TabNode In SettingNode.ChildNodes
                                                Select Case vbLCase(TabNode.Name)
                                                    Case "heading"
                                                        '
                                                        ' Heading
                                                        '
                                                        FieldCaption = csv_GetXMLAttribute(IsFound, TabNode, "caption", "")
                                                        Call TabCell.Add(Adminui.GetEditSubheadRow(FieldCaption))
                                                    Case "siteproperty"
                                                        '
                                                        ' Site property
                                                        '
                                                        FieldName = csv_GetXMLAttribute(IsFound, TabNode, "name", "")
                                                        If FieldName <> "" Then
                                                            FieldCaption = csv_GetXMLAttribute(IsFound, TabNode, "caption", "")
                                                            If FieldCaption = "" Then
                                                                FieldCaption = FieldName
                                                            End If
                                                            FieldReadOnly = EncodeBoolean(csv_GetXMLAttribute(IsFound, TabNode, "readonly", ""))
                                                            FieldHTML = EncodeBoolean(csv_GetXMLAttribute(IsFound, TabNode, "html", ""))
                                                            fieldType = csv_GetXMLAttribute(IsFound, TabNode, "type", "")
                                                            FieldSelector = csv_GetXMLAttribute(IsFound, TabNode, "selector", "")
                                                            FieldDescription = csv_GetXMLAttribute(IsFound, TabNode, "description", "")
                                                            FieldAddon = csv_GetXMLAttribute(IsFound, TabNode, "EditorAddon", "")
                                                            FieldDefaultValue = TabNode.InnerText
                                                            FieldValue = siteProperties.getText(FieldName, FieldDefaultValue)
                                                            If FieldAddon <> "" Then
                                                                '
                                                                ' Use Editor Addon
                                                                '
                                                                OptionString = "FieldName=" & FieldName & "&FieldValue=" & encodeNvaArgument(siteProperties.getText(FieldName, FieldDefaultValue))
                                                                Copy = executeAddon_legacy5(0, FieldAddon, OptionString, addonContextEnum.ContextAdmin, "", 0, "", 0)
                                                            ElseIf FieldSelector <> "" Then
                                                                '
                                                                ' Use Selector
                                                                '
                                                                Copy = executeAddon_getFormContent_decodeSelector(nothingObject, FieldName, FieldValue, FieldSelector)
                                                            Else
                                                                '
                                                                ' Use default editor for each field type
                                                                '
                                                                Select Case vbLCase(fieldType)
                                                                    Case "integer"
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            Copy = html_GetFormInputText2(FieldName, FieldValue)
                                                                        End If
                                                                    Case "boolean"
                                                                        If FieldReadOnly Then
                                                                            Copy = html_GetFormInputCheckBox2(FieldName, EncodeBoolean(FieldValue))
                                                                            Copy = vbReplace(Copy, ">", " disabled>")
                                                                            Copy = Copy & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            Copy = html_GetFormInputCheckBox2(FieldName, EncodeBoolean(FieldValue))
                                                                        End If
                                                                    Case "float"
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            Copy = html_GetFormInputText2(FieldName, FieldValue)
                                                                        End If
                                                                    Case "date"
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            Copy = html_GetFormInputDate(FieldName, FieldValue)
                                                                        End If
                                                                    Case "file", "imagefile"
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            If FieldValue = "" Then
                                                                                Copy = html_GetFormInputFile(FieldName)
                                                                            Else
                                                                                NonEncodedLink = webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, FieldValue)
                                                                                EncodedLink = EncodeURL(NonEncodedLink)
                                                                                Copy = "" _
                                                                                    & "<a href=""http://" & EncodedLink & """ target=""_blank"">[" & GetFilename(FieldValue) & "]</A>" _
                                                                                    & "&nbsp;&nbsp;&nbsp;Delete:&nbsp;" & html_GetFormInputCheckBox2(FieldName & ".DeleteFlag", False) _
                                                                                    & "&nbsp;&nbsp;&nbsp;Change:&nbsp;" & html_GetFormInputFile(FieldName)
                                                                            End If
                                                                        End If
                                                                        'Call s.Add("&nbsp;</span></nobr></td>")
                                                                    Case "currency"
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            If FieldValue <> "" Then
                                                                                FieldValue = FormatCurrency(FieldValue)
                                                                            End If
                                                                            Copy = html_GetFormInputText2(FieldName, FieldValue)
                                                                        End If
                                                                    Case "textfile"
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            FieldValue = cdnFiles.readFile(FieldValue)
                                                                            If FieldHTML Then
                                                                                Copy = html_GetFormInputHTML(FieldName, FieldValue)
                                                                            Else
                                                                                Copy = html_GetFormInputTextExpandable(FieldName, FieldValue, 5)
                                                                            End If
                                                                        End If
                                                                    Case "cssfile"
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            Copy = html_GetFormInputTextExpandable(FieldName, FieldValue, 5)
                                                                        End If
                                                                    Case "xmlfile"
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            Copy = html_GetFormInputTextExpandable(FieldName, FieldValue, 5)
                                                                        End If
                                                                    Case "link"
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            Copy = html_GetFormInputText2(FieldName, FieldValue)
                                                                        End If
                                                                    Case Else
                                                                        '
                                                                        ' text
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Dim tmp As String
                                                                            tmp = html_GetFormInputHidden(FieldName, FieldValue)
                                                                            Copy = FieldValue & tmp
                                                                        Else
                                                                            If FieldHTML Then
                                                                                Copy = html_GetFormInputHTML(FieldName, FieldValue)
                                                                            Else
                                                                                Copy = html_GetFormInputText2(FieldName, FieldValue)
                                                                            End If
                                                                        End If
                                                                End Select
                                                            End If
                                                            Call TabCell.Add(Adminui.GetEditRow(Copy, FieldCaption, FieldDescription, False, False, ""))
                                                        End If
                                                    Case "copycontent"
                                                        '
                                                        ' Content Copy field
                                                        '
                                                        FieldName = csv_GetXMLAttribute(IsFound, TabNode, "name", "")
                                                        If FieldName <> "" Then
                                                            FieldCaption = csv_GetXMLAttribute(IsFound, TabNode, "caption", "")
                                                            If FieldCaption = "" Then
                                                                FieldCaption = FieldName
                                                            End If
                                                            FieldReadOnly = EncodeBoolean(csv_GetXMLAttribute(IsFound, TabNode, "readonly", ""))
                                                            FieldDescription = csv_GetXMLAttribute(IsFound, TabNode, "description", "")
                                                            FieldHTML = EncodeBoolean(csv_GetXMLAttribute(IsFound, TabNode, "html", ""))
                                                            '
                                                            CS = db.csOpen("Copy Content", "Name=" & db.encodeSQLText(FieldName), "ID", , , , , "id,name,Copy")
                                                            If Not db.cs_Ok(CS) Then
                                                                Call db.cs_Close(CS)
                                                                CS = db.cs_insertRecord("Copy Content", user.id)
                                                                If db.cs_Ok(CS) Then
                                                                    RecordID = db.cs_getInteger(CS, "ID")
                                                                    Call db.cs_set(CS, "name", FieldName)
                                                                    Call db.cs_set(CS, "copy", EncodeText(TabNode.InnerText))
                                                                    Call db.db_SaveCSRecord(CS)
                                                                    Call workflow.publishEdit("Copy Content", RecordID)
                                                                End If
                                                            End If
                                                            If db.cs_Ok(CS) Then
                                                                FieldValue = db.cs_getText(CS, "copy")
                                                            End If
                                                            If FieldReadOnly Then
                                                                '
                                                                ' Read only
                                                                '
                                                                Copy = FieldValue
                                                            ElseIf FieldHTML Then
                                                                '
                                                                ' HTML
                                                                '
                                                                Copy = html_GetFormInputHTML3(FieldName, FieldValue)
                                                                'Copy = main_GetFormInputActiveContent( FieldName, FieldValue)
                                                            Else
                                                                '
                                                                ' Text edit
                                                                '
                                                                Copy = html_GetFormInputTextExpandable(FieldName, FieldValue)
                                                            End If
                                                            Call TabCell.Add(Adminui.GetEditRow(Copy, FieldCaption, FieldDescription, False, False, ""))
                                                        End If
                                                    Case "filecontent"
                                                        '
                                                        ' Content from a flat file
                                                        '
                                                        FieldName = csv_GetXMLAttribute(IsFound, TabNode, "name", "")
                                                        FieldCaption = csv_GetXMLAttribute(IsFound, TabNode, "caption", "")
                                                        fieldfilename = csv_GetXMLAttribute(IsFound, TabNode, "filename", "")
                                                        FieldReadOnly = EncodeBoolean(csv_GetXMLAttribute(IsFound, TabNode, "readonly", ""))
                                                        FieldDescription = csv_GetXMLAttribute(IsFound, TabNode, "description", "")
                                                        FieldDefaultValue = TabNode.InnerText
                                                        Copy = ""
                                                        If fieldfilename <> "" Then
                                                            If appRootFiles.fileExists(fieldfilename) Then
                                                                Copy = FieldDefaultValue
                                                            Else
                                                                Copy = cdnFiles.readFile(fieldfilename)
                                                            End If
                                                            If Not FieldReadOnly Then
                                                                Copy = html_GetFormInputTextExpandable(FieldName, Copy, 10)
                                                            End If
                                                        End If
                                                        Call TabCell.Add(Adminui.GetEditRow(Copy, FieldCaption, FieldDescription, False, False, ""))
                                                    Case "dbquery", "querydb", "query", "db"
                                                        '
                                                        ' Display the output of a query
                                                        '
                                                        Copy = ""
                                                        FieldDataSource = csv_GetXMLAttribute(IsFound, TabNode, "DataSourceName", "")
                                                        FieldSQL = TabNode.InnerText
                                                        FieldCaption = csv_GetXMLAttribute(IsFound, TabNode, "caption", "")
                                                        FieldDescription = csv_GetXMLAttribute(IsFound, TabNode, "description", "")
                                                        SQLPageSize = EncodeInteger(csv_GetXMLAttribute(IsFound, TabNode, "rowmax", ""))
                                                        If SQLPageSize = 0 Then
                                                            SQLPageSize = 100
                                                        End If
                                                        '
                                                        ' Run the SQL
                                                        '
                                                        Dim rs As DataTable
                                                        If FieldSQL <> "" Then
                                                            Try
                                                                rs = db.executeSql(FieldSQL, FieldDataSource, , SQLPageSize)
                                                                'RS = app.csv_ExecuteSQLCommand(FieldDataSource, FieldSQL, 30, SQLPageSize, 1)

                                                            Catch ex As Exception

                                                                ErrorNumber = Err.Number
                                                                ErrorDescription = Err.Description
                                                                loadOK = False
                                                            End Try
                                                        End If
                                                        If FieldSQL = "" Then
                                                            '
                                                            ' ----- Error
                                                            '
                                                            Copy = "No Result"
                                                        ElseIf ErrorNumber <> 0 Then
                                                            '
                                                            ' ----- Error
                                                            '
                                                            Copy = "Error: " & Err.Description
                                                        ElseIf (Not isDataTableOk(rs)) Then
                                                            '
                                                            ' ----- no result
                                                            '
                                                            Copy = "No Results"
                                                        ElseIf (rs.Rows.Count = 0) Then
                                                            '
                                                            ' ----- no result
                                                            '
                                                            Copy = "No Results"
                                                        Else
                                                            '
                                                            ' ----- print results
                                                            '
                                                            If rs.Rows.Count > 0 Then
                                                                If rs.Rows.Count = 1 And rs.Columns.Count = 1 Then
                                                                    Copy = html_GetFormInputText2("result", EncodeText(something(0, 0)), , , , , True)
                                                                Else
                                                                    For Each dr As DataRow In rs.Rows
                                                                        '
                                                                        ' Build headers
                                                                        '
                                                                        FieldCount = dr.ItemArray.Count
                                                                        Copy = Copy & (cr & "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" style=""border-bottom:1px solid #444;border-right:1px solid #444;background-color:white;color:#444;"">")
                                                                        Copy = Copy & (cr & vbTab & "<tr>")
                                                                        For Each dc As DataColumn In dr.ItemArray
                                                                            Copy = Copy & (cr & vbTab & vbTab & "<td class=""ccadminsmall"" style=""border-top:1px solid #444;border-left:1px solid #444;color:black;padding:2px;padding-top:4px;padding-bottom:4px;"">" & dr(dc).ToString & "</td>")
                                                                        Next
                                                                        Copy = Copy & (cr & vbTab & "</tr>")
                                                                        '
                                                                        ' Build output table
                                                                        '
                                                                        Dim RowStart As String
                                                                        Dim RowEnd As String
                                                                        Dim ColumnStart As String
                                                                        Dim ColumnEnd As String
                                                                        RowStart = cr & vbTab & "<tr>"
                                                                        RowEnd = cr & vbTab & "</tr>"
                                                                        ColumnStart = cr & vbTab & vbTab & "<td class=""ccadminnormal"" style=""border-top:1px solid #444;border-left:1px solid #444;background-color:white;color:#444;padding:2px"">"
                                                                        ColumnEnd = "</td>"
                                                                        Dim RowPointer As Integer
                                                                        For RowPointer = 0 To RowMax
                                                                            Copy = Copy & (RowStart)
                                                                            Dim ColumnPointer As Integer
                                                                            For ColumnPointer = 0 To ColumnMax
                                                                                Dim CellData As Object
                                                                                CellData = something(ColumnPointer, RowPointer)
                                                                                If IsNull(CellData) Then
                                                                                    Copy = Copy & (ColumnStart & "[null]" & ColumnEnd)
                                                                                ElseIf IsNothing(CellData) Then
                                                                                    Copy = Copy & (ColumnStart & "[empty]" & ColumnEnd)
                                                                                ElseIf IsArray(CellData) Then
                                                                                    Copy = Copy & ColumnStart & "[array]"
                                                                                    'Dim Cnt As Integer
                                                                                    'Cnt = UBound(CellData)
                                                                                    'Dim Ptr As Integer
                                                                                    'For Ptr = 0 To Cnt - 1
                                                                                    '    Copy = Copy & ("<br>(" & Ptr & ")&nbsp;[" & CellData(Ptr) & "]")
                                                                                    'Next
                                                                                    'Copy = Copy & (ColumnEnd)
                                                                                ElseIf EncodeText(CellData) = "" Then
                                                                                    Copy = Copy & (ColumnStart & "[empty]" & ColumnEnd)
                                                                                Else
                                                                                    Copy = Copy & (ColumnStart & html_EncodeHTML(EncodeText(CellData)) & ColumnEnd)
                                                                                End If
                                                                            Next
                                                                            Copy = Copy & (RowEnd)
                                                                        Next
                                                                        Copy = Copy & (cr & "</table>")

                                                                    Next
                                                                End If
                                                            End If
                                                        End If
                                                        Call TabCell.Add(Adminui.GetEditRow(Copy, FieldCaption, FieldDescription, False, False, ""))
                                                End Select
                                            Next
                                            Copy = Adminui.GetEditPanel(True, TabHeading, TabDescription, Adminui.EditTableOpen & TabCell.Text & Adminui.EditTableClose)
                                            If Copy <> "" Then
                                                Call main_AddLiveTabEntry(Replace(TabName, " ", "&nbsp;"), Copy, "ccAdminTab")
                                            End If
                                            'Content.Add( GetForm_Edit_AddTab(TabName, Copy, True))
                                            TabCell = Nothing
                                        Case Else
                                    End Select
                                Next
                            End With
                            '
                            ' Buttons
                            '
                            ButtonList = ButtonCancel & "," & ButtonSave & "," & ButtonOK
                            '
                            ' Close Tables
                            '
                            'Content.Add( main_GetFormInputHidden(RequestNameAdminSourceForm, AdminFormMobileBrowserControl))
                            '
                            '
                            '
                            If TabCnt > 0 Then
                                Content.Add(main_GetLiveTabs())
                            End If
                        End If
                    End If
                End If
            End If
            '
            executeAddon_getFormContent = Adminui.GetBody(Name, ButtonList, "", True, True, Description, "", 0, Content.Text)
            Content = Nothing
            '
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError5("executeAddon_getFormContent", "trap", Err.Number, Err.Source, Err.Description, False)
        End Function
        '
        '========================================================================
        '   Display field in the admin/edit
        '========================================================================
        '
        Private Function executeAddon_getFormContent_decodeSelector(ByVal nothingObject As Object, ByVal SitePropertyName As String, ByVal SitePropertyValue As String, ByVal selector As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("AdminClass.ExecuteAddon_internal_getFormContent_decodeSelector")
            '
            Dim ExpandedSelector As String = ""
            Dim ignore As String = ""
            Dim OptionCaption As String
            Dim OptionValue As String
            Dim OptionValue_AddonEncoded As String
            Dim OptionPtr As Integer
            Dim OptionCnt As Integer
            Dim OptionValues() As String
            Dim OptionSuffix As String
            Dim LCaseOptionDefault As String
            Dim Pos As Integer
            Dim Checked As Boolean
            Dim ParentID As Integer
            Dim ParentCID As Integer
            Dim Criteria As String
            Dim RootCID As Integer
            Dim SQL As String
            Dim TableID As Integer
            Dim TableName As Integer
            Dim ChildCID As Integer
            Dim CIDList As String
            Dim TableName2 As String
            Dim RecordContentName As String
            Dim HasParentID As Boolean
            Dim CS As Integer
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim CSPointer As Integer
            Dim RecordID As Integer
            Dim FastString As coreFastStringClass
            Dim FieldValueInteger As Integer
            Dim FieldRequired As Boolean
            Dim FieldHelp As String
            Dim AuthoringStatusMessage As String
            Dim Delimiter As String
            Dim Copy As String
            '
            Dim FieldName As String
            '
            FastString = New coreFastStringClass
            '
            Call csv_BuildAddonOptionLists(ignore, ExpandedSelector, SitePropertyName & "=" & selector, SitePropertyName & "=" & SitePropertyValue, "0", True)
            Pos = vbInstr(1, ExpandedSelector, "[")
            If Pos <> 0 Then
                '
                ' List of Options, might be select, radio or checkbox
                '
                LCaseOptionDefault = vbLCase(Mid(ExpandedSelector, 1, Pos - 1))
                Dim PosEqual As Integer

                PosEqual = vbInstr(1, LCaseOptionDefault, "=")
                If PosEqual > 0 Then
                    LCaseOptionDefault = Mid(LCaseOptionDefault, PosEqual + 1)
                End If

                LCaseOptionDefault = decodeNvaArgument(LCaseOptionDefault)
                ExpandedSelector = Mid(ExpandedSelector, Pos + 1)
                Pos = vbInstr(1, ExpandedSelector, "]")
                If Pos > 0 Then
                    If Pos < Len(ExpandedSelector) Then
                        OptionSuffix = vbLCase(Trim(Mid(ExpandedSelector, Pos + 1)))
                    End If
                    ExpandedSelector = Mid(ExpandedSelector, 1, Pos - 1)
                End If
                OptionValues = Split(ExpandedSelector, "|")
                executeAddon_getFormContent_decodeSelector = ""
                OptionCnt = UBound(OptionValues) + 1
                For OptionPtr = 0 To OptionCnt - 1
                    OptionValue_AddonEncoded = Trim(OptionValues(OptionPtr))
                    If OptionValue_AddonEncoded <> "" Then
                        Pos = vbInstr(1, OptionValue_AddonEncoded, ":")
                        If Pos = 0 Then
                            OptionValue = decodeNvaArgument(OptionValue_AddonEncoded)
                            OptionCaption = OptionValue
                        Else
                            OptionCaption = decodeNvaArgument(Mid(OptionValue_AddonEncoded, 1, Pos - 1))
                            OptionValue = decodeNvaArgument(Mid(OptionValue_AddonEncoded, Pos + 1))
                        End If
                        Select Case OptionSuffix
                            Case "checkbox"
                                '
                                ' Create checkbox executeAddon_getFormContent_decodeSelector
                                '
                                If vbInstr(1, "," & LCaseOptionDefault & ",", "," & vbLCase(OptionValue) & ",") <> 0 Then
                                    executeAddon_getFormContent_decodeSelector = executeAddon_getFormContent_decodeSelector & "<div style=""white-space:nowrap""><input type=""checkbox"" name=""" & SitePropertyName & OptionPtr & """ value=""" & OptionValue & """ checked=""checked"">" & OptionCaption & "</div>"
                                Else
                                    executeAddon_getFormContent_decodeSelector = executeAddon_getFormContent_decodeSelector & "<div style=""white-space:nowrap""><input type=""checkbox"" name=""" & SitePropertyName & OptionPtr & """ value=""" & OptionValue & """ >" & OptionCaption & "</div>"
                                End If
                            Case "radio"
                                '
                                ' Create Radio executeAddon_getFormContent_decodeSelector
                                '
                                If vbLCase(OptionValue) = LCaseOptionDefault Then
                                    executeAddon_getFormContent_decodeSelector = executeAddon_getFormContent_decodeSelector & "<div style=""white-space:nowrap""><input type=""radio"" name=""" & SitePropertyName & """ value=""" & OptionValue & """ checked=""checked"" >" & OptionCaption & "</div>"
                                Else
                                    executeAddon_getFormContent_decodeSelector = executeAddon_getFormContent_decodeSelector & "<div style=""white-space:nowrap""><input type=""radio"" name=""" & SitePropertyName & """ value=""" & OptionValue & """ >" & OptionCaption & "</div>"
                                End If
                            Case Else
                                '
                                ' Create select executeAddon_getFormContent_decodeSelector
                                '
                                If vbLCase(OptionValue) = LCaseOptionDefault Then
                                    executeAddon_getFormContent_decodeSelector = executeAddon_getFormContent_decodeSelector & "<option value=""" & OptionValue & """ selected>" & OptionCaption & "</option>"
                                Else
                                    executeAddon_getFormContent_decodeSelector = executeAddon_getFormContent_decodeSelector & "<option value=""" & OptionValue & """>" & OptionCaption & "</option>"
                                End If
                        End Select
                    End If
                Next
                Select Case OptionSuffix
                    Case "checkbox"
                        '
                        '
                        Copy = Copy & "<input type=""hidden"" name=""" & SitePropertyName & "CheckBoxCnt"" value=""" & OptionCnt & """ >"
                    Case "radio"
                        '
                        ' Create Radio executeAddon_getFormContent_decodeSelector
                        '
                        'executeAddon_getFormContent_decodeSelector = "<div>" & vbReplace(executeAddon_getFormContent_decodeSelector, "><", "></div><div><") & "</div>"
                    Case Else
                        '
                        ' Create select executeAddon_getFormContent_decodeSelector
                        '
                        executeAddon_getFormContent_decodeSelector = "<select name=""" & SitePropertyName & """>" & executeAddon_getFormContent_decodeSelector & "</select>"
                End Select
            Else
                '
                ' Create Text executeAddon_getFormContent_decodeSelector
                '

                selector = decodeNvaArgument(selector)
                executeAddon_getFormContent_decodeSelector = html_GetFormInputText2(SitePropertyName, selector, 1, 20)
            End If

            FastString = Nothing
            Exit Function
            '
ErrorTrap:
            FastString = Nothing
            Call handleLegacyError7("executeAddon_getFormContent_decodeSelector", "trap")
        End Function
        '
        ' ================================================================================================================
        '   Execute a script
        '   returns the results
        '
        '       - cp argument should be set during csv_OpenConnection3, not passed in here as nothingObject
        ' ================================================================================================================
        '
        Public Function executeAddon_executeScript(ByVal Language As String, ByVal Code As String, ByVal EntryPoint As String, ByVal cmcObj As coreClass, ByVal nothingObject As Object, ByRef return_AddonErrorMessage As String) As String
            Dim ScriptName As String
            Dim FirstLine As String
            Dim Pos As Integer
            Dim EmptyArray(0) As String
            '
            If EntryPoint <> "" Then
                ScriptName = "unnamed script with method [" & EntryPoint & "] and length [" & Len(Code) & "]"
            Else
                FirstLine = Code
                FirstLine = vbReplace(FirstLine, vbTab, "")
                Pos = vbInstr(1, FirstLine, vbCrLf)
                If (Pos <= 0) Or (Pos > 50) Then
                    FirstLine = Left(FirstLine, 50)
                Else
                    FirstLine = Left(FirstLine, Pos - 1)
                End If
                ScriptName = "unnamed script with length [" & Len(Code) & "] starting with [" & FirstLine & "]"
            End If
            '
            executeAddon_executeScript = executeAddon_executeScript3(Language, Code, EntryPoint, cmcObj, nothingObject, return_AddonErrorMessage, 60000, ScriptName, 0, EmptyArray, EmptyArray)
        End Function
        '
        ' ================================================================================================================
        '   Execute a script
        '   returns the results
        ' ================================================================================================================
        '
        Public Function executeAddon_executeScript2(ByVal Language As String, ByVal Code As String, ByVal EntryPoint As String, ByVal cmcObj As coreClass, ByVal nothingObject As Object, ByRef return_AddonErrorMessage As String, ByVal ScriptingTimeout As Integer, ByVal ScriptName As String) As String
            Dim EmptyArray(0) As String
            executeAddon_executeScript2 = executeAddon_executeScript3(Language, Code, EntryPoint, cmcObj, nothingObject, return_AddonErrorMessage, ScriptingTimeout, ScriptName, 0, EmptyArray, EmptyArray)
        End Function
        '
        ' ================================================================================================================
        '   conversion to 2005 - pass 2
        ' ================================================================================================================
        '
        Public Function executeAddon_executeScript3(ByVal Language As String, ByVal Code As String, ByVal EntryPoint As String, ByVal nothingObject As Object, ByVal nothingObject2 As Object, ByRef return_AddonErrorMessage As String, ByVal ScriptingTimeout As Integer, ByVal ScriptName As String, ByVal ReplaceCnt As Integer, ByVal ReplaceNames() As String, ByVal ReplaceValues() As String) As String
            'Dim legacyMain As Object
            'Dim legacyCsv As Object
            '
            executeAddon_executeScript3 = executeAddon_executeScript4(Language, Code, EntryPoint, return_AddonErrorMessage, ScriptingTimeout, ScriptName, ReplaceCnt, ReplaceNames, ReplaceValues)
        End Function
        '
        ' ================================================================================================================
        ''' <summary>
        ''' execute the script section of addons. Must be 32-bit. 
        ''' </summary>
        ''' <param name="Language"></param>
        ''' <param name="Code"></param>
        ''' <param name="EntryPoint"></param>
        ''' <param name="return_errorMessage"></param>
        ''' <param name="ScriptingTimeout"></param>
        ''' <param name="ScriptName"></param>
        ''' <param name="ReplaceCnt"></param>
        ''' <param name="ReplaceNames"></param>
        ''' <param name="ReplaceValues"></param>
        ''' <returns></returns>
        ''' <remarks>long run, use either csscript.net, or use .net tools to build compile/run funtion</remarks>
        Public Function executeAddon_executeScript4(ByVal Language As String, ByVal Code As String, ByVal EntryPoint As String, ByRef return_errorMessage As String, ByVal ScriptingTimeout As Integer, ByVal ScriptName As String, ByVal ReplaceCnt As Integer, ByVal ReplaceNames() As String, ByVal ReplaceValues() As String) As String
            Dim returnText As String
            Try
                '
                Dim Lines() As String
                'Dim ErrorMsg As String
                Dim sc As New MSScriptControl.ScriptControl
                Dim emptyObj As Object
                Dim Args() As String
                Dim Pos As Integer
                Dim EntryPointArgs As String
                Dim EntryPointName As String
                Dim arg2 As Object
                Dim Ptr As Integer
                Dim ReplaceName As String
                Dim ReplaceValue As String
                Dim WorkingCode As String
                Dim WorkingEntryPoint As String
                '
                'Add a COM reference of "Microsoft Script Control 1.0" to your project.
                'Use this code
                'MSScriptControl.ScriptControl script = new MSScriptControl.ScriptControl();
                'script.Language = "VBScript";
                'script.AddObject("Repository", connectToDB.GetRepository);
                'addobject -AddS
                ' adds activex
                '
                WorkingEntryPoint = EntryPoint
                WorkingCode = Code
                If ReplaceCnt > 0 Then
                    For Ptr = 0 To ReplaceCnt - 1
                        ReplaceName = "$" & ReplaceNames(Ptr) & "$"
                        ReplaceValue = ReplaceValues(Ptr)
                        WorkingEntryPoint = vbReplace(WorkingEntryPoint, ReplaceName, ReplaceValue, 1, 99, vbTextCompare)
                        WorkingCode = vbReplace(WorkingCode, ReplaceName, ReplaceValue, 1, 99, vbTextCompare)
                    Next
                End If
                EntryPointName = WorkingEntryPoint
                Pos = vbInstr(1, EntryPointName, "(")
                If Pos = 0 Then
                    Pos = vbInstr(1, EntryPointName, " ")
                End If
                If Pos > 1 Then
                    EntryPointArgs = Trim(Mid(EntryPointName, Pos))
                    EntryPointName = Trim(Left(EntryPointName, Pos - 1))
                    If (Mid(EntryPointArgs, 1, 1) = "(") And (Mid(EntryPointArgs, Len(EntryPointArgs), 1) = ")") Then
                        EntryPointArgs = Mid(EntryPointArgs, 2, Len(EntryPointArgs) - 2)
                    End If
                    Args = SplitDelimited(EntryPointArgs, ",")
                End If
                '
                ' the only createObject allowed -- because there is no modern versin of 
                '
                'sc = CreateObject("ScriptControl")
                Try
                    sc.AllowUI = False
                    sc.Timeout = ScriptingTimeout
                    If Language <> "" Then
                        sc.Language = Language
                    Else
                        sc.Language = "VBScript"
                    End If
                    Call sc.AddCode(WorkingCode)
                Catch ex As Exception
                    return_errorMessage = "Error configuring scripting system"
                    If sc.Error.Number <> 0 Then
                        With sc.Error
                            return_errorMessage &= ", #" & .Number & ", " & .Description & ", line " & .Line & ", character " & .Column
                            If .Line <> 0 Then
                                Lines = Split(WorkingCode, vbCrLf)
                                If UBound(Lines) >= .Line Then
                                    return_errorMessage = return_errorMessage & ", code [" & Lines(.Line - 1) & "]"
                                End If
                            End If
                        End With
                    Else
                        return_errorMessage &= ", no scripting error"
                    End If
                    handleExceptionAndRethrow(ex, return_errorMessage)
                End Try
                If String.IsNullOrEmpty(return_errorMessage) Then
                    If True Then
                        If True Then
                            If True Then
                                If True Then
                                    Try
                                        Call sc.AddObject("cp", cp)
                                    Catch ex As Exception
                                        '
                                        ' Error adding cp object
                                        '
                                        return_errorMessage = "Error adding cp object to script environment"
                                        If sc.Error.Number <> 0 Then
                                            With sc.Error
                                                return_errorMessage = return_errorMessage & ", #" & .Number & ", " & .Description & ", line " & .Line & ", character " & .Column
                                                If .Line <> 0 Then
                                                    Lines = Split(WorkingCode, vbCrLf)
                                                    If UBound(Lines) >= .Line Then
                                                        return_errorMessage = return_errorMessage & ", code [" & Lines(.Line - 1) & "]"
                                                    End If
                                                End If
                                            End With
                                        Else
                                            return_errorMessage &= ", no scripting error"
                                        End If
                                        handleExceptionAndRethrow(ex, return_errorMessage)
                                    End Try
                                    If String.IsNullOrEmpty(return_errorMessage) Then
                                        '
                                        If EntryPointName = "" Then
                                            If sc.Procedures.Count > 0 Then
                                                EntryPointName = sc.Procedures(1).Name
                                            End If
                                        End If
                                        Try
                                            If EntryPointArgs = "" Then
                                                executeAddon_executeScript4 = EncodeText(sc.Run(EntryPointName))

                                            Else
                                                Select Case UBound(Args)
                                                    Case 0
                                                        executeAddon_executeScript4 = EncodeText(sc.Run(EntryPointName, Args(0)))
                                                    Case 1
                                                        executeAddon_executeScript4 = EncodeText(sc.Run(EntryPointName, Args(0), Args(1)))
                                                    Case 2
                                                        executeAddon_executeScript4 = EncodeText(sc.Run(EntryPointName, Args(0), Args(1), Args(2)))
                                                    Case 3
                                                        executeAddon_executeScript4 = EncodeText(sc.Run(EntryPointName, Args(0), Args(1), Args(2), Args(3)))
                                                    Case 4
                                                        executeAddon_executeScript4 = EncodeText(sc.Run(EntryPointName, Args(0), Args(1), Args(2), Args(3), Args(4)))
                                                    Case 5
                                                        executeAddon_executeScript4 = EncodeText(sc.Run(EntryPointName, Args(0), Args(1), Args(2), Args(3), Args(4), Args(5)))
                                                    Case 6
                                                        executeAddon_executeScript4 = EncodeText(sc.Run(EntryPointName, Args(0), Args(1), Args(2), Args(3), Args(4), Args(5), Args(6)))
                                                    Case 7
                                                        executeAddon_executeScript4 = EncodeText(sc.Run(EntryPointName, Args(0), Args(1), Args(2), Args(3), Args(4), Args(5), Args(6), Args(7)))
                                                    Case 8
                                                        executeAddon_executeScript4 = EncodeText(sc.Run(EntryPointName, Args(0), Args(1), Args(2), Args(3), Args(4), Args(5), Args(6), Args(7), Args(8)))
                                                    Case 9
                                                        executeAddon_executeScript4 = EncodeText(sc.Run(EntryPointName, Args(0), Args(1), Args(2), Args(3), Args(4), Args(5), Args(6), Args(7), Args(8), Args(9)))
                                                    Case Else
                                                        Call handleLegacyError6("csv_ExecuteScript4", "Scripting only supports 10 arguments.")
                                                End Select
                                            End If
                                        Catch ex As Exception
                                            return_errorMessage = "Error executing script"
                                            If sc.Error.Number <> 0 Then
                                                With sc.Error
                                                    return_errorMessage = return_errorMessage & ", #" & .Number & ", " & .Description & ", line " & .Line & ", character " & .Column
                                                    If .Line <> 0 Then
                                                        Lines = Split(WorkingCode, vbCrLf)
                                                        If UBound(Lines) >= .Line Then
                                                            return_errorMessage = return_errorMessage & ", code [" & Lines(.Line - 1) & "]"
                                                        End If
                                                    End If
                                                End With
                                            Else
                                                return_errorMessage = return_errorMessage & ", " & GetErrString()
                                            End If
                                            handleExceptionAndRethrow(ex, return_errorMessage)
                                        End Try
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
        End Function
        '
        '
        '
        Public Function executeAddon_executeAssembly(ByVal addonId As Integer, ByVal AddonCaption As String, ByVal AssemblyClassFullName As String, ByVal CollectionGuid As String, ByVal nothingObject As Object, ByRef return_ErrorMessageForAdmin As String) As String
            Dim result As String = ""
            Try
                Dim AddonFound As Boolean = False
                Dim addonAppRootPath As String
                Dim AddonPath As String
                Dim addonInstall As coreAddonInstallClass
                Dim AddonVersionPath As String
                Dim commonAssemblyPath As String
                Dim appAddonPath As String
                '
                ' first try debug folder -- cclibCommonAssemblies
                '
                commonAssemblyPath = cluster.localClusterFiles.joinPath(cluster.localClusterFiles.rootLocalFolderPath, "clibCommonAssemblies\")
                result = executeAddon_executeAssembly_byFilePath(addonId, AddonCaption, commonAssemblyPath, AssemblyClassFullName, True, AddonFound, return_ErrorMessageForAdmin)
                If Not AddonFound Then
                    '
                    ' try app /bin folder
                    '
                    addonAppRootPath = privateFiles.joinPath(appRootFiles.rootLocalFolderPath, "bin\")
                    result = executeAddon_executeAssembly_byFilePath(addonId, AddonCaption, addonAppRootPath, AssemblyClassFullName, True, AddonFound, return_ErrorMessageForAdmin)
                    If Not AddonFound Then
                        '
                        ' legacy mode, consider eliminating this and storing addon binaries in apps /bin folder
                        '
                        AddonVersionPath = ""
                        If String.IsNullOrEmpty(CollectionGuid) Then
                            Throw New ApplicationException("The assembly for addon [" & AddonCaption & "] could not be executed because it's collection has an invalid guid.")
                        Else
                            addonInstall = New coreAddonInstallClass(Me)
                            Call addonInstall.GetCollectionConfig(CollectionGuid, AddonVersionPath, New Date(), "")
                            If (String.IsNullOrEmpty(AddonVersionPath)) Then
                                Throw New ApplicationException("The assembly for addon [" & AddonCaption & "] could not be executed because it's assembly could not be found in cclibCommonAssemblies, and no collection folder was found.")
                            Else
                                AddonPath = privateFiles.joinPath(Me.addon_getPrivateFilesAddonPath(), AddonVersionPath)
                                appAddonPath = privateFiles.joinPath(privateFiles.rootLocalFolderPath, AddonPath)
                                result = executeAddon_executeAssembly_byFilePath(addonId, AddonCaption, appAddonPath, AssemblyClassFullName, False, AddonFound, return_ErrorMessageForAdmin)
                                If (Not AddonFound) Then
                                    '
                                    ' assembly not found in addon path and in development path, if core collection, try in local /bin nm 
                                    '
                                    If (CollectionGuid <> CoreCollectionGuid) Then
                                        '
                                        ' assembly not found
                                        '
                                        Throw New ApplicationException("The addon [" & AddonCaption & "] could not be executed because it's assembly could not be found in the cluster's common assembly path [" & commonAssemblyPath & "], the apps binary folder [" & addonAppRootPath & "], or in the legacy collection folder [" & appAddonPath & "].")
                                    Else
                                    End If
                                End If
                            End If
                        End If
                    End If
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
                Throw ex
            End Try
            Return result
        End Function
        '
        '==================================================================================================
        '   This is the call from the COM csv code that executes a dot net addon from com.
        '   This is not in the CP BaseClass, because it is used by addons to call back into CP for
        '   services, and they should never call this.
        '==================================================================================================
        '
        Private Function executeAddon_executeAssembly_byFilePath(ByVal AddonID As Integer, ByVal AddonDisplayName As String, ByVal fullPath As String, ByVal typeFullName As String, ByVal IsDevAssembliesFolder As Boolean, ByRef AddonFound As Boolean, ByRef return_userErrorMessage As String) As String
            Dim returnValue As String = ""
            Try
                Dim objTypes() As Type = Nothing
                Dim filePtr As Integer
                Dim dllFilenames() As String
                Dim testAssembly As [Assembly] = Nothing
                Dim testAssemblyType As Type = Nothing
                Dim objInterface As Type = Nothing
                Dim AddonObj As Contensive.BaseClasses.AddonBaseClass
                'Dim addonObj As Object
                Dim IsClassFound As Boolean = False
                Dim TestFilePathname As String = ""
                Dim AddonReturnObj As Object
                Dim detailedErrorMessage As String = ""
                Dim testFileIsValidAssembly As Boolean
                Dim testAssemblyName As String
                '
                ' If not found in debug location (addon root folder), look in addon version folder provided
                '
                AddonFound = False
                dllFilenames = IO.Directory.GetFileSystemEntries(fullPath, "*.dll")
                If dllFilenames.Length > 0 Then
                    '
                    ' search the list for the correct assembly
                    '
                    filePtr = 0
                    Do
                        TestFilePathname = dllFilenames(filePtr)
                        testFileIsValidAssembly = True
                        Try
                            '
                            ' ##### consider using refectiononlyload first, then if it is right, do the loadfrom - so dependancies are not loaded.
                            '
                            testAssembly = System.Reflection.Assembly.LoadFrom(TestFilePathname)
                            testAssemblyName = testAssembly.FullName
                        Catch ex As Exception
                            testFileIsValidAssembly = False
                        End Try
                        Try
                            If testFileIsValidAssembly Then
                                '
                                ' problem loading types, use try to debug
                                '
                                Try
                                    For Each testAssemblyType In testAssembly.GetTypes
                                        '
                                        ' Loop through each type in the Assembly looking for our typename, public, and non-abstract
                                        '
                                        If (testAssemblyType.FullName.Trim.ToLower = typeFullName.Trim.ToLower) _
                                                And (testAssemblyType.IsPublic = True) _
                                                And (Not ((testAssemblyType.Attributes And TypeAttributes.Abstract) = TypeAttributes.Abstract)) _
                                                And Not (testAssemblyType.BaseType Is Nothing) _
                                                Then
                                            If (testAssemblyType.BaseType.FullName.ToLower = "contensive.baseclasses.addonbaseclass") Then
                                                '
                                                ' This assembly matches the TypeFullName, use it
                                                '
                                                AddonFound = True
                                                Try
                                                    '
                                                    ' Create the object from the Assembly
                                                    '
                                                    AddonObj = DirectCast(testAssembly.CreateInstance(testAssemblyType.FullName), Contensive.BaseClasses.AddonBaseClass)
                                                    Try
                                                        '
                                                        ' Call Execute
                                                        '
                                                        AddonReturnObj = AddonObj.Execute(cp)
                                                        If Not (AddonReturnObj Is Nothing) Then
                                                            Select Case AddonReturnObj.GetType().ToString
                                                                Case "System.Object[,]"
                                                                '
                                                                '   a 2-D Array of objects
                                                                '   each cell can contain 
                                                                '   return array for internal use constructing data/layout merge
                                                                '   return xml as dataset to another computer
                                                                '   return json as dataset for browser
                                                                '
                                                                Case "System.String[,]"
                                                                    '
                                                                    '   return array for internal use constructing data/layout merge
                                                                    '   return xml as dataset to another computer
                                                                    '   return json as dataset for browser
                                                                    '
                                                                Case Else
                                                                    returnValue = AddonReturnObj.ToString
                                                            End Select
                                                        End If
                                                    Catch Ex As Exception
                                                        '
                                                        ' Error Creating instance of the class, exit wrapper 
                                                        '
                                                        return_userErrorMessage = "There was an error executing the addon's Dot Net DLL."
                                                        detailedErrorMessage = AddonDisplayName & " could not be executed because there was an error executing the addon DLL [" & TestFilePathname & "], in class [" & testAssemblyType.FullName.Trim.ToLower & "]. The error was [" & Ex.ToString() & "]"
                                                        Throw New ApplicationException(detailedErrorMessage)
                                                    End Try
                                                Catch Ex As Exception
                                                    return_userErrorMessage = "There was an error initializing the addon's Dot Net DLL."
                                                    detailedErrorMessage = AddonDisplayName & " could not be executed because there was an error creating an object from the assembly, DLL [" & testAssemblyType.FullName & "]. The error was [" & Ex.ToString() & "]"
                                                    Throw New ApplicationException(detailedErrorMessage)
                                                End Try
                                                '
                                                ' addon was found, no need to look for more
                                                '
                                                Exit For
                                            End If
                                        End If
                                    Next
                                Catch ex As ReflectionTypeLoadException
                                    '
                                    ' exceptin thrown out of application bin folder when xunit library included -- ignore
                                    '
                                Catch ex As Exception
                                    '
                                    ' problem loading types
                                    '
                                    detailedErrorMessage = "While locating assembly for addon [" & AddonDisplayName & "], there was an error loading types for assembly [" & testAssemblyType.FullName & "]. This assembly was skipped and should be removed from the folder [" & fullPath & "]"
                                    handleExceptionAndRethrow(ex, detailedErrorMessage)
                                End Try
                            End If
                        Catch ex As Reflection.ReflectionTypeLoadException
                            return_userErrorMessage = "The addon's Dot Net DLL does not appear to be valid [" & TestFilePathname & "]."
                            detailedErrorMessage = "A load exception occured for addon [" & AddonDisplayName & "], DLL [" & testAssemblyType.FullName & "]. The error was [" & ex.ToString() & "] Any internal exception follow:"
                            objTypes = ex.Types
                            For Each exLoader As Exception In ex.LoaderExceptions
                                detailedErrorMessage &= vbCrLf & "--LoaderExceptions: " & exLoader.Message
                            Next
                            Throw New ApplicationException(detailedErrorMessage)
                        Catch ex As Exception
                            '
                            ' ignore these errors
                            '
                            return_userErrorMessage = "There was an unknown error in the addon's Dot Net DLL [" & AddonDisplayName & "]."
                            detailedErrorMessage = "A non-load exception occured while loading the addon [" & AddonDisplayName & "], DLL [" & testAssemblyType.FullName & "]. The error was [" & ex.ToString() & "]."
                        End Try
                        filePtr += 1
                    Loop While (Not AddonFound) And (filePtr < dllFilenames.Length)
                End If
                'If IsDevAssembliesFolder Then
                '    If AddonFound Then
                '        '
                '        ' if debug folder version is run, log a warning
                '        '
                '        'Call Utils.AppendLog("Warning: Addon [" & AddonDisplayName & "] was bypassed by a file in the addon root folder [" & TestFilePathname & "]. This file should be deleted when debugging is complete.")
                '    End If
                'Else
                '    If Not AddonFound Then
                '        '
                '        ' not found
                '        '
                '        return_userErrorMessage = "A valid Dot Net DLL could not be found for this addon [" & AddonDisplayName & "]."
                '        detailedErrorMessage = "A valid Dot Net DLL could not be found for this addon [" & AddonDisplayName & "] in filePath [" & TestFilePathname & "]"
                '        Throw New ApplicationException(detailedErrorMessage)
                '    End If
                'End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return returnValue
        End Function
        ''
        '' 
        ''
        'Public Function csv_ExecuteActiveX(ByVal ProgramID As String, ByVal AddonCaption As String, ByVal OptionString_ForObjectCall As String, ByVal OptionStringForDisplay As String, ByRef return_AddonErrorMessage As String) As String
        '    Dim exMsg As String = "activex addons [" & ProgramID & "] are no longer supported"
        '    handleException(New ApplicationException(exMsg))
        '    Return exMsg
        'End Function
        '
        '====================================================================================================================
        '   Execte an Addon as a process
        '
        '   OptionString
        '       can be & delimited or crlf delimited
        '       must be addonencoded with call encodeNvaArgument
        '
        '   nothingObject
        '       cp should be set during csv_OpenConnection3 -- do not pass it around in the arguments
        '
        '   WaitForReturn
        '       if true, this routine calls the addon
        '       if false, the server is called remotely, which starts a cccmd process, gets the command and calls this routine with true
        '====================================================================================================================
        '
        Public Function executeAddonAsProcess(ByVal AddonIDGuidOrName As String, Optional ByVal OptionString As String = "") As String
            On Error GoTo ErrorTrap 'Const Tn = "ExecuteAddonAsProcess" : ''Dim th as integer : th = profileLogMethodEnter(Tn)
            '
            Dim StatusOK As Boolean
            Dim ErrNumber As Integer
            Dim ErrSource As String
            Dim ErrDescription As String
            Dim TestName As String
            Dim TestValue As String
            Dim PairPtr As Integer
            Dim LCaseTestName As String
            Dim ScriptingTimeout As Integer
            Dim ACInstanceID As String
            Dim AddonOptionConstructor As String
            Dim AddonOptionExpandedConstructor As String
            Dim OptionString_ForObjectCall As String
            Dim CollectionGuid As String
            Dim IgnoreErrorMessage As String
            Dim DefaultWrapperID As Integer
            Dim WrapperID As Integer
            Dim OptionPair() As String
            Dim OptionsForCPVars() As NameValuePrivateType
            Dim OptionPtr As Integer
            Dim Options() As String
            Dim CodeFilename As String
            Dim CSRules As Integer
            Dim SQL As String
            Dim ScriptingLanguage As String
            Dim scriptinglanguageid As Integer
            Dim ScriptingEntryPoint As String
            Dim HTMLContent As String
            Dim AddonGuid As String
            Dim OptionCnt As Integer
            Dim OptionsForCPVars_Cnt As Integer

            Dim Ptr As Integer
            Dim hint As String
            Dim Criteria As String
            Dim CS As Integer
            Dim AddonName As String
            Dim ProgramID As String
            Dim ArgumentList As String
            Dim ScriptingCode As String
            Dim DotNetClassFullName As String
            Dim WorkingAddonOptionString As String
            Dim cmdQueryString As String
            'Dim runAtServer As runAtServerClass
            Dim addonId As Integer
            'Dim AddonGuidOrName As String
            Dim ProcessStartTick As Integer
            Dim ReplaceCnt As Integer
            Dim ReplaceNames() As String
            Dim ReplaceValues() As String
            Dim SQLName As String
            Dim addonPtr As Integer
            ' Dim taskScheduler As New taskSchedulerServiceClass()
            '
            'hint = "csv_executeAddonAsProcess, enter"
            '
            ProcessStartTick = GetTickCount
            addonPtr = addonCache.getPtr(AddonIDGuidOrName)
            If addonPtr >= 0 Then
                addonId = EncodeInteger(addonCache.localCache.addonList(addonPtr).addonCache_Id)
                AddonName = EncodeText(addonCache.localCache.addonList(addonPtr).addonCache_name)
                'hint = hint & ",020 addonname=[" & AddonName & "] addonid=[" & addonId & "]"
            End If
            '
            '-----------------------------------------------------------------
            '   Add to background process queue
            '-----------------------------------------------------------------
            '
            'hint = hint & ",030"
            appendLogWithLegacyRow(appConfig.name, "start: add process to background cmd queue, addon [" & AddonName & "/" & addonId & "], optionstring [" & OptionString & "]", "dll", "cpCoreClass", "csv_ExecuteAddonAsProcess", Err.Number, Err.Source, Err.Description, False, True, "", "process", "")
            '
            ' runAtServer = New runAtServerClass(Me)
            ' must nva encode because that is what the server-execute command expects
            cmdQueryString = "" _
                    & "appname=" & encodeNvaArgument(EncodeRequestVariable(appConfig.name)) _
                    & "&AddonID=" & CStr(addonId) _
                    & "&OptionString=" & encodeNvaArgument(EncodeRequestVariable(OptionString))
            'hint = hint & ",035"
            Dim taskScheduler As New coreTaskSchedulerServiceClass()
            Dim cmdDetail As New cmdDetailClass
            cmdDetail.addonId = addonId
            cmdDetail.addonName = AddonName
            cmdDetail.docProperties = taskScheduler.convertAddonArgumentstoDocPropertiesList(Me, cmdQueryString)
            Call taskScheduler.addTaskToQueue(Me, taskQueueCommandEnumModule.runAddon, cmdDetail, False)
            'Call runAtServer.executeCmd("RunProcess", cmdQueryString)
            '
            appendLogWithLegacyRow(appConfig.name, "end: add process to background cmd queue, addon [" & AddonName & "/" & addonId & "], optionstring [" & OptionString & "]", "dll", "cpCoreClass", "csv_ExecuteAddonAsProcess", Err.Number, Err.Source, Err.Description, False, True, "", "process", "")
            '
            Exit Function
ErrorTrap:
            ErrNumber = Err.Number
            ErrSource = Err.Source
            ErrDescription = Err.Description
            Call Err.Clear()
            appendLogWithLegacyRow(appConfig.name, "errortrap exit(" & (GetTickCount - ProcessStartTick) & " msec): execute now, addon [" & AddonIDGuidOrName & "], optionstring [" & OptionString & "]", "dll", "cpCoreClass", "csv_ExecuteAddonAsProcess", Err.Number, Err.Source, Err.Description, False, True, "", "process", "")
            Call handleLegacyError4(ErrNumber, ErrSource, ErrDescription, "unknownMethodNameLegacyCall" & ", hint=" & hint, True)
        End Function
        '
        '=============================================================================================================
        '   main_Get Addon Content
        ' REFACTOR - unify interface, remove main_ and csv_ class references
        '=============================================================================================================
        '
        Public Function executeAddon_legacy5(ByVal addonId As Integer, ByVal AddonName As String, ByVal Option_String As String, ByVal Context As addonContextEnum, ByVal ContentName As String, ByVal RecordID As Integer, ByVal FieldName As String, ByVal ACInstanceID As Integer) As String
            Dim AddonStatusOK As Boolean
            executeAddon_legacy5 = executeAddon_legacy2(addonId, AddonName, Option_String, Context, ContentName, RecordID, FieldName, CStr(ACInstanceID), False, 0, "", AddonStatusOK, Nothing)
        End Function
        '
        '====================================================================================================
        ' Public Interface
        ' REFACTOR - unify interface, remove main_ and csv_ class references
        '====================================================================================================
        '
        Public Function executeAddon_legacy1(ByVal addonId As Integer, ByVal AddonNameOrGuid As String, ByVal Option_String As String, ByVal Context As addonContextEnum, ByVal HostContentName As String, ByVal HostRecordID As Integer, ByVal HostFieldName As String, ByVal ACInstanceID As String, ByVal DefaultWrapperID As Integer) As String
            Dim AddonStatusOK As Boolean
            Dim workingContext As addonContextEnum
            '
            workingContext = Context
            If workingContext = 0 Then
                workingContext = addonContextEnum.ContextPage
            End If
            executeAddon_legacy1 = executeAddon_legacy2(addonId, AddonNameOrGuid, Option_String, workingContext, HostContentName, HostRecordID, HostFieldName, ACInstanceID, False, DefaultWrapperID, "", AddonStatusOK, Nothing)
        End Function
        '
        '====================================================================================================
        ' Public Interface to support AsProcess
        '   Programmatic calls to executeAddon would not require Context, HostContent, etc because the host would be an add-on, and the
        '   addon has control or settings, not the administrator
        ' REFACTOR - unify interface, remove main_ and csv_ class references
        '====================================================================================================
        '
        Public Function executeAddon_legacy3(ByVal AddonIDGuidOrName As String, Optional ByVal Option_String As String = "", Optional ByVal WrapperID As Integer = 0, Optional ByVal nothingObject As Object = Nothing) As String
            Dim AddonStatusOK As Boolean
            If vbIsNumeric(AddonIDGuidOrName) Then
                executeAddon_legacy3 = executeAddon_legacy2(EncodeInteger(AddonIDGuidOrName), "", Option_String, addonContextEnum.ContextPage, "", 0, "", "", False, WrapperID, "", AddonStatusOK, nothingObject)
            Else
                executeAddon_legacy3 = executeAddon_legacy2(0, AddonIDGuidOrName, Option_String, addonContextEnum.ContextPage, "", 0, "", "", False, WrapperID, "", AddonStatusOK, nothingObject)
            End If
        End Function
        '
        ' Public Interface to support AsProcess
        '
        Public Function executeAddon_legacy4(ByVal AddonIDGuidOrName As String, Optional ByVal Option_String As String = "", Optional ByVal Context As addonContextEnum = addonContextEnum.ContextPage, Optional ByVal nothingObject As Object = Nothing) As String
            Dim AddonStatusOK As Boolean
            Dim workingContext As addonContextEnum
            '
            workingContext = Context
            If workingContext = 0 Then
                workingContext = addonContextEnum.ContextPage
            End If
            If vbIsNumeric(AddonIDGuidOrName) Then
                executeAddon_legacy4 = executeAddon_legacy2(EncodeInteger(AddonIDGuidOrName), "", Option_String, workingContext, "", 0, "", "", False, 0, "", AddonStatusOK, nothingObject)
            Else
                executeAddon_legacy4 = executeAddon_legacy2(0, AddonIDGuidOrName, Option_String, workingContext, "", 0, "", "", False, 0, "", AddonStatusOK, nothingObject)
            End If
        End Function
        ''
        ''=============================================================================================================
        ''   Run Add-on as process
        '' REFACTOR - unify interface, remove main_ and csv_ class references
        ''=============================================================================================================
        ''
        'Public Function executeAddonAsProcess_legacy1(ByVal AddonIDGuidOrName As String, Optional ByVal Option_String As String = "", Optional ByVal nothingObject As Object = Nothing, Optional ByVal WaitForResults As Boolean = False) As String
        '    '
        '    executeAddonAsProcess_legacy1 = executeAddonAsProcess(AddonIDGuidOrName, Option_String, nothingObject, WaitForResults)
        '    '
        'End Function
        '
        '=============================================================================================================
        '   main_Get Addon Content - internal (to support include add-ons)
        ' REFACTOR - unify interface, remove main_ and csv_ class references
        '=============================================================================================================
        '
        Public Function executeAddon_legacy2(ByVal addonId As Integer, ByVal AddonNameOrGuid As String, ByVal Option_String As String, ByVal Context As addonContextEnum, ByVal HostContentName As String, ByVal HostRecordID As Integer, ByVal HostFieldName As String, ByVal ACInstanceID As String, ByVal IsIncludeAddon As Boolean, ByVal DefaultWrapperID As Integer, ByVal ignore_TemplateCaseOnly_PageContent As String, ByRef return_StatusOK As Boolean, ByVal nothingObject As Object, Optional ByVal AddonInUseIdList As String = "") As String
            executeAddon_legacy2 = executeAddon(addonId, AddonNameOrGuid, Option_String, Context, HostContentName, HostRecordID, HostFieldName, ACInstanceID, IsIncludeAddon, DefaultWrapperID, ignore_TemplateCaseOnly_PageContent, return_StatusOK, nothingObject, AddonInUseIdList, Nothing, main_page_IncludedAddonIDList, user.id, user.isAuthenticated)
        End Function
        '
        '===============================================================================================================================================
        '   main_Get the editable options bubble
        '       ACInstanceID required
        '       ACInstanceID = -1 means this Add-on does not support instance options (like end-of-page scope, etc)
        ' REFACTOR - unify interface, remove main_ and csv_ class references
        '===============================================================================================================================================
        '
        Public Function executeAddon_getInstanceBubble(ByVal AddonName As String, ByVal Option_String As String, ByVal ContentName As String, ByVal RecordID As Integer, ByVal FieldName As String, ByVal ACInstanceID As String, ByVal Context As addonContextEnum, ByRef return_DialogList As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("executeAddon_GetInstanceBubble")
            '
            Dim Dialog As String
            Dim OptionDefault As String
            Dim OptionSuffix As String
            Dim OptionCnt As Integer
            Dim OptionValue_AddonEncoded As String
            Dim OptionValue As String
            Dim OptionCaption As String
            Dim LCaseOptionDefault As String
            Dim OptionValues() As String
            Dim FormInput As String
            Dim OptionPtr As Integer
            Dim QueryString As String
            Dim LocalCode As String
            Dim CopyHeader As String
            Dim CopyContent As String
            Dim BubbleJS As String
            Dim OptionSplit() As String
            Dim OptionName As String
            Dim OptionSelector As String
            Dim Ptr As Integer
            Dim Pos As Integer
            '
            If user.isAuthenticated() And ((ACInstanceID = "-2") Or (ACInstanceID = "-1") Or (ACInstanceID = "0") Or (RecordID <> 0)) Then
                If user.isEditingAnything() Then
                    CopyHeader = CopyHeader _
                        & "<div class=""ccHeaderCon"">" _
                        & "<table border=0 cellpadding=0 cellspacing=0 width=""100%"">" _
                        & "<tr>" _
                        & "<td align=left class=""bbLeft"">Options for this instance of " & AddonName & "</td>" _
                        & "<td align=right class=""bbRight""><a href=""#"" onClick=""HelpBubbleOff('HelpBubble" & pageManager_HelpCodeCount & "');return false;""><img alt=""close"" src=""/ccLib/images/ClosexRev1313.gif"" width=13 height=13 border=0></a></td>" _
                        & "</tr>" _
                        & "</table>" _
                        & "</div>"
                    If (Option_String = "") Then
                        '
                        ' no option string - no settings to display
                        '
                        CopyContent = "This Add-on has no instance options."
                        CopyContent = "<div style=""width:400px;background-color:transparent"" class=""ccAdminSmall"">" & CopyContent & "</div>"
                    ElseIf (ACInstanceID = "0") Or (ACInstanceID = "-1") Then
                        '
                        ' This addon does not support bubble option setting
                        '
                        CopyContent = "This addon does not support instance options."
                        CopyContent = "<div style=""width:400px;background-color:transparent;"" class=""ccAdminSmall"">" & CopyContent & "</div>"
                    ElseIf (Context <> addonContextEnum.ContextAdmin) And (siteProperties.allowWorkflowAuthoring And Not visitProperty.getBoolean("AllowWorkflowRendering")) Then
                        '
                        ' workflow with no rendering (or within admin site)
                        '
                        CopyContent = "With Workflow editing enabled, you can not edit Add-on settings for live records. To make changes to the editable version of this page, turn on Render Workflow Authoring Changes and Advanced Edit together."
                        CopyContent = "<div style=""width:400px;background-color:transparent;"" class=""ccAdminSmall"">" & CopyContent & "</div>"
                    ElseIf ACInstanceID = "" Then
                        '
                        ' No instance ID - must be edited and saved
                        '
                        CopyContent = "You can not edit instance options for Add-ons on this page until the page is upgraded. To upgrade, edit and save the page."
                        CopyContent = "<div style=""width:400px;background-color:transparent;"" class=""ccAdminSmall"">" & CopyContent & "</div>"
                    Else
                        '
                        ' ACInstanceID is -2 (Admin Root), or Rnd (from an instance on a page) Editable Form
                        '
                        CopyContent = CopyContent _
                            & "<table border=0 cellpadding=5 cellspacing=0 width=""100%"">" _
                            & ""
                        OptionSplit = Split(Option_String, vbCrLf)
                        For Ptr = 0 To UBound(OptionSplit)
                            '
                            ' Process each option row
                            '
                            OptionName = OptionSplit(Ptr)
                            OptionSuffix = ""
                            OptionDefault = ""
                            LCaseOptionDefault = ""
                            OptionSelector = ""
                            Pos = vbInstr(1, OptionName, "=")
                            If Pos <> 0 Then
                                If (Pos < Len(OptionName)) Then
                                    OptionSelector = Trim(Mid(OptionName, Pos + 1))
                                End If
                                OptionName = Trim(Left(OptionName, Pos - 1))
                            End If
                            OptionName = decodeNvaArgument(OptionName)
                            Pos = vbInstr(1, OptionSelector, "[")
                            If Pos <> 0 Then
                                '
                                ' List of Options, might be select, radio, checkbox, resourcelink
                                '
                                OptionDefault = Mid(OptionSelector, 1, Pos - 1)
                                OptionDefault = decodeNvaArgument(OptionDefault)
                                LCaseOptionDefault = vbLCase(OptionDefault)
                                'LCaseOptionDefault = decodeNvaArgument(LCaseOptionDefault)

                                OptionSelector = Mid(OptionSelector, Pos + 1)
                                Pos = vbInstr(1, OptionSelector, "]")
                                If Pos > 0 Then
                                    If Pos < Len(OptionSelector) Then
                                        OptionSuffix = vbLCase(Trim(Mid(OptionSelector, Pos + 1)))
                                    End If
                                    OptionSelector = Mid(OptionSelector, 1, Pos - 1)
                                End If
                                OptionValues = Split(OptionSelector, "|")
                                FormInput = ""
                                OptionCnt = UBound(OptionValues) + 1
                                For OptionPtr = 0 To OptionCnt - 1
                                    OptionValue_AddonEncoded = Trim(OptionValues(OptionPtr))
                                    If OptionValue_AddonEncoded <> "" Then
                                        Pos = vbInstr(1, OptionValue_AddonEncoded, ":")
                                        If Pos = 0 Then
                                            OptionValue = decodeNvaArgument(OptionValue_AddonEncoded)
                                            OptionCaption = OptionValue
                                        Else
                                            OptionCaption = decodeNvaArgument(Mid(OptionValue_AddonEncoded, 1, Pos - 1))
                                            OptionValue = decodeNvaArgument(Mid(OptionValue_AddonEncoded, Pos + 1))
                                        End If
                                        Select Case OptionSuffix
                                            Case "checkbox"
                                                '
                                                ' Create checkbox FormInput
                                                '
                                                If vbInstr(1, "," & LCaseOptionDefault & ",", "," & vbLCase(OptionValue) & ",") <> 0 Then
                                                    FormInput = FormInput & "<div style=""white-space:nowrap""><input type=""checkbox"" name=""" & OptionName & OptionPtr & """ value=""" & OptionValue & """ checked=""checked"">" & OptionCaption & "</div>"
                                                Else
                                                    FormInput = FormInput & "<div style=""white-space:nowrap""><input type=""checkbox"" name=""" & OptionName & OptionPtr & """ value=""" & OptionValue & """ >" & OptionCaption & "</div>"
                                                End If
                                            Case "radio"
                                                '
                                                ' Create Radio FormInput
                                                '
                                                If vbLCase(OptionValue) = LCaseOptionDefault Then
                                                    FormInput = FormInput & "<div style=""white-space:nowrap""><input type=""radio"" name=""" & OptionName & """ value=""" & OptionValue & """ checked=""checked"" >" & OptionCaption & "</div>"
                                                Else
                                                    FormInput = FormInput & "<div style=""white-space:nowrap""><input type=""radio"" name=""" & OptionName & """ value=""" & OptionValue & """ >" & OptionCaption & "</div>"
                                                End If
                                            Case Else
                                                '
                                                ' Create select FormInput
                                                '
                                                If vbLCase(OptionValue) = LCaseOptionDefault Then
                                                    FormInput = FormInput & "<option value=""" & OptionValue & """ selected>" & OptionCaption & "</option>"
                                                Else
                                                    OptionCaption = vbReplace(OptionCaption, vbCrLf, " ")
                                                    FormInput = FormInput & "<option value=""" & OptionValue & """>" & OptionCaption & "</option>"
                                                End If
                                        End Select
                                    End If
                                Next
                                Select Case OptionSuffix
                                    '                            Case FieldTypeLink
                                    '                                '
                                    '                                ' ----- Link (href value
                                    '                                '
                                    '                                Return_NewFieldList = Return_NewFieldList & "," & FieldName
                                    '                                FieldValueText = encodeText(FieldValueVariant)
                                    '                                EditorString = "" _
                                    '                                    & main_GetFormInputText2(FormFieldLCaseName, FieldValueText, 1, 80, FormFieldLCaseName) _
                                    '                                    & "&nbsp;<a href=""#"" onClick=""OpenResourceLinkWindow( '" & FormFieldLCaseName & "' ) ;return false;""><img src=""/ccLib/images/ResourceLink1616.gif"" width=16 height=16 border=0 alt=""Link to a resource"" title=""Link to a resource""></a>" _
                                    '                                    & "&nbsp;<a href=""#"" onClick=""OpenSiteExplorerWindow( '" & FormFieldLCaseName & "' ) ;return false;""><img src=""/ccLib/images/PageLink1616.gif"" width=16 height=16 border=0 alt=""Link to a page"" title=""Link to a page""></a>"
                                    '                                s.Add( "<td class=""ccAdminEditField""><nobr>" & SpanClassAdminNormal & EditorString & "</span></nobr></td>")
                                    '                            Case FieldTypeResourceLink
                                    '                                '
                                    '                                ' ----- Resource Link (src value)
                                    '                                '
                                    '                                Return_NewFieldList = Return_NewFieldList & "," & FieldName
                                    '                                FieldValueText = encodeText(FieldValueVariant)
                                    '                                EditorString = "" _
                                    '                                    & main_GetFormInputText2(FormFieldLCaseName, FieldValueText, 1, 80, FormFieldLCaseName) _
                                    '                                    & "&nbsp;<a href=""#"" onClick=""OpenResourceLinkWindow( '" & FormFieldLCaseName & "' ) ;return false;""><img src=""/ccLib/images/ResourceLink1616.gif"" width=16 height=16 border=0 alt=""Link to a resource"" title=""Link to a resource""></a>"
                                    '                                'EditorString = main_GetFormInputText2(FormFieldLCaseName, FieldValueText, 1, 80)
                                    '                                s.Add( "<td class=""ccAdminEditField""><nobr>" & SpanClassAdminNormal & EditorString & "</span></nobr></td>")
                                    Case "resourcelink"
                                        '
                                        ' Create text box linked to resource library
                                        '
                                        OptionDefault = decodeNvaArgument(OptionDefault)
                                        FormInput = "" _
                                            & html_GetFormInputText2(OptionName, OptionDefault, 1, 20) _
                                            & "&nbsp;<a href=""#"" onClick=""OpenResourceLinkWindow( '" & OptionName & "' ) ;return false;""><img src=""/ccLib/images/ResourceLink1616.gif"" width=16 height=16 border=0 alt=""Link to a resource"" title=""Link to a resource""></a>"
                                        'EditorString = main_GetFormInputText2(FormFieldLCaseName, FieldValueText, 1, 80)
                                    Case "checkbox"
                                        '
                                        '
                                        CopyContent = CopyContent & "<input type=""hidden"" name=""" & OptionName & "CheckBoxCnt"" value=""" & OptionCnt & """ >"
                                    Case "radio"
                                        '
                                        ' Create Radio FormInput
                                        '
                                    Case Else
                                        '
                                        ' Create select FormInput
                                        '
                                        FormInput = "<select name=""" & OptionName & """>" & FormInput & "</select>"
                                End Select
                            Else
                                '
                                ' Create Text FormInput
                                '

                                OptionSelector = decodeNvaArgument(OptionSelector)
                                FormInput = html_GetFormInputText2(OptionName, OptionSelector, 1, 20)
                            End If
                            CopyContent = CopyContent _
                                & "<tr>" _
                                & "<td class=""bbLeft"">" & OptionName & "</td>" _
                                & "<td class=""bbRight"">" & FormInput & "</td>" _
                                & "</tr>"
                        Next
                        CopyContent = "" _
                            & CopyContent _
                            & "</table>" _
                            & html_GetFormInputHidden("Type", FormTypeAddonSettingsEditor) _
                            & html_GetFormInputHidden("ContentName", ContentName) _
                            & html_GetFormInputHidden("RecordID", RecordID) _
                            & html_GetFormInputHidden("FieldName", FieldName) _
                            & html_GetFormInputHidden("ACInstanceID", ACInstanceID)
                    End If
                    '
                    BubbleJS = " onClick=""HelpBubbleOn( 'HelpBubble" & pageManager_HelpCodeCount & "',this);return false;"""
                    QueryString = web_RefreshQueryString
                    QueryString = ModifyQueryString(QueryString, RequestNameHardCodedPage, "", False)
                    'QueryString = ModifyQueryString(QueryString, RequestNameInterceptpage, "", False)
                    return_DialogList = return_DialogList _
                        & "<div class=""ccCon helpDialogCon"">" _
                        & html_GetUploadFormStart() _
                        & "<table border=0 cellpadding=0 cellspacing=0 class=""ccBubbleCon"" id=""HelpBubble" & pageManager_HelpCodeCount & """ style=""display:none;visibility:hidden;"">" _
                        & "<tr><td class=""ccHeaderCon"">" & CopyHeader & "</td></tr>" _
                        & "<tr><td class=""ccButtonCon"">" & html_GetFormButton("Update", "HelpBubbleButton") & "</td></tr>" _
                        & "<tr><td class=""ccContentCon"">" & CopyContent & "</td></tr>" _
                        & "</table>" _
                        & "</form>" _
                        & "</div>"
                    executeAddon_getInstanceBubble = "" _
                        & "&nbsp;<a href=""#"" tabindex=-1 target=""_blank""" & BubbleJS & ">" _
                        & GetIconSprite("", 0, "/ccLib/images/toolsettings.png", 22, 22, "Edit options used just for this instance of the " & AddonName & " Add-on", "Edit options used just for this instance of the " & AddonName & " Add-on", "", True, "") _
                        & "</a>" _
                        & "" _
                        & ""
                    If pageManager_HelpCodeCount >= pageManager_HelpCodeSize Then
                        pageManager_HelpCodeSize = pageManager_HelpCodeSize + 10
                        ReDim Preserve pageManager_HelpCodes(pageManager_HelpCodeSize)
                        ReDim Preserve pageManager_HelpCaptions(pageManager_HelpCodeSize)
                    End If
                    pageManager_HelpCodes(pageManager_HelpCodeCount) = LocalCode
                    pageManager_HelpCaptions(pageManager_HelpCodeCount) = AddonName
                    pageManager_HelpCodeCount = pageManager_HelpCodeCount + 1
                    '
                    If pageManager_HelpDialogCnt = 0 Then
                        Call main_AddOnLoadJavascript2("jQuery(function(){jQuery('.helpDialogCon').draggable()})", "draggable dialogs")
                    End If
                    pageManager_HelpDialogCnt = pageManager_HelpDialogCnt + 1
                End If
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("executeAddon_GetInstanceBubble")
        End Function
        '
        '===============================================================================================================================================
        '   main_Get Addon Styles Bubble Editor
        '===============================================================================================================================================
        '
        Public Function executeAddon_getAddonStylesBubble(ByVal addonId As Integer, ByRef return_DialogList As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("executeAddon_GetAddonStylesBubble")
            '
            Dim DefaultStylesheet As String
            Dim StyleSheet As String
            Dim OptionDefault As String
            Dim OptionSuffix As String
            Dim OptionCnt As Integer
            Dim OptionValue_AddonEncoded As String
            Dim OptionValue As String
            Dim OptionCaption As String
            Dim LCaseOptionDefault As String
            Dim OptionValues() As String
            Dim FormInput As String
            Dim OptionPtr As Integer
            Dim QueryString As String
            Dim LocalCode As String
            Dim CopyHeader As String
            Dim CopyContent As String
            Dim BubbleJS As String
            Dim OptionSplit() As String
            Dim OptionName As String
            Dim OptionSelector As String
            Dim Ptr As Integer
            Dim Pos As Integer
            Dim CS As Integer
            Dim AddonName As String
            '
            If user.isAuthenticated() And True Then
                If user.isEditingAnything() Then
                    CS = db_csOpen("Add-ons", addonId)
                    If db.cs_Ok(CS) Then
                        AddonName = db.cs_getText(CS, "name")
                        StyleSheet = db.db_GetCS(CS, "CustomStylesFilename")
                        DefaultStylesheet = db.db_GetCS(CS, "StylesFilename")
                    End If
                    Call db.cs_Close(CS)
                    '
                    CopyHeader = CopyHeader _
                        & "<div class=""ccHeaderCon"">" _
                        & "<table border=0 cellpadding=0 cellspacing=0 width=""100%"">" _
                        & "<tr>" _
                        & "<td align=left class=""bbLeft"">Stylesheet for " & AddonName & "</td>" _
                        & "<td align=right class=""bbRight""><a href=""#"" onClick=""HelpBubbleOff('HelpBubble" & pageManager_HelpCodeCount & "');return false;""><img alt=""close"" src=""/ccLib/images/ClosexRev1313.gif"" width=13 height=13 border=0></a></td>" _
                        & "</tr>" _
                        & "</table>" _
                        & "</div>"
                    CopyContent = "" _
                        & "" _
                        & "<table border=0 cellpadding=5 cellspacing=0 width=""100%"">" _
                        & "<tr><td style=""width:400px;background-color:transparent;"" class=""ccContentCon ccAdminSmall"">These stylesheets will be added to all pages that include this add-on. The default stylesheet comes with the add-on, and can not be edited.</td></tr>" _
                        & "<tr><td style=""padding-bottom:5px;"" class=""ccContentCon ccAdminSmall""><b>Custom Stylesheet</b>" & html_GetFormInputTextExpandable2("CustomStyles", StyleSheet, 10, "400px") & "</td></tr>"
                    'CopyContent = "" _
                    '    & main_GetUploadFormStart() _
                    '    & "<table border=0 cellpadding=5 cellspacing=0 width=""100%"">" _
                    '    & "<tr><td><div style=""width:400px;background-color:transparent;"" class=""ccContentCon ccAdminSmall"">These stylesheets will be added to all pages that include this add-on. The default stylesheet comes with the add-on, and can not be edited.</div></td></tr>" _
                    '    & "<tr><td><div style=""padding-bottom:5px;"" class=""ccContentCon ccAdminSmall""><b>Custom Stylesheet</b></div>" & main_GetFormInputTextExpandable2( "CustomStyles", StyleSheet, 10, "400px") & "</td></tr>"
                    If DefaultStylesheet = "" Then
                        CopyContent = CopyContent & "<tr><td style=""padding-bottom:5px;"" class=""ccContentCon ccAdminSmall""><b>Default Stylesheet</b><br>There are no default styles for this add-on.</td></tr>"
                    Else
                        CopyContent = CopyContent & "<tr><td style=""padding-bottom:5px;"" class=""ccContentCon ccAdminSmall""><b>Default Stylesheet</b><br>" & html_GetFormInputTextExpandable2("DefaultStyles", DefaultStylesheet, 10, "400px", , , True) & "</td></tr>"
                    End If
                    CopyContent = "" _
                        & CopyContent _
                        & "</tr>" _
                        & "</table>" _
                        & html_GetFormInputHidden("Type", FormTypeAddonStyleEditor) _
                        & html_GetFormInputHidden("AddonID", addonId) _
                        & ""
                    '
                    BubbleJS = " onClick=""HelpBubbleOn( 'HelpBubble" & pageManager_HelpCodeCount & "',this);return false;"""
                    QueryString = web_RefreshQueryString
                    QueryString = ModifyQueryString(QueryString, RequestNameHardCodedPage, "", False)
                    'QueryString = ModifyQueryString(QueryString, RequestNameInterceptpage, "", False)
                    Dim Dialog As String

                    Dialog = Dialog _
                        & "<div class=""ccCon helpDialogCon"">" _
                        & html_GetUploadFormStart() _
                        & "<table border=0 cellpadding=0 cellspacing=0 class=""ccBubbleCon"" id=""HelpBubble" & pageManager_HelpCodeCount & """ style=""display:none;visibility:hidden;"">" _
                        & "<tr><td class=""ccHeaderCon"">" & CopyHeader & "</td></tr>" _
                        & "<tr><td class=""ccButtonCon"">" & html_GetFormButton("Update", "HelpBubbleButton") & "</td></tr>" _
                        & "<tr><td class=""ccContentCon"">" & CopyContent & "</td></tr>" _
                        & "</table>" _
                        & "</form>" _
                        & "</div>"
                    return_DialogList = return_DialogList & Dialog
                    executeAddon_getAddonStylesBubble = "" _
                        & "&nbsp;<a href=""#"" tabindex=-1 target=""_blank""" & BubbleJS & ">" _
                        & GetIconSprite("", 0, "/ccLib/images/toolstyles.png", 22, 22, "Edit " & AddonName & " Stylesheets", "Edit " & AddonName & " Stylesheets", "", True, "") _
                        & "</a>"
                    If pageManager_HelpCodeCount >= pageManager_HelpCodeSize Then
                        pageManager_HelpCodeSize = pageManager_HelpCodeSize + 10
                        ReDim Preserve pageManager_HelpCodes(pageManager_HelpCodeSize)
                        ReDim Preserve pageManager_HelpCaptions(pageManager_HelpCodeSize)
                    End If
                    pageManager_HelpCodes(pageManager_HelpCodeCount) = LocalCode
                    pageManager_HelpCaptions(pageManager_HelpCodeCount) = AddonName
                    pageManager_HelpCodeCount = pageManager_HelpCodeCount + 1
                End If
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("executeAddon_GetAddonStylesBubble")
        End Function
        '
        '===============================================================================================================================================
        '   main_Get inner HTML viewer Bubble
        '===============================================================================================================================================
        '

        Public Function executeAddon_getHelpBubble(ByVal addonId As Integer, ByVal helpCopy As String, ByVal CollectionID As Integer, ByRef return_DialogList As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("executeAddon_GetHelpBubble")
            '
            Dim DefaultStylesheet As String
            Dim StyleSheet As String
            Dim OptionDefault As String
            Dim OptionSuffix As String
            Dim OptionCnt As Integer
            Dim OptionValue_AddonEncoded As String
            Dim OptionValue As String
            Dim OptionCaption As String
            Dim LCaseOptionDefault As String
            Dim OptionValues() As String
            Dim FormInput As String
            Dim OptionPtr As Integer
            Dim QueryString As String
            Dim LocalCode As String
            Dim CopyHeader As String
            Dim CopyContent As String
            Dim BubbleJS As String
            Dim OptionSplit() As String
            Dim OptionName As String
            Dim OptionSelector As String
            Dim Ptr As Integer
            Dim Pos As Integer
            Dim CS As Integer
            Dim AddonName As String
            Dim StyleSN As Integer
            Dim InnerCopy As String
            Dim CollectionCopy As String
            '
            If user.isAuthenticated() Then
                If user.isEditingAnything() Then
                    StyleSN = EncodeInteger(siteProperties.getText("StylesheetSerialNumber", "0"))
                    pageManager_HelpViewerButtonID = "HelpBubble" & pageManager_HelpCodeCount
                    InnerCopy = helpCopy
                    If InnerCopy = "" Then
                        InnerCopy = "<p style=""text-align:center"">No help is available for this add-on.</p>"
                    End If
                    '
                    If CollectionID <> 0 Then
                        CollectionCopy = main_GetRecordName("Add-on Collections", CollectionID)
                        If CollectionCopy <> "" Then
                            CollectionCopy = "This add-on is a member of the " & CollectionCopy & " collection."
                        Else
                            CollectionID = 0
                        End If
                    End If
                    If CollectionID = 0 Then
                        CollectionCopy = "This add-on is not a member of any collection."
                    End If
                    CopyHeader = CopyHeader _
                        & "<div class=""ccHeaderCon"">" _
                        & "<table border=0 cellpadding=0 cellspacing=0 width=""100%"">" _
                        & "<tr>" _
                        & "<td align=left class=""bbLeft"">Help Viewer</td>" _
                        & "<td align=right class=""bbRight""><a href=""#"" onClick=""HelpBubbleOff('HelpBubble" & pageManager_HelpCodeCount & "');return false;""><img alt=""close"" src=""/ccLib/images/ClosexRev1313.gif"" width=13 height=13 border=0></a></td>" _
                        & "</tr>" _
                        & "</table>" _
                        & "</div>"
                    CopyContent = "" _
                        & "<table border=0 cellpadding=5 cellspacing=0 width=""100%"">" _
                        & "<tr><td style=""width:400px;background-color:transparent;"" class=""ccAdminSmall""><p>" & CollectionCopy & "</p></td></tr>" _
                        & "<tr><td style=""width:400px;background-color:transparent;border:1px solid #fff;padding:10px;margin:5px;"">" & InnerCopy & "</td></tr>" _
                        & "</tr>" _
                        & "</table>" _
                        & ""
                    '
                    QueryString = web_RefreshQueryString
                    QueryString = ModifyQueryString(QueryString, RequestNameHardCodedPage, "", False)
                    'QueryString = ModifyQueryString(QueryString, RequestNameInterceptpage, "", False)
                    return_DialogList = return_DialogList _
                        & "<div class=""ccCon helpDialogCon"">" _
                        & "<table border=0 cellpadding=0 cellspacing=0 class=""ccBubbleCon"" id=""HelpBubble" & pageManager_HelpCodeCount & """ style=""display:none;visibility:hidden;"">" _
                        & "<tr><td class=""ccHeaderCon"">" & CopyHeader & "</td></tr>" _
                        & "<tr><td class=""ccContentCon"">" & CopyContent & "</td></tr>" _
                        & "</table>" _
                        & "</div>"
                    BubbleJS = " onClick=""HelpBubbleOn( 'HelpBubble" & pageManager_HelpCodeCount & "',this);return false;"""
                    If pageManager_HelpCodeCount >= pageManager_HelpCodeSize Then
                        pageManager_HelpCodeSize = pageManager_HelpCodeSize + 10
                        ReDim Preserve pageManager_HelpCodes(pageManager_HelpCodeSize)
                        ReDim Preserve pageManager_HelpCaptions(pageManager_HelpCodeSize)
                    End If
                    pageManager_HelpCodes(pageManager_HelpCodeCount) = LocalCode
                    pageManager_HelpCaptions(pageManager_HelpCodeCount) = AddonName
                    pageManager_HelpCodeCount = pageManager_HelpCodeCount + 1
                    '
                    If pageManager_HelpDialogCnt = 0 Then
                        Call main_AddOnLoadJavascript2("jQuery(function(){jQuery('.helpDialogCon').draggable()})", "draggable dialogs")
                    End If
                    pageManager_HelpDialogCnt = pageManager_HelpDialogCnt + 1
                    'SiteStylesBubbleCache = "x"
                    'End If
                    executeAddon_getHelpBubble = "" _
                        & "&nbsp;<a href=""#"" tabindex=-1 tarGet=""_blank""" & BubbleJS & " >" _
                        & GetIconSprite("", 0, "/ccLib/images/toolhelp.png", 22, 22, "View help resources for this Add-on", "View help resources for this Add-on", "", True, "") _
                        & "</a>"
                End If
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("executeAddon_GetHelpBubble")
        End Function
        '
        '===============================================================================================================================================
        '   main_Get inner HTML viewer Bubble
        '===============================================================================================================================================
        '
        Public Function executeAddon_getHTMLViewerBubble(ByVal addonId As Integer, ByVal HTMLSourceID As String, ByRef return_DialogList As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("executeAddon_GetHTMLViewerBubble")
            '
            Dim DefaultStylesheet As String
            Dim StyleSheet As String
            Dim OptionDefault As String
            Dim OptionSuffix As String
            Dim OptionCnt As Integer
            Dim OptionValue_AddonEncoded As String
            Dim OptionValue As String
            Dim OptionCaption As String
            Dim LCaseOptionDefault As String
            Dim OptionValues() As String
            Dim FormInput As String
            Dim OptionPtr As Integer
            Dim QueryString As String
            Dim LocalCode As String
            Dim CopyHeader As String
            Dim CopyContent As String
            Dim BubbleJS As String
            Dim OptionSplit() As String
            Dim OptionName As String
            Dim OptionSelector As String
            Dim Ptr As Integer
            Dim Pos As Integer
            Dim CS As Integer
            Dim AddonName As String
            Dim StyleSN As Integer
            Dim HTMLViewerBubbleID As String
            '
            If user.isAuthenticated() Then
                If user.isEditingAnything() Then
                    StyleSN = EncodeInteger(siteProperties.getText("StylesheetSerialNumber", "0"))
                    HTMLViewerBubbleID = "HelpBubble" & pageManager_HelpCodeCount
                    '
                    CopyHeader = CopyHeader _
                        & "<div class=""ccHeaderCon"">" _
                        & "<table border=0 cellpadding=0 cellspacing=0 width=""100%"">" _
                        & "<tr>" _
                        & "<td align=left class=""bbLeft"">HTML viewer</td>" _
                        & "<td align=right class=""bbRight""><a href=""#"" onClick=""HelpBubbleOff('" & HTMLViewerBubbleID & "');return false;""><img alt=""close"" src=""/ccLib/images/ClosexRev1313.gif"" width=13 height=13 border=0></A></td>" _
                        & "</tr>" _
                        & "</table>" _
                        & "</div>"
                    CopyContent = "" _
                        & "<table border=0 cellpadding=5 cellspacing=0 width=""100%"">" _
                        & "<tr><td style=""width:400px;background-color:transparent;"" class=""ccAdminSmall"">This is the HTML produced by this add-on. Carrage returns and tabs have been added or modified to enhance readability.</td></tr>" _
                        & "<tr><td style=""width:400px;background-color:transparent;"" class=""ccAdminSmall"">" & html_GetFormInputTextExpandable2("DefaultStyles", "", 10, "400px", HTMLViewerBubbleID & "_dst", , False) & "</td></tr>" _
                        & "</tr>" _
                        & "</table>" _
                        & ""
                    '
                    QueryString = web_RefreshQueryString
                    QueryString = ModifyQueryString(QueryString, RequestNameHardCodedPage, "", False)
                    'QueryString = ModifyQueryString(QueryString, RequestNameInterceptpage, "", False)
                    return_DialogList = return_DialogList _
                        & "<div class=""ccCon helpDialogCon"">" _
                        & "<table border=0 cellpadding=0 cellspacing=0 class=""ccBubbleCon"" id=""" & HTMLViewerBubbleID & """ style=""display:none;visibility:hidden;"">" _
                        & "<tr><td class=""ccHeaderCon"">" & CopyHeader & "</td></tr>" _
                        & "<tr><td class=""ccContentCon"">" & CopyContent & "</td></tr>" _
                        & "</table>" _
                        & "</div>"
                    BubbleJS = " onClick=""var d=document.getElementById('" & HTMLViewerBubbleID & "_dst');if(d){var s=document.getElementById('" & HTMLSourceID & "');if(s){d.value=s.innerHTML;HelpBubbleOn( '" & HTMLViewerBubbleID & "',this)}};return false;"" "
                    If pageManager_HelpCodeCount >= pageManager_HelpCodeSize Then
                        pageManager_HelpCodeSize = pageManager_HelpCodeSize + 10
                        ReDim Preserve pageManager_HelpCodes(pageManager_HelpCodeSize)
                        ReDim Preserve pageManager_HelpCaptions(pageManager_HelpCodeSize)
                    End If
                    pageManager_HelpCodes(pageManager_HelpCodeCount) = LocalCode
                    pageManager_HelpCaptions(pageManager_HelpCodeCount) = AddonName
                    pageManager_HelpCodeCount = pageManager_HelpCodeCount + 1
                    'SiteStylesBubbleCache = "x"
                    '
                    If pageManager_HelpDialogCnt = 0 Then
                        Call main_AddOnLoadJavascript2("jQuery(function(){jQuery('.helpDialogCon').draggable()})", "draggable dialogs")
                    End If
                    pageManager_HelpDialogCnt = pageManager_HelpDialogCnt + 1
                    executeAddon_getHTMLViewerBubble = "" _
                        & "&nbsp;<a href=""#"" tabindex=-1 target=""_blank""" & BubbleJS & " >" _
                        & GetIconSprite("", 0, "/ccLib/images/toolhtml.png", 22, 22, "View the source HTML produced by this Add-on", "View the source HTML produced by this Add-on", "", True, "") _
                        & "</A>"
                End If
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError18("executeAddon_GetHTMLViewerBubble")
        End Function
        '
        '
        '
        Private Function executeAddon_getFormContent(ByVal FormXML As String, ByRef return_ExitRequest As Boolean) As String
            ''Dim th as integer : th = profileLogMethodEnter("executeAddon_GetFormContent")
            '
            Const LoginMode_None = 1
            Const LoginMode_AutoRecognize = 2
            Const LoginMode_AutoLogin = 3
            '
            Dim PageSize As Integer
            Dim FieldCount As Integer
            Dim RowMax As Integer
            Dim ColumnMax As Integer
            'Dim RecordField As Field
            Dim SQLPageSize As Integer
            'dim dt as datatable
            Dim ErrorNumber As Integer
            Dim ErrorDescription As String
            Dim dataArray As String(,)
            Dim RecordID As Integer
            'Dim XMLTools As New xmlToolsclass(me)
            Dim fieldfilename As String
            'Dim fs As New fileSystemClass
            Dim FieldDataSource As String
            Dim FieldSQL As String
            Dim LoginMode As Integer
            Dim Help As String
            Dim Content As New coreFastStringClass
            Dim Copy As String
            Dim Button As String
            Dim PageNotFoundPageID As String
            Dim Adminui As New coreAdminUIClass(Me)
            Dim ButtonList As String
            Dim AllowLinkAlias As Boolean
            'Dim AllowExternalLinksInChildList As Boolean
            Dim LinkForwardAutoInsert As Boolean
            Dim SectionLandingLink As String
            'Dim app.siteProperty_ServerPageDefault As String
            Dim LandingPageID As String
            Dim AllowAutoRecognize As Boolean
            Dim AllowMobileTemplates As Boolean
            '
            '
            '
            Dim Filename As String
            Dim NonEncodedLink As String
            Dim EncodedLink As String
            Dim VirtualFilePath As String
            Dim Option_String As String
            Dim TabName As String
            Dim TabDescription As String
            Dim TabHeading As String
            Dim TabCnt As Integer
            Dim TabCell As coreFastStringClass
            Dim FieldValue As String
            Dim FieldDescription As String
            Dim FieldDefaultValue As String
            Dim IsFound As Boolean
            Dim Name As String
            Dim Description As String
            Dim LoopPtr As Integer
            Dim XMLFile As String
            Dim Doc As New XmlDocument
            Dim TabNode As XmlNode
            Dim SettingNode As XmlNode
            Dim CS As Integer
            Dim FieldName As String
            Dim FieldCaption As String
            Dim FieldAddon As String
            Dim FieldReadOnly As Boolean
            Dim FieldHTML As Boolean
            Dim fieldType As String
            Dim FieldSelector As String
            Dim DefaultFilename As String
            '
            Button = docProperties.getText(RequestNameButton)
            If Button = ButtonCancel Then
                '
                ' Cancel just exits with no content
                '
                return_ExitRequest = True
                Exit Function
            ElseIf Not user.isAuthenticatedAdmin() Then
                '
                ' Not Admin Error
                '
                ButtonList = ButtonCancel
                Content.Add(Adminui.GetFormBodyAdminOnly())
            Else
                If True Then
                    Dim loadOK As Boolean
                    loadOK = True
                    Try

                        Doc.LoadXml(FormXML)
                    Catch ex As Exception
                        ' error
                        '
                        ButtonList = ButtonCancel
                        Content.Add("<div class=""ccError"" style=""margin:10px;padding:10px;background-color:white;"">There was a problem with the Setting Page you requested.</div>")
                        loadOK = False
                    End Try
                    '        CS = main_OpenCSContentRecord("Setting Pages", SettingPageID)
                    '        If Not app.csv_IsCSOK(CS) Then
                    '            '
                    '            ' Setting Page was not found
                    '            '
                    '            ButtonList = ButtonCancel
                    '            Content.Add( "<div class=""ccError"" style=""margin:10px;padding:10px;background-color:white;"">The Setting Page you requested could not be found.</div>"
                    '        Else
                    '            XMLFile = app.db_GetCS(CS, "xmlfile")
                    '            Doc = New XmlDocument
                    'Doc.loadXML (XMLFile)
                    If loadOK Then
                    Else
                        '
                        ' data is OK
                        '
                        If vbLCase(Doc.DocumentElement.Name) <> "form" Then
                            '
                            ' error - Need a way to reach the user that submitted the file
                            '
                            ButtonList = ButtonCancel
                            Content.Add("<div class=""ccError"" style=""margin:10px;padding:10px;background-color:white;"">There was a problem with the Setting Page you requested.</div>")
                        Else
                            '
                            ' ----- Process Requests
                            '
                            If (Button = ButtonSave) Or (Button = ButtonOK) Then
                                With Doc.DocumentElement
                                    For Each SettingNode In .ChildNodes
                                        Select Case vbLCase(SettingNode.Name)
                                            Case "tab"
                                                For Each TabNode In SettingNode.ChildNodes
                                                    Select Case vbLCase(TabNode.Name)
                                                        Case "siteproperty"
                                                            '
                                                            FieldName = main_GetXMLAttribute(IsFound, TabNode, "name", "")
                                                            FieldValue = docProperties.getText(FieldName)
                                                            fieldType = main_GetXMLAttribute(IsFound, TabNode, "type", "")
                                                            Select Case vbLCase(fieldType)
                                                                Case "integer"
                                                                    '
                                                                    If FieldValue <> "" Then
                                                                        FieldValue = EncodeInteger(FieldValue).ToString
                                                                    End If
                                                                    Call siteProperties.setProperty(FieldName, FieldValue)
                                                                Case "boolean"
                                                                    '
                                                                    If FieldValue <> "" Then
                                                                        FieldValue = EncodeBoolean(FieldValue).ToString
                                                                    End If
                                                                    Call siteProperties.setProperty(FieldName, FieldValue)
                                                                Case "float"
                                                                    '
                                                                    If FieldValue <> "" Then
                                                                        FieldValue = EncodeNumber(FieldValue).ToString
                                                                    End If
                                                                    Call siteProperties.setProperty(FieldName, FieldValue)
                                                                Case "date"
                                                                    '
                                                                    If FieldValue <> "" Then
                                                                        FieldValue = EncodeDate(FieldValue).ToString
                                                                    End If
                                                                    Call siteProperties.setProperty(FieldName, FieldValue)
                                                                Case "file", "imagefile"
                                                                    '
                                                                    If main_GetStreamBoolean2(FieldName & ".DeleteFlag") Then
                                                                        Call siteProperties.setProperty(FieldName, "")
                                                                    End If
                                                                    If FieldValue <> "" Then
                                                                        VirtualFilePath = "Settings/" & FieldName
                                                                        Call web_ProcessFormInputFile(FieldName, VirtualFilePath)
                                                                        FieldValue = VirtualFilePath & "/" & FieldValue
                                                                        Call siteProperties.setProperty(FieldName, FieldValue)
                                                                    End If
                                                                Case "textfile"
                                                                    '
                                                                    DefaultFilename = "Settings/" & FieldName & ".txt"
                                                                    Filename = siteProperties.getText(FieldName, DefaultFilename)
                                                                    If Filename = "" Then
                                                                        Filename = DefaultFilename
                                                                        Call siteProperties.setProperty(FieldName, DefaultFilename)
                                                                    End If
                                                                    Call appRootFiles.saveFile(Filename, FieldValue)
                                                                Case "cssfile"
                                                                    '
                                                                    DefaultFilename = "Settings/" & FieldName & ".css"
                                                                    Filename = siteProperties.getText(FieldName, DefaultFilename)
                                                                    If Filename = "" Then
                                                                        Filename = DefaultFilename
                                                                        Call siteProperties.setProperty(FieldName, DefaultFilename)
                                                                    End If
                                                                    Call appRootFiles.saveFile(Filename, FieldValue)
                                                                Case "xmlfile"
                                                                    '
                                                                    DefaultFilename = "Settings/" & FieldName & ".xml"
                                                                    Filename = siteProperties.getText(FieldName, DefaultFilename)
                                                                    If Filename = "" Then
                                                                        Filename = DefaultFilename
                                                                        Call siteProperties.setProperty(FieldName, DefaultFilename)
                                                                    End If
                                                                    Call appRootFiles.saveFile(Filename, FieldValue)
                                                                Case "currency"
                                                                    '
                                                                    If FieldValue <> "" Then
                                                                        FieldValue = EncodeNumber(FieldValue).ToString
                                                                        FieldValue = FormatCurrency(FieldValue)
                                                                    End If
                                                                    Call siteProperties.setProperty(FieldName, FieldValue)
                                                                Case "link"
                                                                    Call siteProperties.setProperty(FieldName, FieldValue)
                                                                Case Else
                                                                    Call siteProperties.setProperty(FieldName, FieldValue)
                                                            End Select
                                                        Case "copycontent"
                                                            '
                                                            ' A Copy Content block
                                                            '
                                                            FieldReadOnly = EncodeBoolean(main_GetXMLAttribute(IsFound, TabNode, "readonly", ""))
                                                            If Not FieldReadOnly Then
                                                                FieldName = main_GetXMLAttribute(IsFound, TabNode, "name", "")
                                                                FieldHTML = EncodeBoolean(main_GetXMLAttribute(IsFound, TabNode, "html", "false"))
                                                                If FieldHTML Then
                                                                    '
                                                                    ' treat html as active content for now.
                                                                    '
                                                                    FieldValue = doc_getActiveContent(FieldName)
                                                                Else
                                                                    FieldValue = docProperties.getText(FieldName)
                                                                End If

                                                                CS = db.csOpen("Copy Content", "name=" & db.encodeSQLText(FieldName), "ID")
                                                                If Not db.cs_Ok(CS) Then
                                                                    Call db.cs_Close(CS)
                                                                    CS = db.cs_insertRecord("Copy Content")
                                                                End If
                                                                If db.cs_Ok(CS) Then
                                                                    Call db.cs_set(CS, "name", FieldName)
                                                                    '
                                                                    ' Set copy
                                                                    '
                                                                    Call db.cs_set(CS, "copy", FieldValue)
                                                                    '
                                                                    ' delete duplicates
                                                                    '
                                                                    Call db.db_csGoNext(CS)
                                                                    Do While db.cs_Ok(CS)
                                                                        Call db_DeleteCSRecord(CS)
                                                                        Call db.db_csGoNext(CS)
                                                                    Loop
                                                                End If
                                                                Call db.cs_Close(CS)
                                                            End If

                                                        Case "filecontent"
                                                            '
                                                            ' A File Content block
                                                            '
                                                            FieldReadOnly = EncodeBoolean(main_GetXMLAttribute(IsFound, TabNode, "readonly", ""))
                                                            If Not FieldReadOnly Then
                                                                FieldName = main_GetXMLAttribute(IsFound, TabNode, "name", "")
                                                                fieldfilename = main_GetXMLAttribute(IsFound, TabNode, "filename", "")
                                                                FieldValue = docProperties.getText(FieldName)
                                                                Call appRootFiles.saveFile(fieldfilename, FieldValue)
                                                            End If
                                                        Case "dbquery"
                                                            '
                                                            ' dbquery has no results to process
                                                            '
                                                    End Select
                                                Next
                                            Case Else
                                        End Select
                                    Next
                                End With
                            End If
                            If (Button = ButtonOK) Then
                                '
                                ' Exit on OK or cancel
                                '
                                return_ExitRequest = True
                                Exit Function
                            End If
                            '
                            ' ----- Display Form
                            '
                            Content.Add(Adminui.EditTableOpen)
                            Name = main_GetXMLAttribute(IsFound, Doc.DocumentElement, "name", "")
                            With Doc.DocumentElement
                                For Each SettingNode In .ChildNodes
                                    Select Case vbLCase(SettingNode.Name)
                                        Case "description"
                                            Description = SettingNode.InnerText
                                        Case "tab"
                                            TabCnt = TabCnt + 1
                                            TabName = main_GetXMLAttribute(IsFound, SettingNode, "name", "")
                                            TabDescription = main_GetXMLAttribute(IsFound, SettingNode, "description", "")
                                            TabHeading = main_GetXMLAttribute(IsFound, SettingNode, "heading", "")
                                            TabCell = New coreFastStringClass
                                            For Each TabNode In SettingNode.ChildNodes
                                                Select Case vbLCase(TabNode.Name)
                                                    Case "heading"
                                                        '
                                                        ' Heading
                                                        '
                                                        FieldCaption = main_GetXMLAttribute(IsFound, TabNode, "caption", "")
                                                        Call TabCell.Add(Adminui.GetEditSubheadRow(FieldCaption))
                                                    Case "siteproperty"
                                                        '
                                                        ' Site property
                                                        '
                                                        FieldName = main_GetXMLAttribute(IsFound, TabNode, "name", "")
                                                        If FieldName <> "" Then
                                                            FieldCaption = main_GetXMLAttribute(IsFound, TabNode, "caption", "")
                                                            If FieldCaption = "" Then
                                                                FieldCaption = FieldName
                                                            End If
                                                            FieldReadOnly = EncodeBoolean(main_GetXMLAttribute(IsFound, TabNode, "readonly", ""))
                                                            FieldHTML = EncodeBoolean(main_GetXMLAttribute(IsFound, TabNode, "html", ""))
                                                            fieldType = main_GetXMLAttribute(IsFound, TabNode, "type", "")
                                                            FieldSelector = main_GetXMLAttribute(IsFound, TabNode, "selector", "")
                                                            FieldDescription = main_GetXMLAttribute(IsFound, TabNode, "description", "")
                                                            FieldAddon = main_GetXMLAttribute(IsFound, TabNode, "EditorAddon", "")
                                                            FieldDefaultValue = TabNode.InnerText
                                                            FieldValue = siteProperties.getText(FieldName, FieldDefaultValue)
                                                            '                                                    If FieldReadOnly Then
                                                            '                                                        '
                                                            '                                                        ' Read only = no editor
                                                            '                                                        '
                                                            '                                                        Copy = FieldValue & main_GetFormInputHidden( FieldName, FieldValue)
                                                            '
                                                            '                                                    ElseIf FieldAddon <> "" Then
                                                            If FieldAddon <> "" Then
                                                                '
                                                                ' Use Editor Addon
                                                                '
                                                                Option_String = "FieldName=" & FieldName & "&FieldValue=" & encodeNvaArgument(siteProperties.getText(FieldName, FieldDefaultValue))
                                                                Copy = executeAddon_legacy5(0, FieldAddon, Option_String, addonContextEnum.ContextAdmin, "", 0, "", 0)
                                                            ElseIf FieldSelector <> "" Then
                                                                '
                                                                ' Use Selector
                                                                '
                                                                Copy = executeAddon_getFormContent_decodeSelector(FieldName, FieldValue, FieldSelector)
                                                            Else
                                                                '
                                                                ' Use default editor for each field type
                                                                '
                                                                Select Case vbLCase(fieldType)
                                                                    Case "integer"
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            Copy = html_GetFormInputText2(FieldName, FieldValue)
                                                                        End If
                                                                    Case "boolean"
                                                                        If FieldReadOnly Then
                                                                            Copy = html_GetFormInputCheckBox2(FieldName, EncodeBoolean(FieldValue))
                                                                            Copy = vbReplace(Copy, ">", " disabled>")
                                                                            Copy = Copy & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            Copy = html_GetFormInputCheckBox2(FieldName, EncodeBoolean(FieldValue))
                                                                        End If
                                                                    Case "float"
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            Copy = html_GetFormInputText2(FieldName, FieldValue)
                                                                        End If
                                                                    Case "date"
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            Copy = html_GetFormInputDate(FieldName, FieldValue)
                                                                        End If
                                                                    Case "file", "imagefile"
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            If FieldValue = "" Then
                                                                                Copy = html_GetFormInputFile(FieldName)
                                                                            Else
                                                                                NonEncodedLink = webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, FieldValue)
                                                                                EncodedLink = EncodeURL(NonEncodedLink)
                                                                                Copy = "" _
                                                                                    & "<a href=""http://" & EncodedLink & """ target=""_blank"">[" & GetFilename(FieldValue) & "]</A>" _
                                                                                    & "&nbsp;&nbsp;&nbsp;Delete:&nbsp;" & html_GetFormInputCheckBox2(FieldName & ".DeleteFlag", False) _
                                                                                    & "&nbsp;&nbsp;&nbsp;Change:&nbsp;" & html_GetFormInputFile(FieldName)
                                                                            End If
                                                                        End If
                                                                        'Call s.Add("&nbsp;</span></nobr></td>")
                                                                    Case "currency"
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            If FieldValue <> "" Then
                                                                                FieldValue = FormatCurrency(FieldValue)
                                                                            End If
                                                                            Copy = html_GetFormInputText2(FieldName, FieldValue)
                                                                        End If
                                                                    Case "textfile"
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            FieldValue = cdnFiles.readFile(FieldValue)
                                                                            If FieldHTML Then
                                                                                Copy = html_GetFormInputHTML(FieldName, FieldValue)
                                                                            Else
                                                                                Copy = html_GetFormInputTextExpandable(FieldName, FieldValue, 5)
                                                                            End If
                                                                        End If
                                                                    Case "cssfile"
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            Copy = html_GetFormInputTextExpandable(FieldName, FieldValue, 5)
                                                                        End If
                                                                    Case "xmlfile"
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            Copy = html_GetFormInputTextExpandable(FieldName, FieldValue, 5)
                                                                        End If
                                                                    Case "link"
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            Copy = html_GetFormInputText2(FieldName, FieldValue)
                                                                        End If
                                                                    Case Else
                                                                        '
                                                                        ' text
                                                                        '
                                                                        If FieldReadOnly Then
                                                                            Copy = FieldValue & html_GetFormInputHidden(FieldName, FieldValue)
                                                                        Else
                                                                            If FieldHTML Then
                                                                                Copy = html_GetFormInputHTML(FieldName, FieldValue)
                                                                            Else
                                                                                Copy = html_GetFormInputText2(FieldName, FieldValue)
                                                                            End If
                                                                        End If
                                                                End Select
                                                            End If
                                                            Call TabCell.Add(Adminui.GetEditRow(Copy, FieldCaption, FieldDescription, False, False, ""))
                                                        End If
                                                    Case "copycontent"
                                                        '
                                                        ' Content Copy field
                                                        '
                                                        FieldName = main_GetXMLAttribute(IsFound, TabNode, "name", "")
                                                        If FieldName <> "" Then
                                                            FieldCaption = main_GetXMLAttribute(IsFound, TabNode, "caption", "")
                                                            If FieldCaption = "" Then
                                                                FieldCaption = FieldName
                                                            End If
                                                            FieldReadOnly = EncodeBoolean(main_GetXMLAttribute(IsFound, TabNode, "readonly", ""))
                                                            FieldDescription = main_GetXMLAttribute(IsFound, TabNode, "description", "")
                                                            FieldHTML = EncodeBoolean(main_GetXMLAttribute(IsFound, TabNode, "html", ""))
                                                            '
                                                            CS = db.csOpen("Copy Content", "Name=" & db_EncodeSQLText(FieldName), "ID", , , , , "Copy")
                                                            If Not db.cs_Ok(CS) Then
                                                                Call db.cs_Close(CS)
                                                                CS = db.cs_insertRecord("Copy Content")
                                                                If db.cs_Ok(CS) Then
                                                                    RecordID = db.cs_getInteger(CS, "ID")
                                                                    Call db.cs_set(CS, "name", FieldName)
                                                                    Call db.cs_set(CS, "copy", EncodeText(TabNode.InnerText))
                                                                    Call db.db_SaveCSRecord(CS)
                                                                    Call workflow.publishEdit("Copy Content", RecordID)
                                                                End If
                                                            End If
                                                            If db.cs_Ok(CS) Then
                                                                FieldValue = db.cs_getText(CS, "copy")
                                                            End If
                                                            If FieldReadOnly Then
                                                                '
                                                                ' Read only
                                                                '
                                                                Copy = FieldValue
                                                            ElseIf FieldHTML Then
                                                                '
                                                                ' HTML
                                                                '
                                                                Copy = html_GetFormInputHTML3(FieldName, FieldValue)
                                                                'Copy = main_GetFormInputActiveContent( FieldName, FieldValue)
                                                            Else
                                                                '
                                                                ' Text edit
                                                                '
                                                                Copy = html_GetFormInputTextExpandable(FieldName, FieldValue)
                                                            End If
                                                            Call TabCell.Add(Adminui.GetEditRow(Copy, FieldCaption, FieldDescription, False, False, ""))
                                                        End If
                                                    Case "filecontent"
                                                        '
                                                        ' Content from a flat file
                                                        '
                                                        FieldName = main_GetXMLAttribute(IsFound, TabNode, "name", "")
                                                        FieldCaption = main_GetXMLAttribute(IsFound, TabNode, "caption", "")
                                                        fieldfilename = main_GetXMLAttribute(IsFound, TabNode, "filename", "")
                                                        FieldReadOnly = EncodeBoolean(main_GetXMLAttribute(IsFound, TabNode, "readonly", ""))
                                                        FieldDescription = main_GetXMLAttribute(IsFound, TabNode, "description", "")
                                                        FieldDefaultValue = TabNode.InnerText
                                                        Copy = ""
                                                        If fieldfilename <> "" Then
                                                            If appRootFiles.fileExists(fieldfilename) Then
                                                                Copy = FieldDefaultValue
                                                            Else
                                                                Copy = cdnFiles.readFile(fieldfilename)
                                                            End If
                                                            If Not FieldReadOnly Then
                                                                Copy = html_GetFormInputTextExpandable(FieldName, Copy, 10)
                                                            End If
                                                        End If
                                                        Call TabCell.Add(Adminui.GetEditRow(Copy, FieldCaption, FieldDescription, False, False, ""))
                                                    Case "dbquery", "querydb", "query", "db"
                                                        '
                                                        ' Display the output of a query
                                                        '
                                                        Copy = ""
                                                        FieldDataSource = main_GetXMLAttribute(IsFound, TabNode, "DataSourceName", "")
                                                        FieldSQL = TabNode.InnerText
                                                        FieldCaption = main_GetXMLAttribute(IsFound, TabNode, "caption", "")
                                                        FieldDescription = main_GetXMLAttribute(IsFound, TabNode, "description", "")
                                                        SQLPageSize = EncodeInteger(main_GetXMLAttribute(IsFound, TabNode, "rowmax", ""))
                                                        If SQLPageSize = 0 Then
                                                            SQLPageSize = 100
                                                        End If
                                                        '
                                                        ' Run the SQL
                                                        '
                                                        Dim dt As DataTable

                                                        If FieldSQL <> "" Then
                                                            Try
                                                                dt = db.executeSql(FieldSQL, FieldDataSource, , SQLPageSize)
                                                            Catch ex As Exception
                                                                ErrorDescription = ex.ToString
                                                                loadOK = False
                                                            End Try
                                                        End If
                                                        If FieldSQL = "" Then
                                                            '
                                                            ' ----- Error
                                                            '
                                                            Copy = "No Result"
                                                        ElseIf ErrorNumber <> 0 Then
                                                            '
                                                            ' ----- Error
                                                            '
                                                            Copy = "Error: " & Err.Description
                                                        ElseIf (dt.Rows.Count <= 0) Then
                                                            '
                                                            ' ----- no result
                                                            '
                                                            Copy = "No Results"
                                                        Else
                                                            '
                                                            ' ----- print results
                                                            '
                                                            'PageSize = RS.PageSize
                                                            '
                                                            ' --- Create the Fields for the new table
                                                            '
                                                            '
                                                            'Dim dtOk As Boolean = True
                                                            dataArray = convertDataTabletoArray(dt)
                                                            '
                                                            RowMax = UBound(dataArray, 2)
                                                            ColumnMax = UBound(dataArray, 1)
                                                            If RowMax = 0 And ColumnMax = 0 Then
                                                                '
                                                                ' Single result, display with no table
                                                                '
                                                                Copy = html_GetFormInputText2("result", EncodeText(dataArray(0, 0)), , , , , True)
                                                            Else
                                                                '
                                                                ' Build headers
                                                                '
                                                                FieldCount = dt.Columns.Count
                                                                Copy = Copy & (cr & "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" style=""border-bottom:1px solid #444;border-right:1px solid #444;background-color:white;color:#444;"">")
                                                                Copy = Copy & (cr2 & "<tr>")
                                                                For Each dc As DataColumn In dt.Columns
                                                                    Copy = Copy & (cr2 & vbTab & "<td class=""ccadminsmall"" style=""border-top:1px solid #444;border-left:1px solid #444;color:black;padding:2px;padding-top:4px;padding-bottom:4px;"">" & dc.ColumnName & "</td>")
                                                                    'Copy = Copy & ("<td class=""ccHeaderCon ccAdminSmall"" style=""color:white"">" & RecordField.Name & "</td>")
                                                                Next
                                                                Copy = Copy & (cr2 & "</tr>")
                                                                '
                                                                ' Build output table
                                                                '
                                                                Dim RowStart As String
                                                                Dim RowEnd As String
                                                                Dim ColumnStart As String
                                                                Dim ColumnEnd As String
                                                                RowStart = cr2 & "<tr>"
                                                                RowEnd = cr2 & "</tr>"
                                                                ColumnStart = cr2 & vbTab & "<td class=""ccadminnormal"" style=""border-top:1px solid #444;border-left:1px solid #444;background-color:white;color:#444;padding:2px"">"
                                                                ColumnEnd = "</td>"
                                                                Dim RowPointer As Integer
                                                                For RowPointer = 0 To RowMax
                                                                    Copy = Copy & (RowStart)
                                                                    Dim ColumnPointer As Integer
                                                                    For ColumnPointer = 0 To ColumnMax
                                                                        Dim CellData As Object
                                                                        CellData = dataArray(ColumnPointer, RowPointer)
                                                                        If IsNull(CellData) Then
                                                                            Copy = Copy & (ColumnStart & "[null]" & ColumnEnd)
                                                                        ElseIf IsNothing(CellData) Then
                                                                            Copy = Copy & (ColumnStart & "[empty]" & ColumnEnd)
                                                                        ElseIf IsArray(CellData) Then
                                                                            Copy = Copy & ColumnStart & "[array]"
                                                                            'Dim Cnt As Integer
                                                                            'Cnt = UBound(CellData)
                                                                            'Dim Ptr As Integer
                                                                            'For Ptr = 0 To Cnt - 1
                                                                            '    Copy = Copy & ("<br>(" & Ptr & ")&nbsp;[" & CellData(Ptr) & "]")
                                                                            'Next
                                                                            'Copy = Copy & (ColumnEnd)
                                                                        ElseIf EncodeText(CellData) = "" Then
                                                                            Copy = Copy & (ColumnStart & "[empty]" & ColumnEnd)
                                                                        Else
                                                                            Copy = Copy & (ColumnStart & html_EncodeHTML(EncodeText(CellData)) & ColumnEnd)
                                                                        End If
                                                                    Next
                                                                    Copy = Copy & (RowEnd)
                                                                Next
                                                                Copy = Copy & (cr & "</table>")
                                                            End If
                                                        End If
                                                        Call TabCell.Add(Adminui.GetEditRow(Copy, FieldCaption, FieldDescription, False, False, ""))
                                                End Select
                                            Next
                                            Copy = Adminui.GetEditPanel(True, TabHeading, TabDescription, Adminui.EditTableOpen & TabCell.Text & Adminui.EditTableClose)
                                            If Copy <> "" Then
                                                Call main_AddLiveTabEntry(Replace(TabName, " ", "&nbsp;"), Copy, "ccAdminTab")
                                            End If
                                            'Content.Add( main_GetForm_Edit_AddTab(TabName, Copy, True))
                                            TabCell = Nothing
                                        Case Else
                                    End Select
                                Next
                            End With
                            '
                            ' Buttons
                            '
                            ButtonList = ButtonCancel & "," & ButtonSave & "," & ButtonOK
                            '
                            ' Close Tables
                            '
                            'Content.Add( main_GetFormInputHidden(RequestNameAdminSourceForm, AdminFormMobileBrowserControl))
                            '
                            '
                            '
                            If TabCnt > 0 Then
                                Content.Add(main_GetLiveTabs())
                            End If
                        End If
                    End If
                End If
            End If
            '
            executeAddon_getFormContent = Adminui.GetBody(Name, ButtonList, "", True, True, Description, "", 0, Content.Text)
            Content = Nothing
            '
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "executeAddon_GetFormContent", True, False)
        End Function
        '
        '========================================================================
        '   Display field in the admin/edit
        '========================================================================
        '
        Private Function executeAddon_getFormContent_decodeSelector(SitePropertyName As String, SitePropertyValue As String, selector As String) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("AdminClass.executeAddon_GetFormContent_decodeSelector")
            '
            Dim ExpandedSelector As String
            Dim ignore As String
            Dim OptionCaption As String
            Dim OptionValue As String
            Dim OptionValue_AddonEncoded As String
            Dim OptionPtr As Integer
            Dim OptionCnt As Integer
            Dim OptionValues() As String
            Dim OptionSuffix As String
            Dim LCaseOptionDefault As String
            Dim Pos As Integer
            Dim Checked As Boolean
            Dim ParentID As Integer
            Dim ParentCID As Integer
            Dim Criteria As String
            Dim RootCID As Integer
            Dim SQL As String
            Dim TableID As Integer
            Dim TableName As Integer
            Dim ChildCID As Integer
            Dim CIDList As String
            Dim TableName2 As String
            Dim RecordContentName As String
            Dim HasParentID As Boolean
            Dim CS As Integer
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim CSPointer As Integer
            Dim RecordID As Integer
            Dim FastString As coreFastStringClass
            Dim FieldValueInteger As Integer
            Dim FieldRequired As Boolean
            Dim FieldHelp As String
            Dim AuthoringStatusMessage As String
            Dim Delimiter As String
            Dim Copy As String
            Dim Adminui As New coreAdminUIClass(Me)
            '
            Dim FieldName As String
            '
            FastString = New coreFastStringClass
            '
            Call executeAddon_buildAddonOptionLists(ignore, ExpandedSelector, SitePropertyName & "=" & selector, SitePropertyName & "=" & SitePropertyValue, "0", True)
            Pos = vbInstr(1, ExpandedSelector, "[")
            If Pos <> 0 Then
                '
                ' List of Options, might be select, radio or checkbox
                '
                LCaseOptionDefault = vbLCase(Mid(ExpandedSelector, 1, Pos - 1))
                Dim PosEqual As Integer

                PosEqual = vbInstr(1, LCaseOptionDefault, "=")
                If PosEqual > 0 Then
                    LCaseOptionDefault = Mid(LCaseOptionDefault, PosEqual + 1)
                End If

                LCaseOptionDefault = decodeNvaArgument(LCaseOptionDefault)
                ExpandedSelector = Mid(ExpandedSelector, Pos + 1)
                Pos = vbInstr(1, ExpandedSelector, "]")
                If Pos > 0 Then
                    If Pos < Len(ExpandedSelector) Then
                        OptionSuffix = vbLCase(Trim(Mid(ExpandedSelector, Pos + 1)))
                    End If
                    ExpandedSelector = Mid(ExpandedSelector, 1, Pos - 1)
                End If
                OptionValues = Split(ExpandedSelector, "|")
                executeAddon_getFormContent_decodeSelector = ""
                OptionCnt = UBound(OptionValues) + 1
                For OptionPtr = 0 To OptionCnt - 1
                    OptionValue_AddonEncoded = Trim(OptionValues(OptionPtr))
                    If OptionValue_AddonEncoded <> "" Then
                        Pos = vbInstr(1, OptionValue_AddonEncoded, ":")
                        If Pos = 0 Then
                            OptionValue = decodeNvaArgument(OptionValue_AddonEncoded)
                            OptionCaption = OptionValue
                        Else
                            OptionCaption = decodeNvaArgument(Mid(OptionValue_AddonEncoded, 1, Pos - 1))
                            OptionValue = decodeNvaArgument(Mid(OptionValue_AddonEncoded, Pos + 1))
                        End If
                        Select Case OptionSuffix
                            Case "checkbox"
                                '
                                ' Create checkbox
                                '
                                If vbInstr(1, "," & LCaseOptionDefault & ",", "," & vbLCase(OptionValue) & ",") <> 0 Then
                                    executeAddon_getFormContent_decodeSelector = executeAddon_getFormContent_decodeSelector & "<div style=""white-space:nowrap""><input type=""checkbox"" name=""" & SitePropertyName & OptionPtr & """ value=""" & OptionValue & """ checked=""checked"">" & OptionCaption & "</div>"
                                Else
                                    executeAddon_getFormContent_decodeSelector = executeAddon_getFormContent_decodeSelector & "<div style=""white-space:nowrap""><input type=""checkbox"" name=""" & SitePropertyName & OptionPtr & """ value=""" & OptionValue & """ >" & OptionCaption & "</div>"
                                End If
                            Case "radio"
                                '
                                ' Create Radio
                                '
                                If vbLCase(OptionValue) = LCaseOptionDefault Then
                                    executeAddon_getFormContent_decodeSelector = executeAddon_getFormContent_decodeSelector & "<div style=""white-space:nowrap""><input type=""radio"" name=""" & SitePropertyName & """ value=""" & OptionValue & """ checked=""checked"" >" & OptionCaption & "</div>"
                                Else
                                    executeAddon_getFormContent_decodeSelector = executeAddon_getFormContent_decodeSelector & "<div style=""white-space:nowrap""><input type=""radio"" name=""" & SitePropertyName & """ value=""" & OptionValue & """ >" & OptionCaption & "</div>"
                                End If
                            Case Else
                                '
                                ' Create select 
                                '
                                If vbLCase(OptionValue) = LCaseOptionDefault Then
                                    executeAddon_getFormContent_decodeSelector = executeAddon_getFormContent_decodeSelector & "<option value=""" & OptionValue & """ selected>" & OptionCaption & "</option>"
                                Else
                                    executeAddon_getFormContent_decodeSelector = executeAddon_getFormContent_decodeSelector & "<option value=""" & OptionValue & """>" & OptionCaption & "</option>"
                                End If
                        End Select
                    End If
                Next
                Select Case OptionSuffix
                    Case "checkbox"
                        '
                        '
                        Copy = Copy & "<input type=""hidden"" name=""" & SitePropertyName & "CheckBoxCnt"" value=""" & OptionCnt & """ >"
                    Case "radio"
                        '
                        ' Create Radio 
                        '
                        'main_executeAddon_GetFormContent_decodeSelector = "<div>" & vbReplace(main_executeAddon_GetFormContent_decodeSelector, "><", "></div><div><") & "</div>"
                    Case Else
                        '
                        ' Create select 
                        '
                        executeAddon_getFormContent_decodeSelector = "<select name=""" & SitePropertyName & """>" & executeAddon_getFormContent_decodeSelector & "</select>"
                End Select
            Else
                '
                ' Create Text executeAddon_GetFormContent_decodeSelector
                '

                selector = decodeNvaArgument(selector)
                executeAddon_getFormContent_decodeSelector = html_GetFormInputText2(SitePropertyName, selector, 1, 20)
            End If

            FastString = Nothing
            Exit Function
            '
ErrorTrap:
            FastString = Nothing
            Call handleLegacyError18("executeAddon_GetFormContent_decodeSelector")
        End Function
        '
        Public Function main_GetPCCPtr(PageID As Integer, main_IsWorkflowRendering As Boolean, main_IsQuickEditing As Boolean) As Integer
            main_GetPCCPtr = pageManager_cache_pageContent_getPtr(PageID, main_IsWorkflowRendering, main_IsQuickEditing)
        End Function
        Public Property pageManager_cache_pageContent_needsReload() As Boolean
            Get
                Return _pageManager_cache_pageContent_needsReload
            End Get
            Set(ByVal value As Boolean)
                _pageManager_cache_pageContent_needsReload = value
            End Set
        End Property
        Public Property pageManager_cache_pageContent_rows() As Integer
            Get
                Return _pageManager_cache_pageContent_rows
            End Get
            Set(ByVal value As Integer)
                _pageManager_cache_pageContent_rows = value
            End Set
        End Property
        '
        '   clear addonIncludeRules cache
        '
        Public Sub cache_addonIncludeRules_clear()
            On Error GoTo ErrorTrap 'Const Tn = "cache_addonIncludeRules_clear": 'Dim th as integer: th = profileLogMethodEnter(Tn)
            '
            cache_addonIncludeRules = New addonIncludeRulesClass
            'cache_addonIncludeRules.itemCnt = 0
            'cache_addonIncludeRules.item = {}
            Call cache.setKey(cache_addonIncludeRules_cacheName, cache_addonIncludeRules.item)
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "cache_addonIncludeRules_clear", True)
        End Sub
        '
        Public Sub cache_addonIncludeRules_save()
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("MainClass.cache_addonIncludeRules_save")
            '
            'Dim cacheArray As Object()
            'ReDim cacheArray(1)
            '
            Call cache_addonIncludeRules.addonIdIndex.getPtr("test")
            '
            Call cache.setKey(cache_addonIncludeRules_cacheName, cache_addonIncludeRules)
            'cacheArray(0) = cache_addonIncludeRules.item
            'cacheArray(1) = cache_addonIncludeRules.addonIdIndex.exportPropertyBag
            'Call cache.cache_save(cache_addonIncludeRules_cacheName, cacheArray)
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("cache_addonIncludeRules_save")
        End Sub
        '
        '   load addonIncludeRules cache
        '
        Private Sub cache_addonIncludeRules_load()
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("cache_addonIncludeRules_load")
            '
            'Dim cacheLoaded As Boolean
            Dim bag As Object
            Dim Ticks As Integer
            Dim hint As String
            Dim IDList As String
            Dim CS As Integer
            'dim dt as datatable
            Dim Ptr As Integer
            Dim SQL As String
            Dim SelectList As String
            Dim SupportMetaContentNoFollow As Boolean
            Dim Criteria As String
            'dim buildversion As String
            Dim RecordAddonID As Integer
            Dim RecordIncludedAddonID As Integer
            Dim test As Object
            Dim SaveHintToLog As Boolean
            Dim cacheArray() As String
            Dim cacheTest As Object
            '
            SaveHintToLog = True
            'hint = "cache_addonIncludeRules_load, enter"
            '
            ' Load cached addonIncludeRulesCache
            '
            cache_addonIncludeRules = New addonIncludeRulesClass
            cache_addonIncludeRules.addonIdIndex = New coreKeyPtrIndexClass
            cache_addonIncludeRules.itemCnt = 0
            '
            On Error Resume Next
            If Not pagemanager_IsWorkflowRendering() Then
                cacheTest = cache.getObject(Of addonIncludeRulesClass)(cache_addonIncludeRules_cacheName)
                If TypeOf cacheTest Is addonIncludeRulesClass Then
                    cache_addonIncludeRules = DirectCast(cacheTest, addonIncludeRulesClass)
                End If
                'If TypeOf cacheTest Is String(,) Then
                '    cache_addonIncludeRules.item = cacheTest(0)
                '    If Not Isempty(cache_addonIncludeRules.item) Then
                '        bag = cacheTest(1)
                '        Call cache_addonIncludeRules.addonIdIndex.importPropertyBag(bag)
                '        cache_addonIncludeRules.itemCnt = UBound(cache_addonIncludeRules.item, 2) + 1
                '    End If
                'End If

                'If Not Isempty(cacheTest) Then
                '    cacheArray = cacheTest
                '    If Not Isempty(cacheArray) Then
                '        cache_addonIncludeRules = cacheArray(0)
                '        If Not Isempty(cache_addonIncludeRules) Then
                '            bag = cacheArray(1)
                '            If Err.Number = 0 Then
                '                Call cache_addonIncludeRulesAddonIdIndex.importPropertyBag(bag)
                '                If Err.Number = 0 Then
                '                    cache_addonIncludeRulesCnt = UBound(cache_addonIncludeRules, 2) + 1
                '                End If
                '            End If
                '        End If
                '    End If
                'End If
            End If
            Err.Clear()
            On Error GoTo ErrorTrap
            'hint = hint & ",check for empty"
            If cache_addonIncludeRules.itemCnt = 0 Then
                '
                ' cache is empty, build it from scratch
                '
                'hint = hint & ",20 cnt=0 rebuild"
                SQL = "select " & cache_addonIncludeRules_fieldList & " from ccaddonIncludeRules where (active<>0) order by id"
                cache_addonIncludeRules.item = convertDataTabletoArray(db.executeSql(SQL))
                'hint = hint & ",21"
                If True Then
                    'hint = hint & ",22"
                    cache_addonIncludeRules.itemCnt = UBound(cache_addonIncludeRules.item, 2) + 1
                    If cache_addonIncludeRules.itemCnt > 0 Then
                        'hint = hint & ",23"
                        cache_addonIncludeRules.addonIdIndex = New coreKeyPtrIndexClass
                        For Ptr = 0 To cache_addonIncludeRules.itemCnt - 1
                            RecordAddonID = EncodeInteger(cache_addonIncludeRules.item(addonIncludeRulesCache_addonId, Ptr))
                            'RecordIncludedAddonID = encodeInteger(cache_addonIncludeRules(addonIncludeRulesCache_includedAddonId, Ptr))
                            'hint = hint & ",24 set AddonIdIndex recordAddonId[" & RecordAddonID & "] to ptr[" & Ptr & "]"
                            Call cache_addonIncludeRules.addonIdIndex.setPtr(EncodeText(RecordAddonID), Ptr)
                        Next
                        Call cache_addonIncludeRules_save()
                    End If
                End If
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description & " Hint=[" & hint & "]", "cache_addonIncludeRules_load", True, False)
        End Sub
        '
        '   getPtr addonIncludeRules cache
        '
        Public Function cache_addonIncludeRules_getFirstPtr(addonId As Integer) As Integer
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("cache_addonIncludeRules_getFirstPtr")
            '
            Dim returnPtr As Integer
            Dim CS As Integer
            Dim sqlCriteria As String
            Dim Ptr As Integer
            Dim addonIncludeRulesId As Integer
            Dim nameOrGuid As String
            Dim hint As String
            '
            returnPtr = -1
            'hint = hint & ",enter"
            If cache_addonIncludeRules Is Nothing Then
                Call cache_addonIncludeRules_load()
            End If
            'If cache_addonIncludeRules.itemCnt = 0 Then
            '    'hint = hint & ",call load"
            '    Call cache_addonIncludeRules_load()
            'End If
            If cache_addonIncludeRules.itemCnt <= 0 Then
                '
                'hint = hint & ",cnt<=0 exit"
            ElseIf (cache_addonIncludeRules.addonIdIndex Is Nothing) Then
                '
                'hint = hint & ",index is nothing exit"
            Else
                returnPtr = cache_addonIncludeRules.addonIdIndex.getPtr(CStr(addonId))
            End If
            '
            cache_addonIncludeRules_getFirstPtr = returnPtr
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description, "cache_addonIncludeRules_getFirstPtr, hint=[" & hint & "]", True, False)
        End Function
        '
        '=======================================================================================================================================
        '   link forward cache - different
        '       link forwards are only checked once
        '       instead of a full cache, the load creates a comma delimited string, saved as persistent variant
        '       if there is a hit, then go use the database.
        '=======================================================================================================================================
        '
        Private Sub cache_linkForward_load()
            On Error GoTo ErrorTrap
            '
            Dim RS As DataTable
            Dim cacheValue As String
            Dim bag As Object
            '
            ' Load cache
            '
            cacheValue = DirectCast(cache.getObject(Of String)(cache_linkForward_cacheName), String)
            If cacheValue = "" Then
                RS = db.executeSql("select sourceLink from ccLinkForwards where (sourceLink<>'')and(DestinationLink<>'')and(active<>0) order by id desc")
                For Each dr As DataRow In RS.Rows
                    cacheValue &= "," & dr.Item("sourceLink").ToString
                Next
                If cacheValue <> "" Then
                    cacheValue = vbReplace(cacheValue, "\", "/")
                    Call cache.setKey(cache_linkForward_cacheName, cacheValue)
                    'Call cache.cache_savex("dummyValue", "dummyKey")
                End If
            End If
            '
            cache_linkForward = cacheValue
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("cache_linkForward_load")
        End Sub
        '
        '
        '
        '
        '
        '
        '
        '
        '
        '
        '   clear addonIncludeRules cache
        '
        Public Sub cache_libraryFiles_clear()
            On Error GoTo ErrorTrap 'Const Tn = "cache_libraryFiles_clear": 'Dim th as integer: th = profileLogMethodEnter(Tn)
            '
            cache_libraryFilesCnt = 0
            cache_libraryFiles = {}
            Call cache.setKey(cache_LibraryFiles_cacheName, cache_libraryFiles)
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyError4(Err.Number, Err.Source, Err.Description, "cache_libraryFiles_clear", True)
        End Sub
        '
        '
        '
        Public Sub cache_libraryFiles_save()
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("MainClass.cache_libraryFiles_save")
            '
            Dim cacheArray As Object()
            ReDim cacheArray(1)
            '
            Call cache_libraryFilesIdIndex.getPtr("test")
            '
            cacheArray(0) = cache_libraryFiles
            cacheArray(1) = cache_libraryFilesIdIndex.exportPropertyBag
            Call cache.setKey(cache_LibraryFiles_cacheName, cacheArray)
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError18("cache_libraryFiles_save")
        End Sub
        '
        '   load libraryFiles cache -- only if not loaded or cleared first
        '
        Private Sub cache_libraryFiles_loadIfNeeded()
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("cache_libraryFiles_loadIfNeeded")
            '
            ' Dim cacheLoaded As Boolean
            Dim bag As String
            Dim Ticks As Integer
            Dim hint As String
            Dim IDList As String
            Dim CS As Integer
            'dim dt as datatable
            Dim Ptr As Integer
            Dim SQL As String
            Dim SelectList As String
            Dim SupportMetaContentNoFollow As Boolean
            Dim Criteria As String
            'dim buildversion As String
            Dim RecordID As Integer
            Dim RecordIncludedAddonID As Integer
            Dim test As Object
            Dim SaveHintToLog As Boolean
            Dim cacheArray() As Object
            Dim cacheTest As Object
            '
            SaveHintToLog = True
            'hint = "cache_libraryFiles_loadIfNeeded, enter"
            '
            If cache_libraryFilesCnt = 0 Then
                '
                ' Load cached libraryFilesCache
                '
                'hint = hint & ",cnt=0, not loaded or cleared"
                cache_libraryFilesIdIndex = New coreKeyPtrIndexClass
                cache_libraryFilesCnt = 0
                '
                cacheTest = cache.getObject(Of Object())(cache_LibraryFiles_cacheName)
                If Not IsNothing(cacheTest) Then
                    cacheArray = DirectCast(cacheTest, Object())
                    cache_libraryFiles = DirectCast(cacheArray(0), String(,))
                    bag = EncodeText(cacheArray(1))
                    Call cache_libraryFilesIdIndex.importPropertyBag(bag)
                    cache_libraryFilesCnt = UBound(cache_libraryFiles, 2) + 1
                End If
                'hint = hint & ",cache loaded cache_libraryFilesCnt=" & cache_libraryFilesCnt
                If cache_libraryFilesCnt = 0 Then
                    '
                    ' cache is empty, build it from scratch
                    '
                    'hint = hint & ",cnt=0 rebuild"
                    SQL = "select " & cache_LibraryFiles_fieldList & " from cclibraryFiles where (active<>0) order by id"
                    cache_libraryFiles = convertDataTabletoArray(db.executeSql(SQL))
                    '    RS = app.csv_OpenRSSQL_Internal("Default", SQL, 120, 1000, 1, False, CursorLocationEnum.adUseClient, LockTypeEnum.adLockOptimistic, CursorTypeEnum.adOpenForwardOnly)
                    'cacheLoaded = False
                    'If (isDataTableOk(rs)) Then
                    '    If Not rs.rows.count=0 Then
                    '        cache_libraryFiles = RS.GetRows
                    '        cacheLoaded = True
                    '    End If
                    '    If (isDataTableOk(rs)) Then
                    '        If false Then
                    '            RS.Close
                    '        End If
                    '        'RS = Nothing
                    '    End If
                    'End If
                    'hint = hint & ",21"
                    If True Then
                        'hint = hint & ",22"
                        cache_libraryFilesCnt = UBound(cache_libraryFiles, 2) + 1
                        If cache_libraryFilesCnt > 0 Then
                            'hint = hint & ",reloaded cache_libraryFilesCnt=" & cache_libraryFilesCnt
                            cache_libraryFilesIdIndex = New coreKeyPtrIndexClass
                            For Ptr = 0 To cache_libraryFilesCnt - 1
                                RecordID = EncodeInteger(cache_libraryFiles(LibraryFilesCache_Id, Ptr))
                                Call cache_libraryFilesIdIndex.setPtr(EncodeText(RecordID), Ptr)
                            Next
                            Call cache_libraryFiles_save()
                        End If
                    End If
                End If
            End If
            If SaveHintToLog Then
                Call testPoint(hint)
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError10(Err.Number, Err.Source, Err.Description & " Hint=[" & hint & "]", "cache_libraryFiles_loadIfNeeded", True, False)
        End Sub
        '
        '===========================================================================
        '   Populate the parent branch
        '       PageID and RootPageID must be valid
        '
        '   I think this routine is over-written at this point. Since we now call with pageid and rootpageid, the loop is not needed -- I think
        '===========================================================================
        '
        Private Sub pageManager_LoadRenderCache_CurrentPage(PageID As Integer, rootPageId As Integer, RootPageContentName As String, ArchivePage As Boolean, SectionID As Integer, UseContentWatchLink As Boolean)
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("main_LoadRenderCache_CurrentPage")
            '
            Dim SubMessage As String
            'Dim PCCPtr as integer
            Dim IsNotActive As Boolean
            Dim IsExpired As Boolean
            Dim IsNotPublished As Boolean
            'Dim IsArchived As Boolean
            Dim SQL As String
            Dim CS As Integer
            Dim ParentID As Integer
            Dim pageCaption As String
            Dim QueryString As String
            Dim dateArchive As Date
            Dim DateExpires As Date
            Dim PubDate As Date
            Dim Criteria As String
            Dim ContentControlID As Integer
            Dim SelectList As String
            Dim reloadPage As Boolean
            Dim Active As Boolean
            Dim loadPageCnt As Integer
            Dim ContentName As String
            Dim MenuLinkOverRide As String
            Dim SupportMetaContentNoFollow As Boolean
            Dim RecordName As String
            Dim RecordID As Integer
            '
            If PageID = 0 And rootPageId = 0 Then
                '
                ' no page and no root page, redirect to landing page
                '
                Call log_appendLogPageNotFound(webServer.requestLinkSource)
                pageManager_RedirectBecausePageNotFound = True
                pageManager_RedirectReason = "The page could not be determined from URL. The PageID is [" & PageID & "], and the RootPageID is [" & rootPageId & "]."
                pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID, SectionID)
            ElseIf PageID = 0 Then
                '
                ' no page, redirect to root page
                '
                Call log_appendLogPageNotFound(webServer.requestLinkSource)
                pageManager_RedirectBecausePageNotFound = True
                pageManager_RedirectReason = "The page could not be determined from URL. The PageID is [" & PageID & "], and the RootPageID is [" & rootPageId & "]."
                pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID, SectionID)
            ElseIf rootPageId = 0 Then
                '
                ' no rootpage id
                '
                Call log_appendLogPageNotFound(webServer.requestLinkSource)
                pageManager_RedirectBecausePageNotFound = True
                pageManager_RedirectReason = "The page could not be determined from URL. The PageID is [" & PageID & "], and the RootPageID is [" & rootPageId & "]."
                pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID, SectionID)
            Else
                '
                reloadPage = True
                Do While reloadPage And (loadPageCnt < 10)
                    reloadPage = False
                    'main_oldCacheArray_CurrentPagePtr = -1
                    'main_oldCacheArray_CurrentPageCount = 0
                    main_RenderCache_CurrentPage_PCCPtr = pageManager_cache_pageContent_getPtr(PageID, pagemanager_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                    If (main_RenderCache_CurrentPage_PCCPtr < 0) Then
                        '
                        ' page was not found ?
                        '
                        main_RenderCache_CurrentPage_PCCPtr = main_RenderCache_CurrentPage_PCCPtr
                    Else
                        RecordName = Trim(EncodeText(cache_pageContent(PCC_Name, main_RenderCache_CurrentPage_PCCPtr)))
                        ContentControlID = EncodeInteger(cache_pageContent(PCC_ContentControlID, main_RenderCache_CurrentPage_PCCPtr))
                        DateExpires = EncodeDate(cache_pageContent(PCC_DateExpires, main_RenderCache_CurrentPage_PCCPtr))
                        dateArchive = EncodeDate(cache_pageContent(PCC_DateArchive, main_RenderCache_CurrentPage_PCCPtr))
                        PubDate = EncodeDate(cache_pageContent(PCC_PubDate, main_RenderCache_CurrentPage_PCCPtr))
                        Active = EncodeBoolean(cache_pageContent(PCC_Active, main_RenderCache_CurrentPage_PCCPtr))
                        RecordID = EncodeInteger(cache_pageContent(PCC_ID, main_RenderCache_CurrentPage_PCCPtr))
                        ParentID = EncodeInteger(cache_pageContent(PCC_ParentID, main_RenderCache_CurrentPage_PCCPtr))
                        MenuLinkOverRide = Trim(EncodeText(cache_pageContent(PCC_Link, main_RenderCache_CurrentPage_PCCPtr)))
                        IsNotActive = (Not Active)
                        IsExpired = ((DateExpires > Date.MinValue) And (DateExpires < main_PageStartTime))
                        IsNotPublished = ((PubDate > Date.MinValue) And (PubDate > main_PageStartTime))
                        'IsArchived = ((DateArchive > Date.MinValue) And (DateArchive < main_PageStartTime))
                        '
                        RecordName = vbReplace(RecordName, vbCrLf, " ")
                        RecordName = vbReplace(RecordName, vbTab, " ")
                        '
                        If IsNotActive Or IsExpired Or IsNotPublished Then
                            pageManager_RedirectSourcePageID = PageID
                            If IsNotActive Then
                                SubMessage = " because it marked inactive"
                            ElseIf IsExpired Then
                                SubMessage = " because the expiration date has passed"
                            ElseIf IsNotPublished Then
                                SubMessage = " because the publish date has not passed"
                                'ElseIf IsArchived Then
                                '    SubMessage = " because the archive date has passed"
                            End If
                            If PageID = main_GetLandingPageID() Then
                                '
                                ' Landing Page - do not redirect, just show a blank page with the admin message
                                '
                                main_AdminWarning = "The page requested [" & PageID & "] can not be displayed" & SubMessage & ". It is the landing page of this website so no replacement page can be displayed. To correct this page, use the link below to edit the page and mark it active. To create a different landing page, edit any other active page and check the box marked 'Set Landing Page' in the control tab."
                                main_AdminWarningPageID = PageID
                                main_AdminWarningSectionID = SectionID
                            ElseIf PageID = rootPageId Then
                                '
                                ' Root Page - redirect to the landing page with an admin message
                                '
                                Call log_appendLogPageNotFound(webServer.requestLinkSource)
                                'Call main_LogPageNotFound(main_ServerLink)
                                pageManager_RedirectBecausePageNotFound = True
                                pageManager_RedirectReason = "The page requested [" & PageID & "] can not be displayed" & SubMessage & ". It is the root page of the section [" & SectionID & "]."
                                pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID, SectionID)
                                Exit Sub
                            Else
                                '
                                ' non-Root Page - redirect to the root page with an admin message
                                '
                                Call log_appendLogPageNotFound(webServer.requestLinkSource)
                                'Call main_LogPageNotFound(main_ServerLink)
                                pageManager_RedirectBecausePageNotFound = True
                                pageManager_RedirectReason = "The page requested [" & PageID & "] can not be displayed" & SubMessage & "."
                                'pageManager_RedirectReason = "The page requested [" & PageID & "] is marked inactive."
                                pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID, SectionID)
                                Exit Sub
                            End If
                        End If
                        '
                        ContentName = metaData.getContentNameByID(ContentControlID)
                        If ContentName <> "" Then
                            If (Not main_RenderCache_CurrentPage_IsQuickEditing) And user.isQuickEditing(ContentName) Then
                                main_RenderCache_CurrentPage_IsQuickEditing = True
                                reloadPage = True
                            End If
                        End If
                        If (Not reloadPage) Then
                            '
                            ' ----- Store results in main_oldCacheArray_CurrentPage Storage
                            '
                            'If main_oldCacheArray_CurrentPageCount >= main_oldCacheArray_CurrentPageSize Then
                            '    main_oldCacheArray_CurrentPageSize = main_oldCacheArray_CurrentPageSize + 10
                            '    ReDim Preserve main_oldCacheArray_CurrentPage(main_oldCacheArray_CurrentPageSize)
                            'End If
                            'main_oldCacheArray_CurrentPagePtr = main_oldCacheArray_CurrentPageCount
                            '                    With main_oldCacheArray_CurrentPage(main_oldCacheArray_CurrentPagePtr)
                            '                        .Name = RecordName
                            '                        .Id = RecordID
                            '                        .Active = Active
                            '                        .parentId = parentId
                            '                        .headline = Trim(encodeText(main_pcc(PCC_Headline, main_RenderCache_CurrentPage_PCCPtr)))
                            '                        .headline = vbReplace(.headline, vbCrLf, " ")
                            '                        .headline = vbReplace(.headline, vbTab, " ")
                            '                        .MenuHeadline = Trim(encodeText(main_pcc(PCC_MenuHeadline, main_RenderCache_CurrentPage_PCCPtr)))
                            '                        .MenuHeadline = vbReplace(.MenuHeadline, vbCrLf, " ")
                            '                        .MenuHeadline = vbReplace(.MenuHeadline, vbTab, " ")
                            '                        .dateArchive = dateArchive
                            '                        .DateExpires = DateExpires
                            '                        .PubDate = PubDate
                            '                        .childListSortMethodId = encodeInteger(main_pcc(PCC_ChildListSortMethodID, main_RenderCache_CurrentPage_PCCPtr))
                            '                        .ChildListInstanceOptions = encodeText(main_pcc(PCC_ChildListInstanceOptions, main_RenderCache_CurrentPage_PCCPtr))
                            '                        .ContentControlID = ContentControlID
                            '                        .templateId = encodeInteger(main_pcc(PCC_TemplateID, main_RenderCache_CurrentPage_PCCPtr))
                            '                        .BlockContent = encodeBoolean(main_pcc(PCC_BlockContent, main_RenderCache_CurrentPage_PCCPtr))
                            '                        .BlockPage = encodeBoolean(main_pcc(PCC_BlockPage, main_RenderCache_CurrentPage_PCCPtr))
                            '                        .LinkOverride = MenuLinkOverRide
                            '                        '.LinkDynamic = main_GetPageDynamicLinkWithArgs(.ContentControlID, RecordID, main_ServerPathPage & "?" & main_RefreshQueryString, (.Id = RootPageID), .TemplateID, SectionID, MenuLinkOverRide, UseContentWatchLink)
                            '                        .Link = main_GetPageLink4(.Id, "", True, False)
                            '                        '.Link = main_GetLinkAliasByPageID(.Id, "", .LinkDynamic)
                            '                        .MetaContentNoFollow = encodeBoolean(main_pcc(PCC_AllowMetaContentNoFollow, main_RenderCache_CurrentPage_PCCPtr))
                            '                        .BlockSourceID = encodeInteger(main_pcc(PCC_BlockSourceID, main_RenderCache_CurrentPage_PCCPtr))
                            '                        .CustomBlockMessageFilename = Trim(encodeText(main_pcc(PCC_CustomBlockMessageFilename, main_RenderCache_CurrentPage_PCCPtr)))
                            '                        .RegistrationGroupID = encodeInteger(main_pcc(PCC_RegistrationGroupID, main_RenderCache_CurrentPage_PCCPtr))
                            '                        .JSOnLoad = encodeText(main_pcc(PCC_JSOnLoad, main_RenderCache_CurrentPage_PCCPtr))
                            '                        .JSHead = encodeText(main_pcc(PCC_JSHead, main_RenderCache_CurrentPage_PCCPtr))
                            '                        .JSFilename = encodeText(main_pcc(PCC_JSFilename, main_RenderCache_CurrentPage_PCCPtr))
                            '                        .JSEndBody = encodeText(main_pcc(PCC_JSEndBody, main_RenderCache_CurrentPage_PCCPtr))
                            '                        .AllowInMenus = encodeBoolean(main_pcc(PCC_AllowInMenus, main_RenderCache_CurrentPage_PCCPtr))
                            '                        .DateModified = encodeDate(main_pcc(PCC_ModifiedDate, main_RenderCache_CurrentPage_PCCPtr))
                            '                    End With
                            '                    main_oldCacheArray_CurrentPageCount = main_oldCacheArray_CurrentPageCount + 1
                        End If
                    End If
                    If (main_RenderCache_CurrentPage_PCCPtr < 0) Then
                        'If (main_oldCacheArray_CurrentPagePtr = -1) And (PageID <> 0) Then
                        If (SectionID <> 0) And (PageID = rootPageId) Then
                            '
                            ' This is a root page that is missing -
                            '
                            ' the redirect does the logging -- Call main_LogPageNotFound(main_ServerLinkSource)
                            'Call main_LogPageNotFound(main_ServerLink)
                            pageManager_RedirectBecausePageNotFound = True
                            pageManager_RedirectReason = "The root page [" & PageID & "] for this section [" & SectionID & "] could not be found. It may have been deleted. To correct this problem, edit this section and save it with 'none' selected for the Root Page. A new root page will be created automatically the next time the page is viewed. Alternately, you can manually select another root page in the section record."
                            pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID, SectionID)
                            Exit Sub
                        Else
                            '
                            ' ----- This PageID (bid) was not found, revert to the RootPageName and try again
                            '
                            ' the redirect does the logging -- Call main_LogPageNotFound(main_ServerLinkSource)
                            pageManager_RedirectBecausePageNotFound = True
                            pageManager_RedirectReason = "The page could not be found from its ID [" & PageID & "]. It may have been deleted."
                            pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID, SectionID)
                            Exit Sub
                        End If
                    End If
                    loadPageCnt = loadPageCnt + 1
                Loop
                '
                main_RenderedPageID = EncodeInteger(cache_pageContent(PCC_ID, main_RenderCache_CurrentPage_PCCPtr))
                main_RenderedParentID = EncodeInteger(cache_pageContent(PCC_ParentID, main_RenderCache_CurrentPage_PCCPtr))
                main_RenderedPageName = EncodeText(cache_pageContent(PCC_Name, main_RenderCache_CurrentPage_PCCPtr))
                main_RenderCache_CurrentPage_IsRootPage = (main_RenderedPageID = rootPageId) And (main_RenderedParentID = 0)
                main_RenderCache_CurrentPage_ContentId = EncodeInteger(cache_pageContent(PCC_ContentControlID, main_RenderCache_CurrentPage_PCCPtr))
                main_RenderCache_CurrentPage_ContentName = metaData.getContentNameByID(main_RenderCache_CurrentPage_ContentId)
                main_RenderCache_CurrentPage_IsEditing = user.isEditing(main_RenderCache_CurrentPage_ContentName)
                main_RenderCache_CurrentPage_IsQuickEditing = user.isQuickEditing(main_RenderCache_CurrentPage_ContentName)
                main_RenderCache_CurrentPage_IsAuthoring = main_RenderCache_CurrentPage_IsEditing Or main_RenderCache_CurrentPage_IsQuickEditing
                main_MetaContent_NoFollow = EncodeBoolean(cache_pageContent(PCC_AllowMetaContentNoFollow, main_RenderCache_CurrentPage_PCCPtr)) Or main_MetaContent_NoFollow
                '
                '        If main_oldCacheArray_CurrentPagePtr <> -1 Then
                '            With main_oldCacheArray_CurrentPage(main_oldCacheArray_CurrentPagePtr)
                '                'main_RenderedPageID = .Id
                '                'main_RenderedPageName = .Name
                '                'main_RenderCache_CurrentPage_IsRootPage = (.Id = rootPageId) And (.ParentID = 0)
                '                'main_RenderCache_CurrentPage_ContentId = .ContentControlID
                '                'main_RenderCache_CurrentPage_ContentName = metaData.getContentNameByID(.ContentControlID)
                '                'main_RenderCache_CurrentPage_IsEditing = main_IsEditing(main_RenderCache_CurrentPage_ContentName)
                '                main_RenderCache_CurrentPage_IsQuickEditing = main_IsQuickEditing(main_RenderCache_CurrentPage_ContentName)
                '                main_RenderCache_CurrentPage_IsAuthoring = main_RenderCache_CurrentPage_IsEditing Or main_RenderCache_CurrentPage_IsQuickEditing
                '                main_MetaContent_NoFollow = .MetaContentNoFollow Or main_MetaContent_NoFollow
                '            End With
                '        End If
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError13("main_LoadRenderCache_CurrentPage")
        End Sub
        '
        '===========================================================================
        '   Populate the parent branch
        '
        '   The PageID is the id of the page being checked for a parent, not the ID of the parent
        '===========================================================================
        '
        Private Sub pageManager_LoadRenderCache_ParentBranch(PageID As Integer, rootPageId As Integer, RootPageContentName As String, ArchivePage As Boolean, ParentIDPath As String, SectionID As Integer, UseContentWatchLink As Boolean)
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("main_LoadRenderCache_ParentBranch")
            '
            Dim PCCPtr As Integer
            Dim IsRootPage As Boolean
            'Dim SQL As String
            'Dim CS as integer
            Dim ParentID As Integer
            Dim pageCaption As String
            Dim PageName As String
            Dim QueryString As String
            Dim dateArchive As Date
            Dim DateExpires As Date
            Dim PubDate As Date
            Dim Criteria As String
            Dim ContentControlID As Integer
            Dim templateId As Integer
            Dim MenuLinkOverRide As String
            Dim SelectFieldList As String
            Dim hint As String
            '
            'hint = "main_LoadRenderCache_ParentBranch"
            If PageID = 0 Then
                '
                ' this page does not exist, end of branch
                '
                'hint = hint & ",10"
            ElseIf PageID = EncodeInteger(cache_pageContent(PCC_ID, main_RenderCache_CurrentPage_PCCPtr)) Then
                'hint = hint & ",20"
                'ElseIf PageID = main_oldCacheArray_CurrentPage(main_oldCacheArray_CurrentPagePtr).Id Then
                '
                ' This is the current page, main_Get the branch and process it depending on archivepage
                '
                ParentID = EncodeInteger(cache_pageContent(PCC_ParentID, main_RenderCache_CurrentPage_PCCPtr))
                'ParentID = main_oldCacheArray_CurrentPage(main_oldCacheArray_CurrentPagePtr).ParentID
                If ArchivePage Then
                    Call handleLegacyError12("main_LoadRenderCache_ParentBranch", "The Archive API is no longer supported. The current URL is [" & main_ServerLink & "]")

                Else
                    '
                    ' non-Archive, test if this bid goes up to this rootpagename (if it is called from the correct page)
                    '
                    'hint = hint & ",30"
                    If PageID <> ParentID Then
                        Call pageManager_LoadRenderCache_ParentBranch(ParentID, rootPageId, RootPageContentName, ArchivePage, ParentIDPath & "," & PageID, SectionID, UseContentWatchLink)
                    End If
                End If
            ElseIf IsInDelimitedString(ParentIDPath, CStr(PageID), ",") Then
                '
                ' this page has been fetched before, end the branch here
                '
                Call log_appendLogPageNotFound(webServer.requestLinkSource)
                'Call main_LogPageNotFound(main_ServerLink)
                pageManager_RedirectBecausePageNotFound = True
                pageManager_RedirectReason = "The requested page could not be displayed because there is a circular reference within it's parent path. The page [" & PageID & "] was found two times in the parent pages [" & ParentIDPath & "," & PageID & "]."
                pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID)
            Else
                '
                ' This is not the current page, and it is not 0, Look it up
                '
                'hint = hint & ",40"
                PCCPtr = pageManager_cache_pageContent_getPtr(PageID, pagemanager_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                If PCCPtr >= 0 Then
                    'hint = hint & ",50"
                    ReDim Preserve main_RenderCache_ParentBranch_PCCPtrs(main_RenderCache_ParentBranch_PCCPtrCnt)
                    main_RenderCache_ParentBranch_PCCPtrs(main_RenderCache_ParentBranch_PCCPtrCnt) = PCCPtr
                    main_RenderCache_ParentBranch_PCCPtrCnt = main_RenderCache_ParentBranch_PCCPtrCnt + 1
                    '
                    ParentID = EncodeInteger(cache_pageContent(PCC_ParentID, PCCPtr))
                    PageName = EncodeText(cache_pageContent(PCC_Name, PCCPtr))
                    dateArchive = EncodeDate(cache_pageContent(PCC_DateArchive, PCCPtr))
                    DateExpires = EncodeDate(cache_pageContent(PCC_DateExpires, PCCPtr))
                    PubDate = EncodeDate(cache_pageContent(PCC_PubDate, PCCPtr))
                    ContentControlID = EncodeInteger(cache_pageContent(PCC_ContentControlID, PCCPtr))
                    templateId = EncodeInteger(cache_pageContent(PCC_TemplateID, PCCPtr))
                    pageCaption = Trim(EncodeText(cache_pageContent(PCC_MenuHeadline, PCCPtr)))
                    If pageCaption = "" Then
                        pageCaption = Trim(PageName)
                        If pageCaption = "" Then
                            pageCaption = "Related Page"
                        End If
                    End If
                    PageName = vbReplace(PageName, vbCrLf, " ")
                    PageName = vbReplace(PageName, vbTab, " ")
                    pageCaption = vbReplace(pageCaption, vbCrLf, " ")
                    pageCaption = vbReplace(pageCaption, vbTab, " ")
                    '
                    ' Store results in main_oldCacheArray_ParentBranch Storage
                    '
                    'If main_oldCacheArray_ParentBranchCount >= main_oldCacheArray_ParentBranchSize Then
                    '    main_oldCacheArray_ParentBranchSize = main_oldCacheArray_ParentBranchSize + 10
                    '    ReDim Preserve main_oldCacheArray_ParentBranch(main_oldCacheArray_ParentBranchSize)
                    'End If
                    'With main_oldCacheArray_ParentBranch(main_oldCacheArray_ParentBranchCount)
                    '    .Id = encodeInteger(main_pcc(PCC_ID, PCCPtr))
                    '    .Name = PageName
                    '    .Caption = pageCaption
                    '    .dateArchive = dateArchive
                    '    .DateExpires = DateExpires
                    '    .PubDate = PubDate
                    '    .childListSortMethodId = encodeInteger(main_pcc(PCC_ChildListSortMethodID, PCCPtr))
                    '    .ContentControlID = ContentControlID
                    '    .parentId = parentId
                    '    .templateId = templateId
                    '    .BlockContent = encodeBoolean(main_pcc(PCC_BlockContent, PCCPtr))
                    '    .BlockPage = encodeBoolean(main_pcc(PCC_BlockPage, PCCPtr))
                    '    .AllowInMenus = encodeBoolean(main_pcc(PCC_AllowInMenus, PCCPtr))
                    '    MenuLinkOverRide = encodeText(main_pcc(PCC_Link, PCCPtr))
                    '    IsRootPage = (.Id = rootPageId)
                    '    '.LinkDynamic = main_GetPageDynamicLinkWithArgs(.ContentControlID, .Id, main_ServerPathPage & "?" & main_RefreshQueryString, IsRootPage, TemplateID, SectionID, MenuLinkOverRide, UseContentWatchLink)
                    '    .Link = main_GetPageLink4(.Id, "", True, False)
                    '    '.Link = main_GetLinkAliasByPageID(.Id, "", .LinkDynamic)
                    '    main_oldCacheArray_ParentBranchCount = main_oldCacheArray_ParentBranchCount + 1
                    'End With
                    '
                    'Call app.db_closeCS(CS)
                    '
                    IsRootPage = (EncodeInteger(cache_pageContent(PCC_ID, PCCPtr)) = rootPageId)
                    If IsRootPage Then
                        '
                        ' The top of a page tree
                        '
                    ElseIf ((DateExpires > Date.MinValue) And (DateExpires < main_PageStartTime)) Then
                        '
                        ' this page within the Parent Branch expired. Abort here and go to RootPage
                        '
                        '            ElseIf (ArchivePage And (DateArchive < main_PageStartTime)) Then
                        '                '
                        '                ' The top of an archive tree
                        '                '
                    ElseIf (ParentID = 0) Then
                        '
                        ' The top of a page tree
                        '
                    Else
                        '
                        ' parent is a child link, bubble up
                        '
                        'hint = hint & ",60"
                        Call pageManager_LoadRenderCache_ParentBranch(ParentID, rootPageId, RootPageContentName, ArchivePage, ParentIDPath & "," & PageID, SectionID, UseContentWatchLink)
                    End If
                End If
            End If
            Call testPoint(hint)
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError13("main_LoadRenderCache_ParentBranch")
        End Sub
        '
        '===========================================================================
        '   Populate the root branch
        '===========================================================================
        '
        Private Sub pageManager_LoadRenderCache_ChildBranch(ChildOrderByClause As String, IsRenderingMode As Boolean, ArchivePage As Boolean, SectionID As Integer, UseContentWatchLink As Boolean)
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("PageList_LoadContent_ChildBranch")
            '
            Dim PCCPtrs() As Integer
            Dim PCCPtrsCnt As Integer
            Dim Ptr As Integer
            Dim PtrCnt As Integer
            Dim PCCPtrsSorted As Integer()
            Dim ContentName As String
            Dim PCCPtr As Integer
            Dim PageID As Integer
            Dim SQL As String
            Dim CS As Integer
            Dim ParentID As Integer
            Dim pageCaption As String
            Dim PageName As String
            Dim QueryString As String
            Dim dateArchive As Date
            Dim DateExpires As Date
            Dim PubDate As Date
            Dim Criteria As String
            Dim SQLOrderBy As String
            Dim ParentContentID As Integer
            Dim ParentContentName As String
            Dim IsParentEditing As Boolean
            Dim IsParentAuthoring As Boolean
            Dim SelectFieldList As String
            Dim ContentControlID As Integer
            Dim MenuLinkOverRide As String
            Dim childListSortMethodId As Integer
            Dim parentPCCPtr As Integer
            '
            If True Then
                'If main_oldCacheArray_CurrentPagePtr <> -1 Then
                '
                ' ----- main_Get the Sort Method Order By Clause, both normal and archive pages
                '
                If ChildOrderByClause <> "" Then
                    SQLOrderBy = ChildOrderByClause
                Else
                    childListSortMethodId = EncodeInteger(cache_pageContent(PCC_ChildListSortMethodID, main_RenderCache_CurrentPage_PCCPtr))
                    'childListSortMethodId = main_oldCacheArray_CurrentPage(main_oldCacheArray_CurrentPagePtr).childListSortMethodId
                    If childListSortMethodId <> 0 Then
                        SQLOrderBy = db_GetSortMethodByID(childListSortMethodId)
                    End If
                End If
                '
                ' --- main_Get Parent Content Name
                '
                ParentContentID = 0
                ParentContentName = ""
                IsParentEditing = False
                ParentID = EncodeInteger(cache_pageContent(PCC_ParentID, main_RenderCache_CurrentPage_PCCPtr))
                If ParentID > 0 Then
                    parentPCCPtr = main_GetPCCPtr(ParentID, pagemanager_IsWorkflowRendering, False)
                    If parentPCCPtr > -1 Then
                        ParentContentID = EncodeInteger(cache_pageContent(PCC_ContentControlID, parentPCCPtr))
                        ParentContentName = metaData.getContentNameByID(ParentContentID)
                        If ParentContentName <> "" Then
                            IsParentEditing = user.isEditing(ParentContentName)
                        End If
                    End If
                End If
                'ParentContentID = main_oldCacheArray_CurrentPage(main_oldCacheArray_CurrentPagePtr).ContentControlID
                'ParentContentName = metaData.getContentNameByID(ParentContentID)
                'IsParentEditing = main_IsEditing(ParentContentName)
                '
                ' Child criteria is all children with main_oldCacheArray_CurrentPage as parentid
                '
                PageID = EncodeInteger(cache_pageContent(PCC_ID, main_RenderCache_CurrentPage_PCCPtr))
                Criteria = "(ParentID=" & PageID & ")and(id<>" & PageID & ")"
                '
                'PageID = main_oldCacheArray_CurrentPage(main_oldCacheArray_CurrentPagePtr).Id
                '
                ' Populate PCCPtrs()
                '
                PCCPtr = pageManager_cache_pageContent_getFirstChildPtr(PageID, pagemanager_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
                PtrCnt = 0
                Do While PCCPtr >= 0
                    ReDim Preserve PCCPtrs(PtrCnt)
                    PCCPtrs(PtrCnt) = PCCPtr
                    PtrCnt = PtrCnt + 1
                    PCCPtr = pageManager_cache_pageContent_parentIdIndex.getNextPtrMatch(CStr(PageID))
                Loop
                If PtrCnt > 0 Then
                    PCCPtrsSorted = pageManager_cache_pageContent_getPtrsSorted(PCCPtrs, SQLOrderBy)
                    main_RenderCache_ChildBranch_PCCPtrs = PCCPtrsSorted
                    main_RenderCache_ChildBranch_PCCPtrCnt = PtrCnt
                End If
                For Ptr = 0 To PtrCnt - 1
                    PCCPtr = PCCPtrsSorted(Ptr)
                    If True Then
                        '
                        ' Store results in main_oldCacheArray_ChildBranch Storage
                        '
                        'If main_oldCacheArray_ChildBranchCount >= main_oldCacheArray_ChildBranchSize Then
                        '    main_oldCacheArray_ChildBranchSize = main_oldCacheArray_ChildBranchSize + 10
                        '    ReDim Preserve main_oldCacheArray_ChildBranch(main_oldCacheArray_ChildBranchSize)
                        'End If
                        'With main_oldCacheArray_ChildBranch(main_oldCacheArray_ChildBranchCount)
                        '    PageName = encodeText(main_pcc(PCC_Name, PCCPtr))
                        '    pageCaption = ""
                        '    pageCaption = encodeText(main_pcc(PCC_MenuHeadline, PCCPtr))
                        '    If pageCaption = "" Then
                        '        pageCaption = Trim(PageName)
                        '        If pageCaption = "" Then
                        '            pageCaption = "Related Page"
                        '        End If
                        '    End If
                        '    If vbInstr(1, pageCaption, "<ac", vbTextCompare) <> 0 Then
                        '        pageCaption = pageCaption & ACTagEnd
                        '    End If
                        '    '
                        '    ' remove crlf because not allowed (in main_RenderedNavigationStructure if nothing else)
                        '    '
                        '    PageName = vbReplace(PageName, vbCrLf, " ")
                        '    PageName = vbReplace(PageName, vbTab, " ")
                        '    pageCaption = vbReplace(pageCaption, vbCrLf, " ")
                        '    pageCaption = vbReplace(pageCaption, vbTab, " ")
                        '    '
                        '    .Name = PageName
                        '    .Active = encodeBoolean(main_pcc(PCC_Active, PCCPtr))
                        '    .AllowInChildLists = encodeBoolean(main_pcc(PCC_AllowInChildLists, PCCPtr))
                        '    .AllowInMenus = encodeBoolean(main_pcc(PCC_AllowInMenus, PCCPtr))
                        '    .MenuCaption = pageCaption
                        '    .Id = encodeInteger(main_pcc(PCC_ID, PCCPtr))
                        '    .ListName = encodeText(main_pcc(PCC_ParentListName, PCCPtr))
                        '    .dateArchive = encodeDate(main_pcc(PCC_DateArchive, PCCPtr))
                        '    .DateExpires = encodeDate(main_pcc(PCC_DateExpires, PCCPtr))
                        '    .PubDate = encodeDate(main_pcc(PCC_PubDate, PCCPtr))
                        '    .copyFilename = encodeText(main_pcc(PCC_CopyFilename, PCCPtr))
                        '    .ContentControlID = encodeInteger(main_pcc(PCC_ContentControlID, PCCPtr))
                        '    .IsDisplayed = False
                        '    .BriefFilename = encodeText(main_pcc(PCC_BriefFilename, PCCPtr))
                        '    .AllowBrief = encodeBoolean(main_pcc(PCC_AllowBrief, PCCPtr))
                        '    ContentName = metaData.getContentNameByID(.ContentControlID)
                        '    If main_IsEditing(ContentName) Then
                        '        .RecordEditLink = main_GetRecordEditLink2(ContentName, .Id, True, .Name, True)
                        '    End If
                        '    .templateId = encodeInteger(main_pcc(PCC_TemplateID, PCCPtr))
                        '    .BlockContent = encodeBoolean(main_pcc(PCC_BlockContent, PCCPtr))
                        '    .BlockPage = encodeBoolean(main_pcc(PCC_BlockPage, PCCPtr))
                        '    .headline = encodeText(main_pcc(PCC_Headline, PCCPtr))
                        '    MenuLinkOverRide = encodeText(main_pcc(PCC_Link, PCCPtr))
                        '
                        '    .LinkOverride = MenuLinkOverRide
                        '    .Link = main_GetPageLink4(.Id, "", True, False)
                        'End With
                        'main_oldCacheArray_ChildBranchCount = main_oldCacheArray_ChildBranchCount + 1
                    End If
                Next
            End If
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyError13("main_LoadRenderCache_ChildBranch")
        End Sub
        '
        '===========================================================================
        '   Populate the root branch
        '===========================================================================
        '
        Private Sub main_LoadRenderCache(PageID As Integer, rootPageId As Integer, RootPageContentName As String, OrderByClause As String, AllowChildPageList As Boolean, AllowReturnLink As Boolean, ArchivePage As Boolean, SectionID As Integer, UseContentWatchLink As Boolean)
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("Proc00371")
            '
            Dim CSSort As Integer
            Dim SortOrder As String
            Dim Ptr As Integer
            Dim ParentID As Integer
            Dim childListSortMethodId As Integer
            '
            'main_oldCacheArray_ParentBranchCount = 0
            'main_oldCacheArray_ChildBranchCount = 0
            'main_oldCacheArray_CurrentPagePtr = -1
            ''
            '' ----- (NEW) Load from cache
            ''
            'main_oldCacheArray_CurrentPagePtr = pageManager_cache_pageContent_getPtr(PageID, main_IsWorkflowRendering, main_RenderCache_CurrentPage_IsQuickEditing)
            '
            ' ----- Load the current page
            '
            Call pageManager_LoadRenderCache_CurrentPage(PageID, PageID, RootPageContentName, ArchivePage, SectionID, UseContentWatchLink)
            '
            If (pageManager_RedirectLink = "") And (main_RenderCache_CurrentPage_PCCPtr > -1) Then
                'If (pageManager_RedirectLink = "") And (main_oldCacheArray_CurrentPagePtr <> -1) Then
                '
                ' ----- Load Parent Branch
                '
                ParentID = EncodeInteger(cache_pageContent(PCC_ParentID, main_RenderCache_CurrentPage_PCCPtr))
                If (Not main_RenderCache_CurrentPage_IsRootPage) Then
                    If ParentID = 0 Then
                        '
                        ' Error, current page is not the root page, but has no parent pages
                        '
                        Call log_appendLogPageNotFound(webServer.requestLinkSource)
                        pageManager_RedirectBecausePageNotFound = True
                        pageManager_RedirectReason = "The page could not be displayed for security reasons. All valid pages must either have a valid parent page, or be selected by a section as the section's root page. This page has neither a parent page or a section."
                        pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID, SectionID)
                    ElseIf ArchivePage Then
                        '
                        ' Archive section parent Branch
                        '
                        Call pageManager_LoadRenderCache_ParentBranch(PageID, rootPageId, RootPageContentName, ArchivePage, "", SectionID, UseContentWatchLink)
                    Else
                        '
                        ' Normal parent Branch
                        '
                        Call pageManager_LoadRenderCache_ParentBranch(PageID, rootPageId, RootPageContentName, ArchivePage, "", SectionID, UseContentWatchLink)
                    End If
                End If
                If pageManager_RedirectLink = "" Then
                    '
                    ' ----- load the child branch
                    '
                    childListSortMethodId = EncodeInteger(cache_pageContent(PCC_ChildListSortMethodID, main_RenderCache_CurrentPage_PCCPtr))
                    SortOrder = db_GetSortMethodByID(childListSortMethodId)
                    If SortOrder = "" Then
                        SortOrder = EncodeText(OrderByClause)
                    End If
                    Call pageManager_LoadRenderCache_ChildBranch(SortOrder, main_RenderCache_CurrentPage_IsRenderingMode, ArchivePage, SectionID, UseContentWatchLink)
                    main_RenderCache_Loaded = True
                End If
            End If
            Exit Sub
            '
ErrorTrap:
            Call handleLegacyError13("main_LoadRenderCache")
        End Sub
        '
        '========================================================================
        '   Returns the HTML body
        '
        '   This code is based on the GoMethod site script
        '========================================================================
        '
        Public Function main_GetHtmlBody() As String
            Dim returnHtmlBody As String = ""
            Try
                '
                Dim AddonReturn As String
                Dim hint As String
                Dim Ptr As Integer
                Dim Cnt As Integer
                Dim layoutError As String
                Dim FilterStatusOK As Boolean
                Dim FilteredBody As String
                Dim BlockFormatting As Boolean
                Dim IndentCnt As Integer
                Dim Result As New coreFastStringClass
                Dim Content As String
                Dim ContentIndent As String
                Dim ContentCnt As Integer
                Dim CS As Integer
                Dim PageContent As String
                Dim Styles As String
                Dim MenuDepth As Integer
                Dim MenuStyle As Integer
                Dim main_ClosePage As String
                Dim MenuStylePrefix As String
                Dim CopyName As String
                Dim Stream As New coreFastStringClass
                Dim LocalTemplateID As Integer
                Dim LocalTemplateName As String
                Dim LocalTemplateBody As String
                Dim LocalTemplateBodySplit() As String
                Dim LocalTemplateBodySplitCnt As Integer
                Dim Segment As String
                Dim SegmentCmd As String
                Dim SegmentCMDName As String
                Dim SegmentCMDSplit() As String
                Dim SegmentCMDArgs As String
                Dim SegmentSuffix As String
                Dim SegmentSplit() As String
                Dim TPMode As Integer
                Dim TPBody As String
                Dim SectionMenu As String
                Dim DefaultTemplateLink As String
                Dim MenuDelimiter As String
                Dim ContentFound As Boolean
                Dim ACFound As Boolean
                Dim Parse As coreHtmlParseClass
                Dim blockSiteWithLogin As Boolean
                '
                Dim addonCachePtr As Integer
                Dim addonId As Integer
                Dim AddonName As String
                '
                'hint = "main_GetHtmlBody"
                Call addonCache.load()
                returnHtmlBody = ""
                '
                ' ----- OnBodyStart add-ons
                '
                'hint = hint & ",onBodyStart"
                FilterStatusOK = False
                Cnt = UBound(addonCache.localCache.onBodyStartPtrs) + 1
                'hint = hint & ",cnt=" & Cnt
                For Ptr = 0 To Cnt - 1
                    addonCachePtr = addonCache.localCache.onBodyStartPtrs(Ptr)
                    'hint = hint & ",ptr=" & Ptr & ",addonCachePtr=" & addonCachePtr
                    If addonCachePtr > -1 Then
                        addonId = addonCache.localCache.addonList(addonCachePtr).addonCache_Id
                        'hint = hint & ",addonId=" & addonId
                        If addonId > 0 Then
                            AddonName = addonCache.localCache.addonList(addonCachePtr).addonCache_name
                            'hint = hint & ",AddonName=" & AddonName
                            returnHtmlBody = returnHtmlBody & executeAddon_legacy2(addonId, "", "", addonContextEnum.ContextOnBodyStart, "", 0, "", "", False, 0, "", FilterStatusOK, Nothing)
                            If Not FilterStatusOK Then
                                Call handleLegacyError12("main_GetHtmlBody", "There was an error processing OnAfterBody [" & addonCache.localCache.addonList(addonCachePtr).addonCache_name & "]. Filtering was aborted.")
                                Exit For
                            End If
                        End If
                    End If
                Next
                '
                ' ----- main_Get Content (Already Encoded)
                '
                blockSiteWithLogin = False
                PageContent = main_GetHtmlBody_GetSection(True, True, False, blockSiteWithLogin)
                If blockSiteWithLogin Then
                    '
                    ' section blocked, just return the login box in the page content
                    '
                    returnHtmlBody = "" _
                        & cr & "<div class=""ccLoginPageCon"">" _
                        & kmaIndent(PageContent) _
                        & cr & "</div>" _
                        & ""
                ElseIf Not docOpen Then
                    '
                    ' exit if stream closed during main_GetSectionpage
                    '
                    returnHtmlBody = ""
                Else
                    '
                    ' no section block, continue
                    '
                    'PageContent = CR & "<!-- Page Content -->" & KmaIndent(main_GetHtmlBody_GetSection(True, True, False)) & CR & "<!-- /Page Content -->"

                    Call pageManager_LoadTemplateGetID(main_RenderedTemplateID)
                    '
                    ' ----- main_Get Template
                    '
                    LocalTemplateID = main_RenderedTemplateID
                    LocalTemplateBody = pageManager_TemplateBody
                    If LocalTemplateBody = "" Then
                        LocalTemplateBody = TemplateDefaultBody
                    End If
                    LocalTemplateName = pageManager_TemplateName
                    If LocalTemplateName = "" Then
                        LocalTemplateName = "Template " & LocalTemplateID
                    End If
                    '
                    ' ----- Encode Template
                    '
                    If Not pageManager_printVersion Then
                        LocalTemplateBody = html_executeContentCommands(Nothing, LocalTemplateBody, addonContextEnum.ContextTemplate, user.id, user.isAuthenticated, layoutError)
                        returnHtmlBody = returnHtmlBody & html_encodeContent9(LocalTemplateBody, user.id, "Page Templates", LocalTemplateID, 0, False, False, True, True, False, True, "", web_requestProtocol & webServer.requestDomain, False, siteProperties.defaultWrapperID, PageContent, addonContextEnum.ContextTemplate)
                        'returnHtmlBody = returnHtmlBody & EncodeContent8(LocalTemplateBody, memberID, "Page Templates", LocalTemplateID, 0, False, False, True, True, False, True, "", main_ServerProtocol, False, app.SiteProperty_DefaultWrapperID, PageContent, ContextTemplate)
                    End If
                    '
                    ' If Content was not found, add it to the end
                    '
                    If (InStr(1, returnHtmlBody, fpoContentBox) <> 0) Then
                        returnHtmlBody = vbReplace(returnHtmlBody, fpoContentBox, PageContent)
                    Else
                        returnHtmlBody = returnHtmlBody & PageContent
                    End If
                    '
                    ' ----- Add tools Panel
                    '
                    If Not user.isAuthenticated() Then
                        '
                        ' not logged in
                        '
                    Else
                        '
                        ' Add template editing
                        '
                        If visitProperty.getBoolean("AllowAdvancedEditor") And user.isEditing("Page Templates") Then
                            returnHtmlBody = main_GetEditWrapper("Page Template [" & LocalTemplateName & "]", main_GetRecordEditLink2("Page Templates", LocalTemplateID, False, LocalTemplateName, user.isEditing("Page Templates")) & returnHtmlBody)
                        End If
                    End If
                    '
                    ' ----- OnBodyEnd add-ons
                    '
                    'hint = hint & ",onBodyEnd"
                    FilterStatusOK = False
                    Cnt = UBound(addonCache.localCache.onBodyEndPtrs) + 1
                    'hint = hint & ",cnt=" & Cnt
                    For Ptr = 0 To Cnt - 1
                        addonCachePtr = addonCache.localCache.onBodyEndPtrs(Ptr)
                        'hint = hint & ",ptr=" & Ptr & ",addonCachePtr=" & addonCachePtr
                        If addonCachePtr > -1 Then
                            addonId = addonCache.localCache.addonList(addonCachePtr).addonCache_Id
                            'hint = hint & ",addonId=" & addonId
                            If addonId > 0 Then
                                AddonName = addonCache.localCache.addonList(addonCachePtr).addonCache_name
                                'hint = hint & ",AddonName=" & AddonName
                                main_FilterInput = main_GetHtmlBody
                                AddonReturn = executeAddon_legacy2(addonId, "", "", addonContextEnum.ContextFilter, "", 0, "", "", False, 0, "", FilterStatusOK, Nothing)
                                returnHtmlBody = main_FilterInput & AddonReturn
                                If Not FilterStatusOK Then
                                    Call handleLegacyError12("main_GetHtmlBody", "There was an error processing OnBodyEnd for [" & AddonName & "]. Filtering was aborted.")
                                    Exit For
                                End If
                            End If
                        End If
                    Next
                    '
                    ' Make it pretty for those who care
                    '
                    If siteProperties.getBoolean("AutoHTMLFormatting") Then
                        IndentCnt = 0
                        Parse = New coreHtmlParseClass(Me)
                        Call Parse.Load(returnHtmlBody)
                        If Parse.ElementCount > 0 Then
                            For Ptr = 0 To Parse.ElementCount - 1
                                If Not Parse.IsTag(Ptr) Then
                                    Content = Parse.Text(Ptr)
                                    If BlockFormatting Then
                                        Result.Add(Content)
                                    Else
                                        If Content <> "" Then
                                            If Trim(Content) <> "" Then
                                                Result.Add(ContentIndent)
                                                ContentIndent = ""
                                            End If
                                            Content = vbReplace(Content, vbCrLf, " ")
                                            Content = vbReplace(Content, vbTab, " ")
                                            Content = vbReplace(Content, vbCr, " ")
                                            Content = vbReplace(Content, vbLf, " ")
                                            Result.Add(Content)
                                            ContentCnt = ContentCnt + 1
                                        End If
                                    End If
                                Else
                                    Select Case vbLCase(Parse.TagName(Ptr))
                                        Case "pre", "script"
                                            '
                                            ' End block formating
                                            '
                                            Result.Add(vbCrLf & Parse.Text(Ptr))
                                            BlockFormatting = True
                                        Case "/pre", "/script"
                                            '
                                            ' end block formating
                                            '
                                            Result.Add(Parse.Text(Ptr) & vbCrLf)
                                            BlockFormatting = False
                                        Case Else
                                            If BlockFormatting Then
                                                '
                                                ' formatting is blocked
                                                '
                                                Result.Add(Parse.Text(Ptr))
                                            Else
                                                '
                                                ' format the tag
                                                '
                                                Select Case vbLCase(Parse.TagName(Ptr))
                                                    Case "p", "h1", "h2", "h3", "h4", "h5", "h6", "li", "br"
                                                        '
                                                        ' new line
                                                        '
                                                        Result.Add(vbCrLf & New String(CChar(vbTab), IndentCnt) & Parse.Text(Ptr))
                                                    Case "div", "td", "table", "tr", "tbody", "ol", "ul", "form"
                                                        '
                                                        ' new line and +indent
                                                        '
                                                        Result.Add(vbCrLf & New String(CChar(vbTab), IndentCnt) & Parse.Text(Ptr))
                                                        IndentCnt = IndentCnt + 1
                                                        ContentIndent = vbCrLf & New String(CChar(vbTab), IndentCnt)
                                                        ContentCnt = 0
                                                    Case "/div", "/td", "/table", "/tr", "/tbody", "/ol", "/ul", "/form"
                                                        '
                                                        ' new line and -indent
                                                        '
                                                        IndentCnt = IndentCnt - 1
                                                        If IndentCnt < 0 Then
                                                            IndentCnt = 0
                                                            '
                                                            ' Add to 'Asset Errors' Table - a merge with Spider Doc Errors
                                                            '
                                                        End If
                                                        If ContentCnt = 0 Then
                                                            Result.Add(Parse.Text(Ptr))
                                                        Else
                                                            Result.Add(vbCrLf & New String(CChar(vbTab), IndentCnt) & Parse.Text(Ptr))
                                                        End If
                                                        ContentCnt = ContentCnt + 1
                                                    Case Else
                                                        '
                                                        ' tag that acts like content
                                                        '
                                                        Content = Parse.Text(Ptr)
                                                        If Content <> "" Then
                                                            Result.Add(ContentIndent & Content)
                                                            ContentIndent = ""
                                                        End If
                                                        ContentCnt = ContentCnt + 1
                                                End Select
                                            End If
                                    End Select
                                End If
                            Next
                            If IndentCnt <> 0 Then
                                '
                                ' Add to 'Asset Errors' Table - a merge with Spider Doc Errors
                                '
                                'Call main_AppendClassErrorLog("cpCoreClass(" & appEnvironment.name & ").GetHTMLBody AutoIndent error. At the end of the document, the last tag was still indented (more start tags than end tags). Link=[" & decodeHtml(main_ServerLink) & "], ")
                            End If
                            returnHtmlBody = Result.Text
                        End If
                    End If
                End If
                '
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return returnHtmlBody
        End Function
        '
        '=============================================================================
        '   main_Get Section
        '       Two modes
        '           pre 3.3.613 - SectionName = RootPageName
        '           else - (IsSectionRootPageIDMode) SectionRecord has a RootPageID field
        '=============================================================================
        '
        Public Function main_GetHtmlBody_GetSection(AllowChildPageList As Boolean, AllowReturnLink As Boolean, AllowEditWrapper As Boolean, ByRef return_blockSiteWithLogin As Boolean) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("main_GetHtmlBody_GetSection")
            '
            Dim returnHtml As String
            '
            Dim UseContentWatchLink As Boolean
            UseContentWatchLink = siteProperties.useContentWatchLink
            Dim test As String
            Dim Copy As String
            Dim allowPageWithoutSectionDislay As Boolean
            Dim pageContentControlId As Integer
            Dim pageContentName As String
            Dim domainIds() As String
            Dim setdomainId As Integer
            Dim linkDomain As String
            Dim templatedomainIdList As String
            Dim FieldRows As Integer
            Dim PCCPtr As Integer
            '
            Dim SecureLink_CurrentURL As Boolean                ' the current page starts https://
            Dim SecureLink_Template_Required As Boolean         ' the template record has 'secure' checked
            Dim SecureLink_Page_Required As Boolean             ' teh page record has 'secure' checked
            Dim SecureLink_Required As Boolean                  ' either the template or the page have secure checked
            '
            Dim templateLink As String                          ' the template record 'link' field
            '
            Dim TCPtr As Integer
            Dim hint As String
            Dim JSFilename As String
            Dim StylesFilename As String
            Dim SharedStylesIDList As String
            Dim ListSplit() As String
            Dim styleId As Integer
            Dim CSPage As Integer
            Dim CSTemplates As Integer
            Dim templateId As Integer
            Dim ParentBranchPointer As Integer
            Dim LinkQueryString As String
            Dim CurrentLink As String
            Dim CurrentLinkNoQuery As String
            Dim LinkSplit() As String
            Dim LandingLink As String
            Dim CS As Integer
            Dim CSSection As Integer
            Dim rootPageId As Integer
            Dim RootPageName As String
            Dim RootPageContentName As String
            Dim SectionContentID As Integer
            Dim SectionTemplateID As Integer
            Dim SectionBlock As Boolean
            Dim PageContentCID As Integer
            Dim PageRow() As String
            Dim PageRowCnt As Integer
            Dim Ptr As Integer
            Dim navStruc() As String
            Dim SectionFieldList As String
            Dim SectionCriteria As String
            Dim SectionName As String
            Dim IsSectionRootPageIDMode As Boolean
            Dim PageID As Integer
            Dim SectionID As Integer
            '
            '
            '
            ' ----- Determine LandingLink
            '
            'hint = "1"
            LandingLink = pageManager_GetLandingLink()
            IsSectionRootPageIDMode = True
            '
            ' Add in JS filename
            '
            SectionFieldList = "ID,Name,ContentID,TemplateID,BlockSection,RootPageID,JSOnLoad,JSHead,JSEndBody,JSFilename"
            '
            '------------------------------------------------------------------------------------
            ' get page and section requests
            '------------------------------------------------------------------------------------
            '
            ' Handle PageID Request Variable
            '
            PageID = docProperties.getInteger("bid")
            If PageID <> 0 Then
                Call web_addRefreshQueryString("bid", CStr(PageID))
            End If
            '
            ' Handle Section ID Request Variable
            '
            SectionID = docProperties.getInteger("sid")
            If SectionID <> 0 Then
                Call web_addRefreshQueryString("sid", CStr(SectionID))
            End If
            '
            '------------------------------------------------------------------------------------
            '   Determine RootPageID, SectionID, SectionContentID, SectionTemplateID
            '       SectionID=0 means deliver the landing page section
            '------------------------------------------------------------------------------------
            '
            If (PageID = 0) And (SectionID = 0) Then
                'hint = "2"
                '
                ' Nothing specified, use the Landing Page
                '
                PageID = main_GetLandingPageID()
                If PageID = 0 Then
                    '
                    ' landing page is not valid -- display error
                    '
                    returnHtml = "<div style=""width:300px; margin: 100px auto auto auto;text-align:center;"">This page is not valid.</div>"
                    Call handleLegacyError12("PagList_GetSection", "Page could not be determined. Error message displayed.")
                End If
            End If
            If (PageID <> 0) Then
                'hint = "3"
                '
                ' ----- PageID Given, determine the section from the pageid
                '
                If pageManager_cache_siteSection_rows = 0 Then
                    Call pageManager_cache_siteSection_load()
                End If
                rootPageId = main_GetHtmlBody_GetSection_GetRootPageId(PageID)
                Ptr = pageManager_cache_siteSection_RootPageIDIndex.getPtr(CStr(rootPageId))
                '
                ' Open Section Record
                '
                If Ptr < 0 Then
                    SectionID = 0
                Else
                    SectionID = EncodeInteger(cache_siteSection(SSC_ID, Ptr))
                    SectionName = EncodeText(cache_siteSection(SSC_Name, Ptr))
                    SectionTemplateID = EncodeInteger(cache_siteSection(SSC_TemplateID, Ptr))
                    SectionContentID = EncodeInteger(cache_siteSection(SSC_ContentID, Ptr))
                    SectionBlock = EncodeBoolean(cache_siteSection(SSC_BlockSection, Ptr))
                    Call main_AddOnLoadJavascript2(EncodeText(cache_siteSection(SSC_JSOnLoad, Ptr)), "site section")
                    Call main_AddHeadScriptCode(EncodeText(cache_siteSection(SSC_JSHead, Ptr)), "site section")
                    Call main_AddEndOfBodyJavascript2(EncodeText(cache_siteSection(SSC_JSEndBody, Ptr)), "site section")
                    JSFilename = EncodeText(cache_siteSection(SSC_JSFilename, Ptr))
                    If JSFilename <> "" Then
                        JSFilename = web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, JSFilename)
                        Call main_AddHeadScriptLink(JSFilename, "site section")
                    End If
                End If
            ElseIf (SectionID <> 0) Then
                'hint = "4"
                '
                ' ----- pageid=0, sectionid OK -- determine the page from the sectionid
                '           main_Get SectionLink -> compare to actual Link -> redirect if mismatch
                '
                If pageManager_cache_siteSection_rows = 0 Then
                    Call pageManager_cache_siteSection_load()
                End If
                Ptr = pageManager_cache_siteSection_IDIndex.getPtr(CStr(SectionID))
                If Ptr < 0 Then
                    '
                    ' Section not found, assume Landing Page
                    '
                    Call log_appendLogPageNotFound(webServer.requestLinkSource)
                    'Call main_LogPageNotFound(main_ServerLink)
                    pageManager_RedirectBecausePageNotFound = True
                    pageManager_RedirectReason = "The page could not be found because the section specified was not found. The section ID is [" & SectionID & "]. This section may have been deleted or marked inactive."
                    pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID, SectionID)
                    Exit Function
                    'SectionID = 0
                Else
                    SectionName = EncodeText(cache_siteSection(SSC_Name, Ptr))
                    rootPageId = EncodeInteger(cache_siteSection(SSC_RootPageID, Ptr))
                    SectionTemplateID = EncodeInteger(cache_siteSection(SSC_TemplateID, Ptr))
                    SectionContentID = EncodeInteger(cache_siteSection(SSC_ContentID, Ptr))
                    SectionBlock = EncodeBoolean(cache_siteSection(SSC_BlockSection, Ptr))
                    Call main_AddOnLoadJavascript2(EncodeText(cache_siteSection(SSC_JSOnLoad, Ptr)), "site section")
                    Call main_AddHeadScriptCode(EncodeText(cache_siteSection(SSC_JSHead, Ptr)), "site section")
                    Call main_AddEndOfBodyJavascript2(EncodeText(cache_siteSection(SSC_JSEndBody, Ptr)), "site section")
                    JSFilename = EncodeText(cache_siteSection(SSC_JSFilename, Ptr))
                    If JSFilename <> "" Then
                        JSFilename = web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, JSFilename)
                        Call main_AddHeadScriptLink(JSFilename, "site section")
                    End If
                End If
                '
                ' Test for new section that needs a new blank page
                '
                If (pageManager_RedirectLink = "") And (SectionID <> 0) Then
                    '
                    ' RootPageID Mode
                    '
                    If (rootPageId = 0) And (main_PageErrorCount = 0) Then
                        '
                        ' Root Page needs to be auto created
                        ' OK to create page here because section has a good record with a 0 RootPageID (this is not AutoHomeCreate)
                        '
                        rootPageId = main_CreatePageGetID(SectionName, "Page Content", SystemMemberID, "")
                        Call db.executeSql("update ccsections set RootPageID=" & rootPageId & " where id=" & SectionID)
                        Call pageManager_cache_siteSection_clear()
                        main_AdminWarning = "<p>This page was created automatically because the section [" & SectionName & "] was requested, and it did not reference a page. Use the links below to edit the new page.</p>"
                        main_AdminWarningPageID = rootPageId
                        main_AdminWarningSectionID = SectionID
                        'Call app.csv_SetCS(CSSection, "RootPageID", RootPageID)
                    End If
                End If
                If (pageManager_RedirectLink = "") And (PageID = 0) And (rootPageId <> 0) Then
                    '
                    ' if no page, set page to the root of the section
                    '
                    PageID = rootPageId
                End If
            End If
            '
            If PageID = 0 Then
                '
                '------------------------------------------------------------------------------------
                ' Problem -- Page could not be determined
                '   2011/06/15 - changes
                '   this should not be a valid case because if the pageid is either given, set by section or set to landingpageid
                '
                '   allow a page that has no section -- so you can preview it, and so you can view any page in the page content
                '       - just display it with the default content
                '       - big change is that we now assume the parent + section was not blocked, before we assumed it was blocked
                '
                '   if pageid=0 at this point then the landing page could not be determined - put up an error message is all you can do
                '
                '   if pageid<>0 and sectionid=0 then the site will just display the default template
                '------------------------------------------------------------------------------------
                '
                Copy = "" _
                    & main_docType _
                    & vbCrLf & "<html>" _
                    & cr & "<body>" _
                    & cr2 & "<p style=""text-align:center;margin-top:100px;"">The page you requested could not be found and no landing page is configured for this domain.</p>" _
                    & cr & "</body>" _
                    & vbCrLf & "</html>" _
                    & ""
                'Call AppendLog("call main_getEndOfBody, from pageManager_getsection")
                Call writeAltBuffer(Copy & main_GetEndOfBody(False, False, False, False))
                Call handleLegacyError12("PagList_GetSection", "The page you requested could not be found and no landing page is configured for this domain [" & main_ServerDomain & "].")
                '--- should be disposed by caller --- Call dispose
                Exit Function
            End If
            '
            If SectionID = 0 Then
                '
                ' Orphan Page -- Section could not be determined
                '
                allowPageWithoutSectionDislay = siteProperties.getBoolean(spAllowPageWithoutSectionDisplay, spAllowPageWithoutSectionDisplay_default)
                allowPageWithoutSectionDislay = True
                Call log_appendLog("hardcoded allowPageWithoutSectionDislay in getHtmlBody_getSection")
                If Not allowPageWithoutSectionDislay Then
                    '
                    ' the rootPageid is used to represent the section record's selection, and is used in main_GetPageRaw to check if the
                    '   pagelist is structured correction
                    '
                    rootPageId = -1
                End If
                If False Then
                    'hint = "5"
                    '
                    ' No section specified, use LandingSection
                    '
                    rootPageId = main_GetLandingPageID()
                    RootPageName = main_GetLandingPageName(rootPageId)
                    If True Then
                        'If IsSectionRootPageIDMode Then
                        '
                        ' Page linked by PageID
                        '
                        SectionName = DefaultLandingSectionName
                        SectionCriteria = "RootPageID=" & rootPageId
                    Else
                        '
                        ' Legacy - Page linked by PageName
                        '
                        SectionName = LegacyLandingPageName
                        SectionCriteria = "Name = " & db.encodeSQLText(SectionName)
                    End If
                    '
                    ' main_Get Landing Section
                    '
                    CSSection = db.csOpen("Site Sections", SectionCriteria, "ID", , ,, , SectionFieldList)
                    '
                    ' try something new - if no landing section, use a "dummy" section with no blocking, etc.
                    '
                    If Not db.cs_Ok(CSSection) Then
                        SectionID = 0
                        SectionName = ""
                        SectionTemplateID = 0
                        SectionContentID = 0
                        SectionBlock = False
                    Else
                        SectionID = db.cs_getInteger(CSSection, "ID")
                        SectionName = db.cs_getText(CSSection, "name")
                        SectionTemplateID = db.cs_getInteger(CSSection, "TemplateID")
                        SectionContentID = db.cs_getInteger(CSSection, "ContentID")
                        SectionBlock = db.cs_getBoolean(CSSection, "BlockSection")
                        Call main_AddOnLoadJavascript2(db.cs_getText(CSSection, "JSOnLoad"), "site section")
                        Call main_AddHeadScriptCode(db.cs_getText(CSSection, "JSHead"), "site section")
                        Call main_AddEndOfBodyJavascript2(db.cs_getText(CSSection, "JSEndBody"), "site section")
                        JSFilename = db.cs_getText(CSSection, "JSFilename")
                        If JSFilename <> "" Then
                            JSFilename = web_requestPage & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, JSFilename)
                            Call main_AddHeadScriptLink(JSFilename, "site section")
                        End If
                    End If
                    Call db.cs_Close(CSSection)
                    '
                    ' ????? if no landing section, lets try a dummy section
                    '
                End If
            End If
            '
            ' Save the SectionID publically to Add-ons can use it (dynamic menuing)
            '
            main_RenderedSectionID = SectionID
            main_RenderedSectionName = SectionName
            '
            '------------------------------------------------------------------------------------
            ' Determine RootPageContentName from SectionContentID
            '------------------------------------------------------------------------------------
            '
            'hint = "5"
            If SectionContentID = 0 And RootPageContentName = "" Then
                RootPageContentName = "Page Content"
                SectionContentID = main_GetContentID(RootPageContentName)
            ElseIf SectionContentID = 0 Then
                SectionContentID = main_GetContentID(RootPageContentName)
            Else
                RootPageContentName = metaData.getContentNameByID(SectionContentID)
            End If
            '
            '------------------------------------------------------------------------------------
            '   main_RefreshQueryString before main_Getting content
            '------------------------------------------------------------------------------------
            '
            '
            ' =========================== PageId, rootPageId, and sectionId are GOOD from this point forward ==========================
            '
            'hint = "6"
            If PageID <> 0 Then
                web_RefreshQueryString = ModifyQueryString(web_RefreshQueryString, "bid", CStr(PageID), True)
                web_RefreshQueryString = ModifyQueryString(web_RefreshQueryString, "sid", "")
            ElseIf SectionID <> 0 Then
                web_RefreshQueryString = ModifyQueryString(web_RefreshQueryString, "bid", "")
                web_RefreshQueryString = ModifyQueryString(web_RefreshQueryString, "sid", CStr(SectionID), True)
            Else
                web_RefreshQueryString = ModifyQueryString(web_RefreshQueryString, "bid", "")
                web_RefreshQueryString = ModifyQueryString(web_RefreshQueryString, "sid", "")
            End If
            '
            '------------------------------------------------------------------------------------
            '   main_Get the Content and Template
            '   main_Get the TemplateID (link,body) from the main_RenderedNavigationStructure (already loaded)
            '------------------------------------------------------------------------------------
            '
            'hint = "7"
            '
            ' ????? if no section, allow a dummy section with id=0
            '
            If pageManager_RedirectLink = "" Then
                If main_isSectionBlocked(SectionID, SectionBlock) Then
                    '
                    ' Fake the meta content call to block the 'head before content' error and block with login panel
                    '
                    return_blockSiteWithLogin = True
                    Call main_SetMetaContent(0, 0)
                    returnHtml = user.getLoginPanel()
                Else
                    '
                    ' main_Get the content
                    ' if QuickEditing, the content comes back with fpo_QuickEditor where content should be because
                    '   at this point we do not know which template it will be displayed on. After template calculate, if fpo_QucikEditor there,
                    '   call the main_GetFormInputHTML and replace it out
                    '
                    returnHtml = main_GetHtmlBody_GetSection_GetContent(PageID, rootPageId, RootPageContentName, "", AllowChildPageList, AllowReturnLink, False, SectionID, UseContentWatchLink, allowPageWithoutSectionDislay)
                    pageManager_TemplateReason = "The reason this template was selected could not be determined."
                    If pageManager_RedirectLink = "" Then
                        '
                        ' ----- Use the structure to Calculate the Template Link from the loaded content
                        '
                        If main_RenderedNavigationStructure = "" Then
                            Call log_appendLogPageNotFound(webServer.requestLinkSource)
                            pageManager_RedirectBecausePageNotFound = True
                            pageManager_RedirectReason = "Redirecting because the page selected could not be found."
                            pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID, SectionID)
                            Exit Function
                        Else
                            test = main_RenderedNavigationStructure
                            If Left(test, 2) = vbCrLf Then
                                test = Mid(test, 3)
                            End If
                            If Right(test, 2) = vbCrLf Then
                                test = Mid(test, 1, Len(test) - 2)
                            End If
                            PageRow = SplitCRLF(test)
                            PageRowCnt = UBound(PageRow) + 1
                            For Ptr = PageRowCnt - 1 To 0 Step -1
                                navStruc = Split(PageRow(Ptr), vbTab)
                                If UBound(navStruc) > 6 Then
                                    If EncodeInteger(navStruc(main_NavStruc_Descriptor)) < main_NavStruc_Descriptor_ChildPage Then
                                        If navStruc(main_NavStruc_TemplateId) <> "0" Then
                                            templateId = EncodeInteger(navStruc(main_NavStruc_TemplateId))
                                            If EncodeInteger(navStruc(main_NavStruc_Descriptor)) = main_NavStruc_Descriptor_CurrentPage Then
                                                pageManager_TemplateReason = "This template was used because it is selected by the current page."
                                            Else
                                                pageManager_TemplateReason = "This template was used because it is selected one of this page's parents."
                                            End If
                                            Exit For
                                        End If
                                    End If
                                End If
                            Next
                        End If
                        If templateId <> 0 Then
                            '
                            ' check for valid template, if the template record has been deleted, it needs to be forgotten
                            '
                            TCPtr = pageManager_cache_pageTemplate_getPtr(templateId)
                            If TCPtr < 0 Then
                                templateId = 0
                            Else
                                main_RenderedTemplateID = EncodeInteger(cache_pageTemplate(TC_ID, TCPtr))
                                main_RenderedTemplateName = EncodeText(cache_pageTemplate(TC_Name, TCPtr))
                            End If
                        End If
                        If templateId = 0 Then
                            '
                            ' try section template
                            '
                            templateId = SectionTemplateID
                            If templateId <> 0 Then
                                TCPtr = pageManager_cache_pageTemplate_getPtr(templateId)
                                If TCPtr < 0 Then
                                    templateId = 0
                                Else
                                    main_RenderedTemplateID = EncodeInteger(cache_pageTemplate(TC_ID, TCPtr))
                                    main_RenderedTemplateName = EncodeText(cache_pageTemplate(TC_Name, TCPtr))
                                    pageManager_TemplateReason = "This template [" & main_RenderedTemplateName & "] was used because it is selected by the current section [" & main_RenderedSectionName & "]."
                                End If
                            End If
                            If (templateId = 0) And (domains.domainDetails.defaultTemplateId <> 0) Then
                                '
                                ' try domain's default template
                                '
                                templateId = domains.domainDetails.defaultTemplateId
                                TCPtr = pageManager_cache_pageTemplate_getPtr(templateId)
                                If TCPtr < 0 Then
                                    templateId = 0
                                Else
                                    main_RenderedTemplateID = EncodeInteger(cache_pageTemplate(TC_ID, TCPtr))
                                    main_RenderedTemplateName = EncodeText(cache_pageTemplate(TC_Name, TCPtr))
                                    pageManager_TemplateReason = "This template [" & main_RenderedTemplateName & "] was used because it is selected as the default template for the current domain [" & main_ServerDomain & "]."
                                End If
                            End If
                            If templateId = 0 Then
                                '
                                ' try the template named 'default'
                                '
                                Call pageManager_cache_pageTemplate_load()
                                For TCPtr = 0 To pageManager_cache_pageTemplate_rows - 1
                                    If vbLCase(EncodeText(cache_pageTemplate(TC_Name, TCPtr))) = "default" Then
                                        templateId = EncodeInteger(cache_pageTemplate(TC_ID, TCPtr))
                                        Exit For
                                    End If
                                Next
                                If TCPtr >= pageManager_cache_pageTemplate_rows Then
                                    TCPtr = -1
                                Else
                                    main_RenderedTemplateID = EncodeInteger(cache_pageTemplate(TC_ID, TCPtr))
                                    main_RenderedTemplateName = EncodeText(cache_pageTemplate(TC_Name, TCPtr))
                                    pageManager_TemplateReason = "This template was used because it is the default template for the site and no other template was selected [" & main_RenderedTemplateName & "]."
                                End If
                            End If
                        End If
                        '
                        ' Set the Template buffers
                        '
                        If TCPtr >= 0 Then
                            If visit_browserIsMobile Then
                                If siteProperties.getBoolean("AllowMobileTemplates") Then
                                    '
                                    ' set Mobile Template
                                    '
                                    pageManager_TemplateBody = EncodeText(cache_pageTemplate(TC_MobileBodyHTML, TCPtr))
                                    If pageManager_TemplateBody <> "" Then
                                        StylesFilename = EncodeText(cache_pageTemplate(TC_MobileStylesFilename, TCPtr))
                                    End If
                                End If
                            End If
                            If pageManager_TemplateBody = "" Then
                                '
                                ' set web template if no other template sets it
                                '
                                pageManager_TemplateBody = EncodeText(cache_pageTemplate(TC_BodyHTML, TCPtr))
                                StylesFilename = EncodeText(cache_pageTemplate(TC_StylesFilename, TCPtr))
                            End If
                            pageManager_TemplateLink = EncodeText(cache_pageTemplate(TC_Link, TCPtr))
                            pageManager_TemplateName = EncodeText(cache_pageTemplate(TC_Name, TCPtr))
                            Call main_AddOnLoadJavascript2(EncodeText(cache_pageTemplate(TC_JSOnLoad, TCPtr)), "template")
                            Call main_AddHeadScriptCode(EncodeText(cache_pageTemplate(TC_JSInHeadLegacy, TCPtr)), "template")
                            Call main_AddEndOfBodyJavascript2(EncodeText(cache_pageTemplate(TC_JSEndBody, TCPtr)), "template")
                            Call main_AddHeadTag2(EncodeText(cache_pageTemplate(TC_OtherHeadTags, TCPtr)), "template")
                            pageManager_TemplateBodyTag = EncodeText(cache_pageTemplate(TC_BodyTag, TCPtr))
                            JSFilename = EncodeText(cache_pageTemplate(TC_JSInHeadFilename, TCPtr))
                            If JSFilename <> "" Then
                                JSFilename = web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, JSFilename)
                                Call main_AddHeadScriptLink(JSFilename, "template")
                            End If
                            '
                            ' Add exclusive styles
                            '
                            If StylesFilename <> "" Then
                                If vbLCase(Right(StylesFilename, 4)) <> ".css" Then
                                    Call handleLegacyError15("Template [" & pageManager_TemplateName & "] StylesFilename is not a '.css' file, and will not display correct. Check that the field is setup as a CSSFile.", "main_GetHtmlBody_GetSection")
                                Else
                                    main_MetaContent_TemplateStyleSheetTag = cr & "<link rel=""stylesheet"" type=""text/css"" href=""" & web_requestProtocol & webServer.requestDomain & csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, StylesFilename) & """ >"
                                End If
                            End If
                            '
                            ' Add shared styles
                            '

                            SharedStylesIDList = EncodeText(cache_pageTemplate(TC_SharedStylesIDList, TCPtr))
                            If SharedStylesIDList <> "" Then
                                ListSplit = Split(SharedStylesIDList, ",")
                                For Ptr = 0 To UBound(ListSplit)
                                    styleId = EncodeInteger(ListSplit(Ptr))
                                    If styleId <> 0 Then
                                        Call main_AddSharedStyleID2(EncodeInteger(ListSplit(Ptr)), "template")
                                    End If
                                Next
                            End If
                        End If
                        ' (*B)
                        templateLink = pageManager_TemplateLink
                        '
                        ' Verify Template Link matches the current page
                        '
                        If pageManager_RedirectLink = "" Then
                            If (TCPtr >= 0) And (siteProperties.allowTemplateLinkVerification) Then
                                PCCPtr = pageManager_cache_pageContent_getPtr(main_RenderedPageID, pagemanager_IsWorkflowRendering, user.isQuickEditing(""))
                                '$$$$$ must check for PPtr<0
                                SecureLink_CurrentURL = (Left(LCase(main_ServerLink), 8) = "https://")
                                SecureLink_Template_Required = EncodeBoolean(cache_pageTemplate(TC_IsSecure, TCPtr))
                                SecureLink_Page_Required = EncodeBoolean(cache_pageContent(PCC_IsSecure, PCCPtr))
                                SecureLink_Required = SecureLink_Template_Required Or SecureLink_Page_Required
                                If (templateLink = "") Then
                                    '
                                    ' ----- no TemplateLink
                                    '       test that current secure settings match the templates secure sectting
                                    '
                                    If (SecureLink_CurrentURL <> SecureLink_Required) Then
                                        '
                                        ' redirect because protocol is wrong
                                        '
                                        If SecureLink_CurrentURL Then
                                            pageManager_RedirectLink = vbReplace(main_ServerLink, "https://", "http://")
                                            pageManager_RedirectReason = "Redirecting because neither the page or the template requires a secure link."
                                        Else
                                            pageManager_RedirectLink = vbReplace(main_ServerLink, "http://", "https://")
                                            If SecureLink_Page_Required Then
                                                pageManager_RedirectReason = "Redirecting because this page [" & main_RenderedPageName & "] requires a secure link."
                                            Else
                                                pageManager_RedirectReason = "Redirecting because this template [" & main_RenderedTemplateName & "] requires a secure link."
                                            End If
                                        End If
                                    End If
                                Else
                                    '
                                    ' ----- TemplateLink given
                                    '
                                    CurrentLink = main_ServerLink
                                    If vbInstr(1, templateLink, "://", vbTextCompare) <> 0 Then
                                        '
                                        ' ----- TemplateLink is full
                                        '       this includes a short template with the secure checked case
                                        '       ignore TC_IsSecure, use the link's protocol
                                        '
                                        LinkSplit = Split(CurrentLink, "?")
                                        CurrentLinkNoQuery = LinkSplit(0)
                                        If (UCase(templateLink) <> vbUCase(CurrentLinkNoQuery)) Then
                                            '
                                            ' redirect to template link
                                            '
                                            pageManager_RedirectLink = pageManager_GetSectionLink(templateLink, PageID, SectionID)
                                            If PageID <> 0 Then
                                                pageManager_RedirectBecausePageNotFound = False
                                                pageManager_RedirectReason = "Redirecting because this template [" & main_RenderedTemplateName & "] is configured to use the link [" & templateLink & "]. This is may be a normal condition." & pageManager_TemplateReason
                                            ElseIf SectionID <> 0 Then
                                                pageManager_RedirectBecausePageNotFound = False
                                                pageManager_RedirectReason = "Redirecting because this template [" & main_RenderedTemplateName & "] is configured to use the link [" & templateLink & "]. This is may be a normal condition." & pageManager_TemplateReason
                                            Else
                                                pageManager_RedirectBecausePageNotFound = False
                                                pageManager_RedirectReason = "Redirecting because this template [" & main_RenderedTemplateName & "] is configured to use the link [" & templateLink & "]. This is may be a normal condition." & pageManager_TemplateReason
                                            End If
                                        End If
                                    Else
                                        '
                                        ' ----- TemplateLink is short
                                        '       test current short link vs template short link, and protocols
                                        '
                                        CurrentLink = vbReplace(CurrentLink, "https://", "http://", 1, 99, vbTextCompare)
                                        CurrentLink = ConvertLinkToShortLink(CurrentLink, webServer.requestDomain, web_requestVirtualFilePath)
                                        CurrentLink = EncodeAppRootPath(CurrentLink, web_requestVirtualFilePath, www_requestRootPath, webServer.requestDomain)
                                        LinkSplit = Split(CurrentLink, "?")
                                        CurrentLinkNoQuery = LinkSplit(0)
                                        If (SecureLink_CurrentURL <> SecureLink_Required) Or (UCase(templateLink) <> vbUCase(CurrentLinkNoQuery)) Then
                                            '
                                            ' This is not the correct page for this content, redirect
                                            ' This is NOT a pagenotfound - but a correctable condition that can not be avoided
                                            ' The pageid has as hard tamplate that must be redirected
                                            '
                                            pageManager_RedirectLink = pageManager_GetPageLink4(PageID, "", True, False)
                                            If SecureLink_Required Then
                                                '
                                                ' Redirect to Secure
                                                '
                                                If vbInstr(1, pageManager_RedirectLink, "http", vbTextCompare) = 1 Then
                                                    '
                                                    ' link is full
                                                    '
                                                    pageManager_RedirectLink = vbReplace(pageManager_RedirectLink, "http://", "https://", 1, 99, vbTextCompare)
                                                Else
                                                    '
                                                    ' link is root relative
                                                    '
                                                    pageManager_RedirectLink = "https://" & webServer.requestDomain & pageManager_RedirectLink
                                                End If
                                            Else
                                                '
                                                ' Redirect to non-Secure
                                                '
                                                If vbInstr(1, pageManager_RedirectLink, "http", vbTextCompare) = 1 Then
                                                    '
                                                    ' link is full
                                                    '
                                                    pageManager_RedirectLink = vbReplace(pageManager_RedirectLink, "https://", "http://", 1, 99, vbTextCompare)
                                                Else
                                                    '
                                                    ' link is root relative
                                                    '
                                                    pageManager_RedirectLink = "http://" & webServer.requestDomain & pageManager_RedirectLink
                                                End If
                                            End If
                                            'pageManager_RedirectLink = pageManager_GetSectionLink(TemplateLink, PageID, SectionID)
                                            pageManager_RedirectBecausePageNotFound = False
                                            pageManager_RedirectReason = "Redirecting because this template [" & main_RenderedTemplateName & "] is configured to use the link [" & templateLink & "]. This is may be a normal condition." & pageManager_TemplateReason
                                        End If
                                    End If
                                End If
                                '
                                ' check template domain requirements
                                '
                                If pageManager_RedirectLink = "" Then
                                    templatedomainIdList = EncodeText(cache_pageTemplate(TC_DomainIdList, TCPtr))
                                    If (domains.domainDetails.id = 0) Then
                                        '
                                        ' current domain not recognized or default, use current
                                        '
                                    ElseIf (templatedomainIdList = "") Then
                                        '
                                        ' current template has no domain preference, use current
                                        '
                                    ElseIf (InStr(1, "," & templatedomainIdList & ",", "," & domains.domainDetails.id & ",") <> 0) Then
                                        '
                                        ' current domain is in the allowed domains list for this template, use it
                                        '
                                    Else
                                        '
                                        ' must redirect to a new template
                                        '
                                        domainIds = Split(templatedomainIdList, ",")
                                        For Ptr = 0 To UBound(domainIds)
                                            setdomainId = EncodeInteger(domainIds(Ptr))
                                            If setdomainId <> 0 Then
                                                Exit For
                                            End If
                                        Next
                                        linkDomain = main_GetRecordName("domains", setdomainId)
                                        If linkDomain <> "" Then
                                            pageManager_RedirectLink = vbReplace(main_ServerLink, "://" & webServer.requestDomain, "://" & linkDomain, 1, 99, vbTextCompare)
                                            pageManager_RedirectBecausePageNotFound = False
                                            pageManager_RedirectReason = "Redirecting because this template [" & main_RenderedTemplateName & "] requires a different domain [" & linkDomain & "]." & pageManager_TemplateReason
                                        End If
                                    End If
                                End If
                            End If
                        End If
                    End If
                    '
                    ' if fpo_QuickEdit it there, replace it out
                    '
                    Dim Editor As String
                    Dim styleList As String
                    Dim styleOptionList As String
                    Dim addonListJSON As String

                    If pageManager_RedirectLink = "" And (InStr(1, returnHtml, pageManager_quickEdit_fpo) <> 0) Then
                        FieldRows = EncodeInteger(properties_user_getText("Page Content.copyFilename.PixelHeight", "500"))
                        If FieldRows < 50 Then
                            FieldRows = 50
                            Call userProperty.setProperty("Page Content.copyFilename.PixelHeight", 50)
                        End If
                        styleList = main_GetStyleSheet2(csv_contentTypeEnum.contentTypeWeb, templateId, 0)
                        addonListJSON = main_GetEditorAddonListJSON(csv_contentTypeEnum.contentTypeWeb)
                        Editor = html_GetFormInputHTML3("copyFilename", pageManager_quickEdit_copy, CStr(FieldRows), "100%", False, True, addonListJSON, styleList, styleOptionList)
                        returnHtml = vbReplace(returnHtml, pageManager_quickEdit_fpo, Editor)
                    End If
                End If
            End If
            '
            '------------------------------------------------------------------------------------
            ' Add admin warning to the top of the content
            '------------------------------------------------------------------------------------
            '
            'hint = "8"
            If user.isAuthenticatedAdmin() And main_AdminWarning <> "" Then
                '
                ' Display Admin Warnings with Edits for record errors
                '
                If main_AdminWarningPageID <> 0 Then
                    main_AdminWarning = main_AdminWarning & "</p>" & main_GetRecordEditLink2("Page Content", main_AdminWarningPageID, True, "Page " & main_AdminWarningPageID, user.isAuthenticatedAdmin()) & "&nbsp;Edit the page<p>"
                    main_AdminWarningPageID = 0
                End If
                '
                If main_AdminWarningSectionID <> 0 Then
                    main_AdminWarning = main_AdminWarning & "</p>" & main_GetRecordEditLink2("Site Sections", main_AdminWarningSectionID, True, "Section " & main_AdminWarningSectionID, user.isAuthenticatedAdmin()) & "&nbsp;Edit the section<p>"
                    main_AdminWarningSectionID = 0
                End If
                returnHtml = "" _
                    & main_GetAdminHintWrapper(main_AdminWarning) _
                    & returnHtml _
                    & ""
                main_AdminWarning = ""
            End If
            '
            '------------------------------------------------------------------------------------
            ' handle redirect and edit wrapper
            '------------------------------------------------------------------------------------
            '
            If pageManager_RedirectLink <> "" Then
                Call web_Redirect2(pageManager_RedirectLink, pageManager_RedirectReason, pageManager_RedirectBecausePageNotFound)
            ElseIf AllowEditWrapper Then
                returnHtml = main_GetEditWrapper("Page Content", returnHtml)
            End If
            '
            main_GetHtmlBody_GetSection = returnHtml
            '
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("main_GetHtmlBody_GetSection, Hint=" & hint)
        End Function
        ''
        ''
        ''
        Private Function main_GetHtmlBody_GetSection_GetRootPageId(ByVal PageID As Integer, Optional ByVal UsedIDString As String = "") As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("main_GetHtmlBody_GetSection_GetRootPageId")
            '
            Dim CS As Integer
            Dim ParentID As Integer
            Dim PageFound As Boolean
            Dim Ptr As Integer
            Dim rootPageId As Integer
            '
            If (PageID = 0) Or IsInDelimitedString(UsedIDString, CStr(PageID), ",") Then
                rootPageId = PageID
            Else
                If pageManager_cache_pageContent_rows = 0 Then
                    Call pageManager_cache_pageContent_load(pagemanager_IsWorkflowRendering, user.isQuickEditing(""))
                End If
                Ptr = pageManager_cache_pageContent_idIndex.getPtr(CStr(PageID))
                If Ptr >= 0 Then
                    PageFound = True
                    ParentID = EncodeInteger(cache_pageContent(PCC_ParentID, Ptr))
                End If
                If PageFound Then
                    If ParentID = 0 Then
                        rootPageId = PageID
                    Else
                        '
                        ' This one has a parent, look it up
                        '
                        rootPageId = main_GetHtmlBody_GetSection_GetRootPageId(ParentID, UsedIDString & "," & CStr(PageID))
                    End If
                End If
            End If
            '
            main_GetHtmlBody_GetSection_GetRootPageId = rootPageId
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyError13("main_GetHtmlBody_GetSection_GetRootPageId")
        End Function
        '
        '=============================================================================
        '   main_GetHtmlBody_GetSection_GetContent
        '
        '   PageID is the page to display. If it is 0, the root page is displayed
        '   RootPageID has to be the ID of the root page for PageID
        '=============================================================================
        '
        Public Function main_GetHtmlBody_GetSection_GetContent(PageID As Integer, rootPageId As Integer, RootPageContentName As String, OrderByClause As String, AllowChildPageList As Boolean, AllowReturnLink As Boolean, ArchivePages As Boolean, SectionID As Integer, UseContentWatchLink As Boolean, allowPageWithoutSectionDisplay As Boolean) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("main_GetHtmlBody_GetSection_GetContent")
            '
            Dim ParentPtr As Integer
            Dim returnHtml As String
            Dim AddonName As String
            Dim addonCachePtr As Integer
            Dim addonPtr As Integer
            Dim AddOnCnt As Integer
            Dim layoutError As String
            Dim addonId As Integer
            Dim AddonContent As String
            Dim Err_Number As Integer
            Dim Err_Source As String
            Dim Err_Description As String
            Dim DateModified As Date
            Dim ErrString As String
            Dim JSOnLoad As String
            Dim JSHead As String
            Dim JSFilename As String
            Dim JSCopy As String
            Dim JSEndBody As String
            Dim PageRecordID As Integer
            Dim ContentPadding As Integer
            Dim Copy As String
            Dim RQS As String
            Dim Body As String
            Dim PageName As String
            Dim AllowHitNotification As Boolean
            'Dim cacheName As String
            Dim RootPageContentCID As Integer
            Dim PageContentCID As Integer
            Dim DateExpires As Date
            Dim dateArchive As Date
            Dim BakeExpires As Date
            Dim iRootPageContentName As String
            Dim PubDate As Date
            Dim PagePointer As Integer
            Dim CS As Integer
            Dim LineBuffer As String
            Dim LineSplit() As String
            'Dim RecordID as integer
            'Dim ContentID as integer
            'Dim ContentName As String
            Dim BlockedRecordIDList As String
            Dim Pointer As Integer
            Dim SQL As String
            Dim ContentBlocked As Boolean
            Dim RecordCount As Integer
            Dim RecordSplit() As String
            Dim BakeHeader As String
            Dim Delimiter As String
            Dim BakedStructure As String
            'Dim AuthoringMode As Boolean
            Dim NewPageCreated As Boolean
            Dim LineLeft As String
            Dim LineRight As String
            Dim LinePosition As Integer
            Dim SelectFieldList As String
            'dim buildversion As String
            Dim contactMemberID As Integer
            Dim BakeVersion As String
            'Dim AllowPageBaking As Boolean
            Dim SystemEMailID As Integer
            Dim ConditionID As Integer
            Dim ConditionGroupID As Integer
            Dim main_AddGroupID As Integer
            Dim RemoveGroupID As Integer
            Dim BlockSourceID As Integer
            Dim RegistrationGroupID As Integer
            Dim CustomBlockMessageFilename As String
            Dim BlockedPages() As String
            Dim BlockedPageRecordID As Integer
            Dim BlockForm As String
            Dim BlockCopy As String
            Dim PCCPtr As Integer
            Dim pageViewings As Integer
            '
            ' BuildVersion = app.dataBuildVersion
            '
            ' If no PageRecordID, use the RootPage
            '
            PageRecordID = PageID
            If PageRecordID = 0 Then
                PageRecordID = rootPageId
            End If
            If PageRecordID = 0 Then
                '
                ' no page and no root page, redirect to landing page
                '
                Call log_appendLogPageNotFound(webServer.requestLinkSource)
                pageManager_RedirectBecausePageNotFound = True
                pageManager_RedirectReason = "The page could not be determined from URL."
                pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID, SectionID)
            Else
                '
                ' PageRecordID and RootPageID are good
                '
                Call main_AddHeadTag2("<meta name=""contentId"" content=""" & PageRecordID & """ >", "page content")
                '
                'main_oldCacheArray_CurrentPagePtr = -1
                If RootPageContentName = "" Then
                    iRootPageContentName = "Page Content"
                Else
                    iRootPageContentName = RootPageContentName
                End If
                RootPageContentCID = main_GetContentID(iRootPageContentName)
                '
                '---------------------------------------------------------------------------------
                ' ----- Build Page if needed
                '---------------------------------------------------------------------------------
                '
                returnHtml = main_GetHtmlBody_GetSection_GetContentBox(PageRecordID, rootPageId, iRootPageContentName, OrderByClause, AllowChildPageList, AllowReturnLink, ArchivePages, SectionID, UseContentWatchLink, allowPageWithoutSectionDisplay)
                If (returnHtml <> "") And (pageManager_RedirectLink = "") Then
                    '
                    ' This page is correct, main_Get the RecordID for later
                    '
                    NewPageCreated = True
                    BlockedRecordIDList = ""
                    If main_RenderCache_CurrentPage_PCCPtr >= 0 Then
                        '
                        ' Build the BlockedRecordIDList
                        '
                        PCCPtr = main_RenderCache_CurrentPage_PCCPtr
                        If EncodeBoolean(cache_pageContent(PCC_BlockContent, PCCPtr)) Or EncodeBoolean(cache_pageContent(PCC_BlockPage, PCCPtr)) Then
                            BlockedRecordIDList = BlockedRecordIDList & "," & EncodeText(cache_pageContent(PCC_ID, PCCPtr))
                        End If
                        If main_RenderCache_ParentBranch_PCCPtrCnt > 0 Then
                            For ParentPtr = 0 To main_RenderCache_ParentBranch_PCCPtrCnt - 1
                                PCCPtr = EncodeInteger(main_RenderCache_ParentBranch_PCCPtrs(ParentPtr))
                                If EncodeBoolean(cache_pageContent(PCC_BlockContent, PCCPtr)) Or EncodeBoolean(cache_pageContent(PCC_BlockPage, PCCPtr)) Then
                                    BlockedRecordIDList = BlockedRecordIDList & "," & EncodeText(cache_pageContent(PCC_ID, PCCPtr))
                                End If
                            Next
                        End If
                        If BlockedRecordIDList <> "" Then
                            BlockedRecordIDList = Mid(BlockedRecordIDList, 2)
                        End If
                    End If
                End If
                '
                JSOnLoad = EncodeText(cache_pageContent(PCC_JSOnLoad, main_RenderCache_CurrentPage_PCCPtr))
                JSHead = EncodeText(cache_pageContent(PCC_JSHead, main_RenderCache_CurrentPage_PCCPtr))
                JSFilename = EncodeText(cache_pageContent(PCC_JSFilename, main_RenderCache_CurrentPage_PCCPtr))
                JSEndBody = EncodeText(cache_pageContent(PCC_JSEndBody, main_RenderCache_CurrentPage_PCCPtr))
                DateModified = EncodeDate(cache_pageContent(PCC_ModifiedDate, main_RenderCache_CurrentPage_PCCPtr))
                '
                ' Save main_RenderedNavigationStructure in the Legacy Name
                '
                main_ContentPageStructure = main_RenderedNavigationStructure
                '
                '---------------------------------------------------------------------------------
                ' ----- If Link field populated, do redirect
                '---------------------------------------------------------------------------------
                '
                Dim Link As String
                If (pageManager_RedirectLink = "") Then
                    Link = EncodeText(cache_pageContent(PCC_Link, main_RenderCache_CurrentPage_PCCPtr))
                    If (Link <> "") Then
                        Call db.executeSql("update ccpagecontent set clicks=clicks+1 where id=" & main_RenderedPageID)
                        pageManager_RedirectLink = Link
                        pageManager_RedirectReason = "Redirect required because this page (PageRecordID=" & main_RenderedPageID & ") has a Link Override [" & pageManager_RedirectLink & "]."
                    End If
                End If
                '
                '---------------------------------------------------------------------------------
                ' ----- If Redirect, exit now
                '---------------------------------------------------------------------------------
                '
                If pageManager_RedirectLink <> "" Then
                    Exit Function
                End If
                '
                '---------------------------------------------------------------------------------
                ' ----- Content Blocking
                '---------------------------------------------------------------------------------
                '
                If (BlockedRecordIDList <> "") Then
                    If user.isAuthenticatedAdmin() Then
                        '
                        ' Administrators are never blocked
                        '
                    ElseIf (Not user.isAuthenticated()) Then
                        '
                        ' non-authenticated are always blocked
                        '
                        ContentBlocked = True
                    Else
                        '
                        ' Check Access Groups, if in access groups, remove group from BlockedRecordIDList
                        '
                        SQL = "SELECT DISTINCT ccPageContentBlockRules.RecordID" _
                            & " FROM (ccPageContentBlockRules" _
                            & " LEFT JOIN ccgroups ON ccPageContentBlockRules.GroupID = ccgroups.ID)" _
                            & " LEFT JOIN ccMemberRules ON ccgroups.ID = ccMemberRules.GroupID" _
                            & " WHERE (((ccMemberRules.MemberID)=" & db.encodeSQLNumber(user.id) & ")" _
                            & " AND ((ccPageContentBlockRules.RecordID) In (" & BlockedRecordIDList & "))" _
                            & " AND ((ccPageContentBlockRules.Active)<>0)" _
                            & " AND ((ccgroups.Active)<>0)" _
                            & " AND ((ccMemberRules.Active)<>0)" _
                            & " AND ((ccMemberRules.DateExpires) Is Null Or (ccMemberRules.DateExpires)>" & db.encodeSQLDate(main_PageStartTime) & "));"
                        CS = db.cs_openSql(SQL)
                        BlockedRecordIDList = "," & BlockedRecordIDList
                        Do While db.cs_Ok(CS)
                            BlockedRecordIDList = vbReplace(BlockedRecordIDList, "," & db.cs_getText(CS, "RecordID"), "")
                            db.db_csGoNext(CS)
                        Loop
                        Call db.cs_Close(CS)
                        If BlockedRecordIDList <> "" Then
                            '
                            ' ##### remove the leading comma
                            BlockedRecordIDList = Mid(BlockedRecordIDList, 2)
                            ' Check the remaining blocked records against the members Content Management
                            ' ##### removed hardcoded mistakes from the sql
                            SQL = "SELECT DISTINCT ccPageContent.ID as RecordID" _
                                & " FROM ((ccPageContent" _
                                & " LEFT JOIN ccGroupRules ON ccPageContent.ContentControlID = ccGroupRules.ContentID)" _
                                & " LEFT JOIN ccgroups AS ManagementGroups ON ccGroupRules.GroupID = ManagementGroups.ID)" _
                                & " LEFT JOIN ccMemberRules AS ManagementMemberRules ON ManagementGroups.ID = ManagementMemberRules.GroupID" _
                                & " WHERE (((ccPageContent.ID) In (" & BlockedRecordIDList & "))" _
                                & " AND ((ccGroupRules.Active)<>0)" _
                                & " AND ((ManagementGroups.Active)<>0)" _
                                & " AND ((ManagementMemberRules.Active)<>0)" _
                                & " AND ((ManagementMemberRules.DateExpires) Is Null Or (ManagementMemberRules.DateExpires)>" & db.encodeSQLDate(main_PageStartTime) & ")" _
                                & " AND ((ManagementMemberRules.MemberID)=" & user.id & " ));"
                            CS = db.cs_openSql(SQL)
                            Do While db.cs_Ok(CS)
                                BlockedRecordIDList = vbReplace(BlockedRecordIDList, "," & db.cs_getText(CS, "RecordID"), "")
                                db.db_csGoNext(CS)
                            Loop
                            Call db.cs_Close(CS)
                        End If
                        If BlockedRecordIDList <> "" Then
                            ContentBlocked = True
                        End If
                        Call db.cs_Close(CS)
                    End If
                End If
                '
                '
                '
                If ContentBlocked Then
                    BlockSourceID = main_BlockSourceDefaultMessage
                    ContentPadding = 20
                    BlockedPages = Split(BlockedRecordIDList, ",")
                    BlockedPageRecordID = EncodeInteger(BlockedPages(UBound(BlockedPages)))
                    If True Then
                        If BlockedPageRecordID <> 0 Then
                            '$$$$$ cache this
                            CS = db_csOpen("Page Content", BlockedPageRecordID, , , "CustomBlockMessage,BlockSourceID,RegistrationGroupID,ContentPadding")
                            If db.cs_Ok(CS) Then
                                BlockSourceID = db.cs_getInteger(CS, "BlockSourceID")
                                ContentPadding = db.cs_getInteger(CS, "ContentPadding")
                                CustomBlockMessageFilename = db.cs_getText(CS, "CustomBlockMessage")
                                RegistrationGroupID = db.cs_getInteger(CS, "RegistrationGroupID")
                            End If
                            Call db.cs_Close(CS)
                        End If
                    End If
                    '
                    ' Block Appropriately
                    '
                    Select Case BlockSourceID
                        Case main_BlockSourceCustomMessage
                            '
                            ' ----- Custom Message
                            '
                            returnHtml = cdnFiles.readFile(CustomBlockMessageFilename)
                        Case main_BlockSourceLogin
                            '
                            ' ----- Login page
                            '
                            If Not user.isAuthenticated() Then
                                If Not user.isRecognized() Then
                                    '
                                    ' not recognized
                                    '
                                    BlockCopy = "" _
                                        & "<p>This content has limited access. If you have an account, please login using this form.</p>" _
                                        & ""
                                    BlockForm = user.getLoginForm()
                                Else
                                    '
                                    ' recognized, not authenticated
                                    '
                                    BlockCopy = "" _
                                        & "<p>This content has limited access. You were recognized as ""<b>" & user.name & "</b>"", but you need to login to continue. To login to this account or another, please use this form.</p>" _
                                        & ""
                                    BlockForm = user.getLoginForm()
                                End If
                            Else
                                '
                                ' authenticated
                                '
                                BlockCopy = "" _
                                    & "<p>You are currently logged in as ""<b>" & user.name & "</b>"". If this is not you, please <a href=""?" & web_RefreshQueryString & "&method=logout"" rel=""nofollow"">Click Here</a>.</p>" _
                                    & "<p>This account does not have access to this content. If you want to login with a different account, please use this form.</p>" _
                                    & ""
                                BlockForm = user.getLoginForm()
                            End If
                            returnHtml = "" _
                                & "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%""><tr><td align=center>" _
                                & "<div style=""width:400px;text-align:left;"">" _
                                & error_GetUserError() _
                                & BlockCopy _
                                & BlockForm _
                                & "</div></td></tr></table>"
                        Case main_BlockSourceRegistration
                            '
                            ' ----- Registration
                            '
                            If docProperties.getInteger("subform") = main_BlockSourceLogin Then
                                '
                                ' login subform form
                                '
                                BlockForm = user.getLoginForm()
                                BlockCopy = "" _
                                    & "<p>This content has limited access. If you have an account, please login using this form.</p>" _
                                    & "<p>If you do not have an account, <a href=?" & web_RefreshQueryString & "&subform=0>click here to register</a>.</p>" _
                                    & ""
                            Else
                                '
                                ' Register Form
                                '
                                If Not user.isAuthenticated() And user.isRecognized() Then
                                    '
                                    ' Can not take the chance, if you go to a registration page, and you are recognized but not auth -- logout first
                                    '
                                    Call user.logout()
                                End If
                                If Not user.isAuthenticated() Then
                                    '
                                    ' Not Authenticated
                                    '
                                    BlockCopy = "" _
                                        & "<p>This content has limited access. If you have an account, <a href=?" & web_RefreshQueryString & "&subform=" & main_BlockSourceLogin & ">Click Here to login</a>.</p>" _
                                        & "<p>To view this content, please complete this form.</p>" _
                                        & ""
                                Else
                                    BlockCopy = "" _
                                        & "<p>You are currently logged in as ""<b>" & user.name & "</b>"". If this is not you, please <a href=""?" & web_RefreshQueryString & "&method=logout"" rel=""nofollow"">Click Here</a>.</p>" _
                                        & "<p>This account does not have access to this content. To view this content, please complete this form.</p>" _
                                        & ""
                                End If
                                '
                                If False Then '.3.551" Then
                                    '
                                    ' Old Db - use Joinform
                                    '
                                    'BlockForm = main_GetJoinForm()
                                Else
                                    '
                                    ' Use Registration FormPage
                                    '
                                    Call main_VerifyRegistrationFormPage()
                                    BlockForm = pageManager_GetFormPage("Registration Form", RegistrationGroupID)
                                End If
                            End If
                            returnHtml = "" _
                                & "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%""><tr><td align=center>" _
                                & "<div style=""width:400px;text-align:left;"">" _
                                & error_GetUserError() _
                                & BlockCopy _
                                & BlockForm _
                                & "</div></td></tr></table>"
                        Case Else
                            '
                            ' ----- Content as blocked - convert from site property to content page
                            '
                            returnHtml = pageManager_GetDefaultBlockMessage(UseContentWatchLink)
                    End Select
                    '
                    ' If the output is blank, put default message in
                    '
                    If returnHtml = "" Then
                        returnHtml = pageManager_GetDefaultBlockMessage(UseContentWatchLink)
                    End If
                    '
                    ' Encode the copy
                    '
                    returnHtml = html_executeContentCommands(Nothing, returnHtml, addonContextEnum.ContextPage, user.id, user.isAuthenticated, layoutError)
                    returnHtml = html_encodeContent9(returnHtml, user.id, main_RenderCache_CurrentPage_ContentName, PageRecordID, contactMemberID, False, False, True, True, False, True, "", "http://" & webServer.requestDomain, False, siteProperties.defaultWrapperID, "", addonContextEnum.ContextPage)
                    'returnHtml = main_EncodeContent5(returnHtml, memberID, main_RenderCache_CurrentPage_ContentName, PageRecordID, 0, False, False, True, True, False, True, "", "", False, app.SiteProperty_DefaultWrapperID)
                    RQS = web_RefreshQueryString
                    If RQS <> "" Then
                        returnHtml = vbReplace(returnHtml, "?method=login", "?method=Login&" & RQS, 1, 99, vbTextCompare)
                    End If
                    '
                    ' Add in content padding required for integration with the template
                    '
                    returnHtml = pageManager_GetContentBoxWrapper(returnHtml, ContentPadding)
                End If
                '
                '---------------------------------------------------------------------------------
                ' ----- Encoding, Tracking and Triggers
                '---------------------------------------------------------------------------------
                '
                '????? test triggers and trackcontentset
                If Not ContentBlocked Then
                    'IsPrinterversion = main_GetStreamText2(RequestNameInterceptpage) = LegacyInterceptPageSNPrinterversion)
                    If visitProperty.getBoolean("AllowQuickEditor") Then
                        '
                        ' Quick Editor, no encoding or tracking
                        '
                    Else
                        ' $$$$$ convert to pcc cache
                        'SelectFieldList = "ID,Viewings,ContentControlID,ContactMemberID,AllowHitNotification,TriggerSendSystemEmailID,TriggerConditionID,TriggerConditionGroupID,TriggerAddGroupID,TriggerRemoveGroupID"
                        '                If (main_RenderedPageID <> 0) And (main_RenderCache_CurrentPage_ContentId <> 0) Then
                        '                    'pageManager_ContentName = metaData.getContentNameByID(main_RenderCache_CurrentPage_ContentId)
                        '                    If main_RenderCache_CurrentPage_ContentName = "" Then
                        '                        main_RenderCache_CurrentPage_ContentName = iRootPageContentName
                        '                    End If
                        '                    If main_RenderCache_CurrentPage_ContentName <> "" Then
                        '                        CS = main_OpenCSContentRecord_Internal(main_RenderCache_CurrentPage_ContentName, main_RenderedPageID, , , SelectFieldList)
                        '                    End If
                        '                ElseIf (main_RenderCache_CurrentPage_ContentName <> "") Then
                        '                    CS = main_OpenCSContentRecord_Internal(main_RenderCache_CurrentPage_ContentName, PageRecordID, , , SelectFieldList)
                        '                End If
                        'If app.csv_IsCSOK(CS) Then
                        contactMemberID = EncodeInteger(cache_pageContent(PCC_ContactMemberID, main_RenderCache_CurrentPage_PCCPtr))
                        pageViewings = EncodeInteger(cache_pageContent(PCC_Viewings, main_RenderCache_CurrentPage_PCCPtr))
                        'contactMemberID = app.csv_GetCSInteger(CS, "ContactMemberID")
                        If user.isEditing(main_RenderCache_CurrentPage_ContentName) Or visitProperty.getBoolean("AllowWorkflowRendering") Then
                            '
                            ' Link authoring, workflow rendering -> do encoding, but no tracking
                            '
                            returnHtml = html_executeContentCommands(Nothing, returnHtml, addonContextEnum.ContextPage, user.id, user.isAuthenticated, layoutError)
                            returnHtml = html_encodeContent9(returnHtml, user.id, main_RenderCache_CurrentPage_ContentName, PageRecordID, contactMemberID, False, False, True, True, False, True, "", "http://" & webServer.requestDomain, False, siteProperties.defaultWrapperID, "", addonContextEnum.ContextPage)
                        ElseIf pageManager_printVersion Then
                            '
                            ' Printer Version -> personalize and count viewings, no tracking
                            '
                            returnHtml = html_executeContentCommands(Nothing, returnHtml, addonContextEnum.ContextPage, user.id, user.isAuthenticated, layoutError)
                            returnHtml = html_encodeContent9(returnHtml, user.id, main_RenderCache_CurrentPage_ContentName, PageRecordID, contactMemberID, False, False, True, True, False, True, "", "http://" & webServer.requestDomain, False, siteProperties.defaultWrapperID, "", addonContextEnum.ContextPage)
                            'returnHtml = main_EncodeContent5(returnHtml, memberID, main_RenderCache_CurrentPage_ContentName, PageRecordID, contactMemberID, False, False, True, True, False, True, "", "", False, app.SiteProperty_DefaultWrapperID)
                            Call db.executeSql("update ccpagecontent set viewings=" & (pageViewings + 1) & " where id=" & main_RenderedPageID)
                            'Call app.csv_SetCS(CS, "Viewings", app.csv_GetCSInteger(CS, "Viewings") + 1)
                        Else
                            '
                            ' Live content
                            '
                            '!!!!!!!!!!!!!!!!!!!!!!!!
                            ' this should be done before the contentbox is added
                            ' so a stray blocktext does not truncate the html
                            '!!!!!!!!!!!!!!!!!!!!!!!!!
                            returnHtml = html_executeContentCommands(Nothing, returnHtml, addonContextEnum.ContextPage, user.id, user.isAuthenticated, layoutError)
                            returnHtml = html_encodeContent9(returnHtml, user.id, main_RenderCache_CurrentPage_ContentName, PageRecordID, contactMemberID, False, False, True, True, False, True, "", "http://" & webServer.requestDomain, False, siteProperties.defaultWrapperID, "", addonContextEnum.ContextPage)
                            'returnHtml = main_EncodeContent5(returnHtml, memberID, main_RenderCache_CurrentPage_ContentName, PageRecordID, contactMemberID, False, False, True, True, False, True, "", "", False, app.SiteProperty_DefaultWrapperID)
                            'Call main_TrackContent(main_RenderCache_CurrentPage_ContentName, main_RenderedPageID)
                            'Call main_TrackContentSet(CS)
                            Call db.executeSql("update ccpagecontent set viewings=" & (pageViewings + 1) & " where id=" & main_RenderedPageID)
                            'Call app.csv_SetCS(CS, "Viewings", app.csv_GetCSInteger(CS, "Viewings") + 1)
                        End If
                        '
                        ' Page Hit Notification
                        '
                        If (Not visit_excludeFromAnalytics) And (contactMemberID <> 0) And (InStr(1, webServer.requestBrowser, "kmahttp", vbTextCompare) = 0) Then
                            AllowHitNotification = EncodeBoolean(cache_pageContent(PCC_AllowHitNotification, main_RenderCache_CurrentPage_PCCPtr))
                            'AllowHitNotification = app.csv_GetCSBoolean(CS, "AllowHitNotification")
                            If AllowHitNotification Then
                                PageName = EncodeText(cache_pageContent(PCC_Name, main_RenderCache_CurrentPage_PCCPtr))
                                If PageName = "" Then
                                    PageName = EncodeText(cache_pageContent(PCC_MenuHeadline, main_RenderCache_CurrentPage_PCCPtr))
                                    If PageName = "" Then
                                        PageName = EncodeText(cache_pageContent(PCC_Headline, main_RenderCache_CurrentPage_PCCPtr))
                                        If PageName = "" Then
                                            PageName = "[no name]"
                                        End If
                                    End If
                                End If
                                Body = Body & "<p><b>Page Hit Notification.</b></p>"
                                Body = Body & "<p>This email was sent to you by the Contensive Server as a notification of the following content viewing details.</p>"
                                Body = Body & StartTable(4, 1, 1)
                                Body = Body & "<tr><td align=""right"" width=""150"" Class=""ccPanelHeader"">Description<br><img alt=""image"" src=""http://" & webServer.requestDomain & "/ccLib/images/spacer.gif"" width=""150"" height=""1""></td><td align=""left"" width=""100%"" Class=""ccPanelHeader"">Value</td></tr>"
                                Body = Body & main_GetHtmlBody_GetSection_GetContent_GetTableRow("Domain", main_ServerDomain, True)
                                Body = Body & main_GetHtmlBody_GetSection_GetContent_GetTableRow("Link", main_ServerLink, False)
                                Body = Body & main_GetHtmlBody_GetSection_GetContent_GetTableRow("Page Name", PageName, True)
                                Body = Body & main_GetHtmlBody_GetSection_GetContent_GetTableRow("Member Name", user.name, False)
                                Body = Body & main_GetHtmlBody_GetSection_GetContent_GetTableRow("Member #", CStr(user.id), True)
                                Body = Body & main_GetHtmlBody_GetSection_GetContent_GetTableRow("Visit Start Time", CStr(visit_startTime), False)
                                Body = Body & main_GetHtmlBody_GetSection_GetContent_GetTableRow("Visit #", CStr(visit_Id), True)
                                Body = Body & main_GetHtmlBody_GetSection_GetContent_GetTableRow("Visit IP", webServer.requestRemoteIP, False)
                                Body = Body & main_GetHtmlBody_GetSection_GetContent_GetTableRow("Browser ", webServer.requestBrowser, True)
                                Body = Body & main_GetHtmlBody_GetSection_GetContent_GetTableRow("Visitor #", CStr(visitor_id), False)
                                Body = Body & main_GetHtmlBody_GetSection_GetContent_GetTableRow("Visit Authenticated", CStr(visit_isAuthenticated), True)
                                Body = Body & main_GetHtmlBody_GetSection_GetContent_GetTableRow("Visit Referrer", visit_referer, False)
                                Body = Body & kmaEndTable
                                Call email_sendMemberEmail3(contactMemberID, siteProperties.getText("EmailFromAddress", "info@" & main_ServerDomain), "Page Hit Notification", Body, False, True, 0, "", False)
                            End If
                        End If
                        '
                        ' Process Trigger Conditions
                        '
                        '   1) If Condition w/ Trigger Group
                        '   2) Then Send Email
                        '   3) Then Add to Group
                        '   4) Then Remove From Group
                        '
                        ConditionID = EncodeInteger(cache_pageContent(PCC_TriggerConditionID, main_RenderCache_CurrentPage_PCCPtr))
                        'ConditionID = app.csv_GetCSInteger(CS, "TriggerConditionID")
                        ConditionGroupID = EncodeInteger(cache_pageContent(PCC_TriggerConditionGroupID, main_RenderCache_CurrentPage_PCCPtr))
                        'ConditionGroupID = app.csv_GetCSInteger(CS, "TriggerConditionGroupID")
                        main_AddGroupID = EncodeInteger(cache_pageContent(PCC_TriggerAddGroupID, main_RenderCache_CurrentPage_PCCPtr))
                        'main_AddGroupID = app.csv_GetCSInteger(CS, "TriggerAddGroupID")
                        RemoveGroupID = EncodeInteger(cache_pageContent(PCC_TriggerRemoveGroupID, main_RenderCache_CurrentPage_PCCPtr))
                        'RemoveGroupID = app.csv_GetCSInteger(CS, "TriggerRemoveGroupID")
                        SystemEMailID = EncodeInteger(cache_pageContent(PCC_TriggerSendSystemEmailID, main_RenderCache_CurrentPage_PCCPtr))
                        'SystemEMailID = app.csv_GetCSInteger(CS, "TriggerSendSystemEmailID")
                        Select Case ConditionID
                            Case 1
                                '
                                ' Always
                                '
                                If SystemEMailID <> 0 Then
                                    Call main_SendSystemEmail(main_GetRecordName("System Email", SystemEMailID), "", user.id)
                                End If
                                If main_AddGroupID <> 0 Then
                                    Call group_AddGroupMember(group_GetGroupName(main_AddGroupID))
                                End If
                                If RemoveGroupID <> 0 Then
                                    Call group_DeleteGroupMember(group_GetGroupName(RemoveGroupID))
                                End If
                            Case 2
                                '
                                ' If in Condition Group
                                '
                                If ConditionGroupID <> 0 Then
                                    If user.IsMemberOfGroup2(group_GetGroupName(ConditionGroupID)) Then
                                        If SystemEMailID <> 0 Then
                                            Call main_SendSystemEmail(main_GetRecordName("System Email", SystemEMailID), "", user.id)
                                        End If
                                        If main_AddGroupID <> 0 Then
                                            Call group_AddGroupMember(group_GetGroupName(main_AddGroupID))
                                        End If
                                        If RemoveGroupID <> 0 Then
                                            Call group_DeleteGroupMember(group_GetGroupName(RemoveGroupID))
                                        End If
                                    End If
                                End If
                            Case 3
                                '
                                ' If not in Condition Group
                                '
                                If ConditionGroupID <> 0 Then
                                    If Not user.IsMemberOfGroup2(group_GetGroupName(ConditionGroupID)) Then
                                        If main_AddGroupID <> 0 Then
                                            Call group_AddGroupMember(group_GetGroupName(main_AddGroupID))
                                        End If
                                        If RemoveGroupID <> 0 Then
                                            Call group_DeleteGroupMember(group_GetGroupName(RemoveGroupID))
                                        End If
                                        If SystemEMailID <> 0 Then
                                            Call main_SendSystemEmail(main_GetRecordName("System Email", SystemEMailID), "", user.id)
                                        End If
                                    End If
                                End If
                        End Select
                        'End If
                        'Call app.db_closeCS(CS)
                    End If
                    '
                    '---------------------------------------------------------------------------------
                    ' ----- Add in ContentPadding (a table around content with the appropriate padding added)
                    '---------------------------------------------------------------------------------
                    '
                    If True And (returnHtml <> "") Then
                        ContentPadding = EncodeInteger(cache_pageContent(PCC_ContentPadding, main_RenderCache_CurrentPage_PCCPtr))
                        returnHtml = pageManager_GetContentBoxWrapper(returnHtml, ContentPadding)
                    End If


                    '
                    '---------------------------------------------------------------------------------
                    ' ----- Set Headers
                    '---------------------------------------------------------------------------------
                    '
                    If DateModified <> Date.MinValue Then
                        Call web_addResponseHeader("LAST-MODIFIED", GetGMTFromDate(DateModified))
                        'Date: Sun, 07 Dec 2008 21:06:14 GMT
                    End If
                    '
                    '---------------------------------------------------------------------------------
                    ' ----- Store page javascript
                    '---------------------------------------------------------------------------------
                    '
                    Call main_AddOnLoadJavascript2(JSOnLoad, "page content")
                    Call main_AddHeadScriptCode(JSHead, "page content")
                    If JSFilename <> "" Then
                        Call main_AddHeadScriptLink(csv_getVirtualFileLink(appConfig.cdnFilesNetprefix, JSFilename), "page content")
                    End If
                    Call main_AddEndOfBodyJavascript2(JSEndBody, "page content")
                    '
                    '---------------------------------------------------------------------------------
                    ' Set the Meta Content flag
                    '---------------------------------------------------------------------------------
                    '
                    Call main_SetMetaContent(main_RenderCache_CurrentPage_ContentId, main_RenderedPageID)
                    '
                    '---------------------------------------------------------------------------------
                    ' ----- OnPageStartEvent
                    '---------------------------------------------------------------------------------
                    '
                    main_PageContent = returnHtml
                    AddOnCnt = UBound(addonCache.localCache.onPageStartPtrs) + 1
                    For addonPtr = 0 To AddOnCnt - 1
                        addonCachePtr = addonCache.localCache.onPageStartPtrs(addonPtr)
                        If addonCachePtr > -1 Then
                            addonId = addonCache.localCache.addonList(addonCachePtr).addonCache_Id
                            If addonId > 0 Then
                                AddonName = addonCache.localCache.addonList(addonCachePtr).addonCache_name
                                AddonContent = executeAddon_legacy5(addonId, AddonName, "CSPage=-1", addonContextEnum.ContextOnPageStart, "", 0, "", -1)
                                main_PageContent = AddonContent & main_PageContent
                            End If
                        End If
                    Next
                    returnHtml = main_PageContent
                    '
                    '---------------------------------------------------------------------------------
                    ' ----- OnPageEndEvent
                    '---------------------------------------------------------------------------------
                    '
                    main_PageContent = returnHtml
                    AddOnCnt = UBound(addonCache.localCache.onPageEndPtrs) + 1
                    For addonPtr = 0 To AddOnCnt - 1
                        addonCachePtr = addonCache.localCache.onPageEndPtrs(addonPtr)
                        If addonCachePtr > -1 Then
                            addonId = addonCache.localCache.addonList(addonCachePtr).addonCache_Id
                            If addonId > 0 Then
                                AddonName = addonCache.localCache.addonList(addonCachePtr).addonCache_name
                                AddonContent = executeAddon_legacy5(addonId, AddonName, "CSPage=-1", addonContextEnum.ContextOnPageStart, "", 0, "", -1)
                                main_PageContent = main_PageContent & AddonContent
                            End If
                        End If
                    Next
                    returnHtml = main_PageContent
                    '
                End If
                If main_MetaContent_Title = "" Then
                    '
                    ' Set default page title
                    '
                    main_MetaContent_Title = main_RenderedPageName
                End If
                '
                ' add contentid and sectionid
                '
                Call main_AddHeadTag2("<meta name=""contentId"" content=""" & main_RenderedPageID & """ >", "page content")
                Call main_AddHeadTag2("<meta name=""sectionId"" content=""" & main_RenderedSectionID & """ >", "page content")
            End If
            '
            ' Display Admin Warnings with Edits for record errors
            '
            If main_AdminWarning <> "" Then
                '
                If main_AdminWarningPageID <> 0 Then
                    main_AdminWarning = main_AdminWarning & "</p>" & main_GetRecordEditLink2("Page Content", main_AdminWarningPageID, True, "Page " & main_AdminWarningPageID, user.isAuthenticatedAdmin()) & "&nbsp;Edit the page<p>"
                    main_AdminWarningPageID = 0
                End If
                '
                If main_AdminWarningSectionID <> 0 Then
                    main_AdminWarning = main_AdminWarning & "</p>" & main_GetRecordEditLink2("Site Sections", main_AdminWarningSectionID, True, "Section " & main_AdminWarningSectionID, user.isAuthenticatedAdmin()) & "&nbsp;Edit the section<p>"
                    main_AdminWarningSectionID = 0
                End If

                returnHtml = "" _
                    & main_GetAdminHintWrapper(main_AdminWarning) _
                    & returnHtml _
                    & ""
                main_AdminWarning = ""
            End If
            '
            main_GetHtmlBody_GetSection_GetContent = returnHtml
            '
            Exit Function
            '
ErrorTrap:
            Err_Number = Err.Number
            Err_Source = Err.Source
            Err_Description = Err.Description
            ErrString = GetErrString(Err)
            Call handleLegacyError19("main_GetHtmlBody_GetSection_GetContent", "Trap", Err_Number, Err_Source, Err_Description, True)
            Err.Clear()
            If user.isAuthenticatedAdmin() Then
                '
                ' Put up an admin hint
                '
                main_GetHtmlBody_GetSection_GetContent = main_GetAdminHintWrapper("<p>There was an error creating the content for this page. The details of this error follow.</p><p>" & ErrString & "</p>")
            Else
                '
                ' There was a problem
                '
                main_GetHtmlBody_GetSection_GetContent = "<!-- Error creating page content -->"
            End If
        End Function
        '
        '=============================================================================
        ' main_GetHtmlBody_GetSection_GetContentBox
        '   PageID is the page to display. Must be non-0
        '   RootPageID is the id of the top-most page in the tree. Must be non-0
        '   If PageID is not under RootPageID, redirect to RootPageID
        '   If PageID is not within RootPageContentName, return the RootPageID
        '=============================================================================
        '
        Private Function main_GetHtmlBody_GetSection_GetContentBox(PageID As Integer, rootPageId As Integer, RootPageContentName As String, OrderByClause As String, AllowChildPageList As Boolean, AllowReturnLink As Boolean, ArchivePages As Boolean, SectionID As Integer, UseContentWatchLink As Boolean, allowPageWithoutSectionDisplay As Boolean) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("main_GetHtmlBody_GetSection_GetContentBox")
            '
            Dim iIsEditing As Boolean
            Dim LiveBody As String
            Dim topOfParentBranchPtr As Integer
            Dim topOfParentBranchPageId As Integer
            Dim returnHtml As String
            Dim currentPageContentName As String
            Dim pageAdminMessage As String
            Dim isPageWithoutSection As Boolean
            Dim Pointer As Integer
            Dim SelectFieldList As String
            Dim Copy As String
            Dim PagePointer As Integer
            'Dim NowDate As Date
            Dim ContentName As String
            Dim EditTag As String
            Dim ContentPadding As Integer
            Dim pagePCCPtr As Integer
            Dim hint As String
            Dim EditLink As String
            Dim PageName As String
            Dim pageMenuHeadline As String
            Dim PageLink As String
            '
            'hint = "main_GetHtmlBody_GetSection_GetContentBox, enter"
            If docOpen Then
                '
                ' ----- Load the content
                '
                'hint = hint & ",10"
                Call main_LoadRenderCache(PageID, rootPageId, RootPageContentName, OrderByClause, AllowChildPageList, AllowReturnLink, ArchivePages, SectionID, UseContentWatchLink)
                '
                ' ----- Verify a valid current page was found
                '
                ' ????? test
                'hint = hint & ",20"
                If (pageManager_RedirectLink = "") And (main_RenderCache_CurrentPage_PCCPtr = -1) Then
                    'hint = hint & ",30"
                    If PageID <> 0 Then
                        '
                        ' BID was not found, redirect to RootPage
                        '
                        Call log_appendLogPageNotFound(webServer.requestLinkSource)
                        pageManager_RedirectBecausePageNotFound = True
                        pageManager_RedirectReason = "The page could not be found from its ID [" & PageID & "]. It may have been deleted or marked inactive. "
                        pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID, SectionID)
                        Exit Function
                    Else
                        '
                        ' Root page was requested, but not found and could not be created, this is an error
                        '
                        Call log_appendLogPageNotFound(webServer.requestLinkSource)
                        pageManager_RedirectBecausePageNotFound = True
                        pageManager_RedirectReason = "The page could not be found because it's ID could not be determined."
                        pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID, SectionID)
                        Exit Function
                    End If
                End If
                '
                ' ----- Verify this bid can be displayed on this RootPageName
                '
                'hint = hint & ",50"
                If (pageManager_RedirectLink = "") Then
                    'hint = hint & ",60"
                    If Not allowPageWithoutSectionDisplay Then
                        '????? test
                        'hint = hint & ",70"
                        If (main_RenderCache_ParentBranch_PCCPtrCnt > 0) Then
                            '
                            ' check top of parent branch
                            '
                            '????? test
                            'hint = hint & ",80"
                            topOfParentBranchPtr = EncodeInteger(main_RenderCache_ParentBranch_PCCPtrs(main_RenderCache_ParentBranch_PCCPtrCnt - 1))
                            topOfParentBranchPageId = EncodeInteger(cache_pageContent(PCC_ID, topOfParentBranchPtr))
                            isPageWithoutSection = (topOfParentBranchPageId <> rootPageId)
                        Else
                            '
                            ' no parent pages, check the current page name against root page name
                            '
                            '????? test
                            'hint = hint & ",90"
                            isPageWithoutSection = (EncodeInteger(cache_pageContent(PCC_ID, main_RenderCache_CurrentPage_PCCPtr)) <> rootPageId)
                        End If
                        'hint = hint & ",100"
                        If isPageWithoutSection Then
                            '
                            '
                            '
                            '????? test this
                            'hint = hint & ",110"
                            currentPageContentName = metaData.getContentNameByID(EncodeInteger(cache_pageContent(PCC_ContentControlID, main_RenderCache_CurrentPage_PCCPtr)))
                            If user.isAuthenticatedContentManager(currentPageContentName) Then
                                '
                                ' allow page without section because this is a content manager -- but give them a message
                                '
                                'hint = hint & ",120"
                                pageAdminMessage = "<p>This page can only be displayed to content managers because it is not part of a valid section. You can allow this type of access by setting the site property 'Allow Page Without Section Display' but care should be taken. If a blocked page is deleted, any child pages it may have had could be available for public display.</p>"
                            Else
                                '
                                ' page without section (root page name is the legacy section) not allowed
                                '
                                'hint = hint & ",130"
                                Call log_appendLogPageNotFound(webServer.requestLinkSource)
                                pageManager_RedirectBecausePageNotFound = True
                                '????? test
                                pageManager_RedirectReason = "The page you requested [" & PageID & "] could not be displayed because there is a problem with one of it's parent pages. All parent pages must be available to verify security permissions. A parent page may have been deleted or inactivated, or the page may have been requested from an incorrect location."
                                pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID, SectionID)
                                Exit Function
                            End If
                        End If
                    End If
                End If
                'hint = hint & ",140"
                If pageManager_RedirectLink = "" Then
                    '
                    ' ----- This page can be displayed
                    '
                    '            'hint = hint & ",150"
                    '            If app.csv_IsCSOK(main_oldCacheRS_cs) Then
                    '                '
                    '                ' if this is not the first pagecontent to be opened on this page, close the previous first
                    '                '
                    '                Call app.db_closeCS(main_oldCacheRS_cs)
                    '            End If
                    '            'hint = hint & ",160"
                    '            main_oldCacheRS_cs = main_OpenCSContentRecord_Internal(main_RenderCache_CurrentPage_ContentName, PageID, main_RenderCache_CurrentPage_IsRenderingMode Or main_RenderCache_CurrentPage_IsQuickEditing, main_RenderCache_CurrentPage_IsQuickEditing)
                    '
                    'hint = hint & ",170"
                    '            If Not app.csv_IsCSOK(main_oldCacheRS_cs) Then
                    '                '
                    '                ' freak bug - page was not found - maybe deleted in a concurrent process
                    '                '
                    '                'hint = hint & ",180"
                    '                Call app.db_closeCS(main_oldCacheRS_cs)
                    '                pageManager_RedirectBecausePageNotFound = True
                    ''????? test
                    '                pageManager_RedirectReason = "The page [" & PageID & "] could not be found."
                    '                pageManager_RedirectLink = main_ProcessPageNotFound_GetLink(pageManager_RedirectReason, , , PageID, SectionID)
                    '                Exit Function
                    '            Else
                    '' $$$$$ remove main_oldCacheRS_cs, use pccPtr
                    '                'hint = hint & ",190"
                    '                'main_RenderedPageName = db.db_GetCSText(main_oldCacheRS_cs, "name")
                    '' $$$$$ this should just be the pcc field list
                    '                'SelectFieldList = app.db_GetCSSelectFieldList(main_oldCacheRS_cs)
                    '' $$$$$ remove all uses of main_oldCacheRS_FieldNames/main_oldCacheRS_FieldValues
                    '                'main_oldCacheRS_FieldNames = Split(SelectFieldList, ",")
                    '                'main_oldCacheRS_FieldValues = db.db_GetCSRow(main_oldCacheRS_cs)
                    '                'For Pointer = 0 To UBound(main_oldCacheRS_FieldValues)
                    '                '    main_oldCacheRS_FieldValues(Pointer) = vbReplace(Replace(main_oldCacheRS_FieldValues(Pointer), vbTab, ""), vbCrLf, "")
                    '                'Next
                    '            End If
                    '
                    ' ----- all calls go through Live body routine, Quick Editor added directly to live routine
                    '
                    ' $$$$$ remove main_oldCacheRS_cs, use pccPtr
                    'hint = hint & ",200"
                    '????? test - this was a routine placed in-line
                    iIsEditing = user.isEditing(main_RenderCache_CurrentPage_ContentName)
                    '
                    ' ----- Render the Body
                    '
                    LiveBody = main_GetHtmlBody_GetSection_GetContentBox_Live_Body(main_RenderCache_CurrentPage_ContentName, main_RenderCache_CurrentPage_ContentId, OrderByClause, AllowChildPageList, False, rootPageId, AllowReturnLink, RootPageContentName, ArchivePages)
                    If user.isAdvancedEditing("") Then
                        returnHtml = returnHtml & main_GetRecordEditLink(main_RenderCache_CurrentPage_ContentName, PageID, (Not main_RenderCache_CurrentPage_IsRootPage)) & LiveBody
                    ElseIf iIsEditing Then
                        PageName = EncodeText(cache_pageContent(PCC_Name, main_RenderCache_CurrentPage_PCCPtr))
                        EditLink = main_GetRecordEditLink2(main_RenderCache_CurrentPage_ContentName, PageID, (Not main_RenderCache_CurrentPage_IsRootPage), PageName, user.isEditing(ContentName))
                        returnHtml = returnHtml & main_GetEditWrapper("", main_GetRecordEditLink(main_RenderCache_CurrentPage_ContentName, PageID, (Not main_RenderCache_CurrentPage_IsRootPage)) & LiveBody)
                    Else
                        returnHtml = returnHtml & LiveBody
                    End If
                    '
                    ' Build the Public main_RenderedNavigationStructure
                    '
                    '????? test all this --------------------- start
                    'hint = hint & ",210"
                    main_RenderedNavigationStructure = ""
                    If main_RenderCache_ParentBranch_PCCPtrCnt > 0 Then
                        'hint = hint & ",220"
                        For Pointer = main_RenderCache_ParentBranch_PCCPtrCnt - 1 To 0 Step -1
                            'hint = hint & ",230"
                            If Pointer = (main_RenderCache_ParentBranch_PCCPtrCnt - 1) Then
                                main_RenderedNavigationStructure = main_RenderedNavigationStructure & vbTab & "0"
                            Else
                                main_RenderedNavigationStructure = main_RenderedNavigationStructure & vbTab & "1"
                            End If
                            pagePCCPtr = EncodeInteger(main_RenderCache_ParentBranch_PCCPtrs(Pointer))
                            '
                            ' buffer text fields because this excode format does not allow them
                            '
                            PageName = EncodeText(cache_pageContent(PCC_Name, pagePCCPtr))
                            PageName = vbReplace(PageName, vbCrLf, " ")
                            PageName = vbReplace(PageName, vbCr, " ")
                            PageName = vbReplace(PageName, vbLf, " ")
                            PageName = vbReplace(PageName, vbTab, " ")
                            PageName = Trim(PageName)
                            '
                            PageLink = EncodeText(cache_pageContent(PCC_Link, pagePCCPtr))
                            PageLink = vbReplace(PageLink, vbCrLf, " ")
                            PageLink = vbReplace(PageLink, vbCr, " ")
                            PageLink = vbReplace(PageLink, vbLf, " ")
                            PageLink = vbReplace(PageLink, vbTab, " ")
                            PageLink = Trim(PageLink)
                            '
                            pageMenuHeadline = Trim(EncodeText(cache_pageContent(PCC_MenuHeadline, pagePCCPtr)))
                            If pageMenuHeadline <> "" Then
                                pageMenuHeadline = vbReplace(pageMenuHeadline, vbCrLf, " ")
                                pageMenuHeadline = vbReplace(pageMenuHeadline, vbCr, " ")
                                pageMenuHeadline = vbReplace(pageMenuHeadline, vbLf, " ")
                                pageMenuHeadline = vbReplace(pageMenuHeadline, vbTab, " ")
                                pageMenuHeadline = Trim(pageMenuHeadline)
                            Else
                                pageMenuHeadline = PageName
                                If pageMenuHeadline = "" Then
                                    pageMenuHeadline = "Related Page"
                                End If
                            End If
                            main_RenderedNavigationStructure = main_RenderedNavigationStructure _
                            & vbTab & EncodeInteger(cache_pageContent(PCC_ID, pagePCCPtr)) _
                            & vbTab & EncodeInteger(cache_pageContent(PCC_ParentID, pagePCCPtr)) _
                            & vbTab & pageMenuHeadline _
                            & vbTab & PageName _
                            & vbTab & PageLink _
                            & vbTab & EncodeInteger(cache_pageContent(PCC_TemplateID, pagePCCPtr)) _
                            & vbTab & EncodeBoolean(cache_pageContent(PCC_AllowInMenus, pagePCCPtr)) _
                            & vbCrLf
                        Next
                    End If
                    'hint = hint & ",300"
                    If main_RenderCache_CurrentPage_PCCPtr > -1 Then
                        'hint = hint & ",310"
                        pagePCCPtr = main_RenderCache_CurrentPage_PCCPtr
                        main_RenderedPageID = EncodeInteger(cache_pageContent(PCC_ID, pagePCCPtr))
                        '
                        ' buffer text fields because this excode format does not allow them
                        '
                        PageName = EncodeText(cache_pageContent(PCC_Name, pagePCCPtr))
                        PageName = vbReplace(PageName, vbCrLf, " ")
                        PageName = vbReplace(PageName, vbCr, " ")
                        PageName = vbReplace(PageName, vbLf, " ")
                        PageName = vbReplace(PageName, vbTab, " ")
                        PageName = Trim(PageName)
                        '
                        PageLink = EncodeText(cache_pageContent(PCC_Link, pagePCCPtr))
                        PageLink = vbReplace(PageLink, vbCrLf, " ")
                        PageLink = vbReplace(PageLink, vbCr, " ")
                        PageLink = vbReplace(PageLink, vbLf, " ")
                        PageLink = vbReplace(PageLink, vbTab, " ")
                        PageLink = Trim(PageLink)
                        '
                        pageMenuHeadline = Trim(EncodeText(cache_pageContent(PCC_MenuHeadline, pagePCCPtr)))
                        If pageMenuHeadline <> "" Then
                            pageMenuHeadline = vbReplace(pageMenuHeadline, vbCrLf, " ")
                            pageMenuHeadline = vbReplace(pageMenuHeadline, vbCr, " ")
                            pageMenuHeadline = vbReplace(pageMenuHeadline, vbLf, " ")
                            pageMenuHeadline = vbReplace(pageMenuHeadline, vbTab, " ")
                            pageMenuHeadline = Trim(pageMenuHeadline)
                        Else
                            pageMenuHeadline = PageName
                            If pageMenuHeadline = "" Then
                                pageMenuHeadline = "Related Page"
                            End If
                        End If
                        main_RenderedNavigationStructure = main_RenderedNavigationStructure _
                        & vbTab & "2" _
                        & vbTab & main_RenderedPageID _
                        & vbTab & EncodeInteger(cache_pageContent(PCC_ParentID, pagePCCPtr)) _
                        & vbTab & pageMenuHeadline _
                        & vbTab & PageName _
                        & vbTab & PageLink _
                        & vbTab & EncodeInteger(cache_pageContent(PCC_TemplateID, pagePCCPtr)) _
                        & vbTab & EncodeBoolean(cache_pageContent(PCC_AllowInMenus, pagePCCPtr)) _
                        & vbCrLf
                    End If
                    'hint = hint & ",400"
                    If main_RenderCache_ChildBranch_PCCPtrCnt > 0 Then
                        'hint = hint & ",410 main_RenderCache_ChildBranch_PCCPtrCnt=" & main_RenderCache_ChildBranch_PCCPtrCnt
                        For Pointer = main_RenderCache_ChildBranch_PCCPtrCnt - 1 To 0 Step -1
                            'hint = hint & ",420 Pointer=" & Pointer
                            pagePCCPtr = EncodeInteger(main_RenderCache_ChildBranch_PCCPtrs(Pointer))
                            '
                            ' buffer text fields because this excode format does not allow them
                            '
                            'hint = hint & ",430 pagePCCPtr=" & pagePCCPtr
                            PageName = EncodeText(cache_pageContent(PCC_Name, pagePCCPtr))
                            PageName = vbReplace(PageName, vbCrLf, " ")
                            PageName = vbReplace(PageName, vbCr, " ")
                            PageName = vbReplace(PageName, vbLf, " ")
                            PageName = vbReplace(PageName, vbTab, " ")
                            PageName = Trim(PageName)
                            '
                            PageLink = EncodeText(cache_pageContent(PCC_Link, pagePCCPtr))
                            PageLink = vbReplace(PageLink, vbCrLf, " ")
                            PageLink = vbReplace(PageLink, vbCr, " ")
                            PageLink = vbReplace(PageLink, vbLf, " ")
                            PageLink = vbReplace(PageLink, vbTab, " ")
                            PageLink = Trim(PageLink)
                            '
                            pageMenuHeadline = Trim(EncodeText(cache_pageContent(PCC_MenuHeadline, pagePCCPtr)))
                            If pageMenuHeadline <> "" Then
                                pageMenuHeadline = vbReplace(pageMenuHeadline, vbCrLf, " ")
                                pageMenuHeadline = vbReplace(pageMenuHeadline, vbCr, " ")
                                pageMenuHeadline = vbReplace(pageMenuHeadline, vbLf, " ")
                                pageMenuHeadline = vbReplace(pageMenuHeadline, vbTab, " ")
                                pageMenuHeadline = Trim(pageMenuHeadline)
                            Else
                                pageMenuHeadline = PageName
                                If pageMenuHeadline = "" Then
                                    pageMenuHeadline = "Related Page"
                                End If
                            End If
                            'hint = hint & ",440"
                            main_RenderedNavigationStructure = main_RenderedNavigationStructure _
                            & vbTab & "3" _
                            & vbTab & EncodeInteger(cache_pageContent(PCC_ID, pagePCCPtr)) _
                            & vbTab & main_RenderedPageID _
                            & vbTab & pageMenuHeadline _
                            & vbTab & PageName _
                            & vbTab & PageLink _
                            & vbTab & EncodeInteger(cache_pageContent(PCC_TemplateID, pagePCCPtr)) _
                            & vbTab & EncodeBoolean(cache_pageContent(PCC_AllowInMenus, pagePCCPtr)) _
                            & vbCrLf
                            'hint = hint & ",450"
                        Next
                    End If
                End If
                '????? test all this --------------------- end
                'hint = hint & ",900"
                If pageAdminMessage <> "" Then
                    returnHtml = "" _
                    & main_GetAdminHintWrapper(pageAdminMessage) _
                    & returnHtml _
                    & ""
                End If
            End If
            '
            Call testPoint("main_GetHtmlBody_GetSection_GetContentBox, hint=[" & hint & "]")
            main_GetHtmlBody_GetSection_GetContentBox = returnHtml
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("main_GetHtmlBody_GetSection_GetContentBox, hint=[" & hint & "]")
        End Function
        '
        '========================================================================
        '   Render the Page Body.
        '
        '   CSParentofChildPages is a contentset with the page that is the parent of all child pages for this render.
        '========================================================================
        '
        Private Function main_GetHtmlBody_GetSection_GetContentBox_Live_Body(ContentName As String, ContentID As Integer, OrderByClause As String, AllowChildList As Boolean, Authoring As Boolean, rootPageId As Integer, AllowReturnLink As Boolean, RootPageContentName As String, ArchivePage As Boolean) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("main_GetHtmlBody_GetSection_GetContentBox_Live_Body")
            '
            Dim hint As String
            Dim Cell As String
            Dim AddonStatusOK As Boolean
            Dim ChildListInstanceOptions As String
            Dim Name As String
            Dim DateReviewed As Date
            Dim ReviewedBy As Integer
            Dim Link As String
            Dim CS As Integer
            Dim IconRow As String
            Dim Filename As String
            Dim contactMemberID As Integer
            Dim s As String
            Dim QueryString As String
            Dim ParentofChildPageID As Integer
            Dim LastModified As Date
            Dim MethodName As String
            'Dim Compatibility21 As Boolean
            Dim StreamAdd As String
            Dim LoopCount As Integer
            Dim ACStart As Integer
            Dim ACStop As Integer
            Dim TagBuffer As String
            Dim TagSplit() As String
            Dim NVSplit() As String
            Dim ListName As String
            Dim ChildList As String
            Dim childListSortMethodId As Integer
            Dim ContentStarted As Boolean
            Dim AllowEmailPage As Boolean
            Dim AllowPrinterVersion As Boolean
            Dim Caption As String
            Dim PageID As Integer
            Dim parentPageID As Integer
            Dim allowChildListDisplay As Boolean
            Dim dateArchive As Date
            Dim allowChildListComposite As Boolean
            Dim allowReturnLinkComposite As Boolean
            Dim allowReturnLinkDisplay As Boolean
            Dim headline As String
            Dim copyFilename As String
            Dim Copy As String
            Dim EmailBody As String
            Dim Body As String
            Dim allowSeeAlso As Boolean
            Dim allowMoreInfo As Boolean
            Dim allowFeedback As Boolean
            Dim allowLastModifiedFooter As Boolean
            Dim ModifiedBy As Integer
            Dim allowReviewedFooter As Boolean
            Dim allowMessageFooter As Boolean
            Dim pageContentMessageFooter As String
            '
            'hint = hint & "main_GetHtmlBody_GetSection_GetContentBox_Live_Body,010"
            MethodName = "main_GetHtmlBody_GetSection_GetContentBox_Live_Body"
            '
            ' ContentID = encodeInteger(main_GetContentID(ContentName))
            '
            If True Then
                'If app.csv_IsCSOK(CSPointer) Then
                '
                ' ----- A page was found
                '
                PageID = EncodeInteger(cache_pageContent(PCC_ID, main_RenderCache_CurrentPage_PCCPtr))
                'pageID = (app.csv_GetCSInteger(CSPointer, "ID"))
                '        s = "" _
                '            & "<div>main_RenderedPageID=" & main_RenderedPageID & "</div>" _
                '            & "<div>CSPointer id=" & PageID & "</div>" _
                '            & "<div>main_RenderCache_CurrentPage_PCCPtr=" & main_RenderCache_CurrentPage_PCCPtr & "</div>" _
                '            & "<div>main_pcc(PCC_ID, main_RenderCache_CurrentPage_PCCPtr )=" & main_pcc(PCC_ID, main_RenderCache_CurrentPage_PCCPtr) & "</div>" _
                '            & ""
                parentPageID = EncodeInteger(cache_pageContent(PCC_ParentID, main_RenderCache_CurrentPage_PCCPtr))
                'ParentPageID = (app.csv_GetCSInteger(CSPointer, "parentid"))
                contactMemberID = EncodeInteger(cache_pageContent(PCC_ContactMemberID, main_RenderCache_CurrentPage_PCCPtr))
                'contactMemberID = (app.csv_GetCSInteger(CSPointer, "ContactMemberID"))
                allowChildListDisplay = EncodeBoolean(cache_pageContent(PCC_AllowChildListDisplay, main_RenderCache_CurrentPage_PCCPtr))
                allowChildListComposite = AllowChildList And allowChildListDisplay
                'allowChildListComposite = AllowChildList And (app.csv_GetCSBoolean(CSPointer, "AllowChildListDisplay"))
                dateArchive = EncodeDate(cache_pageContent(PCC_DateArchive, main_RenderCache_CurrentPage_PCCPtr))
                'DateArchive = app.csv_GetCSDate(CSPointer, "DateArchive")
                'Compatibility21 = encodeBoolean(csv_GetSiteProperty("ContentPageCompatibility21", False))
                childListSortMethodId = EncodeInteger(cache_pageContent(PCC_ChildListSortMethodID, main_RenderCache_CurrentPage_PCCPtr))
                'ChildListSortMethodID = app.csv_GetCSInteger(CSPointer, "ChildListSortMethodID")
                allowReturnLinkDisplay = EncodeBoolean(cache_pageContent(PCC_allowReturnLinkDisplay, main_RenderCache_CurrentPage_PCCPtr))
                allowReturnLinkComposite = AllowReturnLink And allowReturnLinkDisplay
                '
                AllowPrinterVersion = EncodeBoolean(cache_pageContent(pcc_allowPrinterVersion, main_RenderCache_CurrentPage_PCCPtr))
                'AllowPrinterVersion = app.csv_GetCSBoolean(CSPointer, "AllowPrinterVersion")
                AllowEmailPage = EncodeBoolean(cache_pageContent(pcc_allowEmailPage, main_RenderCache_CurrentPage_PCCPtr))
                'AllowEmailPage = app.csv_GetCSBoolean(CSPointer, "AllowEmailPage")
                headline = EncodeText(cache_pageContent(PCC_Headline, main_RenderCache_CurrentPage_PCCPtr))
                'headline = app.csv_GetCS(CSPointer, "Headline")
                copyFilename = EncodeText(cache_pageContent(PCC_CopyFilename, main_RenderCache_CurrentPage_PCCPtr))
                If copyFilename <> "" Then
                    Copy = cdnFiles.readFile(copyFilename)
                End If
                'copy = app.csv_GetCS(CSPointer, "copyFilename")
                allowSeeAlso = EncodeBoolean(cache_pageContent(pcc_allowSeeAlso, main_RenderCache_CurrentPage_PCCPtr))
                'allowSeeAlso = encodeBoolean(app.csv_GetCSBoolean(CSPointer, "AllowSeeAlso"))        '
                allowMoreInfo = EncodeBoolean(cache_pageContent(pcc_allowMoreInfo, main_RenderCache_CurrentPage_PCCPtr))
                'allowMoreInfo = encodeBoolean(app.csv_GetCSBoolean(CSPointer, "AllowMoreInfo"))
                allowFeedback = EncodeBoolean(cache_pageContent(pcc_allowFeedback, main_RenderCache_CurrentPage_PCCPtr))
                'AllowFeedBack = encodeBoolean(app.csv_GetCSBoolean(CSPointer, "AllowFeedBack"))
                LastModified = EncodeDate(cache_pageContent(PCC_ModifiedDate, main_RenderCache_CurrentPage_PCCPtr))
                'LastModified = app.csv_GetCSDate(CSPointer, "ModifiedDate")
                allowLastModifiedFooter = EncodeBoolean(cache_pageContent(pcc_allowLastModifiedFooter, main_RenderCache_CurrentPage_PCCPtr))
                'AllowLastModifiedFooter = app.csv_GetCSBoolean(CSPointer, "AllowLastModifiedFooter")
                ModifiedBy = EncodeInteger(cache_pageContent(PCC_ModifiedBy, main_RenderCache_CurrentPage_PCCPtr))
                'ModifiedBy = app.db_GetCSInteger(CSPointer, "ModifiedBy")
                DateReviewed = EncodeDate(cache_pageContent(PCC_DateReviewed, main_RenderCache_CurrentPage_PCCPtr))
                'DateReviewed = app.csv_GetCSDate(CSPointer, "DateReviewed")
                ReviewedBy = EncodeInteger(cache_pageContent(PCC_ReviewedBy, main_RenderCache_CurrentPage_PCCPtr))
                'ReviewedBy = app.db_GetCSInteger(CSPointer, "ReviewedBy")
                allowReviewedFooter = EncodeBoolean(cache_pageContent(PCC_allowReviewedFooter, main_RenderCache_CurrentPage_PCCPtr))
                'allowReviewedFooter = (app.csv_GetCSBoolean(CSPointer, "AllowReviewedFooter"))
                allowMessageFooter = EncodeBoolean(cache_pageContent(PCC_allowMessageFooter, main_RenderCache_CurrentPage_PCCPtr))
                'allowMessageFooter = (app.csv_GetCSBoolean(CSPointer, "AllowMessageFooter"))
                '
                ' ----- Print Breadcrumb if not at root Page
                '
                'hint = hint & ",020"
                Dim breadCrumb As String
                Dim BreadCrumbDelimiter As String
                Dim BreadCrumbPrefix As String
                '
                If allowReturnLinkComposite And (Not main_RenderCache_CurrentPage_IsRootPage) And (Not pageManager_printVersion) Then
                    '
                    ' ----- Print Heading if not at root Page
                    '
                    BreadCrumbPrefix = siteProperties.getText("BreadCrumbPrefix", "Return to")
                    BreadCrumbDelimiter = siteProperties.getText("BreadCrumbDelimiter", " &gt; ")
                    breadCrumb = main_GetHtmlBody_GetSection_GetContentBox_ReturnLink(RootPageContentName, parentPageID, rootPageId, "", ArchivePage, BreadCrumbDelimiter)
                    If breadCrumb <> "" Then
                        breadCrumb = cr & "<p class=""ccPageListNavigation"">" & BreadCrumbPrefix & " " & breadCrumb & "</p>"
                    End If
                End If
                s = s & breadCrumb
                '
                ' move print and email icons here - ASBO 5/24/2007
                '
                'hint = hint & ",030"
                If (Not pageManager_printVersion) Then
                    IconRow = ""
                    If (Not visit_isBot) And (AllowPrinterVersion Or AllowEmailPage) Then
                        '
                        ' not a bot, and either print or email allowed
                        '
                        If AllowPrinterVersion Then
                            QueryString = web_RefreshQueryString
                            'QueryString = ModifyQueryString(QueryString, RequestNameRootPageID, CStr(RootPageID), True)
                            QueryString = ModifyQueryString(QueryString, "bid", EncodeText(PageID), True)
                            'QueryString = ModifyQueryString(QueryString, RequestNameAllowChildPageList, encodeText(allowChildListComposite), True)
                            'QueryString = ModifyQueryString(QueryString, RequestNameContent, RootPageContentName, True)
                            'QueryString = ModifyQueryString(QueryString, RequestNameOrderByClause, OrderByClause, True)
                            QueryString = ModifyQueryString(QueryString, RequestNameHardCodedPage, HardCodedPagePrinterVersion, True)
                            '                    QueryString = ModifyQueryString(QueryString, RequestNameRootPageID, CStr(RootPageID), True)
                            '                    QueryString = ModifyQueryString(QueryString, "bid", encodeText(pageId), True)
                            '                    QueryString = ModifyQueryString(QueryString, RequestNameAllowChildPageList, encodeText(allowChildListComposite), True)
                            '                    QueryString = ModifyQueryString(QueryString, RequestNameContent, RootPageContentName, True)
                            '                    QueryString = ModifyQueryString(QueryString, RequestNameOrderByClause, OrderByClause, True)
                            '                    QueryString = ModifyQueryString(QueryString, RequestNameHardCodedPage, HardCodedPagePrinterVersion, True)
                            Caption = siteProperties.getText("PagePrinterVersionCaption", "Printer Version")
                            Caption = vbReplace(Caption, " ", "&nbsp;")
                            IconRow = IconRow & cr & "&nbsp;&nbsp;<a href=""" & html_EncodeHTML(web_requestPage & "?" & QueryString) & """ target=""_blank""><img alt=""image"" src=""/ccLib/images/IconSmallPrinter.gif"" width=""13"" height=""13"" border=""0"" align=""absmiddle""></a>&nbsp<a href=""" & html_EncodeHTML(web_requestPage & "?" & QueryString) & """ target=""_blank"" style=""text-decoration:none! important;font-family:sanserif,verdana,helvetica;font-size:11px;"">" & Caption & "</a>"
                        End If
                        If AllowEmailPage Then
                            QueryString = web_RefreshQueryString
                            If QueryString <> "" Then
                                QueryString = "?" & QueryString
                            End If
                            EmailBody = web_requestProtocol & webServer.requestDomain & webServer.requestPathPage & QueryString
                            Caption = siteProperties.getText("PageAllowEmailCaption", "Email This Page")
                            Caption = vbReplace(Caption, " ", "&nbsp;")
                            IconRow = IconRow & cr & "&nbsp;&nbsp;<a HREF=""mailto:?SUBJECT=You might be interested in this&amp;BODY=" & EmailBody & """><img alt=""image"" src=""/ccLib/images/IconSmallEmail.gif"" width=""13"" height=""13"" border=""0"" align=""absmiddle""></a>&nbsp;<a HREF=""mailto:?SUBJECT=You might be interested in this&amp;BODY=" & EmailBody & """ style=""text-decoration:none! important;font-family:sanserif,verdana,helvetica;font-size:11px;"">" & Caption & "</a>"
                        End If
                    End If
                    If IconRow <> "" Then
                        s = s _
                        & cr & "<div style=""text-align:right;"">" _
                        & kmaIndent(IconRow) _
                        & cr & "</div>"
                    End If
                End If
                '
                ' ----- Start Text Search
                '
                Cell = ""
                'Cell = Cell & main_GetSiteProperty2("TextSearchStartTag", TextSearchStartTagDefault)         '
                'hint = hint & ",040"
                If main_RenderCache_CurrentPage_IsQuickEditing Then
                    '
                    ' ----- Copy in Quick Editor Mode - ##### new part
                    '       ##### Put presentatin authoring right in the live body
                    '
                    'hint = hint & ",041"
                    Cell = Cell & main_GetHtmlBody_GetSection_GetContentBox_QuickEditing(main_RenderCache_CurrentPage_ContentName, rootPageId, RootPageContentName, OrderByClause, AllowChildList, AllowReturnLink, ArchivePage, contactMemberID, ContentName, childListSortMethodId, allowChildListComposite, ArchivePage)
                Else
                    '
                    ' ----- Headline
                    '
                    'hint = hint & ",042"
                    If headline <> "" Then
                        'hint = hint & ",043"
                        ' an html field can be added to an html stream. a non-html field should be html encoded before being added.
                        headline = main_encodeHTML(headline)
                        If siteProperties.getBoolean("PageHeadlineUseccHeadline") Then
                            Cell = Cell & cr & "<p>" & AddSpan(headline, "ccHeadline") & "</p>"
                        Else
                            Cell = Cell & cr & "<h1>" & headline & "</h1>"
                        End If
                        '
                        ' Add AC end here to force the end of any left over AC tags (like language)
                        '
                        Cell = Cell & ACTagEnd
                    End If
                    '
                    ' ----- Page Copy
                    '
                    'hint = hint & ",044"
                    If Copy = "" Then
                        'hint = hint & ",045"
                        '
                        ' Page copy is empty if  Links Enabled put in a blank line to separate edit from add tag
                        '
                        If user.isEditing(main_RenderCache_CurrentPage_ContentName) Then
                            Body = cr & "<p><!-- Empty Content Placeholder --></p>"
                        End If
                    Else
                        Body = Copy & cr & ACTagEnd
                    End If
                    '
                    ' ----- Wrap content body
                    '
                    Cell = Cell _
                    & cr & "<!-- ContentBoxBodyStart -->" _
                    & kmaIndent(Body) _
                    & cr & "<!-- ContentBoxBodyEnd -->"
                    '
                    ' ----- Child pages
                    '
                    'hint = hint & ",046"
                    If allowChildListComposite Or user.isEditingAnything() Then
                        'hint = hint & ",047"
                        If Not allowChildListComposite Then
                            Cell = Cell & main_GetAdminHintWrapper("Automatic Child List display is disabled for this page. It is displayed here because you are in editing mode. To enable automatic child list display, see the features tab for this page.")
                        End If
                        'hint = hint & ",048"
                        ChildListInstanceOptions = EncodeText(cache_pageContent(PCC_ChildListInstanceOptions, main_RenderCache_CurrentPage_PCCPtr))
                        'hint = hint & ",049"
                        Cell = Cell & executeAddon_legacy2(siteProperties.childListAddonID, "", ChildListInstanceOptions, addonContextEnum.ContextPage, ContentName, PageID, "", PageChildListInstanceID, False, siteProperties.defaultWrapperID, "", AddonStatusOK, Nothing)
                    End If
                End If
                '
                ' ----- End Text Search
                '
                'hint = hint & ",050"
                s = s _
                & cr & "<!-- TextSearchStart -->" _
                & kmaIndent(Cell) _
                & cr & "<!-- TextSearchEnd -->"
                '
                ' ----- Page See Also
                '
                If allowSeeAlso Then
                    s = s _
                    & cr & "<div>" _
                    & kmaIndent(main_GetSeeAlso(main_RenderCache_CurrentPage_ContentName, PageID)) _
                    & cr & "</div>"
                End If
                '
                ' ----- Allow More Info
                '
                If (contactMemberID <> 0) And allowMoreInfo Then
                    s = s & cr & "<ac TYPE=""" & ACTypeContact & """>"
                    's = s &  "<p>" & main_GetMoreInfo(ContactMemberID) & "</p>"
                End If
                '
                ' ----- Feedback
                '
                If (Not pageManager_printVersion) And (contactMemberID <> 0) And allowFeedback Then
                    's = s &  "<BR ><img alt=""image"" src=""/ccLib/images/808080.gif"" width=""100%"" height=""1"" >"
                    s = s & cr & "<ac TYPE=""" & ACTypeFeedback & """>"
                    's = s &  main_GetFeedbackForm(ContentName, PageID, ContactMemberID)
                End If
                '
                ' ----- Last Modified line
                '
                'hint = hint & ",060"
                If (LastModified <> Date.MinValue) And allowLastModifiedFooter Then
                    s = s & cr & "<p>This page was last modified " & FormatDateTime(LastModified)
                    If user.isAuthenticatedAdmin() Then
                        If ModifiedBy = 0 Then
                            s = s & " (admin only: modified by unknown)"
                        Else
                            Name = main_GetRecordName("people", ModifiedBy)
                            If Name = "" Then
                                s = s & " (admin only: modified by person with unnamed or deleted record #" & ReviewedBy & ")"
                            Else
                                s = s & " (admin only: modified by " & Name & ")"
                            End If
                        End If
                    End If
                    s = s & "</p>"
                End If
                '
                ' ----- Last Reviewed line
                '
                If True Then
                    If (DateReviewed <> Date.MinValue) And allowReviewedFooter Then
                        s = s & cr & "<p>This page was last reviewed " & FormatDateTime(DateReviewed, vbLongDate)
                        If user.isAuthenticatedAdmin() Then
                            If ReviewedBy = 0 Then
                                s = s & " (by unknown)"
                            Else
                                Name = main_GetRecordName("people", ReviewedBy)
                                If Name = "" Then
                                    s = s & " (by person with unnamed or deleted record #" & ReviewedBy & ")"
                                Else
                                    s = s & " (by " & Name & ")"
                                End If
                            End If
                            s = s & ".</p>"
                        End If
                    End If
                End If
                '
                ' ----- Page Content Message Footer
                '
                'hint = hint & ",070"
                If allowMessageFooter Then
                    pageContentMessageFooter = siteProperties.getText("PageContentMessageFooter", "")
                    If (pageContentMessageFooter <> "") Then
                        s = s & cr & "<p>" & pageContentMessageFooter & "</p>"
                    End If
                End If
            End If
            Call db.cs_Close(CS)
            'hint = hint & ",080"
            main_GetHtmlBody_GetSection_GetContentBox_Live_Body = s
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("main_GetHtmlBody_GetSection_GetContentBox_Live_Body, hint=" & hint)
        End Function
        '
        '=============================================================================
        '   Content Page Authoring
        '
        '   Display Quick Editor for the first active record found
        '   Use for both Root and non-root pages
        '=============================================================================
        '
        Private Function main_GetHtmlBody_GetSection_GetContentBox_QuickEditing(LiveRecordContentName As String, rootPageId As Integer, RootPageContentName As String, OrderByClause As String, AllowPageList As Boolean, AllowReturnLink As Boolean, ArchivePages As Boolean, contactMemberID As Integer, ContentName As String, childListSortMethodId As Integer, main_AllowChildListComposite As Boolean, ArchivePage As Boolean) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("main_GetHtmlBody_GetSection_GetContentBox_QuickEditing")
            '
            Dim AddonStatusOK As Boolean
            Dim Link As String
            Dim Ptr As Integer
            Dim ParentID As Integer
            Dim PageList As String
            Dim Criteria As String
            Dim RecordActive As Boolean
            Dim Copy As String
            Dim RecordID As Integer
            Dim OptionsPanelAuthoringStatus As String
            Dim ButtonList As String
            'Dim CS as integer
            '
            Dim AllowInsert As Boolean
            Dim AllowCancel As Boolean
            Dim allowSave As Boolean
            Dim AllowDelete As Boolean
            Dim AllowPublish As Boolean
            Dim AllowAbort As Boolean
            Dim AllowSubmit As Boolean
            Dim AllowApprove As Boolean
            Dim AllowMarkReviewed As Boolean

            Dim CDef As coreMetaDataClass.CDefClass
            Dim readOnlyField As Boolean
            '
            Dim IsEditLocked As Boolean
            Dim main_EditLockMemberName As String
            Dim main_EditLockMemberID As Integer
            Dim main_EditLockDateExpires As Date
            '
            Dim IsSubmitted As Boolean
            Dim SubmittedMemberName As String
            Dim SubmittedDate As Date
            '
            Dim IsApproved As Boolean
            Dim ApprovedMemberName As String
            Dim ApprovedDate As Date
            '
            Dim IsModified As Boolean
            Dim ModifiedMemberName As String
            Dim ModifiedDate As Date
            '
            Dim IsDeleted As Boolean
            '
            Dim IsInserted As Boolean
            Dim IsRootPage As Boolean
            '
            Dim IsWorkflowAuthoring As Boolean
            Dim s As String
            Dim PCCPtr As Integer
            Dim ChildListInstanceOptions As String
            '
            Call main_AddStylesheetLink2("/cclib/styles/ccQuickEdit.css", "Quick Editor")
            '
            ' ----- First Active Record - Output Quick Editor form
            '
            RecordID = EncodeInteger(cache_pageContent(PCC_ID, main_RenderCache_CurrentPage_PCCPtr))
            ParentID = EncodeInteger(cache_pageContent(PCC_ParentID, main_RenderCache_CurrentPage_PCCPtr))
            CDef = metaData.getCdef(LiveRecordContentName)
            '
            ' main_Get Authoring Status and permissions
            '
            IsEditLocked = workflow.GetEditLockStatus(LiveRecordContentName, RecordID)
            If IsEditLocked Then
                main_EditLockMemberName = workflow.GetEditLockMemberName(LiveRecordContentName, RecordID)
                main_EditLockDateExpires = EncodeDate(workflow.GetEditLockMemberName(LiveRecordContentName, RecordID))
            End If
            Call pageManager_GetAuthoringStatus(LiveRecordContentName, RecordID, IsSubmitted, IsApproved, SubmittedMemberName, ApprovedMemberName, IsInserted, IsDeleted, IsModified, ModifiedMemberName, ModifiedDate, SubmittedDate, ApprovedDate)
            Call pageManager_GetAuthoringPermissions(LiveRecordContentName, RecordID, AllowInsert, AllowCancel, allowSave, AllowDelete, AllowPublish, AllowAbort, AllowSubmit, AllowApprove, readOnlyField)
            AllowMarkReviewed = main_IsContentFieldSupported(ContentName, "DateReviewed")
            OptionsPanelAuthoringStatus = main_GetAuthoringStatusMessage(CDef.AllowWorkflowAuthoring, IsEditLocked, main_EditLockMemberName, main_EditLockDateExpires, IsApproved, ApprovedMemberName, IsSubmitted, SubmittedMemberName, IsDeleted, IsInserted, IsModified, ModifiedMemberName)
            IsRootPage = (ParentID = 0)
            If Not IsRootPage Then
                IsRootPage = EncodeInteger(pageManager_cache_siteSection_RootPageIDIndex.getPtr(CStr(RecordID))) <> -1
                'CSParent = app.db_csOpen("Site Sections", "RootPageID=" & RecordID, , , , , "ID")
                'IsRootPage = app.csv_IsCSOK(CSParent)
                'Call app.db_closeCS(CSParent)
                'Call main_testPoint("checking site section -- IsRootPage=" & IsRootPage)
            End If
            '
            ' Set Editing Authoring Control
            '
            Call workflow.SetEditLock(LiveRecordContentName, RecordID)
            '
            '
            ' SubPanel: Authoring Status
            '
            If AllowCancel Then
                ButtonList = ButtonList & "," & ButtonCancel
            End If
            If allowSave Then
                ButtonList = ButtonList & "," & ButtonSave & "," & ButtonOK
            End If
            If AllowDelete And Not IsRootPage Then
                ButtonList = ButtonList & "," & ButtonDelete
            End If
            If AllowInsert Then
                ButtonList = ButtonList & "," & ButtonAddChildPage
            End If
            If (ParentID <> 0) And AllowInsert Then
                ButtonList = ButtonList & "," & ButtonAddSiblingPage
            End If
            If AllowPublish Then
                ButtonList = ButtonList & "," & ButtonPublish
            End If
            If AllowAbort Then
                ButtonList = ButtonList & "," & ButtonAbortEdit
            End If
            If AllowSubmit Then
                ButtonList = ButtonList & "," & ButtonPublishSubmit
            End If
            If AllowApprove Then
                ButtonList = ButtonList & "," & ButtonPublishApprove
            End If
            If AllowMarkReviewed Then
                ButtonList = ButtonList & "," & ButtonMarkReviewed
            End If
            If ButtonList <> "" Then
                ButtonList = Mid(ButtonList, 2)
                ButtonList = main_GetPanelButtons(ButtonList, "Button")
            End If
            If OptionsPanelAuthoringStatus <> "" Then
                s = s & "" _
            & cr & "<tr>" _
            & cr2 & "<td colspan=2 class=""qeRow""><div class=""qeHeadCon"">" & OptionsPanelAuthoringStatus & "</div></td>" _
            & cr & "</tr>"
            End If
            If error_IsUserError() Then
                s = s & "" _
            & cr & "<tr>" _
            & cr2 & "<td colspan=2 class=""qeRow""><div class=""qeHeadCon"">" & error_GetUserError() & "</div></td>" _
            & cr & "</tr>"
            End If
            s = s _
            & cr & "<tr>" _
            & cr2 & "<td class=""qeRow qeLeft"" style=""padding-top:10px;"">Name</td>" _
            & cr2 & "<td class=""qeRow qeRight"">" & html_GetFormInputText2("name", EncodeText(cache_pageContent(PCC_Name, main_RenderCache_CurrentPage_PCCPtr)), 1, , , , readOnlyField) & "</td>" _
            & cr & "</tr>" _
            & cr & "<tr>" _
            & cr2 & "<td class=""qeRow qeLeft"" style=""padding-top:10px;"">Headline</td>" _
            & cr2 & "<td class=""qeRow qeRight"">" & html_GetFormInputText2("headline", EncodeText(cache_pageContent(PCC_Headline, main_RenderCache_CurrentPage_PCCPtr)), 1, , , , readOnlyField) & "</td>" _
            & cr & "</tr>" _
            & ""
            If readOnlyField Then
                s = s & "" _
            & cr & "<tr>" _
            & cr2 & "<td class=""qeRow qeLeft"" style=""padding-top:34px;"">Body</td>" _
            & cr2 & "<td class=""qeRow qeRight"">" & main_GetHtmlBody_GetSection_GetContentBox_QuickEditing_Body(LiveRecordContentName, OrderByClause, AllowPageList, True, rootPageId, readOnlyField, AllowReturnLink, RootPageContentName, ArchivePages, contactMemberID) & "</td>" _
            & cr & "</tr>"
            Else
                s = s & "" _
            & cr & "<tr>" _
            & cr2 & "<td class=""qeRow qeLeft"" style=""padding-top:111px;"">Body</td>" _
            & cr2 & "<td class=""qeRow qeRight"">" & main_GetHtmlBody_GetSection_GetContentBox_QuickEditing_Body(LiveRecordContentName, OrderByClause, AllowPageList, True, rootPageId, readOnlyField, AllowReturnLink, RootPageContentName, ArchivePages, contactMemberID) & "</td>" _
            & cr & "</tr>"
            End If
            '
            ' ----- Parent pages
            '
            If main_RenderCache_ParentBranch_PCCPtrCnt = 0 Then
                PageList = "&nbsp;(there are no parent pages)"
            Else
                PageList = "<ul class=""qeListUL""><li class=""qeListLI"">Current Page</li></ul>"
                For Ptr = 0 To main_RenderCache_ParentBranch_PCCPtrCnt - 1
                    PCCPtr = EncodeInteger(main_RenderCache_ParentBranch_PCCPtrs(Ptr))
                    Link = EncodeText(cache_pageContent(PCC_Name, PCCPtr))
                    If Link = "" Then
                        Link = "no name #" & EncodeText(cache_pageContent(PCC_ID, PCCPtr))
                    End If
                    Link = "<a href=""" & EncodeText(cache_pageContent(PCC_Link, PCCPtr)) & """>" & Link & "</a>"
                    PageList = "<ul class=""qeListUL""><li class=""qeListLI"">" & Link & PageList & "</li></ul>"
                Next
            End If
            s = s & "" _
            & cr & "<tr>" _
            & cr2 & "<td class=""qeRow qeLeft"" style=""padding-top:26px;"">Parent Pages</td>" _
            & cr2 & "<td class=""qeRow qeRight""><div class=""qeListCon"">" & PageList & "</div></td>" _
            & cr & "</tr>"
            '
            ' ----- Child pages
            '
            ChildListInstanceOptions = EncodeText(cache_pageContent(PCC_ChildListInstanceOptions, main_RenderCache_CurrentPage_PCCPtr))
            PageList = executeAddon_legacy2(siteProperties.childListAddonID, "", ChildListInstanceOptions, addonContextEnum.ContextPage, ContentName, RecordID, "", PageChildListInstanceID, False, -1, "", AddonStatusOK, Nothing)
            If vbInstr(1, PageList, "<ul", vbTextCompare) = 0 Then
                PageList = "(there are no child pages)"
            End If
            s = s _
            & cr & "<tr>" _
            & cr2 & "<td class=""qeRow qeLeft"" style=""padding-top:36px;"">Child Pages</td>" _
            & cr2 & "<td class=""qeRow qeRight""><div class=""qeListCon"">" & PageList & "</div></td>" _
            & cr & "</tr>"
            s = "" _
            & cr & "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"">" _
            & kmaIndent(s) _
            & cr & "</table>"
            s = "" _
            & ButtonList _
            & s _
            & ButtonList
            s = main_GetPanel(s)

            '
            ' Form Wrapper
            '
            s = "" _
            & cr & html_GetUploadFormStart(webServer.requestQueryString) _
            & cr & html_GetFormInputHidden("Type", FormTypePageAuthoring) _
            & cr & html_GetFormInputHidden("ID", RecordID) _
            & cr & html_GetFormInputHidden("ContentName", LiveRecordContentName) _
            & cr & main_GetPanelHeader("Contensive Quick Editor") _
            & cr & s _
            & cr & html_GetUploadFormEnd()

            main_GetHtmlBody_GetSection_GetContentBox_QuickEditing = "" _
            & cr & "<div class=""ccCon"">" _
            & kmaIndent(s) _
            & cr & "</div>"
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("main_GetHtmlBody_GetSection_GetContentBox_QuickEditing")
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Private Function main_GetHtmlBody_GetSection_GetContentBox_QuickEditing_Body(ByVal ContentName As String, ByVal OrderByClause As String, ByVal AllowChildList As Boolean, ByVal Authoring As Boolean, ByVal rootPageId As Integer, ByVal readOnlyField As Boolean, ByVal AllowReturnLink As Boolean, ByVal RootPageContentName As String, ByVal ArchivePage As Boolean, ByVal contactMemberID As Integer) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogMethodEnter("main_GetHtmlBody_GetSection_GetContentBox_QuickEditing_Body")
            '
            Dim FieldRows As Integer
            Dim PageID As Integer
            Dim parentPageID As Integer
            Dim Copy As String
            Dim copyFilename As String
            Dim Stream As String
            Dim DelimiterPosition As Integer
            Dim dateArchive As Date
            Dim addonListJSON As String
            Dim styleList As String
            Dim styleOptionList As String
            Const InputTextWidth = 60
            '
            PageID = EncodeInteger(cache_pageContent(PCC_ID, main_RenderCache_CurrentPage_PCCPtr))
            parentPageID = EncodeInteger(cache_pageContent(PCC_ParentID, main_RenderCache_CurrentPage_PCCPtr))
            dateArchive = EncodeDate(cache_pageContent(PCC_DateArchive, main_RenderCache_CurrentPage_PCCPtr))
            copyFilename = EncodeText(cache_pageContent(PCC_CopyFilename, main_RenderCache_CurrentPage_PCCPtr))
            If copyFilename <> "" Then
                Copy = cdnFiles.readFile(copyFilename)
            End If
            '
            ' ----- Page Copy
            '
            FieldRows = EncodeInteger(properties_user_getText(ContentName & ".copyFilename.PixelHeight", "500"))
            If FieldRows < 50 Then
                FieldRows = 50
                Call userProperty.setProperty(ContentName & ".copyFilename.PixelHeight", 50)
            End If
            addonListJSON = main_GetEditorAddonListJSON(csv_contentTypeEnum.contentTypeWeb)
            '
            ' At this point we do now know the the template so we can not main_Get the stylelist.
            ' Put in main_fpo_QuickEditing to be replaced after template known
            '
            pageManager_quickEdit_copy = Copy
            Copy = pageManager_quickEdit_fpo
            Stream = Stream & Copy
            '
            main_GetHtmlBody_GetSection_GetContentBox_QuickEditing_Body = Stream
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("main_GetHtmlBody_GetSection_GetContentBox_QuickEditing_Body")
        End Function
        '
        '=============================================================================
        ' main_GetHtmlBody_GetSection_GetContentBox_ReturnLink
        '=============================================================================
        '
        Private Function main_GetHtmlBody_GetSection_GetContentBox_ReturnLink(RootPageContentName As String, ignore As Integer, rootPageId As Integer, ParentIDPath As String, ArchivePage As Boolean, BreadCrumbDelimiter As String) As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogMethodEnter("main_GetHtmlBody_GetSection_GetContentBox_ReturnLink")
            '
            Dim pageCaption As String
            Dim Link As String
            Dim parentBranchPtr As Integer
            Dim PCCPtr As Integer
            Dim PageID As Integer
            Dim returnHtml As String
            '
            returnHtml = ""
            '
            parentBranchPtr = 0
            Do While (parentBranchPtr < main_RenderCache_ParentBranch_PCCPtrCnt)
                PCCPtr = EncodeInteger(main_RenderCache_ParentBranch_PCCPtrs(parentBranchPtr))
                PageID = EncodeInteger(cache_pageContent(PCC_ID, PCCPtr))
                pageCaption = EncodeText(cache_pageContent(PCC_MenuHeadline, PCCPtr))
                If pageCaption = "" Then
                    pageCaption = EncodeText(cache_pageContent(PCC_Name, PCCPtr))
                End If
                Link = pageManager_GetPageLink4(PageID, "", True, False)
                If returnHtml <> "" Then
                    returnHtml = BreadCrumbDelimiter & returnHtml
                End If
                returnHtml = "<a href=""" & html_EncodeHTML(Link) & """>" & pageCaption & "</a>" & returnHtml
                parentBranchPtr = parentBranchPtr + 1
            Loop
            '
            main_GetHtmlBody_GetSection_GetContentBox_ReturnLink = returnHtml
            '
            Exit Function
ErrorTrap:
            Call handleLegacyError13("main_GetHtmlBody_GetSection_GetContentBox_ReturnLink")
        End Function
        '=============================================================================
        ''' <summary>
        ''' Executes the current route (pathPage and/or querystring based). If not found, the default route (addon) is executed. Initially the default route is the pageManager.
        ''' </summary>
        ''' <returns>The doc created by the default addon. (html, json, etc)</returns>
        Public Function executeRoute(Optional route As String = "") As String
            Dim returnResult As String = ""
            Try
                Dim pairs() As String
                Dim pairName As String
                Dim pairValue As String
                Dim addonRoute As String = ""
                Dim routeTest As String
                Dim workingRoute As String
                Dim adminRoute As String = appConfig.adminRoute.ToLower
                Dim AjaxFunction As String = docProperties.getText(RequestNameAjaxFunction)
                Dim AjaxFastFunction As String = docProperties.getText(RequestNameAjaxFastFunction)
                Dim RemoteMethodFromQueryString As String = docProperties.getText(RequestNameRemoteMethodAddon)
                '
                'debugLog("executeRoute, enter")
                '
                ' determine route from either url or querystring 
                '
                If (Not String.IsNullOrEmpty(route)) Then
                    '
                    ' route privided as argument
                    '
                    workingRoute = route
                ElseIf (Not String.IsNullOrEmpty(RemoteMethodFromQueryString)) Then
                    '
                    ' route comes from a remoteMethod=route querystring argument
                    '
                    workingRoute = "/" & RemoteMethodFromQueryString.ToLower()
                Else
                    '
                    ' routine comes from the url
                    '
                    workingRoute = cp.Context.pathPage.ToLower
                End If
                '
                ' normalize route to /path/page or /path
                '
                workingRoute = normalizeRoute(workingRoute)
                '
                ' call with no addon route returns admin site
                '
                If False Then
                    ''
                    ''--------------------------------------------------------------------------
                    '' route is admin
                    ''--------------------------------------------------------------------------
                    ''

                    ''If the Then admin route Is taken -- the login panel processing Is bypassed. those methods need To be a different kind Of route, Or it should be an addon
                    ''runAtServerClass in the admin addon.

                    'Dim admin As New adminClass(Me)
                    'returnResult = admin.addonToBe_admin()
                Else
                    '
                    '------------------------------------------------------------------------------------------
                    '   remote method
                    '       for hardcoded_addons (simple ajax functions) and addons with asajax and inframe
                    '       Eventually replace the hard-coded ajax hood with this process
                    '       so cj. methods can be consolidated into the cj.ajax.addon (can callback) calls
                    '------------------------------------------------------------------------------------------
                    '
                    ' if route is a remote method, use it
                    '
                    routeTest = workingRoute
                    Dim addonPtr As Integer = addonCache.getPtr(routeTest)
                    If addonPtr >= 0 Then
                        If addonCache.localCache.addonList(addonPtr).addonCache_remoteMethod Then
                            addonRoute = routeTest
                        End If
                    Else
                        If (InStr(routeTest, "/", CompareMethod.Text) = 1) Then
                            routeTest = routeTest.Substring(1)
                            addonPtr = addonCache.getPtr(routeTest)
                            If addonPtr >= 0 Then
                                If addonCache.localCache.addonList(addonPtr).addonCache_remoteMethod Then
                                    addonRoute = routeTest
                                End If
                            End If
                        End If
                    End If
                    If addonRoute = "" Then
                        '
                        ' if remote method is not in route, get nameGuid from querystring
                        '
                        addonRoute = docProperties.getText(RequestNameRemoteMethodAddon)
                    End If
                    If addonRoute <> "" Then
                        '
                        ' -- this section was added here. it came from an earlier processing section of initApp() but appears to apply only to remote method processing
                        '
                        If True Then
                            '
                            '--------------------------------------------------------------------------
                            '   Verify Add-ons are run from Referrers on the Aggregate Access List
                            '--------------------------------------------------------------------------
                            '
                            If web_ReadStreamJSForm Then
                                If webServer.requestReferrer = "" Then
                                    '
                                    ' Allow it to be hand typed
                                    '
                                Else
                                    '
                                    ' Test source site
                                    '
                                    Dim refProtocol As String = ""
                                    Dim refHost As String = ""
                                    Dim refPath As String = ""
                                    Dim refPage As String = ""
                                    Dim refQueryString As String = ""
                                    Dim cs As Integer
                                    Call SeparateURL(webServer.requestReferrer, refProtocol, refHost, refPath, refPage, refQueryString)
                                    If vbUCase(refHost) <> vbUCase(webServer.requestDomain) Then
                                        '
                                        ' Not from this site
                                        '
                                        If siteProperties.getBoolean("AllowAggregateAccessBlocking") Then
                                            cs = db.csOpen("Aggregate Access", "Link=" & db_EncodeSQLText(refHost), , False, , , , "active")
                                            If Not db.cs_Ok(cs) Then
                                                '
                                                ' no record, add an inactive record and throw error
                                                '
                                                Call db.cs_Close(cs)
                                                cs = db.cs_insertRecord("Aggregate Access")
                                                If db.cs_Ok(cs) Then
                                                    Call db.cs_set(cs, "Name", refHost)
                                                    Call db.cs_set(cs, "Link", refHost)
                                                    Call db.cs_set(cs, "active", False)
                                                End If
                                                Call db.cs_Close(cs)
                                                Call handleLegacyError12("Init", "Add-on call from [" & refHost & "] was blocked because this domain is not in the Aggregate Access Content. An inactive record was added. To allow this domain access, mark the record active.")
                                                docOpen = False '--- should be disposed by caller --- Call dispose
                                                Return _docBuffer
                                            ElseIf Not db.cs_getBoolean(cs, "active") Then
                                                '
                                                ' inactive record, throw error
                                                '
                                                Call db.cs_Close(cs)
                                                Call handleLegacyError12("Init", "Add-on call from [" & refHost & "] was blocked because this domain is not active in the Aggregate Access Content. To allow this domain access, mark the record active.")
                                                docOpen = False '--- should be disposed by caller --- Call dispose
                                                Return _docBuffer
                                            Else
                                                '
                                                ' Active record, allow hit
                                                '
                                                Call db.cs_Close(cs)
                                            End If
                                        End If
                                    End If
                                End If
                            End If
                        End If
                        '
                        'Call AppendLog("main_init(), 2710 - exit for remote method")
                        '
                        If True Then
                            Dim Option_String As String = ""
                            Dim pos As Integer
                            Dim HostContentName As String
                            Dim hostRecordId As Integer
                            If docProperties.containsKey("Option_String") Then
                                Option_String = docProperties.getText("Option_String")
                            Else
                                '
                                ' convert Querystring encoding to (internal) NVA
                                '
                                If webServer.requestQueryString <> "" Then
                                    pairs = Split(webServer.requestQueryString, "&")
                                    For addonPtr = 0 To UBound(pairs)
                                        pairName = pairs(addonPtr)
                                        pairValue = ""
                                        pos = vbInstr(1, pairName, "=")
                                        If pos > 0 Then
                                            pairValue = DecodeResponseVariable(Mid(pairName, pos + 1))
                                            pairName = DecodeResponseVariable(Mid(pairName, 1, pos - 1))
                                        End If
                                        Option_String = Option_String & "&" & encodeNvaArgument(pairName) & "=" & encodeNvaArgument(pairValue)
                                    Next
                                    Option_String = Mid(Option_String, 2)
                                End If
                            End If
                            HostContentName = docProperties.getText("hostcontentname")
                            hostRecordId = docProperties.getInteger("HostRecordID")
                            '
                            ' remote methods are add-ons
                            '
                            Dim AddonStatusOK As Boolean = True
                            returnResult = executeAddon(0, addonRoute, Option_String, addonContextEnum.ContextRemoteMethod, HostContentName, hostRecordId, "", "0", False, 0, "", AddonStatusOK, Nothing, "", Nothing, "", user.id, user.isAuthenticated)
                        End If
                        '
                        ' deliver styles, javascript and other head tags as javascript appends
                        '
                        web_BlockClosePageCopyright = True
                        main_BlockClosePageLink = True
                        If (web_OutStreamDevice = web_OutStreamJavaScript) Then
                            If vbInstr(1, returnResult, "<form ", vbTextCompare) <> 0 Then
                                Dim FormSplit As String() = Split(returnResult, "<form ", , vbTextCompare)
                                returnResult = FormSplit(0)
                                For addonPtr = 1 To UBound(FormSplit)
                                    Dim FormEndPos As Integer = vbInstr(1, FormSplit(addonPtr), ">")
                                    Dim FormInner As String = Mid(FormSplit(addonPtr), 1, FormEndPos)
                                    Dim FormSuffix As String = Mid(FormSplit(addonPtr), FormEndPos + 1)
                                    FormInner = vbReplace(FormInner, "method=""post""", "method=""main_Get""", 1, 99, vbTextCompare)
                                    FormInner = vbReplace(FormInner, "method=post", "method=""main_Get""", 1, 99, vbTextCompare)
                                    returnResult = returnResult & "<form " & FormInner & FormSuffix
                                Next
                            End If
                            '
                            Call writeAltBuffer(returnResult)
                            returnResult = ""
                        End If
                        '
                        ' 20161227 - executeRoute came from old init(), which used the altBuffer to mock a return. Back that out and return the result directly.
                        '
                        Return returnResult
                        'Call AppendLog("call main_getEndOfBody, from main_inite")
                        'returnResult = returnResult & main_GetEndOfBody(False, False, True, False)
                        'Call writeAltBuffer(returnResult)
                        'docOpen = False '--- should be disposed by caller --- Call dispose
                        'Return _docBuffer
                    End If
                    If True Then
                        '
                        '------------------------------------------------------------------------------------------
                        '   These should all be converted to system add-ons
                        '
                        '   AJAX late functions (slower then the early functions, but they include visit state, etc.
                        '------------------------------------------------------------------------------------------
                        '
                        If AjaxFunction <> "" Then
                            returnResult = ""
                            Select Case AjaxFunction
                                Case ajaxGetFieldEditorPreferenceForm
                                    '
                                    ' When editing in admin site, if a field has multiple editors (addons as editors), you main_Get an icon
                                    '   to click to select the editor. When clicked, a fancybox opens to display a form. The onStart of
                                    '   he fancybox calls this ajax call and puts the return in the div that is displayed. Return a list
                                    '   of addon editors compatible with the field type.
                                    '
                                    Dim addonDefaultEditorName As String = ""
                                    Dim addonDefaultEditorId As Integer = 0
                                    Dim fieldId As Integer = doc_getInteger("fieldid")
                                    '
                                    ' main_Get name of default editor
                                    '
                                    Dim Sql As String = "select top 1" _
                                        & " a.name,a.id" _
                                        & " from ccfields f left join ccAggregateFunctions a on a.id=f.editorAddonId" _
                                        & " where" _
                                        & " f.ID = " & fieldId _
                                        & ""
                                    Dim dt As DataTable
                                    dt = db.executeSql(Sql)
                                    If dt.Rows.Count > 0 Then
                                        For Each rsDr As DataRow In dt.Rows
                                            addonDefaultEditorName = "&nbsp;(" & EncodeText(rsDr("name")) & ")"
                                            addonDefaultEditorId = EncodeInteger(rsDr("id"))
                                        Next
                                    End If
                                    '
                                    Dim radioGroupName As String = "setEditorPreference" & fieldId
                                    Dim currentEditorAddonId As Integer = doc_getInteger("currentEditorAddonId")
                                    Dim submitFormId As Integer = doc_getInteger("submitFormId")
                                    Sql = "select f.name,c.name,r.addonid,a.name as addonName" _
                                        & " from (((cccontent c" _
                                        & " left join ccfields f on f.contentid=c.id)" _
                                        & " left join ccAddonContentFieldTypeRules r on r.contentFieldTypeID=f.type)" _
                                        & " left join ccAggregateFunctions a on a.id=r.AddonId)" _
                                        & " where f.id=" & fieldId

                                    dt = db.executeSql(Sql)
                                    If dt.Rows.Count > 0 Then
                                        For Each rsDr As DataRow In dt.Rows
                                            Dim addonId As Integer = EncodeInteger(rsDr("addonid"))
                                            If (addonId <> 0) And (addonId <> addonDefaultEditorId) Then
                                                returnResult = returnResult _
                                                    & vbCrLf & vbTab & "<div class=""radioCon"">" & html_GetFormInputRadioBox(radioGroupName, EncodeText(addonId), CStr(currentEditorAddonId)) & "&nbsp;Use " & EncodeText(rsDr("addonName")) & "</div>" _
                                                    & ""
                                            End If

                                        Next
                                    End If

                                    Dim OnClick As String = "" _
                                        & "var a=document.getElementsByName('" & radioGroupName & "');" _
                                        & "for(i=0;i<a.length;i++) {" _
                                        & "if(a[i].checked){var v=a[i].value}" _
                                        & "}" _
                                        & "document.getElementById('fieldEditorPreference').value='" & fieldId & ":'+v;" _
                                        & "cj.admin.saveEmptyFieldList('" & "FormEmptyFieldList');" _
                                        & "document.getElementById('adminEditForm').submit();" _
                                        & ""

                                    returnResult = "" _
                                        & vbCrLf & vbTab & "<h1>Editor Preference</h1>" _
                                        & vbCrLf & vbTab & "<p>Select the editor you will use for this field. Select default if you want to use the current system default.</p>" _
                                        & vbCrLf & vbTab & "<div class=""radioCon"">" & html_GetFormInputRadioBox("setEditorPreference" & fieldId, "0", "0") & "&nbsp;Use Default Editor" & addonDefaultEditorName & "</div>" _
                                        & vbCrLf & vbTab & returnResult _
                                        & vbCrLf & vbTab & "<div class=""buttonCon"">" _
                                        & vbCrLf & vbTab & "<button type=""button"" onclick=""" & OnClick & """>Select</button>" _
                                        & vbCrLf & vbTab & "</div>" _
                                        & ""
                                Case AjaxGetDefaultAddonOptionString
                                    '
                                    ' return the addons defult AddonOption_String
                                    ' used in wysiwyg editor - addons in select list have no defaultOption_String
                                    ' because created it is expensive (lookuplists, etc). This is only called
                                    ' when the addon is double-clicked in the editor after being dropped
                                    '
                                    Dim AddonGuid As String = docProperties.getText("guid")
                                    '$$$$$ cache this
                                    Dim CS As Integer = db.csOpen("add-ons", "ccguid=" & db.encodeSQLText(AddonGuid))
                                    Dim addonArgumentList As String = ""
                                    Dim addonIsInline As Boolean = False
                                    If db.cs_Ok(CS) Then
                                        addonArgumentList = db.cs_getText(CS, "argumentlist")
                                        addonIsInline = db.cs_getBoolean(CS, "IsInline")
                                        returnResult = main_GetDefaultAddonOption_String(addonArgumentList, AddonGuid, addonIsInline)
                                    End If
                                    Call db.cs_Close(CS)
                                Case AjaxSetVisitProperty
                                    '
                                    ' 7/7/2009 - Moved from HardCodedPages - sets a visit property from the cj object
                                    '
                                    Dim ArgList As String = docProperties.getText("args")
                                    Dim Args As String() = Split(ArgList, "&")
                                    Dim gd As GoogleDataType = New GoogleDataType
                                    gd.IsEmpty = True
                                    For Ptr = 0 To UBound(Args)
                                        Dim ArgNameValue As String() = Split(Args(Ptr), "=")
                                        Dim PropertyName As String = ArgNameValue(0)
                                        Dim PropertyValue As String = ""
                                        If UBound(ArgNameValue) > 0 Then
                                            PropertyValue = ArgNameValue(1)
                                        End If
                                        Call visitProperty.setProperty(PropertyName, PropertyValue)
                                    Next
                                    returnResult = main_FormatRemoteQueryOutput(gd, RemoteFormatEnum.RemoteFormatJsonNameValue)
                                    returnResult = main_encodeHTML(returnResult)
                                    Call writeAltBuffer(returnResult)
                                Case AjaxGetVisitProperty
                                    '
                                    ' 7/7/2009 - Moved from HardCodedPages - sets a visit property from the cj object
                                    '
                                    Dim ArgList As String = docProperties.getText("args")
                                    Dim Args As String() = Split(ArgList, "&")
                                    Dim gd As GoogleDataType = New GoogleDataType
                                    gd.IsEmpty = False
                                    ReDim gd.row(0)

                                    For Ptr = 0 To UBound(Args)
                                        ReDim Preserve gd.col(Ptr)
                                        ReDim Preserve gd.row(0).Cell(Ptr)
                                        Dim ArgNameValue As String() = Split(Args(Ptr), "=")
                                        Dim PropertyName As String = ArgNameValue(0)
                                        gd.col(Ptr).Id = PropertyName
                                        gd.col(Ptr).Label = PropertyName
                                        gd.col(Ptr).Type = "string"
                                        Dim PropertyValue As String = ""
                                        If UBound(ArgNameValue) > 0 Then
                                            PropertyValue = ArgNameValue(1)
                                        End If
                                        gd.row(0).Cell(Ptr).v = visitProperty.getText(PropertyName, PropertyValue)
                                    Next
                                    returnResult = main_FormatRemoteQueryOutput(gd, RemoteFormatEnum.RemoteFormatJsonNameValue)
                                    returnResult = main_encodeHTML(returnResult)
                                    Call writeAltBuffer(returnResult)
                                Case AjaxData
                                    '
                                    ' 7/7/2009 - Moved from HardCodedPages - Run remote query from cj.remote object call, and return results html encoded in a <result></result> block
                                    ' 20050427 - not used
                                    Call writeAltBuffer(init_ProcessAjaxData())
                                Case AjaxPing
                                    '
                                    ' returns OK if the server is alive
                                    '
                                    returnResult = "ok"
                                Case AjaxOpenIndexFilter
                                    Call visitProperty.setProperty("IndexFilterOpen", "1")
                                Case AjaxOpenIndexFilterGetContent
                                    '
                                    ' should be converted to adminClass remoteMethod
                                    '
                                    Call visitProperty.setProperty("IndexFilterOpen", "1")
                                    Dim adminSite As New Contensive.Addons.addon_AdminSiteClass(cp)
                                    Dim ContentID As Integer = docProperties.getInteger("cid")
                                    If ContentID = 0 Then
                                        returnResult = "No filter is available"
                                    Else
                                        Dim cdef As coreMetaDataClass.CDefClass = metaData.getCdef(ContentID)
                                        returnResult = adminSite.GetForm_IndexFilterContent(cdef)
                                    End If
                                    adminSite = Nothing
                                Case AjaxCloseIndexFilter
                                    Call visitProperty.setProperty("IndexFilterOpen", "0")
                                Case AjaxOpenAdminNav
                                    Call visitProperty.setProperty("AdminNavOpen", "1")
                                Case Else
                            End Select
                            '
                            'Call AppendLog("main_init(), 2810 - exit for ajax hook")
                            '
                            web_BlockClosePageCopyright = True
                            main_BlockClosePageLink = True
                            'Call AppendLog("call main_getEndOfBody, from main_initf")
                            returnResult = returnResult & main_GetEndOfBody(False, False, True, False)
                            Call writeAltBuffer(returnResult)
                            docOpen = False '--- should be disposed by caller --- Call dispose
                            Return _docBuffer
                        End If
                    End If
                    '
                    '--------------------------------------------------------------------------
                    '   Process Email Open and Click Intercepts
                    '   works with DropID -> spacer.gif, or DropCssID -> styles.css
                    '--------------------------------------------------------------------------
                    '
                    If True Then
                        Dim recordid As Integer
                        Dim emailDropId As Integer
                        Dim RedirectLink As String
                        Dim EmailMemberID As Integer
                        Dim CSLog As Integer
                        Dim EmailSpamBlock As String
                        recordid = 0
                        emailDropId = docProperties.getInteger(RequestNameEmailOpenFlag)
                        If emailDropId <> 0 Then
                            recordid = emailDropId
                        End If
                        '    End If
                        If (recordid <> 0) Then
                            '
                            ' ----- Email open detected. Log it and redirect to a 1x1 spacer
                            '
                            EmailMemberID = docProperties.getInteger(RequestNameEmailMemberID)
                            CSLog = db.cs_insertRecord("Email Log")
                            If db.cs_Ok(CSLog) Then
                                Call db.cs_set(CSLog, "Name", "Opened " & CStr(main_PageStartTime))
                                Call db.cs_set(CSLog, "EmailDropID", recordid)
                                Call db.cs_set(CSLog, "MemberID", EmailMemberID)
                                Call db.cs_set(CSLog, "LogType", EmailLogTypeOpen)
                            End If
                            Call db.cs_Close(CSLog)
                            RedirectLink = web_requestProtocol & webServer.requestDomain & "/ccLib/images/spacer.gif"
                            Call web_Redirect2(RedirectLink, "Group Email Open hit, redirecting to a dummy image", False)
                        End If
                        '
                        emailDropId = docProperties.getInteger(RequestNameEmailClickFlag)
                        EmailSpamBlock = docProperties.getText(RequestNameEmailSpamFlag)
                        If (emailDropId <> 0) And (EmailSpamBlock = "") Then
                            '
                            ' ----- Email click detected. Log it.
                            '
                            EmailMemberID = docProperties.getInteger(RequestNameEmailMemberID)
                            CSLog = db.cs_insertRecord("Email Log")
                            If db.cs_Ok(CSLog) Then
                                Call db.cs_set(CSLog, "Name", "Clicked " & CStr(main_PageStartTime))
                                Call db.cs_set(CSLog, "EmailDropID", emailDropId)
                                Call db.cs_set(CSLog, "MemberID", EmailMemberID)
                                Call db.cs_set(CSLog, "VisitId", visit_Id)
                                Call db.cs_set(CSLog, "LogType", EmailLogTypeClick)
                            End If
                            Call db.cs_Close(CSLog)
                        End If
                        If EmailSpamBlock <> "" Then
                            '
                            ' ----- Email spam footer was clicked, clear the AllowBulkEmail field
                            '
                            Call email_addToEmailBlockList_InternalOnly(EmailSpamBlock)
                            '
                            CSLog = db.csOpen("people", "email=" & db.encodeSQLText(EmailSpamBlock), , , , , , "AllowBulkEmail")
                            Do While db.cs_Ok(CSLog)
                                Call db.cs_set(CSLog, "AllowBulkEmail", False)
                                Call db.db_csGoNext(CSLog)
                            Loop
                            Call db.cs_Close(CSLog)
                            '
                            ' ----- Make a log entry to track the result of this email drop
                            '
                            emailDropId = docProperties.getInteger(RequestNameEmailBlockRequestDropID)
                            If emailDropId <> 0 Then
                                '
                                ' ----- Email click detected. Log it.
                                '
                                EmailMemberID = docProperties.getInteger(RequestNameEmailMemberID)
                                CSLog = db.cs_insertRecord("Email Log")
                                If db.cs_Ok(CSLog) Then
                                    Call db.cs_set(CSLog, "Name", "Email Block Request " & CStr(main_PageStartTime))
                                    Call db.cs_set(CSLog, "EmailDropID", emailDropId)
                                    Call db.cs_set(CSLog, "MemberID", EmailMemberID)
                                    Call db.cs_set(CSLog, "VisitId", visit_Id)
                                    Call db.cs_set(CSLog, "LogType", EmailLogTypeBlockRequest)
                                End If
                                Call db.cs_Close(CSLog)
                            End If
                            Call web_Redirect2(web_requestProtocol & webServer.requestDomain & "/cclib/popup/EmailBlocked.htm", "Group Email Spam Block hit. Redirecting to EmailBlocked page.", False)
                        End If
                    End If
                    '
                    '--------------------------------------------------------------------------
                    '   Process Intercept Pages
                    '       must be before main_Get Intercept Pages
                    '       must be before path block, so a login will main_Get you through
                    '       must be before verbose check, so a change is reflected on this page
                    '--------------------------------------------------------------------------
                    '
                    If True Then
                        Dim formType As String
                        Dim StyleSN As Integer
                        formType = docProperties.getText("type")
                        If (formType <> "") Then
                            '
                            ' set the meta content flag to show it is not needed for the head tag
                            '
                            Call main_SetMetaContent(0, 0)
                            Select Case formType
                                Case FormTypeSiteStyleEditor
                                    If user.isAuthenticated() And user.isAuthenticatedAdmin() Then
                                        '
                                        ' Save the site sites
                                        '
                                        Call appRootFiles.saveFile(DynamicStylesFilename, docProperties.getText("SiteStyles"))
                                        If main_GetStreamBoolean2(RequestNameInlineStyles) Then
                                            '
                                            ' Inline Styles
                                            '
                                            Call siteProperties.setProperty("StylesheetSerialNumber", "0")
                                        Else
                                            '
                                            ' Linked Styles
                                            ' Bump the Style Serial Number so next fetch is not cached
                                            '
                                            StyleSN = siteProperties.getinteger("StylesheetSerialNumber", 0)
                                            StyleSN = StyleSN + 1
                                            Call siteProperties.setProperty("StylesheetSerialNumber", EncodeText(StyleSN))
                                            '
                                            ' Save new public stylesheet
                                            '
                                            Call appRootFiles.saveFile("templates\Public" & StyleSN & ".css", pageManager_GetStyleSheet)
                                            Call appRootFiles.saveFile("templates\Admin" & StyleSN & ".css", pageManager_GetStyleSheetDefault)
                                        End If
                                    End If
                                Case FormTypeAddonStyleEditor
                                    '
                                    ' save custom styles
                                    '
                                    If user.isAuthenticated() And user.isAuthenticatedAdmin() Then
                                        Dim addonId As Integer
                                        Dim contentName As String = ""
                                        Dim tableName As String
                                        Dim nothingObject As Object = Nothing
                                        Dim cs As Integer
                                        addonId = docProperties.getInteger("AddonID")
                                        cs = db_csOpen("Add-ons", addonId)
                                        If db.cs_Ok(cs) Then
                                            Call db.cs_set(cs, "CustomStylesFilename", docProperties.getText("CustomStyles"))
                                        End If
                                        Call db.cs_Close(cs)
                                        '
                                        ' Clear Caches
                                        '
                                        Call pageManager_cache_pageContent_clear()
                                        Call pageManager_cache_pageTemplate_clear()
                                        Call pageManager_cache_siteSection_clear()
                                        Call cache.invalidateTagCommaList("")
                                        If contentName <> "" Then
                                            Call cache.invalidateTagCommaList(contentName)
                                            tableName = db_GetContentTablename(contentName)
                                            If vbLCase(tableName) = "cctemplates" Then
                                                Call cache.setKey(pageManager_cache_pageTemplate_cacheName, nothingObject)
                                                Call pageManager_cache_pageTemplate_load()
                                            End If
                                        End If
                                    End If
                                Case FormTypeAddonSettingsEditor
                                    '
                                    '
                                    '
                                    Call pageManager_ProcessAddonSettingsEditor()
                                Case FormTypeHelpBubbleEditor
                                    '
                                    '
                                    '
                                    Call main_ProcessHelpBubbleEditor()
                                Case FormTypeJoin
                                    '
                                    '
                                    '
                                    Call user.processFormJoin()
                                Case FormTypeSendPassword
                                    '
                                    '
                                    '
                                    Call user.processFormSendPassword()
                                Case FormTypeLogin, "l09H58a195"
                                    '
                                    '
                                    '
                                    Call user.processFormLoginDefault()
                            'Case FormTypeMyProfile
                            '    '
                            '    '
                            '    '
                            '    Call main_ProcessFormMyProfile()
                            '    If main_iUserError <> "" Then
                            '        '
                            '        ' Problem with the form, go back to the page
                            '        '
                            '        HardCodedPage = "myprofile"
                            '        'LegacyInterceptPageSN = LegacyInterceptPageSNMyProfile
                            '    Else
                            '        '
                            '        ' No user error, close the page
                            '        '
                            '        '
                            '        'Call AppendLog("main_init(), 3010 - exit for myprofile popup window")
                            '        '
                            '        Call writeAltBuffer("<script Language=""JavaScript"" type=""text/javascript""> window.close(); </Script>")
                            '        Call writeAltBuffer(main_GetPageEnd)
                            '        responseOpen = False '--- should be disposed by caller --- Call dispose
                            '        Return docBuffer
                            '    End If
                                Case FormTypeToolsPanel
                                    '
                                    ' ----- Administrator Tools Panel
                                    '
                                    Call pageManager_ProcessFormToolsPanel()
                                Case FormTypePageAuthoring
                                    '
                                    ' ----- Page Authoring Tools Panel
                                    '
                                    Call pageManager_ProcessFormQuickEditing()
                                Case FormTypeActiveEditor
                                    '
                                    ' ----- Active Editor
                                    '
                                    Call main_ProcessActiveEditor()
                            End Select
                        End If
                    End If
                    '
                    '--------------------------------------------------------------------------
                    ' Process HardCoded Methods
                    ' must go after form processing bc some of these pages have forms that are processed
                    '--------------------------------------------------------------------------
                    '
                    Dim HardCodedPage As String
                    HardCodedPage = docProperties.getText(RequestNameHardCodedPage)
                    If (HardCodedPage <> "") Then
                        '
                        'Call AppendLog("main_init(), 3110 - exit for hardcodedpage hook")
                        '
                        Dim ExitNow As Boolean = executeRoute_hardCodedPage(HardCodedPage)
                        If ExitNow Then
                            docOpen = False '--- should be disposed by caller --- Call dispose
                            Return _docBuffer
                        End If
                    End If
                    '
                    '--------------------------------------------------------------------------
                    ' normalize adminRoute and test for hit
                    '--------------------------------------------------------------------------
                    '
                    If (workingRoute = normalizeRoute(adminRoute)) Then
                        '
                        'debugLog("executeRoute, route is admin")
                        '
                        '--------------------------------------------------------------------------
                        ' route is admin
                        '   If the Then admin route Is taken -- the login panel processing Is bypassed. those methods need To be a different kind Of route, Or it should be an addon
                        '   runAtServerClass in the admin addon.
                        '--------------------------------------------------------------------------
                        '
                        Dim returnStatusOK As Boolean = False
                        '
                        ' REFACTOR -- when admin code is broken cleanly into an addon, run it through execute
                        '
                        'returnResult = executeAddon(0, adminSiteAddonGuid, "", addonContextEnum.ContextAdmin, "", 0, "", "", False, 0, "", returnStatusOK, Nothing, "", Nothing, "", user.userid, visit_isAuthenticated)
                        '
                        ' until then, run it as an internal class
                        '
                        Dim admin As New Contensive.Addons.addon_AdminSiteClass()
                        returnResult = admin.execute(cp).ToString()
                    Else
                        '--------------------------------------------------------------------------
                        ' default routing addon takes what is left
                        '
                        ' Here was read a site property set to the default addon. Might be performanceCloud-type web application. Might be page-manager
                        '
                        '--------------------------------------------------------------------------
                        '
                        'debugLog("executeRoute, route is Default Route AddonId")
                        '
                        Dim defaultAddonId As Integer = cp.Site.GetInteger("Default Route AddonId")
                        If defaultAddonId <> 0 Then
                            Dim addonStatusOk As Boolean = False
                            returnResult = executeAddon(defaultAddonId, "", "", addonContextEnum.ContextPage, "", 0, "", "", False, 0, "", addonStatusOk, Nothing, "", Nothing, "", user.id, visit_isAuthenticated)
                        End If
                        'returnResult = addonToBe_pageManager()
                    End If
                End If
                '
                'debugLog("executeRoute, exit")
                '
            Catch ex As Exception
                '
                'debugLog("executeRoute, exception")
                '
                handleExceptionLegacyRow2(ex, "cpCoreClass", System.Reflection.MethodInfo.GetCurrentMethod.Name, "Unexpected Exception")
            End Try
            Return returnResult
        End Function
        '
        '====================================================================================================
        ''' <summary>
        ''' cpCoreClass constructor common tasks.
        ''' </summary>
        ''' <param name="cp"></param>
        ''' <remarks></remarks>
        Private Sub constructorCommonInitialize(appName As String)
            Try
                Dim JSONTemp As String
                Dim tempFiles As coreFileSystemClass
                '
                constructorTickCount = GetTickCount
                CPTickCountBase = GetTickCount
                '
                ' ----- read/create serverConfig
                '
                tempFiles = New coreFileSystemClass(Me, True, coreFileSystemClass.fileSyncModeEnum.noSync, getProgramDataFolder)
                JSONTemp = tempFiles.readFile("serverConfig.json")
                If String.IsNullOrEmpty(JSONTemp) Then
                    '
                    ' initialize serverConfig (do not let anything take a site down)
                    '
                    serverConfig = New serverConfigClass
                    serverConfig.clusterPath = "d:\"
                    If (Not System.IO.Directory.Exists(serverConfig.clusterPath)) Then
                        serverConfig.clusterPath = "c:\"
                    End If
                    serverConfig.clusterPath &= "inetPub"
                    If Not (System.IO.Directory.Exists(serverConfig.clusterPath)) Then
                        System.IO.Directory.CreateDirectory(serverConfig.clusterPath)
                    End If
                    serverConfig.allowTaskRunnerService = False
                    serverConfig.allowTaskSchedulerService = False
                    tempFiles.saveFile("serverConfig.json", json.Serialize(serverConfig))
                Else
                    serverConfig = json.Deserialize(Of serverConfigClass)(JSONTemp)
                End If
                '
                ' ----- read/create clusterConfig
                '
                tempFiles = New coreFileSystemClass(Me, True, coreFileSystemClass.fileSyncModeEnum.noSync, serverConfig.clusterPath)
                JSONTemp = tempFiles.readFile("clusterConfig.json")
                If String.IsNullOrEmpty(JSONTemp) Then
                    '
                    ' for now it fails, maybe later let it autobuild a local cluster
                    '
                Else
                    clusterConfig = json.Deserialize(Of clusterConfigClass)(JSONTemp)
                End If
                '
                If (Not String.IsNullOrEmpty(appName)) Then
                    '
                    ' REFACTOR - cluster mode is not associated to an application, so no cache/sql, but the keyPtrCacheClass runs sql and uses cache, but this must be used in cluster mode
                    '
                    appStatus = applicationStatusEnum.ApplicationStatusLoading
                    '
                    If (cluster Is Nothing) Then
                        '
                        ' cannot continue with the cluster created
                        '
                        Throw New ApplicationException("appServices constructor failed because clusterServices are not valid.")
                    Else
                        If (Not clusterConfig.apps.ContainsKey(appName.ToLower())) Then
                            '
                            ' application now configured
                            '
                            appConfig = New appConfigClass()
                            appStatus = applicationStatusEnum.ApplicationStatusAppConfigNotValid
                            Throw New Exception("application [" & appName & "] was not found in this cluster.")
                        Else
                            appConfig = clusterConfig.apps(appName.ToLower())
                        End If
                        '
                        If vbInstr(1, appConfig.domainList(0), ",") > 1 Then
                            '
                            ' if first entry in domain list is comma delimited, save only the first entry
                            '
                            appConfig.domainList(0) = Mid(appConfig.domainList(0), 1, vbInstr(1, appConfig.domainList(0), ",") - 1)
                        End If
                        '
                        ' initialize datasource
                        '
                        db.db_AddDataSource("Default", -1, clusterConfig.defaultDataSourceODBCConnectionString)
                        '
                        ' REFACTOR - this was removed because during debug is costs 300msec, and only helps case with small edge case of Db loss -- test that case for risks
                        '
                        appStatus = applicationStatusEnum.ApplicationStatusReady
                    End If
                    '
                    cache_addonStyleRules = New coreCacheKeyPtrClass(Me, cacheNameAddonStyleRules, sqlAddonStyles, "shared style add-on rules,add-ons,shared styles")
                End If
                '
                '
                '
                main_ClosePageCounter = 0
                allowDebugLog = True
                main_PageStartTime = DateTime.Now()
                main_PageTestPointPrinting = True
                main_AllowCookielessDetection = True
                main_LoginIconFilename = ""
                main_IconFileDefault = "/ccLib/images/IconDoc.gif"
                main_IconFolderClosed = "/ccLib/images/main_IconFolderClosed.gif"
                main_IconFolderOpen = "/ccLib/images/main_IconFolderOpen.gif"
                main_IconFolderUp = "/ccLib/images/main_IconFolderOpen.gif"
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
        End Sub
        '
        '====================================================================================================
        ''' <summary>
        ''' cpCoreClass constructor for cluster use.
        ''' </summary>
        ''' <param name="cp"></param>
        ''' <remarks></remarks>
        Public Sub New(cp As CPClass)
            MyBase.New()
            Me.cp = cp
            iisContext = Nothing
            constructorCommonInitialize("")
        End Sub
        '
        '====================================================================================================
        ''' <summary>
        ''' cpCoreClass constructor for app, non-Internet use. cpCoreClass is the primary object internally, created by cp.
        ''' </summary>
        ''' <param name="cp"></param>
        ''' <remarks></remarks>
        Public Sub New(cp As CPClass, applicationName As String)
            MyBase.New()
            Me.cp = cp
            iisContext = Nothing
            constructorCommonInitialize(applicationName)
        End Sub
        '====================================================================================================
        ''' <summary>
        ''' cpCoreClass constructor for a web request/response environment. cpCoreClass is the primary object internally, created by cp.
        ''' </summary>
        ''' <param name="cp"></param>
        ''' <remarks>
        ''' All iis httpContext is loaded here and the context should not be used after this method.
        ''' </remarks>
        Public Sub New(cp As CPClass, applicationName As String, httpContext As System.Web.HttpContext)
            MyBase.New()
            Me.cp = cp
            constructorCommonInitialize(applicationName)
            '
            ' web client initialize
            '
            iisContext = httpContext
            Dim key As String
            Dim isMultipartPost As Boolean
            Dim keyValue As String
            Dim parser As MultipartFormDataParser
            Dim isAdmin As Boolean = False
            Dim pos As Integer
            Dim aliasRoute As String
            Dim SourceProtocol As String = ""
            Dim aliasDomain As String = ""
            Dim aliasPort As String = ""
            Dim aliasPathPage As String = ""
            Dim testPage As String
            Dim SourceExtension As String = ""
            Dim qsCnt As Integer = 0
            '
            ' setup IIS Response
            '
            iisContext.Response.CacheControl = "no-cache"
            iisContext.Response.Expires = -1
            iisContext.Response.Buffer = True
            ''
            '
            ' ----- basic request environment
            '
            webServer.requestDomain = iisContext.Request.ServerVariables("SERVER_NAME")
            webServer.requestPathPage = CStr(iisContext.Request.ServerVariables("SCRIPT_NAME"))
            webServer.requestReferrer = CStr(iisContext.Request.ServerVariables("HTTP_REFERER"))
            webServer.requestSecure = CBool(iisContext.Request.ServerVariables("SERVER_PORT_SECURE"))
            webServer.requestRemoteIP = CStr(iisContext.Request.ServerVariables("REMOTE_ADDR"))
            webServer.requestBrowser = CStr(iisContext.Request.ServerVariables("HTTP_USER_AGENT"))
            webServer.RequestLanguage = CStr(iisContext.Request.ServerVariables("HTTP_ACCEPT_LANGUAGE"))
            webServer.requestHttpAccept = CStr(iisContext.Request.ServerVariables("HTTP_ACCEPT"))
            webServer.requestHttpAcceptCharset = CStr(iisContext.Request.ServerVariables("HTTP_ACCEPT_CHARSET"))
            webServer.requestHttpProfile = CStr(iisContext.Request.ServerVariables("HTTP_PROFILE"))
            '
            ' ----- http QueryString
            '
            isMultipartPost = False
            If (iisContext.Request.QueryString.Count > 0) Then
                webServer.requestQueryString = ""
                aliasRoute = ""
                qsCnt = 0
                For Each key In iisContext.Request.QueryString
                    keyValue = iisContext.Request.QueryString(key)
                    docProperties.setProperty(key, keyValue)
                    If (qsCnt > 0) Then
                        '
                        ' normal non-first elements
                        '
                        webServer.requestQueryString = ModifyQueryString(webServer.requestQueryString, key, keyValue)
                    Else
                        '
                        ' first element - test first querystring element for iis 404
                        '
                        If ((keyValue & "    ").Substring(0, 4) = "404;") Then
                            ' 404 hit with url like http://domain/page, qsName is http://domain/page qsValue is value0
                            aliasRoute = keyValue.Substring(4)
                            webServer.requestQueryString = ModifyQueryString(webServer.requestQueryString, key, keyValue)
                        Else
                            ' test for special 404 case where first element of qs starts 404;url
                            If ((key & "    ").Substring(0, 4) = "404;") Then
                                ' 404 hit with url like 404;http://domain/page?name0=value0&etc... , qsName is http://domain/page?name0 qsValue is value0
                                key = key.Substring(4)
                                pos = vbInstr(1, key, "?")
                                If pos <> 0 Then
                                    aliasRoute = Mid(key, 1, pos - 1)
                                    key = Mid(key, pos + 1)
                                Else
                                    aliasRoute = key
                                    key = ""
                                End If
                                webServer.requestQueryString = ModifyQueryString(webServer.requestQueryString, key, keyValue)
                            Else
                                webServer.requestQueryString = ModifyQueryString(webServer.requestQueryString, key, keyValue)
                            End If
                        End If
                        '
                        ' set context domain and pathPath from the URL from in the 404 string 
                        '
                        pos = vbInstr(1, aliasRoute, "://")
                        If pos > 0 Then
                            '
                            ' remove protocol
                            '
                            testPage = aliasRoute
                            SourceProtocol = Mid(testPage, 1, pos + 2)
                            testPage = Mid(testPage, pos + 3)
                            pos = vbInstr(1, testPage, "/")
                            If pos > 0 Then
                                '
                                ' remove domain and port
                                '
                                aliasDomain = Mid(testPage, 1, pos - 1)
                                aliasPathPage = Mid(testPage, pos)
                                pos = vbInstr(1, aliasDomain, ":")
                                If pos > 0 Then
                                    aliasPort = Mid(aliasDomain, pos + 1)
                                    aliasDomain = Left(aliasDomain, pos - 1)
                                End If
                            End If
                            webServer.requestDomain = aliasDomain
                            If (aliasPathPage.Substring(aliasPathPage.Length - 1) = "/") Then
                                aliasPathPage = aliasPathPage.Substring(0, aliasPathPage.Length - 1)
                            End If
                            webServer.requestPathPage = aliasPathPage
                        End If
                    End If
                    isMultipartPost = isMultipartPost Or (LCase(key) = "requestbinary")
                    qsCnt += 1
                Next
            End If
            '
            ' ----- http Form
            '
            webServer.requestFormString = ""
            Dim postError As Boolean = False
            Try
                Dim inputStream As IO.Stream = iisContext.Request.InputStream
            Catch ex As httpException
                Call handleExceptionAndRethrow(ex)
                error_AddUserError(ex.Message)
                postError = True
            Catch ex As Exception
                Call handleExceptionAndRethrow(ex)
                error_AddUserError(ex.Message)
                postError = True
            End Try
            If Not postError Then
                If Not isMultipartPost Then
                    '
                    ' ----- non-multipart form
                    '
                    For Each key In iisContext.Request.Form.Keys
                        keyValue = iisContext.Request.Form(key)
                        docProperties.setProperty(key, keyValue, True)
                        webServer.requestFormString = ModifyQueryString(webServer.requestFormString, key, keyValue)
                    Next
                Else
                    '
                    ' ----- multipart form (and file uploads)
                    '
                    Try
                        parser = New MultipartFormDataParser(iisContext.Request.InputStream)
                        For Each parameter As ParameterPart In parser.Parameters
                            key = parameter.Name
                            keyValue = parameter.Data
                            docProperties.setProperty(key, keyValue, True)
                            webServer.requestFormString = ModifyQueryString(webServer.requestFormString, key, keyValue)
                        Next
                        '
                        ' file uploads, add to doc properties
                        '
                        If parser.Files.Count > 0 Then
                            Dim ptr As Integer = 0
                            Dim ptrText As String
                            Dim tmpFilename As String
                            Dim instanceId As String = cp.Utils.CreateGuid()
                            For Each file As FilePart In parser.Files
                                If file.FileName.Length > 0 Then
                                    ptrText = ptr.ToString
                                    tmpFilename = instanceId & ptrText & ".bin"
                                    deleteOnDisposeFileList.Add(tmpFilename)
                                    '0formname=formname&0filename=filename&0type=fileType&0file=tempfile&0error=errors&0size=fileSize
                                    Using fileStream As System.IO.FileStream = System.IO.File.OpenWrite(privateFiles.rootLocalFolderPath & tmpFilename)
                                        file.Data.CopyTo(fileStream)
                                    End Using
                                    docProperties.setProperty(file.Name, file.FileName, True, True)
                                    webServer.requesFilesString = "" _
                                    & "&" & ptrText & "formname=" & file.Name _
                                    & "&" & ptrText & "filename=" & file.FileName _
                                    & "&" & ptrText & "type=" _
                                    & "&" & ptrText & "tmpFile=" & tmpFilename _
                                    & "&" & ptrText & "error=" _
                                    & "&" & ptrText & "size=" _
                                    & ""
                                    ptr += 1
                                End If
                            Next
                        End If

                        'https://github.com/Vodurden/Http-Multipart-Data-Parser
                    Catch ex As Exception
                        handleExceptionAndRethrow(ex, "Exception processing multipart form input")
                    End Try
                End If
            End If
            '
            ' load request cookies
            '
            For Each key In iisContext.Request.Cookies
                keyValue = iisContext.Request.Cookies(key).Value
                keyValue = DecodeResponseVariable(keyValue)
                webServer.addRequestCookie(key, keyValue)
            Next
            '
            Call webServer.initWebContext()
        End Sub
        '
        '
        '====================================================================================================
        ''' <summary>
        ''' version for cpCore assembly
        ''' </summary>
        ''' <remarks></remarks>
        Public Function common_version() As String
            Dim myType As Type = GetType(coreClass)
            Dim myAssembly As Assembly = Assembly.GetAssembly(myType)
            Dim myAssemblyname As AssemblyName = myAssembly.GetName()
            Dim myVersion As Version = myAssemblyname.Version
            Return Format(myVersion.Major, "0") & "." & Format(myVersion.Minor, "00") & "." & Format(myVersion.Build, "00000000")
        End Function
        '
        '==========================================================================================
        ''' <summary>
        ''' Install an uploaded collection file from a private folder. Return true if successful, else the issue is in the returnUserError
        ''' </summary>
        ''' <param name="privateFolder"></param>
        ''' <param name="returnUserError"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function addonInstall_installCollectionFile(privateFolder As String, ByRef returnUserError As String) As Boolean
            ' refactor - remove this wrapper
            Dim returnOk As Boolean = False
            Try
                ' copied from safemode addon manager
                Dim addonInstall As New coreAddonInstallClass(Me)
                Dim builder As New coreBuilderClass(Me)
                Dim installedCollectionGuid As String = ""
                Dim iisResetRequired As Boolean = False
                '
                If returnUserError = "" Then
                    If privateFiles.pathExists(privateFolder) Then
                        returnOk = addonInstall.InstallCollectionFromPrivateFolder(builder, db.dataBuildVersion, privateFolder, iisResetRequired, appConfig.name, returnUserError, installedCollectionGuid, False)
                        'If iisResetRequired Then
                        '    Dim sitebuilder As New builderClass(Me)
                        '    sitebuilder.web.reset()
                        'End If
                    End If
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
                If Not siteProperties.trapErrors Then
                    Throw New ApplicationException("rethrow", ex)
                End If
            End Try
            Return returnOk
        End Function
        '
        '=============================================================================
        ''' <summary>
        ''' add the log line to a log file with the folder and prefix
        ''' </summary>
        ''' <param name="cpCore"></param>
        ''' <param name="LogLine"></param>
        ''' <param name="LogFolder"></param>
        ''' <param name="LogNamePrefix"></param>
        ''' <param name="allowErrorHandling"></param>
        ''' <remarks></remarks>
        Public Sub log_appendLog(ByVal LogLine As String, Optional ByVal LogFolder As String = "", Optional ByVal LogNamePrefix As String = "", Optional allowErrorHandling As Boolean = True)
            'Dim fs As New fileSystemClass
            Try
                '
                ' dependant on app.privateFiles
                '
                Dim logPath As String
                Dim MonthNumber As Integer
                Dim DayNumber As Integer
                Dim FilenameNoExt As String
                Dim PathFilenameNoExt As String
                Dim FileSize As Integer
                Dim RetryCnt As Integer
                Dim SaveOK As Boolean
                Dim FileSuffix As String
                Dim threadId As Integer = System.Threading.Thread.CurrentThread.ManagedThreadId
                Dim logPathRoot As String = "c:\"
                '
                Dim threadName As String = Format(threadId, "00000000")
                '
                Try
                    '
                    ' attempt to get cluster data, else go wtih defaults
                    '
                    If (cluster Is Nothing) Then
                        '
                        ' no cluster object
                        '
                    ElseIf (cluster.localClusterFiles Is Nothing) Then
                        '
                        ' no cluster files object
                        '
                    Else
                        DayNumber = Day(Now)
                        MonthNumber = Month(Now)
                        FilenameNoExt = log_getDateString(Now)
                        logPath = LogFolder
                        If logPath <> "" Then
                            logPath = logPath & "\"
                        End If
                        logPath = "clibLogs\" & logPath
                        logPathRoot = cluster.localClusterFiles.rootLocalFolderPath
                        If Not cluster.localClusterFiles.pathExists(logPath) Then
                            Call cluster.localClusterFiles.createPath(logPath)
                        Else
                            Dim logFiles As IO.FileInfo() = cluster.localClusterFiles.getFileList(logPath)
                            For Each fileInfo As IO.FileInfo In logFiles
                                If fileInfo.Name.ToLower = FilenameNoExt.ToLower & ".log" Then
                                    FileSize = CInt(fileInfo.Length)
                                    Exit For
                                End If
                            Next
                        End If
                        PathFilenameNoExt = logPath & FilenameNoExt
                        '
                        ' add to log file
                        '
                        If FileSize < 10000000 Then
                            RetryCnt = 0
                            SaveOK = False
                            FileSuffix = ""
                            Do While (Not SaveOK) And (RetryCnt < 10)
                                SaveOK = True
                                Try
                                    Dim absFile As String = vbLCase(logPathRoot & PathFilenameNoExt & FileSuffix & ".log")
                                    Dim absContent As String = LogFileCopyPrep(FormatDateTime(Now(), vbGeneralDate)) & vbTab & threadName & vbTab & LogLine & vbCrLf

                                    If Not IO.File.Exists(absFile) Then
                                        ' Create a file to write to.
                                        Using sw As IO.StreamWriter = IO.File.CreateText(absFile)
                                            sw.Write(absContent)
                                        End Using
                                    Else
                                        Using sw As IO.StreamWriter = IO.File.AppendText(absFile)
                                            sw.Write(absContent)
                                        End Using
                                    End If
                                    'System.IO.File.AppendAllText(absFile, absContent)
                                    'Call cluster.files.appendFile(absFile, absContent)
                                    'My.Computer.FileSystem.WriteAllText(LCase(PathFilenameNoExt & FileSuffix & ".log"), LogFileCopyPrep(FormatDateTime(Now(), vbGeneralDate)) & vbTab & threadName & vbTab & LogLine & vbCrLf, True)
                                Catch ex As IO.IOException
                                    '
                                    ' permission denied - happens when more then one process are writing at once, go to the next suffix
                                    '
                                    FileSuffix = "-" & CStr(RetryCnt + 1)
                                    RetryCnt = RetryCnt + 1
                                    SaveOK = False
                                Catch ex As Exception
                                    '
                                    ' unknown error
                                    '
                                    FileSuffix = "-" & CStr(RetryCnt + 1)
                                    RetryCnt = RetryCnt + 1
                                    SaveOK = False
                                End Try
                            Loop
                        End If
                    End If
                Catch ex As Exception
                    '
                    '
                    '
                End Try
            Catch ex As Exception
                '
                ' cannot use execption handler because this routine is called by handleException
                '
            Finally
                'Call cluster.files.Dispose()
            End Try
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' Append log, use the legacy row with tab delimited context
        ''' </summary>
        ''' <param name="cpCore"></param>
        ''' <param name="ContensiveAppName"></param>
        ''' <param name="contextDescription"></param>
        ''' <param name="processName"></param>
        ''' <param name="ClassName"></param>
        ''' <param name="MethodName"></param>
        ''' <param name="ErrNumber"></param>
        ''' <param name="ErrSource"></param>
        ''' <param name="ErrDescription"></param>
        ''' <param name="ErrorTrap"></param>
        ''' <param name="ResumeNextAfterLogging"></param>
        ''' <param name="URL"></param>
        ''' <param name="LogFolder"></param>
        ''' <param name="LogNamePrefix"></param>
        ''' <remarks></remarks>
        Public Sub appendLogWithLegacyRow(ByVal ContensiveAppName As String, ByVal contextDescription As String, ByVal processName As String, ByVal ClassName As String, ByVal MethodName As String, ByVal ErrNumber As Integer, ByVal ErrSource As String, ByVal ErrDescription As String, ByVal ErrorTrap As Boolean, ByVal ResumeNextAfterLogging As Boolean, ByVal URL As String, ByVal LogFolder As String, ByVal LogNamePrefix As String)
            Try
                Dim ErrorMessage As String
                Dim LogLine As String
                Dim ResumeMessage As String
                '
                If ErrorTrap Then
                    ErrorMessage = "Error Trap"
                Else
                    ErrorMessage = "Log Entry"
                End If
                '
                If ResumeNextAfterLogging Then
                    ResumeMessage = "Resume after logging"
                Else
                    ResumeMessage = "Abort after logging"
                End If
                '
                LogLine = "" _
                    & LogFileCopyPrep(ContensiveAppName) _
                    & vbTab & LogFileCopyPrep(processName) _
                    & vbTab & LogFileCopyPrep(ClassName) _
                    & vbTab & LogFileCopyPrep(MethodName) _
                    & vbTab & LogFileCopyPrep(contextDescription) _
                    & vbTab & LogFileCopyPrep(ErrorMessage) _
                    & vbTab & LogFileCopyPrep(ResumeMessage) _
                    & vbTab & LogFileCopyPrep(ErrSource) _
                    & vbTab & LogFileCopyPrep(ErrNumber.ToString) _
                    & vbTab & LogFileCopyPrep(ErrDescription) _
                    & vbTab & LogFileCopyPrep(URL) _
                    & ""
                '
                log_appendLog(LogLine, LogFolder, LogNamePrefix)
            Catch ex As Exception

            End Try
        End Sub
        '
        '==========================================================================================
        ''' <summary>
        ''' return an html ul list of each eception produced during this document.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function getDocExceptionHtmlList() As String
            Dim returnHtmlList As String = ""
            Try
                If Not docExceptionList Is Nothing Then
                    If docExceptionList.Count > 0 Then
                        For Each exMsg As String In docExceptionList
                            returnHtmlList &= cr2 & "<li class=""ccExceptionListRow"">" & cr3 & html_convertText2HTML(exMsg) & cr2 & "</li>"
                        Next
                        returnHtmlList = cr & "<ul class=""ccExceptionList"">" & returnHtmlList & cr & "</ul>"
                    End If
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return returnHtmlList
        End Function
        '
        '==========================================================================================
        ''' <summary>
        ''' Generic handle exception. Determines method name and class of caller from stack. 
        ''' </summary>
        ''' <param name="cp"></param>
        ''' <param name="ex"></param>
        ''' <param name="cause"></param>
        ''' <param name="stackPtr">How far down in the stack to look for the method error. Pass 1 if the method calling has the error, 2 if there is an intermediate routine.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Sub handleException(ByVal ex As Exception, ByVal cause As String, stackPtr As Integer)
            If (Not _handlingExceptionRecursionBlock) Then
                _handlingExceptionRecursionBlock = True
                Dim frame As StackFrame = New StackFrame(stackPtr)
                Dim method As System.Reflection.MethodBase = frame.GetMethod()
                Dim type As System.Type = method.DeclaringType()
                Dim methodName As String = method.Name
                Dim errMsg As String = type.Name & "." & methodName & ", cause=[" & cause & "], ex=[" & ex.ToString & "]"
                '
                ' append to application event log
                '
                Dim sSource As String = "Contensive"
                Dim sLog As String = "Application"
                Dim eventId As Integer = 1001
                Try
                    '
                    ' if command line has been run on this server, this will work. Otherwise skip
                    '
                    EventLog.WriteEntry(sSource, errMsg, EventLogEntryType.Error, eventId)
                Catch exEvent As Exception
                    ' ignore error. Can be caused if source has not been created. It is created automatically in command line installation util.
                End Try
                '
                ' append to daily trace log
                '
                Call log_appendLog(errMsg)
                '
                ' add to doc exception list to display at top of webpage
                '
                If docExceptionList Is Nothing Then
                    docExceptionList = New List(Of String)
                End If
                If docExceptionList.Count = 10 Then
                    docExceptionList.Add("Exception limit exceeded")
                ElseIf docExceptionList.Count < 10 Then
                    docExceptionList.Add(errMsg)
                End If
                '
                ' write consol for debugging
                '
                Console.WriteLine(errMsg)
                '
                _handlingExceptionRecursionBlock = False
            End If
        End Sub
        Private _handlingExceptionRecursionBlock As Boolean = False
        '
        '====================================================================================================
        '
        Public Sub handleExceptionAndRethrow(ByVal ex As Exception, ByVal cause As String)
            Call handleException(ex, cause, 2)
            Throw ex
        End Sub
        '
        '====================================================================================================
        '
        Public Sub handleExceptionAndRethrow(ByVal ex As Exception)
            Call handleException(ex, "n/a", 2)
            Throw ex
        End Sub
        '
        Public Sub handleExceptionAndNoThrow(ByVal ex As Exception, ByVal cause As String)
            Call handleException(ex, cause, 2)
        End Sub
        '
        Public Sub handleExceptionAndNoThrow(ByVal ex As Exception)
            Call handleException(ex, "n/a", 2)
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle expection with legacy log line (v2)
        ''' </summary>
        ''' <param name="cpCore"></param>
        ''' <param name="ex"></param>
        ''' <param name="className"></param>
        ''' <param name="methodName"></param>
        ''' <param name="cause"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function handleExceptionLegacyRow2(ByVal ex As Exception, ByVal className As String, ByVal methodName As String, ByVal cause As String) As String
            Call handleException(ex, cause, 2)
            'Try
            '    Dim errMsg As String = className & "." & methodName & ", cause=[" & cause & "], ex=[" & ex.ToString & "]"
            '    Console.WriteLine(errMsg)
            '    appendLog(errMsg)
            'Catch exIgnore As Exception
            '    '
            'End Try
        End Function
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v1
        ''' </summary>
        ''' <param name="cpCore"></param>
        ''' <param name="ClassName"></param>
        ''' <param name="MethodName"></param>
        ''' <param name="ErrNumber"></param>
        ''' <param name="ErrSource"></param>
        ''' <param name="ErrDescription"></param>
        ''' <param name="ErrorTrap"></param>
        ''' <param name="ResumeNext"></param>
        ''' <param name="URL"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Sub handleLegacyError(ByVal ClassName As String, ByVal MethodName As String, ByVal ErrNumber As Integer, ByVal ErrSource As String, ByVal ErrDescription As String, ByVal ErrorTrap As Boolean, ByVal ResumeNext As Boolean, Optional ByVal URL As String = "")
            handleException(New Exception("Legacy error raised, className=[" & ClassName & "], methodName=[" & MethodName & "], url=[" & URL & "] [legacy error #" & ErrNumber & "," & ErrSource & "," & ErrDescription & "]"), "n/a", 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v2
        ''' </summary>
        ''' <param name="cpCore"></param>
        ''' <param name="ClassName"></param>
        ''' <param name="MethodName"></param>
        ''' <param name="Description"></param>
        ''' <param name="ErrorNumber"></param>
        ''' <remarks></remarks>
        Public Sub handleLegacyError2(ByVal ClassName As String, ByVal MethodName As String, Optional ByVal Description As String = "", Optional ByVal ErrorNumber As Integer = 0)
            handleException(New Exception("Legacy error, ClassName=[" & ClassName & "], MethodName=[" & MethodName & "], Description=[" & Description & "], [legacy error #" & ErrorNumber & "," & Description & "]"), "n/a", 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v3
        ''' </summary>
        ''' <param name="cpCore"></param>
        ''' <param name="ContensiveAppName"></param>
        ''' <param name="Context"></param>
        ''' <param name="ProgramName"></param>
        ''' <param name="ClassName"></param>
        ''' <param name="MethodName"></param>
        ''' <param name="ErrNumber"></param>
        ''' <param name="ErrSource"></param>
        ''' <param name="ErrDescription"></param>
        ''' <param name="ErrorTrap"></param>
        ''' <param name="ResumeNext"></param>
        ''' <param name="URL"></param>
        ''' <remarks></remarks>
        Public Sub handleLegacyError3(ByVal ContensiveAppName As String, ByVal Context As String, ByVal ProgramName As String, ByVal ClassName As String, ByVal MethodName As String, ByVal ErrNumber As Integer, ByVal ErrSource As String, ByVal ErrDescription As String, ByVal ErrorTrap As Boolean, ByVal ResumeNext As Boolean, ByVal URL As String)
            handleException(New Exception("Legacy error, ContensiveAppName=[" & ContensiveAppName & "], Context=[" & Context & "], ProgramName=[" & ProgramName & "], ClassName=[" & ClassName & "], MethodName=[" & MethodName & "], [legacy error #" & ErrNumber & "," & ErrSource & "," & ErrDescription & "]"), Context, 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '======================================================================
        ''' <summary>
        ''' handle legacy errors, v3
        ''' </summary>
        ''' <param name="ErrNumber"></param>
        ''' <param name="ErrSource"></param>
        ''' <param name="ErrDescription"></param>
        ''' <param name="MethodName"></param>
        ''' <param name="ErrorTrap"></param>
        ''' <param name="ResumeNext"></param>
        ''' <param name="Context"></param>
        ''' <remarks></remarks>
        Private Sub handleLegacyError4(ByVal ErrNumber As Integer, ByVal ErrSource As String, ByVal ErrDescription As String, ByVal MethodName As String, ByVal ErrorTrap As Boolean, Optional ByVal ignore As Boolean = False, Optional ByVal Context As String = "")
            handleException(New Exception("Legacy error, MethodName=[" & MethodName & "], Context=[" & Context & "] raised, [legacy error #" & ErrNumber & "," & ErrSource & "," & ErrDescription & "]"), Context, 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '======================================================================
        ''' <summary>
        ''' handle legacy errors, v5
        ''' </summary>
        ''' <param name="MethodName"></param>
        ''' <param name="Cause"></param>
        ''' <param name="Err_Number"></param>
        ''' <param name="Err_Source"></param>
        ''' <param name="Err_Description"></param>
        ''' <param name="ResumeNext"></param>
        ''' <remarks></remarks>
        Private Sub handleLegacyError5(MethodName As String, Cause As String, Err_Number As Integer, Err_Source As String, Err_Description As String, ignore As Boolean)
            handleException(New Exception("Legacy error raised, [legacy error #" & Err_Number & "," & Err_Source & "," & Err_Description & "]"), Cause, 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '======================================================================
        ''' <summary>
        ''' handle legacy errors, v6
        ''' </summary>
        ''' <param name="MethodName"></param>
        ''' <param name="Cause"></param>
        ''' <remarks></remarks>
        Private Sub handleLegacyError6(MethodName As String, Cause As String)
            handleException(New Exception("Legacy error, MethodName=[" & MethodName & "], cause=[" & Cause & "] #" & Err.Number & "," & Err.Source & "," & Err.Description & ""), Cause, 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '======================================================================
        ''' <summary>
        ''' handle legacy errors, v7
        ''' </summary>
        ''' <param name="MethodName"></param>
        ''' <param name="Cause"></param>
        ''' <remarks></remarks>
        Private Sub handleLegacyError7(MethodName As String, Cause As String)
            handleException(New Exception("Legacy error, MethodName=[" & MethodName & "], cause=[" & Cause & "] #" & Err.Number & "," & Err.Source & "," & Err.Description & ""), Cause, 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '======================================================================
        ''' <summary>
        ''' handle legacy errors, v8
        ''' </summary>
        ''' <param name="Cause"></param>
        ''' <param name="Source"></param>
        ''' <param name="ResumeNext"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Sub handleLegacyError8(ByVal Cause As String, Optional ByVal ignore As String = "", Optional ByVal ignore2 As Boolean = False)
            handleException(New Exception("Legacy error, cause=[" & Cause & "] #" & Err.Number & "," & Err.Source & "," & Err.Description & ""), Cause, 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v10
        ''' </summary>
        ''' <param name="Err_Number"></param>
        ''' <param name="Err_Source"></param>
        ''' <param name="Err_Description"></param>
        ''' <param name="MethodName"></param>
        ''' <param name="ErrorTrap"></param>
        ''' <param name="ResumeNext"></param>
        ''' <remarks></remarks>
        Private Sub handleLegacyError10(ByVal Err_Number As Integer, ByVal Err_Source As String, ByVal Err_Description As String, ByVal MethodName As String, ByVal ErrorTrap As Boolean, ByVal ResumeNext As Boolean)
            handleException(New Exception("Legacy error, MethodName=[" & MethodName & "] [legacy error #" & Err_Number & "," & Err_Source & "," & Err_Description & "]"), "n/a", 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v11
        ''' </summary>
        ''' <param name="MethodName"></param>
        ''' <param name="Cause"></param>
        ''' <remarks></remarks>
        Private Sub handleLegacyError11(ByVal MethodName As String, ByVal Cause As String)
            handleException(New Exception("Legacy error #" & Err.Number & "," & Err.Source & "," & Err.Description & ""), Cause, 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v12
        ''' </summary>
        ''' <param name="MethodName"></param>
        ''' <param name="Cause"></param>
        ''' <remarks></remarks>
        Private Sub handleLegacyError12(ByVal MethodName As String, ByVal Cause As String)
            handleException(New Exception("Legacy error, MethodName=[" & MethodName & "], cause=[" & Cause & "] #" & Err.Number & "," & Err.Source & "," & Err.Description & ""), Cause, 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v13
        ''' </summary>
        ''' <param name="MethodName"></param>
        ''' <remarks></remarks>
        Private Sub handleLegacyError13(ByVal MethodName As String)
            handleException(New Exception("Legacy error, MethodName=[" & MethodName & "] #" & Err.Number & "," & Err.Source & "," & Err.Description & ""), "n/a", 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v14
        ''' </summary>
        ''' <param name="MethodName"></param>
        ''' <param name="Cause"></param>
        ''' <remarks></remarks>
        Private Sub handleLegacyError14(ByVal MethodName As String, ByVal Cause As String)
            handleException(New Exception("Legacy error, MethodName=[" & MethodName & "], cause=[" & Cause & "] #" & Err.Number & "," & Err.Source & "," & Err.Description & ""), Cause, 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v15
        ''' </summary>
        ''' <param name="Cause"></param>
        ''' <param name="MethodName"></param>
        ''' <remarks></remarks>
        Private Sub handleLegacyError15(ByVal Cause As String, ByVal MethodName As String)
            handleException(New Exception("Legacy error, MethodName=[" & MethodName & "], cause=[" & Cause & "] #" & Err.Number & "," & Err.Source & "," & Err.Description & ""), Cause, 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v16
        ''' </summary>
        ''' <param name="MethodName"></param>
        ''' <param name="Cause"></param>
        ''' <remarks></remarks>
        Public Sub handleLegacyError16(ByVal MethodName As String, ByVal Cause As String)
            handleException(New Exception("Legacy error, MethodName=[" & MethodName & "], cause=[" & Cause & "] #" & Err.Number & "," & Err.Source & "," & Err.Description & ""), Cause, 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v17
        ''' </summary>
        ''' <param name="MethodName"></param>
        ''' <remarks></remarks>
        Public Sub handleLegacyError17(ByVal MethodName As String)
            handleException(New Exception("Legacy error, MethodName=[" & MethodName & "] #" & Err.Number & "," & Err.Source & "," & Err.Description & ""), "n/a", 2)
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v18
        ''' </summary>
        ''' <param name="MethodName"></param>
        ''' <remarks></remarks>
        Public Sub handleLegacyError18(ByVal MethodName As String)
            handleException(New Exception("Legacy error, MethodName=[" & MethodName & "] #" & Err.Number & "," & Err.Source & "," & Err.Description & ""), "n/a", 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v19
        ''' </summary>
        ''' <param name="MethodName"></param>
        ''' <param name="Cause"></param>
        ''' <param name="Err_Number"></param>
        ''' <param name="Err_Source"></param>
        ''' <param name="Err_Description"></param>
        ''' <param name="ResumeNext"></param>
        ''' <remarks></remarks>
        Private Sub handleLegacyError19(ByVal MethodName As String, ByVal Cause As String, ByVal Err_Number As Integer, ByVal Err_Source As String, ByVal Err_Description As String, ByVal ResumeNext As Boolean)
            handleException(New Exception("Legacy error, MethodName=[" & MethodName & "], cause=[" & Cause & "] #" & Err_Number & "," & Err_Source & "," & Err_Description & ""), Cause, 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v20
        ''' </summary>
        ''' <param name="appName"></param>
        ''' <param name="ClassName"></param>
        ''' <param name="MethodName"></param>
        ''' <param name="Cause"></param>
        ''' <param name="Err_Number"></param>
        ''' <param name="Err_Source"></param>
        ''' <param name="Err_Description"></param>
        ''' <param name="WillResumeAfterLogging"></param>
        ''' <remarks></remarks>
        Public Sub handleLegacyError20(ByVal appName As String, ByVal ClassName As String, ByVal MethodName As String, ByVal Cause As String, ByVal Err_Number As Integer, ByVal Err_Source As String, ByVal Err_Description As String, ByVal WillResumeAfterLogging As Boolean)
            handleException(New Exception("Legacy error, app=[" & appName & "], classname=[" & ClassName & "], methodname=[" & MethodName & "], cause=[" & Cause & "] #" & Err_Number & "," & Err_Source & "," & Err_Description & ""), Cause, 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        ''
        ''========================================================================
        '''' <summary>
        '''' handle legacy errors, v21
        '''' </summary>
        '''' <param name="ErrorObject"></param>
        '''' <param name="Cause"></param>
        '''' <remarks></remarks>
        'Public Sub handleLegacyError21(ByVal ErrorObject As Object, ByVal Cause As String)
        '    handleException(New Exception("Legacy error, cause=[" & Cause & "] #" & ErrorObject.Number & "," & ErrorObject.Source & "," & ErrorObject.Description & ""), Cause, 2)
        '    Throw New ApplicationException("handleLegacyError")
        'End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v22
        ''' </summary>
        ''' <param name="ErrorObject"></param>
        ''' <param name="Cause"></param>
        ''' <remarks></remarks>
        Private Sub handleLegacyError22(ByVal ErrorObject As ErrObject, ByVal Cause As String)
            handleException(New Exception("Legacy error, cause=[" & Cause & "] #" & ErrorObject.Number & "," & ErrorObject.Source & "," & ErrorObject.Description & ""), Cause, 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub
        '
        '========================================================================
        ''' <summary>
        ''' handle legacy errors, v23
        ''' </summary>
        ''' <param name="Cause"></param>
        ''' <remarks></remarks>
        Public Sub handleLegacyError23(ByVal Cause As String)
            handleException(New Exception("Legacy error, cause=[" & Cause & "] #" & Err.Number & "," & Err.Source & "," & Err.Description & ""), Cause, 2)
            Throw New ApplicationException("handleLegacyError")
        End Sub

        '
        '====================================================================================================
        ''' <summary>
        ''' Create a string with year, month, date in the form 20151206
        ''' </summary>
        ''' <param name="sourceDate"></param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Public Function log_getDateString(sourceDate As Date) As String
            Return sourceDate.Year & sourceDate.Month.ToString.PadLeft(2, CChar("0")) & sourceDate.Day.ToString.PadLeft(2, CChar("0"))

        End Function
        '
        '====================================================================================================
        ''' <summary>
        ''' Create a group and return its Id. If the group already exists, the groups Id is returned. If the group cannot be added a 0 is returned.
        ''' </summary>
        ''' <param name="groupName"></param>
        ''' <returns></returns>
        Public Function group_add(ByVal groupName As String) As Integer
            Dim returnGroupId As Integer = 0
            Try
                Dim dt As DataTable
                Dim sql As String
                Dim createkey As Integer
                Dim cid As Integer
                Dim sqlGroupName As String = db.encodeSQLText(groupName)
                '
                dt = db.executeSql("SELECT ID FROM CCGROUPS WHERE NAME=" & sqlGroupName & "")
                If dt.Rows.Count > 0 Then
                    returnGroupId = EncodeInteger(dt.Rows(0).Item("ID"))
                Else
                    cid = metaData.getContentId("groups")
                    createkey = GetRandomInteger()
                    sql = "insert into ccgroups (contentcontrolid,active,createkey,name,caption) values (" & cid & ",1," & createkey & "," & sqlGroupName & "," & sqlGroupName & ")"
                    Call db.executeSql(sql)
                    '
                    sql = "select top 1 id from ccgroups where createkey=" & createkey & " order by id desc"
                    dt = db.executeSql(sql)
                    If dt.Rows.Count > 0 Then
                        returnGroupId = EncodeInteger(dt.Rows(0).Item(0))
                    End If
                End If
                dt.Dispose()
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return returnGroupId
        End Function
        '
        '====================================================================================================
        ''' <summary>
        ''' Create a group and return its Id. If the group already exists, the groups Id is returned. If the group cannot be added a 0 is returned.
        ''' </summary>
        ''' <param name="GroupNameOrGuid"></param>
        ''' <param name="groupCaption"></param>
        ''' <returns></returns>
        Public Function group_add2(ByVal GroupNameOrGuid As String, Optional ByVal groupCaption As String = "") As Integer
            Dim returnGroupId As Integer = 0
            Try
                '
                Dim cs As Contensive.BaseClasses.CPCSBaseClass = cp.CSNew
                Dim IsAlreadyThere As Boolean = False
                Dim sqlCriteria As String = db.getNameIdOrGuidSqlCriteria(GroupNameOrGuid)
                Dim groupName As String
                Dim groupGuid As String
                '
                If (GroupNameOrGuid = "") Then
                    handleExceptionAndRethrow(New ApplicationException("A group cannot be added with a blank name"))
                Else
                    cs.Open("Groups", sqlCriteria, , False, "id")
                    IsAlreadyThere = cs.OK
                    Call cs.Close()
                    If Not IsAlreadyThere Then
                        Call cs.Insert("Groups")
                        If Not cs.OK Then
                            handleExceptionAndRethrow(New ApplicationException("There was an error inserting a new group record"))
                        Else
                            returnGroupId = cs.GetInteger("id")
                            If cp.Utils.isGuid(GroupNameOrGuid) Then
                                groupName = "Group " & cs.GetInteger("id")
                                groupGuid = GroupNameOrGuid
                            Else
                                groupName = GroupNameOrGuid
                                groupGuid = Guid.NewGuid().ToString()
                            End If
                            If groupCaption = "" Then
                                groupCaption = groupName
                            End If
                            Call cs.SetField("name", groupName)
                            Call cs.SetField("caption", groupCaption)
                            Call cs.SetField("ccGuid", groupGuid)
                            Call cs.SetField("active", "1")
                        End If
                        Call cs.Close()
                    End If
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex, "Unexpected error in cp.group.add()")
            End Try
            Return returnGroupId
        End Function
        '
        '====================================================================================================
        '
        ' Add User
        '
        Public Sub group_addUser(ByVal groupId As Integer, Optional ByVal userid As Integer = 0, Optional ByVal dateExpires As Date = #12:00:00 AM#)
            Try
                '
                Dim CS As Contensive.BaseClasses.CPCSBaseClass
                Dim groupName As String
                '
                If True Then
                    If (groupId < 1) Then
                        handleExceptionAndRethrow(New ApplicationException("Could not find or create the group with id [" & groupId & "]"))
                    Else
                        If userid = 0 Then
                            userid = cp.User.Id
                        End If
                        CS = cp.CSNew()
                        CS.Open("Member Rules", "(MemberID=" & userid.ToString & ")and(GroupID=" & groupId.ToString & ")", , False)
                        If Not CS.OK Then
                            Call CS.Close()
                            Call CS.Insert("Member Rules")
                        End If
                        If Not CS.OK Then
                            groupName = db_GetRecordName("groups", groupId)
                            handleExceptionAndRethrow(New ApplicationException("Could not find or create the Member Rule to add this member [" & userid & "] to the Group [" & groupId & ", " & groupName & "]"))
                        Else
                            Call CS.SetField("active", "1")
                            Call CS.SetField("memberid", userid.ToString)
                            Call CS.SetField("groupid", groupId.ToString)
                            If dateExpires <> #12:00:00 AM# Then
                                Call CS.SetField("DateExpires", dateExpires.ToString)
                            Else
                                Call CS.SetField("DateExpires", Nothing)
                            End If
                        End If
                        Call CS.Close()
                    End If
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
        End Sub
        '
        '====================================================================================================
        '
        Public Sub group_AddUser(ByVal groupNameOrGuid As String, Optional ByVal userid As Integer = 0, Optional ByVal dateExpires As Date = #12:00:00 AM#)
            Try
                '
                Dim GroupID As Integer
                Dim CS As Contensive.BaseClasses.CPCSBaseClass
                '
                If groupNameOrGuid <> "" Then
                    GroupID = db.getRecordID("groups", groupNameOrGuid)
                    If (GroupID < 1) Then
                        Call group_add2(groupNameOrGuid)
                        GroupID = db.getRecordID("groups", groupNameOrGuid)
                    End If
                    If (GroupID < 1) Then
                        handleExceptionAndRethrow(New ApplicationException("Could not find or create the group [" & groupNameOrGuid & "]"))
                    Else
                        If userid = 0 Then
                            userid = cp.User.Id
                        End If
                        CS = cp.CSNew()
                        CS.Open("Member Rules", "(MemberID=" & userid.ToString & ")and(GroupID=" & GroupID.ToString & ")", , False)
                        If Not CS.OK Then
                            Call CS.Close()
                            Call CS.Insert("Member Rules")
                        End If
                        If Not CS.OK Then
                            handleExceptionAndRethrow(New ApplicationException("Could not find or create the Member Rule to add this member [" & userid & "] to the Group [" & GroupID & ", " & groupNameOrGuid & "]"))
                        Else
                            Call CS.SetField("active", "1")
                            Call CS.SetField("memberid", userid.ToString)
                            Call CS.SetField("groupid", GroupID.ToString)
                            If dateExpires <> #12:00:00 AM# Then
                                Call CS.SetField("DateExpires", dateExpires.ToString)
                            Else
                                Call CS.SetField("DateExpires", Nothing)
                            End If
                        End If
                        Call CS.Close()
                    End If
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
        End Sub
        '
        '====================================================================================================
        ''' <summary>
        ''' Returns true if the argument is a string in guid compatible format
        ''' </summary>
        ''' <param name="guid"></param>
        ''' <returns></returns>
        Public Function common_isGuid(guid As String) As Boolean
            Dim returnIsGuid As Boolean = False
            Try
                returnIsGuid = (Len(guid) = 38) And (Left(guid, 1) = "{") And (Right(guid, 1) = "}")
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return returnIsGuid
        End Function
        '
        '====================================================================================================
        ''' <summary>
        ''' Delete a group matching the argument. If the argument is a number it is assumed to be an id, else if it is guid compatible a guid match is tried, else name.
        ''' </summary>
        ''' <param name="GroupNameIdOrGuid"></param>
        Public Sub group_delete(ByVal GroupNameIdOrGuid As String)
            Try
                Dim sqlCriteria As String = db.getNameIdOrGuidSqlCriteria(GroupNameIdOrGuid)
                If sqlCriteria <> "" Then
                    Call cp.Content.DeleteRecords("Groups", sqlCriteria)
                End If
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
        End Sub
        '
        '============================================================================
        '
        Public Function common_getHttpRequest(url As String) As IO.Stream
            Dim returnstream As IO.Stream = Nothing
            Try
                Dim rq As System.Net.WebRequest
                Dim response As System.Net.WebResponse
                '
                rq = System.Net.WebRequest.Create(url)
                rq.Timeout = 60000
                response = rq.GetResponse()
                returnstream = response.GetResponseStream()
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return returnstream
        End Function
        '
        '============================================================================
        '   csv_GetContentCopy3
        '       To get them, cp.content.getCopy must call the cpCoreClass version, which calls this for the content
        '============================================================================
        '
        Public Function html_GetContentCopy(ByVal CopyName As String, ByVal DefaultContent As String, ByVal personalizationPeopleId As Integer, ByVal AllowEditWrapper As Boolean, ByVal personalizationIsAuthenticated As Boolean) As String
            Dim returnCopy As String = ""
            Try
                '
                Dim CS As Integer
                Dim RecordID As Integer
                Dim contactPeopleId As Integer
                Dim Return_ErrorMessage As String = ""
                '
                ' honestly, not sure what to do with 'return_ErrorMessage'
                '
                CS = db.csOpen("copy content", "Name=" & db.encodeSQLText(CopyName), "ID", , 0, , , "Name,ID,Copy,modifiedBy")
                If Not db.cs_Ok(CS) Then
                    Call db.cs_Close(CS)
                    CS = db.cs_insertRecord("copy content", 0)
                    If db.cs_Ok(CS) Then
                        RecordID = db.cs_getInteger(CS, "ID")
                        Call db.cs_set(CS, "name", CopyName)
                        Call db.cs_set(CS, "copy", EncodeText(DefaultContent))
                        Call db.db_SaveCSRecord(CS)
                        Call workflow.publishEdit("copy content", RecordID)
                    End If
                End If
                If db.cs_Ok(CS) Then
                    RecordID = db.cs_getInteger(CS, "ID")
                    contactPeopleId = db.cs_getInteger(CS, "modifiedBy")
                    returnCopy = db.db_GetCS(CS, "Copy")
                    returnCopy = html_executeContentCommands(Nothing, returnCopy, addonContextEnum.ContextPage, personalizationPeopleId, personalizationIsAuthenticated, Return_ErrorMessage)
                    returnCopy = html_encodeContent10(returnCopy, personalizationPeopleId, "copy content", RecordID, contactPeopleId, False, False, True, True, False, True, "", "", False, 0, "", addonContextEnum.ContextPage, False, Nothing, False)
                    '
                    If True Then
                        If user.isEditingAnything() Then
                            returnCopy = cs_GetCSRecordEditLink(CS, False) & returnCopy
                            If AllowEditWrapper Then
                                returnCopy = main_GetEditWrapper("copy content", returnCopy)
                            End If
                        End If
                    End If
                End If
                Call db.cs_Close(CS)
            Catch ex As Exception
                handleExceptionAndRethrow(ex)
            End Try
            Return returnCopy
        End Function
        '
        '============================================================================
        '
        Public Shared Function db_encodeSqlTableName(sourceName As String) As String
            Dim returnName As String = ""
            Const FirstCharSafeString As String = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
            Const SafeString As String = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_@#"
            Try
                Dim src As String
                Dim TestChr As String
                Dim Ptr As Integer = 0
                '
                ' remove nonsafe URL characters
                '
                src = sourceName
                returnName = ""
                ' first character
                Do While Ptr < src.Length
                    TestChr = src.Substring(Ptr, 1)
                    Ptr += 1
                    If FirstCharSafeString.IndexOf(TestChr) >= 0 Then
                        returnName &= TestChr
                        Exit Do
                    End If
                Loop
                ' non-first character
                Do While Ptr < src.Length
                    TestChr = src.Substring(Ptr, 1)
                    Ptr += 1
                    If SafeString.IndexOf(TestChr) >= 0 Then
                        returnName &= TestChr
                    End If
                Loop
            Catch ex As Exception
                ' shared method, rethrow error
                Throw New ApplicationException("Exception in db_encodeSqlTableName(" & sourceName & ")", ex)
            End Try
            Return returnName
        End Function
        '
        '
        '
        Public Function addon_getPrivateFilesAddonPath() As String
            Return "addons\"
        End Function
        '
        '====================================================================================================
#Region " IDisposable Support "
        '
        ' this class must implement System.IDisposable
        ' never throw an exception in dispose
        ' Do not change or add Overridable to these methods.
        ' Put cleanup code in Dispose(ByVal disposing As Boolean).
        '====================================================================================================
        '
        Protected disposed As Boolean = False
        '
        Public Overloads Sub Dispose() Implements IDisposable.Dispose
            ' do not add code here. Use the Dispose(disposing) overload
            Dispose(True)
            GC.SuppressFinalize(Me)
        End Sub
        '
        Protected Overrides Sub Finalize()
            ' do not add code here. Use the Dispose(disposing) overload
            Dispose(False)
            MyBase.Finalize()
        End Sub
        '
        '====================================================================================================
        ''' <summary>
        ''' dispose.
        ''' </summary>
        ''' <param name="disposing"></param>
        Protected Overridable Overloads Sub Dispose(ByVal disposing As Boolean)
            Dim SQL As String
            Dim ViewingName As String
            Dim CSMax As Integer
            Dim PageID As Integer
            Dim FieldNames As String
            Dim Form As String
            '
            If Not Me.disposed Then
                Me.disposed = True
                If disposing Then
                    '
                    ' call .dispose for managed objects
                    ' delete tmp files
                    '
                    If deleteOnDisposeFileList.Count > 0 Then
                        For Each filename As String In deleteOnDisposeFileList
                            privateFiles.deleteFile(filename)
                        Next
                    End If
                    '
                    ' ----- Block all output from underlying routines
                    '
                    blockExceptionReporting = True
                    'docOpen = False
                    Call doc_close()
                    '
                    ' content server object is valid
                    '
                    If (appConfig IsNot Nothing) Then
                        If siteProperties.allowVisitTracking Then
                            '
                            ' If visit tracking, save the viewing record
                            '
                            ViewingName = Left(visit_Id & "." & visit_pages, 10)
                            PageID = main_RenderedPageID
                            FieldNames = "Name,VisitId,MemberID,Host,Path,Page,QueryString,Form,Referer,DateAdded,StateOK,ContentControlID,pagetime,Active,CreateKey,RecordID"
                            FieldNames = FieldNames & ",ExcludeFromAnalytics"
                            FieldNames = FieldNames & ",pagetitle"
                            Form = main_ServerFormOriginal
                            If Form <> "" Then
                                If siteProperties.getBoolean("Block Viewing Form Field") Then
                                    Form = "[blocked]"
                                End If
                            End If
                            SQL = "INSERT INTO ccViewings (" _
                                & FieldNames _
                                & ")VALUES(" _
                                & " " & db.encodeSQLText(ViewingName) _
                                & "," & db.encodeSQLNumber(visit_Id) _
                                & "," & db.encodeSQLNumber(user.id) _
                                & "," & db.encodeSQLText(webServer.requestDomain) _
                                & "," & db.encodeSQLText(web_requestPath) _
                                & "," & db.encodeSQLText(web_requestPage) _
                                & "," & db.encodeSQLText(Left(webServer.requestQueryString, 255)) _
                                & "," & db.encodeSQLText(Left(Form, 255)) _
                                & "," & db.encodeSQLText(Left(webServer.requestReferrer, 255)) _
                                & "," & db.encodeSQLDate(main_PageStartTime) _
                                & "," & db.encodeSQLBoolean(visit_stateOK) _
                                & "," & db.encodeSQLNumber(main_GetContentID("Viewings")) _
                                & "," & db.encodeSQLNumber(GetTickCount - constructorTickCount) _
                                & ",1" _
                                & "," & db.encodeSQLNumber(CSMax) _
                                & "," & db.encodeSQLNumber(PageID)
                            SQL &= "," & db.encodeSQLBoolean(web_PageExcludeFromAnalytics)
                            SQL &= "," & db.encodeSQLText(main_MetaContent_Title)
                            SQL &= ");"
                            Call db.executeSqlAsync(SQL)
                        End If
                    End If
                    '
                    ' ----- dispose objects created here
                    '
                    If Not (_addonCache Is Nothing) Then
                            ' no dispose
                            'Call _addonCache.Dispose()
                            _addonCache = Nothing
                        End If
                        '
                        If Not (_db Is Nothing) Then
                            Call _db.Dispose()
                            _db = Nothing
                        End If
                        '
                        If Not (_metaData Is Nothing) Then
                            Call _metaData.Dispose()
                            _metaData = Nothing
                        End If
                        '
                        If Not (_cluster Is Nothing) Then
                            Call _cluster.Dispose()
                            _cluster = Nothing
                        End If
                        '
                        If Not (_cache Is Nothing) Then
                            Call _cache.Dispose()
                            _cache = Nothing
                        End If
                        '
                        If Not (_workflow Is Nothing) Then
                            Call _workflow.Dispose()
                            _workflow = Nothing
                        End If
                        '
                        If Not (_siteProperties Is Nothing) Then
                            ' no dispose
                            'Call _siteProperties.Dispose()
                            _siteProperties = Nothing
                        End If
                        '
                        If Not (_json Is Nothing) Then
                            ' no dispose
                            'Call _json.Dispose()
                            _json = Nothing
                        End If
                        '
                        If Not (_user Is Nothing) Then
                            ' no dispose
                            'Call _user.Dispose()
                            _user = Nothing
                        End If
                        '
                        If Not (_domains Is Nothing) Then
                            ' no dispose
                            'Call _domains.Dispose()
                            _domains = Nothing
                        End If
                        '
                        If Not (_doc Is Nothing) Then
                            ' no dispose
                            'Call _doc.Dispose()
                            _doc = Nothing
                        End If
                        '
                        If Not (_security Is Nothing) Then
                            ' no dispose
                            'Call _security.Dispose()
                            _security = Nothing
                        End If
                        '
                        If Not (_webServer Is Nothing) Then
                            ' no dispose
                            'Call _webServer.Dispose()
                            _webServer = Nothing
                        End If
                        '
                        If Not (_menuFlyout Is Nothing) Then
                            ' no dispose
                            'Call _menuFlyout.Dispose()
                            _menuFlyout = Nothing
                        End If
                        '
                        If Not (_visitProperty Is Nothing) Then
                            ' no dispose
                            'Call _visitProperty.Dispose()
                            _visitProperty = Nothing
                        End If
                        '
                        If Not (_visitorProperty Is Nothing) Then
                            ' no dispose
                            'Call _visitorProperty.Dispose()
                            _visitorProperty = Nothing
                        End If
                        '
                        If Not (_userProperty Is Nothing) Then
                            ' no dispose
                            'Call _userProperty.Dispose()
                            _userProperty = Nothing
                        End If
                        '
                        If Not (_db Is Nothing) Then
                            Call _db.Dispose()
                            _db = Nothing
                        End If
                        '
                        If Not (_cluster Is Nothing) Then
                            Call _cluster.Dispose()
                            _cluster = Nothing
                        End If
                        '
                        If Not (_metaData Is Nothing) Then
                            _metaData.Dispose()
                            _metaData = Nothing
                        End If
                    End If
                    '
                    ' cleanup non-managed objects
                    '
                End If
        End Sub
#End Region        '
    End Class
    '
    '====================================================================================================
    '
    Public Class cpCoreTests
        <Fact> Public Sub db_encodeSqlTableNameTest()
            ' arrange
            ' act
            ' assert
            Assert.Equal("", coreClass.db_encodeSqlTableName(""))
            Assert.Equal("", coreClass.db_encodeSqlTableName("-----"))
            Assert.Equal("", coreClass.db_encodeSqlTableName("01234567879"))
            Assert.Equal("a", coreClass.db_encodeSqlTableName("a"))
            Assert.Equal("aa", coreClass.db_encodeSqlTableName("a a"))
            Assert.Equal("aA", coreClass.db_encodeSqlTableName(" aA"))
            Assert.Equal("aA", coreClass.db_encodeSqlTableName(" aA "))
            Assert.Equal("aA", coreClass.db_encodeSqlTableName("aA "))
            Assert.Equal("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ", coreClass.db_encodeSqlTableName("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"))
            Assert.Equal("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_@#", coreClass.db_encodeSqlTableName("0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_@#"))
            '
        End Sub
    End Class
End Namespace
