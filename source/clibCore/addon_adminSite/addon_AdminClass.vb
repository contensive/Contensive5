
Option Explicit On
Option Strict On
'
Imports Contensive.Core.Controllers
Imports Contensive.Core.Controllers.genericController

Imports System.Xml
Imports Contensive.Core
Imports Contensive.Core.Models.Entity
'
Namespace Contensive.Addons
    '
    Public Class addon_AdminSiteClass
        Inherits Contensive.BaseClasses.AddonBaseClass
        '
        '====================================================================================================
        ' objects passed in - do not dispose
        '   sets cp from argument For use In calls To other objects, Then cpCore because cp cannot be used since that would be a circular depenancy
        '====================================================================================================
        '
        Private cp As CPClass                   ' local cp set in constructor
        Private cpCore As coreClass           ' cpCore -- short term, this is the migration solution from a built-in tool, to an addon
        '
        '====================================================================================================
        ''' <summary>
        ''' addon method, deliver complete Html admin site
        ''' </summary>
        ''' <param name="cp"></param>
        ''' <returns></returns>
        Public Overrides Function execute(cp As Contensive.BaseClasses.CPBaseClass) As Object
            Dim returnHtml As String = ""
            Try
                Dim PageOpen As String
                Dim AdminContent As String
                Dim SaveContent As String
                Dim BinaryHeader() As Byte
                Dim BinaryHeaderString As String
                Dim rightNow As Date = DateTime.Now
                '
                ' -- ok to cast cpbase to cp because they build from the same solution
                Me.cp = DirectCast(cp, CPClass)
                cpCore = Me.cp.core
                '
                ' log request
                '
                SaveContent = "" _
                    & Now() _
                    & vbCrLf & "member.name:" & cpCore.authContext.user.Name _
                    & vbCrLf & "member.id:" & cpCore.authContext.user.ID _
                    & vbCrLf & "visit.id:" & cpCore.authContext.visit.ID _
                    & vbCrLf & "url:" & cpCore.webServer.webServerIO_ServerLink _
                    & vbCrLf & "url source:" & cpCore.webServer.requestLinkSource
                SaveContent &= "" _
                        & vbCrLf & "----------" _
                        & vbCrLf & "form post:"
                For Each key As String In cpCore.docProperties.getKeyList()
                    Dim docProperty As docPropertiesClass = cpCore.docProperties.getProperty(key)
                    If docProperty.IsForm Then
                        SaveContent &= vbCrLf & docProperty.NameValue
                    End If
                Next
                If Not IsNothing(cpCore.webServer.requestFormBinaryHeader) Then
                    BinaryHeader = cpCore.webServer.requestFormBinaryHeader
                    BinaryHeaderString = genericController.kmaByteArrayToString(BinaryHeader)
                    SaveContent &= "" _
                        & vbCrLf & "----------" _
                        & vbCrLf & "binary header:" _
                        & vbCrLf & BinaryHeaderString _
                        & vbCrLf
                End If
                logController.appendLog(cpCore, SaveContent, "admin", cpCore.serverConfig.appConfig.name & "-request-")
                '
                ' main_Get Content
                '
                cpCore.db.sqlCommandTimeout = 300
                Call cpCore.main_SetMetaContent(0, 0)
                '
                AdminContent = execute_getContent("")    ' REFACTOR - passing the inner container's content is deprecated. We now execute addons within the admin addon
                If Not cpCore.docOpen Then
                    '
                    ' stream closed, don't both
                    '
                ElseIf (cpCore.main_ClosePageCounter > 0) Then
                    '
                    ' admin page may have called getLoginPage, which includes getEndOfBody
                    '
                    'PageOpen = cpCore.admin_GetPageStart2()
                    '
                    returnHtml = "" _
                    & cpCore.admin_GetPageStart2() _
                    & AdminContent _
                    & cpCore.pages.pagemanager_GetPageEnd() _
                    & ""
                Else
                    '
                    ' normal
                    '
                    'Call AppendLog("call main_getEndOfBody, from main_getLoginPage2-b2 ")
                    'PageOpen = cpCore.admin_GetPageStart2()
                    '
                    returnHtml = "" _
                    & cpCore.admin_GetPageStart2() _
                    & AdminContent _
                    & cpCore.htmlDoc.html_GetEndOfBody(True, True, False, True) _
                    & cpCore.pages.pagemanager_GetPageEnd() _
                    & ""
                End If
                '
                ' Log response
                '
                SaveContent &= "" _
                    & Now() _
                    & vbCrLf & "member.name:" & cpCore.authContext.user.Name _
                    & vbCrLf & "member.id:" & cpCore.authContext.user.ID _
                    & vbCrLf & "visit.id:" & cpCore.authContext.visit.ID _
                    & vbCrLf & "url:" & cpCore.webServer.webServerIO_ServerLink _
                    & vbCrLf & "url source:" & cpCore.webServer.requestLinkSource _
                    & vbCrLf & "----------" _
                    & vbCrLf & "response:" _
                    & vbCrLf & returnHtml
                Call logController.appendLog(cpCore, SaveContent, "admin", rightNow.Year & rightNow.Month.ToString("00") & rightNow.Day.ToString("00") & rightNow.Hour.ToString("00") & rightNow.Minute.ToString("00") & rightNow.Second.ToString("00"))
            Catch ex As Exception
                cp.Site.ErrorReport(ex)
            End Try
            Return returnHtml
        End Function
        '
        '====================================================================================================
        ''' <summary>
        ''' REFACTOR - Constructor for addon instances. Until refactoring, calls into other methods must be constructed with (cpCoreClass) variation.
        ''' </summary>
        ''' <param name="cp"></param>
        ''' <remarks></remarks>
        Public Sub New()
            MyBase.New()
            ClassInitialized = False
        End Sub
        '
        '====================================================================================================
        ''' <summary>
        ''' REFACTOR - Constructor for non-addon instances. (REFACTOR - work-around for pre-refactoring of admin remote methods currently in core classes)
        ''' </summary>
        ''' <param name="cpCore"></param>
        Public Sub New(cp As Contensive.Core.CPClass)
            MyBase.New()
            Me.cp = cp
            cpCore = Me.cp.core
            ClassInitialized = False
        End Sub
        ''
        ''=============================================================================
        ''   main_Get the Admin Page (form with the HTML trimmings)
        ''=============================================================================
        ''
        'Private Function addonToBe_admin(Optional ByVal Content As String = "") As String
        '    Dim returnHtml As String = ""
        '    Try
        '    Catch ex As Exception
        '        cpCore.handleException(ex)
        '    End Try
        '    Return returnHtml
        'End Function
        '
        '========================================================================
        '   initialization and print page
        '       GetForm_ can not read in any Request because
        '       it can not be used withing the upload response page.
        '========================================================================
        '
        Private Function execute_getContent(ContentArgFromCaller As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm")
            '
            Dim AddonMan As addon_AddonMngrSafeClass
            Dim DefaultWrapperID As Integer
            Dim HelpIcon As String
            Dim SettingsIcon As String
            Dim s As String
            Dim AddonHelpCopy As String
            Dim AddonHelpLink As String
            Dim AddonSettingsIcon As String
            Dim AddonEditLink As String
            Dim AddonHelpIcon As String
            Dim InstanceOptionString As String
            Dim HelpLevel As Integer
            Dim AddonDateAdded As Date
            Dim AddonLastUpdated As Date
            Dim HelpAddonID As Integer
            Dim HelpCollectionID As Integer
            Dim CurrentLink As String
            Dim Args() As String
            Dim Ptr As Integer
            Dim AdminNavOpen As Boolean
            Dim AdminNavHead As String
            Dim AdminNavContent As String
            Dim AdminNavJS As String
            Dim OpenNodeList As String
            Dim NavHeader As String
            Dim EditReferer As String
            Dim ContentCell As String
            Dim ao As Object
            Dim Obj As Object
            Dim SQL As String
            Dim CS As Integer
            Dim Panel As String
            Dim Copy As String
            Dim Stream As New stringBuilderLegacyController
            Dim AdminURL As String
            Dim MenuEntryContentName As String
            Dim addonId As Integer
            Dim AddonGuid As String
            Dim addonOptionString As String
            Dim AddonName As String = ""
            Dim UseContentWatchLink As Boolean
            'Dim ResponseFormID As String
            Dim returnStatus As Boolean
            Dim editRecord As New editRecordClass
            Dim AdminContent As New cdefModel
            '
            '-------------------------------------------------------------------------------
            ' Setup defaults
            '-------------------------------------------------------------------------------
            '
            MenuEntryContentName = "Menu Entries"
            'ApplicationName = cpCore.app.config.name
            ButtonObjectCount = 0
            ImagePreloadCount = 0
            JavaScriptString = ""
            ContentWatchLoaded = False
            editRecord.Loaded = False
            UseContentWatchLink = cpCore.siteProperties.useContentWatchLink
            Call cpCore.htmlDoc.main_AddOnLoadJavascript2("document.getElementsByTagName('BODY')[0].onclick = BodyOnClick;", "Contensive")
            '
            '-------------------------------------------------------------------------------
            ' check for member login, if logged in and no admin, lock out
            ' Do CheckMember here because we need to know who is there to create proper blocked menu
            '-------------------------------------------------------------------------------
            '
leak200:
            If Not cpCore.docOpen Then
                '
                ' ----- no stream anyway, do nothing
                '
            ElseIf Not cpCore.authContext.isAuthenticated Then
                '
                ' --- must be authenticated to continue
                '
                Stream.Add(cpCore.htmlDoc.getLoginPage(False))
            ElseIf Not cpCore.authContext.isAuthenticatedContentManager(cpCore) Then
                '
                ' --- member must have proper access to continue
                '
                s = "" _
                    & "<p>" & SpanClassAdminNormal _
                    & "You are attempting to enter an area which your account does not have access." _
                    & cr & "<ul class=""ccList"">" _
                    & cr & "<li class=""ccListItem"">To return to the public web site, use your back button, or <a href=""" & requestAppRootPath & """>Click Here</A>." _
                    & cr & "<li class=""ccListItem"">To login under a different account, <a href=""" & cpCore.serverConfig.appConfig.adminRoute & "?method=logout"" rel=""nofollow"">Click Here</A>" _
                    & cr & "<li class=""ccListItem"">To have your account access changed to include this area, please contact the <a href=""mailto:" & cpCore.siteProperties.getText("EmailAdmin") & """>system administrator</A>. " _
                    & cr & "</ul>" _
                    & "</span></p>" _
                    & ""
                s = "" _
                    & cpCore.main_GetPanelHeader("Unauthorized Access") _
                    & cpCore.main_GetPanel(s, "ccPanel", "ccPanelHilite", "ccPanelShadow", "400", 15) _
                    & ""
                Call Stream.Add("" _
                    & cr & "<div style=""display:table;margin:100px auto auto auto;"">" _
                    & genericController.kmaIndent(s) _
                    & cr & "</div>" _
                    & "")
            Else
                '
                '-------------------------------------------------------------------------------
                ' Get Requests
                '   initialize adminContent and editRecord objects 
                '-------------------------------------------------------------------------------
                '
                Call GetForm_LoadControl(AdminContent, editRecord)
                addonId = cpCore.docProperties.getInteger("addonid")
                AddonGuid = cpCore.docProperties.getText("addonguid")
                ''
                ''-------------------------------------------------------------------------------
                ''
                ''-------------------------------------------------------------------------------
                ''
                'If AdminContent.fields.Count > 0 Then
                '    ReDim EditRecordValuesObject(AdminContent.fields.Count)
                '    ReDim EditRecordDbValues(AdminContent.fields.Count)
                'End If
                '
                '-------------------------------------------------------------------------------
                ' Process SourceForm/Button into Action/Form, and process
                '-------------------------------------------------------------------------------
                '
                If cpCore.docProperties.getText("Button") = ButtonCancelAll Then
                    AdminForm = AdminFormRoot
                Else
                    Call ProcessForms(AdminContent, editRecord)
                    Call ProcessActions(AdminContent, editRecord, UseContentWatchLink)
                End If
                '
                '-------------------------------------------------------------------------------
                ' Normalize values to be needed
                '-------------------------------------------------------------------------------
                '
                If editRecord.id <> 0 Then
                    Call cpCore.workflow.ClearEditLock(AdminContent.Name, editRecord.id)
                End If
                '
                If (AdminForm < 1) Then
                    '
                    ' No form was set, use default form
                    '
                    If AdminContent.Id <= 0 Then
                        AdminForm = AdminFormRoot
                    Else
                        AdminForm = AdminFormIndex
                    End If
                End If
                '
                If AdminForm = AdminFormLegacyAddonManager Then
                    '
                    ' patch out any old links to the legacy addon manager
                    '
                    AdminForm = 0
                    AddonGuid = AddonManagerGuid
                End If
                '
                '-------------------------------------------------------------------------------
                ' Edit form but not valid record case
                ' Put this here so we can display the error without being stuck displaying the edit form
                ' Putting the error on the edit form is confusing because there are fields to fill in
                '-------------------------------------------------------------------------------
                '
                If (AdminSourceForm = AdminFormEdit) Then
                    If (Not cpCore.error_IsUserError()) And cpCore.htmlDoc.main_ReturnAfterEdit And ((AdminButton = ButtonOK) Or (AdminButton = ButtonCancel) Or (AdminButton = ButtonDelete) Or (AdminButton = ButtonPublish) Or (AdminButton = ButtonPublishApprove) Or (AdminButton = ButtonAbortEdit) Or (AdminButton = ButtonPublishSubmit)) Then
                        EditReferer = cpCore.docProperties.getText("EditReferer")
                        CurrentLink = genericController.modifyLinkQuery(cpCore.webServer.webServerIO_ServerLink, "editreferer", "", False)
                        CurrentLink = genericController.vbLCase(CurrentLink)
                        '
                        ' check if this editreferer includes cid=thisone and id=thisone -- if so, go to index form for this cid
                        '
                        If (EditReferer <> "") And (LCase(EditReferer) <> CurrentLink) Then
                            '
                            ' return to the page it came from
                            '
                            Call cpCore.webServer.redirect(EditReferer, "Admin Edit page returning to the EditReferer setting", False)
                            Exit Function
                        Else
                            '
                            ' return to the index page for this content
                            '
                            AdminForm = AdminFormIndex
                        End If
                    End If
                    If BlockEditForm Then
                        AdminForm = AdminFormIndex
                    End If
                End If
                HelpLevel = cpCore.docProperties.getInteger("helplevel")
                HelpAddonID = cpCore.docProperties.getInteger("helpaddonid")
                HelpCollectionID = cpCore.docProperties.getInteger("helpcollectionid")
                If HelpCollectionID = 0 Then
                    HelpCollectionID = cpCore.visitProperty.getInteger("RunOnce HelpCollectionID")
                    If HelpCollectionID <> 0 Then
                        Call cpCore.visitProperty.setProperty("RunOnce HelpCollectionID", "")
                    End If
                End If
                '
                '-------------------------------------------------------------------------------
                ' build refresh string
                '-------------------------------------------------------------------------------
                '
                If AdminContent.Id <> 0 Then Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("cid", genericController.encodeText(AdminContent.Id))
                If editRecord.id <> 0 Then Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("id", genericController.encodeText(editRecord.id))
                If TitleExtension <> "" Then Call cpCore.htmlDoc.webServerIO_addRefreshQueryString(RequestNameTitleExtension, cpCore.htmlDoc.main_EncodeRequestVariable(TitleExtension))
                If RecordTop <> 0 Then Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("rt", genericController.encodeText(RecordTop))
                If RecordsPerPage <> RecordsPerPageDefault Then Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("rs", genericController.encodeText(RecordsPerPage))
                If AdminForm <> 0 Then Call cpCore.htmlDoc.webServerIO_addRefreshQueryString(RequestNameAdminForm, genericController.encodeText(AdminForm))
                If MenuDepth <> 0 Then Call cpCore.htmlDoc.webServerIO_addRefreshQueryString(RequestNameAdminDepth, genericController.encodeText(MenuDepth))
                '
                ' normalize guid
                '
                If AddonGuid <> "" Then
                    If (Len(AddonGuid) = 38) And (Left(AddonGuid, 1) = "{") And (Right(AddonGuid, 1) = "}") Then
                        '
                        ' Good to go
                        '
                    ElseIf (Len(AddonGuid) = 36) Then
                        '
                        ' might be valid with the brackets, add them
                        '
                        AddonGuid = "{" & AddonGuid & "}"
                    ElseIf (Len(AddonGuid) = 32) Then
                        '
                        ' might be valid with the brackets and the dashes, add them
                        '
                        AddonGuid = "{" & Mid(AddonGuid, 1, 8) & "-" & Mid(AddonGuid, 9, 4) & "-" & Mid(AddonGuid, 13, 4) & "-" & Mid(AddonGuid, 17, 4) & "-" & Mid(AddonGuid, 21) & "}"
                    Else
                        '
                        ' not valid
                        '
                        AddonGuid = ""
                    End If
                End If
                '
                '-------------------------------------------------------------------------------
                ' Create the content
                '-------------------------------------------------------------------------------
                '
                ContentCell = ""
                If ContentArgFromCaller <> "" Then
                    '
                    ' Use content passed in as an argument
                    '
                    ContentCell = ContentArgFromCaller
                ElseIf (HelpAddonID <> 0) Then
                    '
                    ' display Addon Help
                    '
                    Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("helpaddonid", HelpAddonID.ToString)
                    ContentCell = GetAddonHelp(HelpAddonID, "")
                ElseIf (HelpCollectionID <> 0) Then
                    '
                    ' display Collection Help
                    '
                    Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("helpcollectionid", HelpCollectionID.ToString)
                    ContentCell = GetCollectionHelp(HelpCollectionID, "")
                ElseIf (AdminForm <> 0) Then
                    '
                    ' No content so far, try the forms
                    '
                    Select Case Int(AdminForm)
                        Case AdminFormBuilderCollection
                            ContentCell = GetForm_BuildCollection()
                        Case AdminFormSecurityControl
                            AddonGuid = AddonGuidPreferences
                            '    ContentCell = GetForm_SecurityControl()
                        Case AdminFormMetaKeywordTool
                            ContentCell = GetForm_MetaKeywordTool()
                        Case AdminFormMobileBrowserControl, AdminFormPageControl, AdminFormEmailControl
                            ContentCell = cpCore.addon.execute_legacy4(AddonGuidPreferences, "", Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextAdmin)
                        Case AdminFormClearCache
                            ContentCell = GetForm_ClearCache()
                        Case AdminFormEDGControl
                            ContentCell = (GetForm_StaticPublishControl())
                        Case AdminFormSpiderControl
                            ContentCell = cpCore.addon.execute_legacy4("Content Spider Control", "", Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextAdmin)
                        Case AdminFormResourceLibrary
                            ContentCell = cpCore.main_GetResourceLibrary2("", False, "", "", True)
                        Case AdminFormQuickStats
                            ContentCell = (GetForm_QuickStats())
                        Case AdminFormIndex
                            ContentCell = (GetForm_Index(AdminContent, editRecord, (LCase(AdminContent.ContentTableName) = "ccemail")))
                        Case AdminFormEdit
                            ContentCell = GetForm_Edit(AdminContent, editRecord)
                        Case AdminFormClose
                            Stream.Add("<Script Language=""JavaScript"" type=""text/javascript""> window.close(); </Script>")
                        Case AdminFormPublishing
                            ContentCell = (GetForm_Publish())
                        Case AdminFormContentChildTool
                            ContentCell = (GetContentChildTool())
                        Case AdminformPageContentMap
                            ContentCell = (GetForm_PageContentMap())
                        Case AdminformHousekeepingControl
                            ContentCell = (GetForm_HouseKeepingControl())
                        Case AdminFormTools, 100 To 199
                            ContentCell = (cpCore.tools_GetToolsForm)
                        Case AdminFormContactManager
                            ContentCell = (contactManager_GetForm_ContactManager())
                        Case AdminFormStyleEditor
                            ContentCell = (admin_GetForm_StyleEditor())
                        Case AdminFormDownloads
                            ContentCell = (GetForm_Downloads())
                        Case AdminformRSSControl
                            Call cpCore.webServer.redirect("?cid=" & cpCore.metaData.getContentId("RSS Feeds"), "RSS Control page is not longer supported. RSS Feeds are controlled from the RSS feed records.", False)
                        Case AdminFormImportWizard
                            ContentCell = cpCore.addon.execute_legacy4(ImportWizardGuid, "", Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextAdmin)
                        Case AdminFormCustomReports
                            ContentCell = GetForm_CustomReports()
                        Case AdminFormFormWizard
                            ContentCell = cpCore.addon.execute_legacy4(FormWizardGuid, "", Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextAdmin)
                        Case AdminFormLegacyAddonManager
                            ContentCell = GetAddonManager()
                        Case AdminFormEditorConfig
                            ContentCell = GetForm_EditConfig()
                        Case Else
                            ContentCell = "<p>The form requested is not supported</p>"
                    End Select
                ElseIf ((addonId <> 0) Or (AddonGuid <> "") Or (AddonName <> "")) Then
                    '
                    ' execute an addon
                    '
                    If (AddonGuid = AddonManagerGuid) Or (LCase(AddonName) = "add-on manager") Or (LCase(AddonName) = "addon manager") Then
                        '
                        ' Special case, call the routine that provides a backup
                        '
                        Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("addonguid", AddonManagerGuid)
                        ContentCell = GetAddonManager()
                    Else
                        If addonId <> 0 Then
                            Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("addonid", CStr(addonId))
                            CS = cpCore.csOpen(cnAddons, addonId)
                            If Not cpCore.db.cs_ok(CS) Then
                                Call cpCore.error_AddUserError("The Add-on you requested could not be found by its id " & addonId)
                            End If
                        ElseIf AddonGuid <> "" Then
                            Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("addonguid", AddonGuid)
                            '$$$$$ cache this
                            If True Then ' 3.4.060" Then
                                CS = cpCore.db.cs_open(cnAddons, "ccguid=" & cpCore.db.encodeSQLText(AddonGuid))
                            Else
                                CS = cpCore.db.cs_open(cnAddons, "aoguid=" & cpCore.db.encodeSQLText(AddonGuid))
                            End If
                            If Not cpCore.db.cs_ok(CS) Then
                                Call cpCore.error_AddUserError("The Add-on you requested could not be found by its guid " & AddonGuid)
                            End If
                        ElseIf AddonName <> "" Then
                            Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("addonname", AddonName)
                            CS = cpCore.db.cs_open(cnAddons, "name=" & cpCore.db.encodeSQLText(AddonName))
                            If Not cpCore.db.cs_ok(CS) Then
                                Call cpCore.error_AddUserError("The Add-on you requested could not be found by its name " & AddonName)
                            End If
                        End If
                        If cpCore.db.cs_ok(CS) Then
                            addonId = cpCore.db.cs_getInteger(CS, "ID")
                            AddonName = cpCore.db.cs_getText(CS, "name")
                            AddonHelpCopy = cpCore.db.cs_getText(CS, "help")
                            Call cpCore.htmlDoc.webServerIO_addRefreshQueryString(RequestNameRunAddon, addonId.ToString)
                        End If
                        Call cpCore.db.cs_Close(CS)
                        InstanceOptionString = cpCore.userProperty.getText("Addon [" & AddonName & "] Options", "")
                        ' default wrapper does not apply to admin
                        DefaultWrapperID = -1
                        'DefaultWrapperID = cpCore.main_GetSiteProperty2("DefaultWrapperID", "0")
                        ContentCell = cpCore.addon.execute_legacy1(addonId, "", InstanceOptionString, Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextAdmin, "", 0, AddonName, "-2", DefaultWrapperID)
                        ' no must allow for an add-on to return blank to return to root
                        'If ContentCell = "" Then
                        '    ContentCell = "<div class=""ccAdminMsg"">The Add-on you requested did not return a valid response.</div>"
                        'End If
                    End If
                Else
                    '
                    ' nothing so far, display desktop
                    '
                    ContentCell = GetForm_Root()
                End If
                '
                ' include fancybox if it was needed
                '
                If includeFancyBox Then
                    Call cpCore.addon.execute_legacy4(jQueryFancyBoxGuid)
                    Call cpCore.htmlDoc.main_AddHeadJavascript("jQuery(document).ready(function() {" & fancyBoxHeadJS & "});")
                End If
                '
                ' Pickup user errors
                '
                If cpCore.error_IsUserError() Then
                    ContentCell = "<div class=""ccAdminMsg"">" & cpCore.error_GetUserError() & "</div>" & ContentCell
                End If
                ''
                '' If blank, must be an addon with a setting form that returned blank, do the dashboard again
                ''
                'If ContentCell = "" Then
                '    '
                '    ' must use the root as a default - bc forms and add-ons may return blank, meaning return to root
                '    ' throw errors only if there is a user error
                '    '
                '    ContentCell = GetForm_Root()
                '    'ContentCell = "<div class=""ccAdminMsg"">The form you requested did not return a valid response.</div>"
                'End If
                '
                If cpCore.htmlDoc.pageManager_printVersion Then
                    '
                    ' For print version, just add content
                    '
                    Call Stream.Add(ContentCell)
                Else
                    Call Stream.Add(cr & GetForm_Top(MenuEntryContentName))
                    Call Stream.Add(genericController.kmaIndent(ContentCell))
                    Call Stream.Add(cr & AdminFormBottom)
                End If
                Call Stream.Add(cr & "<script language=""javascript1.2"" type=""text/javascript"">" & JavaScriptString)
                Call Stream.Add(cr & "ButtonObjectCount = " & ButtonObjectCount & ";")
                Call Stream.Add(cr & "</script>")
            End If
            execute_getContent = cpCore.getDocExceptionHtmlList() & Stream.Text
            Exit Function
ErrorTrap:
            '
            ' Handle this routine as a public interface so log errors and resume
            '   if you exit here, the page doesnt finish properly
            '
            Call handleLegacyClassError2("GetForm")
            '    GetForm = "<p style=""margin:auto auto auto auto"">There was problem with this page. Please use your back button to return to your page, and report this to the site administrator.</p>"
            Resume Next
        End Function
        '
        '========================================================================
        '   read the input request
        '       If RequestBlocked get adminContent.id, AdminAction, FormID
        '       and AdminForm are the only variables accessible before reading
        '       the upl collection
        '========================================================================
        '
        Private Sub GetForm_LoadControl(ByRef adminContent As cdefModel, editRecord As editRecordClass)
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogAdminMethodEnter( "GetForm_LoadControl")
            '
            Dim editorpreferences As String
            Dim Pos As Integer
            Dim SQL As String
            Dim Key As String
            Dim Parts() As String
            Dim Ptr As Integer
            Dim Cnt As Integer
            Dim fieldEditorFieldId As Integer
            Dim fieldEditorAddonId As Integer
            Dim dt As DataTable
            Dim editorOk As Boolean
            Dim CS As Integer
            Dim QSSplit() As String
            Dim QSPointer As Integer
            Dim NVSplit() As String
            Dim NameValue As String
            Dim WCount As Integer
            Dim FindTemp As String
            Dim FieldCount As Integer
            Dim StringTemp As String
            Dim WhereClauseContent As String
            Dim WherePairTemp As String
            Dim Position As Integer
            Dim Position2 As Integer
            Dim MethodName As String
            Dim InputText As String
            Dim Id As Integer
            'dim buildversion As String
            Dim dtTest As DataTable
            '
            MethodName = "Admin.Method()"
            '
            ' Tab Control
            '
            allowAdminTabs = genericController.EncodeBoolean(cpCore.userProperty.getText("AllowAdminTabs", "1"))
            If cpCore.docProperties.getText("tabs") <> "" Then
                If cpCore.docProperties.getBoolean("tabs") <> allowAdminTabs Then
                    allowAdminTabs = Not allowAdminTabs
                    Call cpCore.userProperty.setProperty("AllowAdminTabs", allowAdminTabs.ToString)
                End If
            End If
            '
            ' AdminContent init
            '
            requestedContentId = cpCore.docProperties.getInteger("cid")
            If requestedContentId <> 0 Then
                adminContent = cpCore.metaData.getCdef(requestedContentId)
                If adminContent Is Nothing Then
                    adminContent = New cdefModel
                    adminContent.Id = 0
                    cpCore.error_AddUserError("There is no content with the requested id [" & requestedContentId & "]")
                    requestedContentId = 0
                End If
            End If
            If adminContent Is Nothing Then
                adminContent = New cdefModel
            End If
            '
            ' determine user rights to this content
            '
            UserAllowContentEdit = True
            UserAllowContentAdd = True
            UserAllowContentDelete = True
            If Not cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                If (adminContent.Id > 0) Then
                    UserAllowContentEdit = userHasContentAccess(adminContent.Id)
                End If
            End If
            '
            ' editRecord init
            '
            requestedRecordId = cpCore.docProperties.getInteger("id")
            If (UserAllowContentEdit) And (requestedRecordId <> 0) And (adminContent.Id > 0) Then
                '
                ' set AdminContent to the content definition of the requested record
                '
                CS = cpCore.csOpen(adminContent.Name, requestedRecordId, , , "ContentControlID")
                If cpCore.db.cs_ok(CS) Then
                    editRecord.id = requestedRecordId
                    adminContent.Id = cpCore.db.cs_getInteger(CS, "ContentControlID")
                    If adminContent.Id <= 0 Then
                        adminContent.Id = requestedContentId
                    ElseIf adminContent.Id <> requestedContentId Then
                        adminContent = cpCore.metaData.getCdef(adminContent.Id)
                    End If
                End If
                Call cpCore.db.cs_Close(CS)
            End If
            '
            ' Other page control fields
            '
            TitleExtension = cpCore.docProperties.getText(RequestNameTitleExtension)
            RecordTop = cpCore.docProperties.getInteger("RT")
            RecordsPerPage = cpCore.docProperties.getInteger("RS")
            If RecordsPerPage = 0 Then
                RecordsPerPage = RecordsPerPageDefault
            End If
            '
            ' Read WherePairCount
            '
            WherePairCount = 99
            For WCount = 0 To 99
                WherePair(0, WCount) = genericController.encodeText(cpCore.docProperties.getText("WL" & WCount))
                If WherePair(0, WCount) = "" Then
                    WherePairCount = WCount
                    Exit For
                Else
                    WherePair(1, WCount) = genericController.encodeText(cpCore.docProperties.getText("WR" & WCount))
                    Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("wl" & WCount, cpCore.htmlDoc.main_EncodeRequestVariable(WherePair(0, WCount)))
                    Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("wr" & WCount, cpCore.htmlDoc.main_EncodeRequestVariable(WherePair(1, WCount)))
                End If
            Next
            '
            ' Read WhereClauseContent to WherePairCount
            '
            WhereClauseContent = genericController.encodeText(cpCore.docProperties.getText("wc"))
            If (WhereClauseContent <> "") Then
                '
                ' ***** really needs a server.URLDecode() function
                '
                Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("wc", WhereClauseContent)
                'WhereClauseContent = genericController.vbReplace(WhereClauseContent, "%3D", "=")
                'WhereClauseContent = genericController.vbReplace(WhereClauseContent, "%26", "&")
                If WhereClauseContent <> "" Then
                    QSSplit = Split(WhereClauseContent, ",")
                    For QSPointer = 0 To UBound(QSSplit)
                        NameValue = QSSplit(QSPointer)
                        If NameValue <> "" Then
                            If (Left(NameValue, 1) = "(") And (Right(NameValue, 1) = ")") And (Len(NameValue) > 2) Then
                                NameValue = Mid(NameValue, 2, Len(NameValue) - 2)
                            End If
                            NVSplit = Split(NameValue, "=")
                            WherePair(0, WherePairCount) = NVSplit(0)
                            If UBound(NVSplit) > 0 Then
                                WherePair(1, WherePairCount) = NVSplit(1)
                            End If
                            WherePairCount = WherePairCount + 1
                        End If
                    Next
                End If
            End If
            '
            ' --- If AdminMenuMode is not given locally, use the Members Preferences
            '
            Dim MenuModeVariant As Object
            '
            AdminMenuModeID = cpCore.docProperties.getInteger("mm")
            If AdminMenuModeID = 0 Then
                AdminMenuModeID = cpCore.authContext.user.AdminMenuModeID
            End If
            If AdminMenuModeID = 0 Then
                AdminMenuModeID = AdminMenuModeLeft
            End If
            If cpCore.authContext.user.AdminMenuModeID <> AdminMenuModeID Then
                cpCore.authContext.user.AdminMenuModeID = AdminMenuModeID
                Call cpCore.authContext.user.saveObject(cpCore)
            End If
            '    '
            '    ' ----- FieldName
            '    '
            '    InputFieldName = cpCore.main_GetStreamText2(RequestNameFieldName)
            '
            ' ----- Other
            '
            AdminAction = cpCore.docProperties.getInteger(RequestNameAdminAction)
            AdminSourceForm = cpCore.docProperties.getInteger(RequestNameAdminSourceForm)
            AdminForm = cpCore.docProperties.getInteger(RequestNameAdminForm)
            AdminButton = cpCore.docProperties.getText(RequestNameButton)
            '
            ' ----- Convert misc Deletes to just delete for later processing
            '
            If (AdminButton = ButtonDeleteEmail) Or (AdminButton = ButtonDeletePage) Or (AdminButton = ButtonDeletePerson) Or (AdminButton = ButtonDeleteRecord) Then
                AdminButton = ButtonDelete
            End If
            If (AdminForm = AdminFormEdit) And cpCore.htmlDoc.main_ReturnAfterEdit Then
                MenuDepth = 0
            Else
                MenuDepth = cpCore.docProperties.getInteger(RequestNameAdminDepth)
            End If
            '
            ' ----- convert fieldEditorPreference change to a refresh action
            '
            If adminContent.Id <> 0 Then
                fieldEditorPreference = cpCore.docProperties.getText("fieldEditorPreference")
                If fieldEditorPreference <> "" Then
                    '
                    ' Editor Preference change attempt. Set new preference and set this as a refresh
                    '
                    AdminButton = ""
                    AdminAction = AdminActionEditRefresh
                    AdminForm = AdminFormEdit
                    Pos = genericController.vbInstr(1, fieldEditorPreference, ":")
                    If Pos > 0 Then
                        fieldEditorFieldId = genericController.EncodeInteger(Mid(fieldEditorPreference, 1, Pos - 1))
                        fieldEditorAddonId = genericController.EncodeInteger(Mid(fieldEditorPreference, Pos + 1))
                        If (fieldEditorFieldId <> 0) Then
                            editorOk = True
                            SQL = "select id from ccfields where (active<>0) and id=" & fieldEditorFieldId
                            dtTest = cpCore.db.executeSql(SQL)
                            If dtTest.Rows.Count = 0 Then
                                editorOk = False
                            End If
                            'RS = cpCore.app.executeSql(SQL)
                            'If (not isdatatableok(rs)) Then
                            '    editorOk = False
                            'ElseIf rs.rows.count=0 Then
                            '    editorOk = False
                            'End If
                            'If (isDataTableOk(rs)) Then
                            '    If false Then
                            '        'RS.Close()
                            '    End If
                            '    'RS = Nothing
                            'End If
                            If editorOk And (fieldEditorAddonId <> 0) Then
                                SQL = "select id from ccaggregatefunctions where (active<>0) and id=" & fieldEditorAddonId
                                dtTest = cpCore.db.executeSql(SQL)
                                If dtTest.Rows.Count = 0 Then
                                    editorOk = False
                                End If
                                'RS = cpCore.app.executeSql(SQL)
                                'If (not isdatatableok(rs)) Then
                                '    editorOk = False
                                'ElseIf rs.rows.count=0 Then
                                '    editorOk = False
                                'End If
                                'If (isDataTableOk(rs)) Then
                                '    If false Then
                                '        'RS.Close()
                                '    End If
                                '    'RS = Nothing
                                'End If
                            End If
                            If editorOk Then
                                Key = "editorPreferencesForContent:" & adminContent.Id
                                editorpreferences = cpCore.userProperty.getText(Key, "")
                                If editorpreferences <> "" Then
                                    '
                                    ' remove current preferences for this field
                                    '
                                    Parts = Split("," & editorpreferences, "," & CStr(fieldEditorFieldId) & ":")
                                    Cnt = UBound(Parts) + 1
                                    If Cnt > 0 Then
                                        For Ptr = 1 To Cnt - 1
                                            Pos = genericController.vbInstr(1, Parts(Ptr), ",")
                                            If Pos = 0 Then
                                                Parts(Ptr) = ""
                                            ElseIf Pos > 0 Then
                                                Parts(Ptr) = Mid(Parts(Ptr), Pos + 1)
                                            End If
                                        Next
                                    End If
                                    editorpreferences = Join(Parts, "")
                                End If
                                editorpreferences = editorpreferences & "," & fieldEditorFieldId & ":" & fieldEditorAddonId
                                Call cpCore.userProperty.setProperty(Key, editorpreferences)
                            End If
                        End If
                    End If
                End If
            End If
            '
            ' --- Spell Check
            '
            ' BuildVersion = cpCore.app.GetSiteProperty("BuildVersion")

            If True Then
                SpellCheckSupported = False
                SpellCheckRequest = False
                SpellCheckResponse = False
                SpellCheckDictionaryFilename = ""
                SpellCheckIgnoreList = ""
            Else
            End If
            '
            '''Dim th as integer
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError2("GetForm_LoadControl")
            Resume Next
        End Sub
        '
        '========================================================================
        ' ProcessActions
        '   perform the action called from the previous form
        '   when action is complete, replace the action code with one that will refresh
        '
        '   Request Variables
        '       ID = ID of record to edit
        '       AdminAction = action to be performed, defined below, required except for very first call to edit
        '   AdminAction Definitions
        '       edit - edit the record defined by ID, If ID="", edit a new record
        '       Save - saves an edit record and returns to the index
        '       Delete - hmmm.
        '       Cancel - returns to index
        '       Change Filex - uploads a file to a FieldTypeFile, x is a number 0...AdminContent.FieldMax
        '       Delete Filex - clears a file name for a FieldTypeFile, x is a number 0...AdminContent.FieldMax
        '       Upload - The action that actually uploads the file
        '       Email - (not done) Sends "body" field to "email" field in adminContent.id
        '========================================================================
        '
        Private Sub ProcessActions(adminContent As cdefModel, editRecord As editRecordClass, UseContentWatchLink As Boolean)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "ProcessActions")
            '
            'Dim Upload As KMAUpload3.UploadClass
            '
            Dim CS As Integer
            Dim Filename As String
            Dim FieldCount As Integer
            Dim SQL As String
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim EMailToMemberID As Integer
            Dim EmailFrom As String
            Dim EmailSubject As String
            Dim EmailBody As String
            Dim EmailStatus As String
            Dim EmailStatusMessage As String
            Dim DataSourceName As String
            Dim ForceReadOnly As Boolean        ' set true for special cases that force a record read only
            Dim EmailBodySource As String
            Dim EmailBodyHTML As Boolean
            Dim EmailSubjectSource As String
            Dim EmailSubjectHTML As Boolean
            Dim ApprovedName As String
            Dim CSRecord As Integer
            Dim ContentID As Integer
            Dim RecordID As Integer
            Dim ContentName As String
            Dim Copy As String
            Dim CSEditRecord As Integer
            Dim EmailToConfirmationMemberID As Integer
            Dim ImageWidth As Integer
            Dim ImageHeight As Integer
            Dim Position As Integer
            Dim ByteArray() As Byte
            Dim VirtualFilePath As String
            Dim EmailAddLinkEID As Boolean
            Dim OpenTriggerCode As String
            Dim OpenTriggerCss As String
            Dim ClickFlagQuery As String
            Dim EmailSpamFooterFlag As String
            Dim ToAll As Boolean
            Dim CSLog As Integer
            Dim EmailDropID As Integer
            Dim EmailToAddress As String
            Dim EmailToName As String
            Dim ScheduletypeID As Integer
            Dim EMailTemplateID As Integer
            Dim EmailTemplate As String
            Dim RowCnt As Integer
            Dim RowPtr As Integer
            '
            If AdminAction <> AdminActionNop Then
                If Not UserAllowContentEdit Then
                    '
                    ' Action blocked by BlockCurrentRecord
                    '
                Else
                    '
                    ' Process actions
                    '
                    Select Case AdminAction
                        Case AdminActionEditRefresh
                            '
                            ' Load the record as if it will be saved, but skip the save
                            '
                            Call LoadEditRecord(adminContent, editRecord)
                            Call LoadEditResponse(adminContent, editRecord)
                        Case AdminActionMarkReviewed
                            '
                            ' Mark the record reviewed without making any changes
                            '
                            Call cpCore.db.markRecordReviewed(adminContent.Name, editRecord.id)
                        Case AdminActionWorkflowPublishSelected
                            '
                            ' Publish everything selected
                            '
                            RowCnt = cpCore.docProperties.getInteger("RowCnt")
                            For RowPtr = 0 To RowCnt - 1
                                If cpCore.docProperties.getBoolean("Row" & RowPtr) Then
                                    RecordID = cpCore.docProperties.getInteger("RowID" & RowPtr)
                                    ContentName = cpCore.docProperties.getText("RowContentName" & RowPtr)
                                    Call cpCore.workflow.publishEdit(ContentName, RecordID)
                                    Call cpCore.main_ProcessSpecialCaseAfterSave(False, ContentName, RecordID, "", 0, UseContentWatchLink)
                                    Call cpCore.cache.invalidateObject(cacheController.getDbRecordCacheName(adminContent.ContentTableName, "id", RecordID.ToString()))
                                    Call cpCore.db.executeSql("delete from ccAuthoringControls where recordid=" & RecordID & " and Contentid=" & cpCore.metaData.getContentId(ContentName))
                                End If
                            Next
                        Case AdminActionWorkflowPublishApproved
                            '
                            ' Publish all approved workflow publishing records
                            '
                            CS = cpCore.db.cs_open("Authoring Controls", "ControlType=3", "ID")
                            Do While cpCore.db.cs_ok(CS)
                                ContentID = cpCore.db.cs_getInteger(CS, "ContentID")
                                RecordID = cpCore.db.cs_getInteger(CS, "RecordID")
                                ContentName = cpCore.metaData.getContentNameByID(ContentID)
                                If ContentName <> "" Then
                                    Call cpCore.workflow.publishEdit(ContentName, RecordID)
                                    Call cpCore.main_ProcessSpecialCaseAfterSave(False, ContentName, RecordID, "", 0, UseContentWatchLink)
                                    Call cpCore.cache.invalidateObject(cacheController.getDbRecordCacheName(adminContent.ContentTableName, "id", RecordID.ToString()))
                                End If
                                cpCore.db.cs_goNext(CS)
                            Loop
                            Call cpCore.db.cs_Close(CS)
                            'AdminForm = AdminFormRoot
                        Case AdminActionPublishApprove
                            If (editRecord.Read_Only) Then
                                Call cpCore.error_AddUserError("Your request was blocked because the record you specified is locked.")
                            ElseIf Not adminContent.AllowWorkflowAuthoring Then
                                Call cpCore.error_AddUserError("Your request was blocked because content you selected does not support workflow authoring.")
                            Else
                                '
                                Call LoadEditRecord(adminContent, editRecord)
                                Call LoadEditResponse(adminContent, editRecord)
                                Call ProcessActionSave(adminContent, editRecord, UseContentWatchLink)
                                If Not cpCore.error_IsUserError Then
                                    'no - if WF, on process on publish
                                    'Call ProcessSpecialCaseAfterSave(false,AdminContent.Name, EditRecord.ID, EditRecord.Name, EditRecord.ParentID, UseContentWatchLink)
                                    Call cpCore.workflow.approveEdit(adminContent.Name, editRecord.id)
                                Else
                                    AdminForm = AdminSourceForm
                                End If
                            End If
                            AdminAction = AdminActionNop ' convert so action can be used in as a refresh
                        Case AdminActionPublishSubmit
                            If (editRecord.Read_Only) Then
                                Call cpCore.error_AddUserError("Your request was blocked because the record you specified is locked.")
                            ElseIf Not adminContent.AllowWorkflowAuthoring Then
                                Call cpCore.error_AddUserError("Your request was blocked because content you selected does not support workflow authoring.")
                            Else
                                '
                                Call LoadEditRecord(adminContent, editRecord)
                                Call LoadEditResponse(adminContent, editRecord)
                                Call ProcessActionSave(adminContent, editRecord, UseContentWatchLink)
                                If Not cpCore.error_IsUserError Then
                                    'no - if WF, on process on publish
                                    'Call ProcessSpecialCaseAfterSave(false,AdminContent.Name, EditRecord.ID, EditRecord.Name, EditRecord.ParentID, UseContentWatchLink)
                                    Call cpCore.workflow.main_SubmitEdit(adminContent.Name, editRecord.id)
                                    Call cpCore.pages.pageManager_SendPublishSubmitNotice(adminContent.Name, editRecord.id, editRecord.nameLc)
                                Else
                                    AdminForm = AdminSourceForm
                                End If
                            End If
                            AdminAction = AdminActionNop ' convert so action can be used in as a refresh
                        Case AdminActionPublish
                            '
                            ' --- Publish edit record to live record - not AuthoringLock blocked
                            '
                            Call LoadEditRecord(adminContent, editRecord)
                            Call LoadEditResponse(adminContent, editRecord)
                            Call ProcessActionSave(adminContent, editRecord, UseContentWatchLink)
                            If Not cpCore.error_IsUserError Then
                                Call cpCore.workflow.publishEdit(adminContent.Name, editRecord.id)
                                CS = cpCore.csOpen(adminContent.Name, editRecord.id)
                                Dim IsDeleted As Boolean
                                IsDeleted = Not cpCore.db.cs_ok(CS)
                                Call cpCore.db.cs_Close(CS)
                                Call cpCore.main_ProcessSpecialCaseAfterSave(IsDeleted, adminContent.Name, editRecord.id, editRecord.nameLc, editRecord.parentID, UseContentWatchLink)
                                Call cpCore.cache.invalidateObject(cacheController.getDbRecordCacheName(adminContent.ContentTableName, "id", RecordID.ToString()))
                            Else
                                AdminForm = AdminSourceForm
                            End If
                        Case AdminActionAbortEdit
                            '
                            ' --- copy live record over edit record
                            '
                            Call cpCore.workflow.abortEdit2(adminContent.Name, editRecord.id, cpCore.authContext.user.ID)
                            Call cpCore.main_ProcessSpecialCaseAfterSave(False, adminContent.Name, editRecord.id, editRecord.nameLc, editRecord.parentID, UseContentWatchLink)
                            If MenuDepth > 0 Then
                                '
                                ' opened as a child, close the window
                                '
                                AdminForm = AdminFormClose
                            Else
                                '
                                ' opened as a main window, go to the contents index page
                                '
                                AdminForm = AdminFormIndex
                            End If
                        Case AdminActionDelete
                            If (editRecord.Read_Only) Then
                                Call cpCore.error_AddUserError("Your request was blocked because the record you specified is now locked by another authcontext.user.")
                            Else
                                Call LoadEditRecord(adminContent, editRecord)
                                CSEditRecord = cpCore.csOpenRecord(adminContent.Name, editRecord.id, True, True)
                                If cpCore.db.cs_ok(CSEditRecord) Then
                                    If Not AdminContentWorkflowAuthoring Then
                                        '
                                        ' non-Workflow Delete
                                        '
                                        'ContentName = EditRecord.ContentName
                                        'ContentName = cpCore.metaData.getContentNameByID(cpCore.app.cs_getInteger(CSEditRecord, "ContentControlID"))
                                        If cpCore.main_IsContentFieldSupported(adminContent.Name, "parentid") Then
                                            Call cpCore.pages.pageManager_DeleteChildRecords(adminContent.Name, editRecord.id, False)
                                        End If
                                    End If
                                    Call cpCore.DeleteCSRecord(CSEditRecord)
                                    Call cpCore.main_ProcessSpecialCaseAfterSave(True, editRecord.contentControlId_Name, editRecord.id, editRecord.nameLc, editRecord.parentID, UseContentWatchLink)
                                    Call cpCore.cache.invalidateContent(editRecord.contentControlId_Name)
                                End If
                                Call cpCore.db.cs_Close(CSEditRecord)
                            End If
                            AdminAction = AdminActionNop ' convert so action can be used in as a refresh
                            '                Case AdminActionSetHTMLEdit
                            '                    '
                            '                    ' Set member property for this field to HTML Edit
                            '                    '
                            '                    Call cpCore.main_SetMemberProperty("HTMLEditor." & AdminContent.Name & "." & InputFieldName, True)
                            '                    Call ProcessActionSave(AdminContent, editRecord,UseContentWatchLink)
                            '                    AdminForm = AdminSourceForm
                            '                Case AdminActionSetTextEdit
                            '                    '
                            '                    ' Set member property for this field to HTML Edit
                            '                    '
                            '                    Call cpCore.main_SetMemberProperty("HTMLEditor." & AdminContent.Name & "." & InputFieldName, False)
                            '                    Call ProcessActionSave(AdminContent, editRecord,UseContentWatchLink)
                            '                    AdminForm = AdminSourceForm
                            '                Case AdminActionSaveField
                            '                    If (editrecord.read_only) Then
                            '                        Call cpCore.htmldoc.main_AddUserError("Your request was blocked because the record you specified is now locked by another authcontext.user.")
                            '                    Else
                            '                        '
                            '                        ' --- preload array with values that may not come back in response
                            '                        '
                            '                        If (InputFieldName = "") Then
                            '                            Call HandleInternalError("ProcessActions", "SaveField action called but InputFieldName is null")
                            '                        Else
                            '                            Call LoadEditRecord
                            '                            Call LoadEditResponseByName(InputFieldName)
                            '                            '
                            '                            ' --- if no error, save values
                            '                            '
                            '                            If Not cpCore.main_IsUserError Then
                            '                                Call SaveEditRecord(adminContent, editRecord,ResponseFormID)
                            '                            End If
                            '                            If cpCore.main_IsUserError Then
                            '                                AdminForm = AdminSourceForm
                            '                            End If
                            '                            'record should be marked modified in cpCore.app.csv_SaveCSRecord
                            '                            'If AdminContent.AllowWorkflowAuthoring Then
                            '                            '    Call cpCore.main_SetAuthoringControl(AdminContent.Name, EditRecord.ID, AuthoringControlsModified)
                            '                            '    End If
                            '                            End If
                            '                        End If
                            '                    AdminAction = AdminActionNop ' convert so action can be used in as a refresh
                            '                    '
                        Case AdminActionSave
                            '
                            ' ----- Save Record
                            '
                            If (editRecord.Read_Only) Then
                                Call cpCore.error_AddUserError("Your request was blocked because the record you specified is now locked by another authcontext.user.")
                            Else
                                Call LoadEditRecord(adminContent, editRecord)
                                Call LoadEditResponse(adminContent, editRecord)
                                Call ProcessActionSave(adminContent, editRecord, UseContentWatchLink)
                                If Not (adminContent.AllowWorkflowAuthoring And cpCore.siteProperties.allowWorkflowAuthoring) Then
                                    Call cpCore.main_ProcessSpecialCaseAfterSave(False, adminContent.Name, editRecord.id, editRecord.nameLc, editRecord.parentID, UseContentWatchLink)
                                End If
                            End If
                            AdminAction = AdminActionNop ' convert so action can be used in as a refresh
                            '
                        Case AdminActionSaveAddNew
                            '
                            ' ----- Save and add a new record
                            '
                            If (editRecord.Read_Only) Then
                                Call cpCore.error_AddUserError("Your request was blocked because the record you specified is now locked by another authcontext.user.")
                            Else
                                Call LoadEditRecord(adminContent, editRecord)
                                Call LoadEditResponse(adminContent, editRecord)
                                Call ProcessActionSave(adminContent, editRecord, UseContentWatchLink)
                                If Not (adminContent.AllowWorkflowAuthoring And cpCore.siteProperties.allowWorkflowAuthoring) Then
                                    Call cpCore.main_ProcessSpecialCaseAfterSave(False, adminContent.Name, editRecord.id, editRecord.nameLc, editRecord.parentID, UseContentWatchLink)
                                End If
                                editRecord.id = 0
                                editRecord.Loaded = False
                                'If AdminContent.fields.Count > 0 Then
                                '    ReDim EditRecordValuesObject(AdminContent.fields.Count)
                                '    ReDim EditRecordDbValues(AdminContent.fields.Count)
                                'End If
                            End If
                            AdminAction = AdminActionNop ' convert so action can be used in as a refresh
                            '
                        Case AdminActionDuplicate
                            '
                            ' ----- Save Record
                            '
                            If allowSaveBeforeDuplicate Then
                                If (editRecord.Read_Only) Then
                                    Call cpCore.error_AddUserError("Your request was blocked because the record you specified is now locked by another authcontext.user.")
                                Else
                                    Call LoadEditRecord(adminContent, editRecord)
                                    Call LoadEditResponse(adminContent, editRecord)
                                    Call ProcessActionSave(adminContent, editRecord, UseContentWatchLink)
                                    If Not (adminContent.AllowWorkflowAuthoring And cpCore.siteProperties.allowWorkflowAuthoring) Then
                                        Call cpCore.main_ProcessSpecialCaseAfterSave(False, adminContent.Name, editRecord.id, editRecord.nameLc, editRecord.parentID, UseContentWatchLink)
                                    End If
                                    Call ProcessActionDuplicate(adminContent, editRecord)
                                End If
                            Else
                                Call ProcessActionDuplicate(adminContent, editRecord)
                            End If
                            AdminAction = AdminActionNop ' convert so action can be used in as a refresh
                            '
                        Case AdminActionSendEmail
                            '
                            ' ----- Send (Group Email Only)
                            '
                            If (editRecord.Read_Only) Then
                                Call cpCore.error_AddUserError("Your request was blocked because the record you specified is now locked by another authcontext.user.")
                            Else
                                Call LoadEditRecord(adminContent, editRecord)
                                Call LoadEditResponse(adminContent, editRecord)
                                Call ProcessActionSave(adminContent, editRecord, UseContentWatchLink)
                                If Not (adminContent.AllowWorkflowAuthoring And cpCore.siteProperties.allowWorkflowAuthoring) Then
                                    Call cpCore.main_ProcessSpecialCaseAfterSave(False, adminContent.Name, editRecord.id, editRecord.nameLc, editRecord.parentID, UseContentWatchLink)
                                End If
                                If Not cpCore.error_IsUserError Then
                                    If Not cpCore.IsWithinContent(editRecord.contentControlId, cpCore.metaData.getContentId("Group Email")) Then
                                        Call cpCore.error_AddUserError("The send action only supports Group Email.")
                                    Else
                                        CS = cpCore.csOpen("Group Email", editRecord.id)
                                        If Not cpCore.db.cs_ok(CS) Then
                                            Throw New ApplicationException("Unexpected exception") ' throw new applicationException("Unexpected exception")'  cpCore.handleLegacyError23("Email ID [" & editRecord.id & "] could not be found in Group Email.")
                                        ElseIf cpCore.db.cs_get(CS, "FromAddress") = "" Then
                                            Call cpCore.error_AddUserError("A 'From Address' is required before sending an email.")
                                        ElseIf cpCore.db.cs_get(CS, "Subject") = "" Then
                                            Call cpCore.error_AddUserError("A 'Subject' is required before sending an email.")
                                        Else
                                            Call cpCore.db.cs_set(CS, "submitted", True)
                                            Call cpCore.db.cs_set(CS, "ConditionID", 0)
                                            If cpCore.db.cs_getDate(CS, "ScheduleDate") = Date.MinValue Then
                                                Call cpCore.db.cs_set(CS, "ScheduleDate", cpCore.app_startTime)
                                            End If
                                        End If
                                        Call cpCore.db.cs_Close(CS)
                                    End If
                                End If
                            End If
                            AdminAction = AdminActionNop ' convert so action can be used in as a refresh
                            '
                        Case AdminActionDeactivateEmail
                            '
                            ' ----- Deactivate (Conditional Email Only)
                            '
                            If (editRecord.Read_Only) Then
                                Call cpCore.error_AddUserError("Your request was blocked because the record you specified is now locked by another authcontext.user.")
                            Else
                                ' no save, page was read only - Call ProcessActionSave
                                Call LoadEditRecord(adminContent, editRecord)
                                If Not cpCore.error_IsUserError Then
                                    If Not cpCore.IsWithinContent(editRecord.contentControlId, cpCore.metaData.getContentId("Conditional Email")) Then
                                        Call cpCore.error_AddUserError("The deactivate action only supports Conditional Email.")
                                    Else
                                        CS = cpCore.csOpen("Conditional Email", editRecord.id)
                                        If Not cpCore.db.cs_ok(CS) Then
                                            Throw New ApplicationException("Unexpected exception") ' throw new applicationException("Unexpected exception")'  cpCore.handleLegacyError23("Email ID [" & editRecord.id & "] could not be opened.")
                                        Else
                                            Call cpCore.db.cs_set(CS, "submitted", False)
                                        End If
                                        Call cpCore.db.cs_Close(CS)
                                    End If
                                End If
                            End If
                            AdminAction = AdminActionNop ' convert so action can be used in as a refresh
                        Case AdminActionActivateEmail
                            '
                            ' ----- Activate (Conditional Email Only)
                            '
                            If (editRecord.Read_Only) Then
                                Call cpCore.error_AddUserError("Your request was blocked because the record you specified is now locked by another authcontext.user.")
                            Else
                                Call LoadEditRecord(adminContent, editRecord)
                                Call LoadEditResponse(adminContent, editRecord)
                                Call ProcessActionSave(adminContent, editRecord, UseContentWatchLink)
                                If Not (adminContent.AllowWorkflowAuthoring And cpCore.siteProperties.allowWorkflowAuthoring) Then
                                    Call cpCore.main_ProcessSpecialCaseAfterSave(False, adminContent.Name, editRecord.id, editRecord.nameLc, editRecord.parentID, UseContentWatchLink)
                                End If
                                If Not cpCore.error_IsUserError Then
                                    If Not cpCore.IsWithinContent(editRecord.contentControlId, cpCore.metaData.getContentId("Conditional Email")) Then
                                        Call cpCore.error_AddUserError("The activate action only supports Conditional Email.")
                                    Else
                                        CS = cpCore.csOpen("Conditional Email", editRecord.id)
                                        If Not cpCore.db.cs_ok(CS) Then
                                            Throw New ApplicationException("Unexpected exception") ' throw new applicationException("Unexpected exception")'  cpCore.handleLegacyError23("Email ID [" & editRecord.id & "] could not be opened.")
                                        ElseIf cpCore.db.cs_getInteger(CS, "ConditionID") = 0 Then
                                            cpCore.error_AddUserError("A condition must be set.")
                                        Else
                                            Call cpCore.db.cs_set(CS, "submitted", True)
                                            If cpCore.db.cs_getDate(CS, "ScheduleDate") = Date.MinValue Then
                                                Call cpCore.db.cs_set(CS, "ScheduleDate", cpCore.app_startTime)
                                            End If
                                        End If
                                        Call cpCore.db.cs_Close(CS)
                                    End If
                                End If
                            End If
                            AdminAction = AdminActionNop ' convert so action can be used in as a refresh
                        Case AdminActionSendEmailTest
                            If (editRecord.Read_Only) Then
                                Call cpCore.error_AddUserError("Your request was blocked because the record you specified is now locked by another authcontext.user.")
                            Else
                                '
                                Call LoadEditRecord(adminContent, editRecord)
                                Call LoadEditResponse(adminContent, editRecord)
                                Call ProcessActionSave(adminContent, editRecord, UseContentWatchLink)
                                If Not (adminContent.AllowWorkflowAuthoring And cpCore.siteProperties.allowWorkflowAuthoring) Then
                                    Call cpCore.main_ProcessSpecialCaseAfterSave(False, adminContent.Name, editRecord.id, editRecord.nameLc, editRecord.parentID, UseContentWatchLink)
                                End If
                                '
                                If Not cpCore.error_IsUserError Then
                                    '
                                    EmailToConfirmationMemberID = 0
                                    If editRecord.fieldsLc.ContainsKey("testmemberid") Then
                                        EmailToConfirmationMemberID = genericController.EncodeInteger(editRecord.fieldsLc.Item("testmemberid").value)
                                        Call cpCore.email.sendConfirmationTest(editRecord.id, EmailToConfirmationMemberID)
                                        '
                                        If editRecord.fieldsLc.ContainsKey("lastsendtestdate") Then
                                            editRecord.fieldsLc.Item("lastsendtestdate").value = cpCore.app_startTime
                                            Call cpCore.db.executeSql("update ccemail Set lastsendtestdate=" & cpCore.db.encodeSQLDate(cpCore.app_startTime) & " where id=" & editRecord.id)
                                        End If
                                    End If
                                End If
                            End If
                            AdminAction = AdminActionNop ' convert so action can be used in as a refresh
                            ' end case
                        Case AdminActionDeleteRows
                            '
                            ' Delete Multiple Rows
                            '
                            RowCnt = cpCore.docProperties.getInteger("rowcnt")
                            If RowCnt > 0 Then
                                For RowPtr = 0 To RowCnt - 1
                                    If cpCore.docProperties.getBoolean("row" & RowPtr) Then
                                        CSEditRecord = cpCore.csOpenRecord(adminContent.Name, cpCore.docProperties.getInteger("rowid" & RowPtr), True, True)
                                        If cpCore.db.cs_ok(CSEditRecord) Then
                                            RecordID = cpCore.db.cs_getInteger(CSEditRecord, "ID")
                                            Call cpCore.DeleteCSRecord(CSEditRecord)
                                            If (Not AdminContentWorkflowAuthoring) Then
                                                '
                                                ' non-Workflow Delete
                                                '
                                                ContentName = cpCore.metaData.getContentNameByID(cpCore.db.cs_getInteger(CSEditRecord, "ContentControlID"))
                                                Call cpCore.cache.invalidateObject(cacheController.getDbRecordCacheName(adminContent.ContentTableName, "id", RecordID.ToString()))
                                                Call cpCore.main_ProcessSpecialCaseAfterSave(True, ContentName, RecordID, "", 0, UseContentWatchLink)
                                            End If
                                            '
                                            ' Page Content special cases
                                            '
                                            If genericController.vbLCase(adminContent.ContentTableName) = "ccpagecontent" Then
                                                Call cpCore.pages.cache_pageContent_removeRow(RecordID, False, False)
                                                If RecordID = (cpCore.siteProperties.getinteger("PageNotFoundPageID", 0)) Then
                                                    Call cpCore.siteProperties.getText("PageNotFoundPageID", "0")
                                                End If
                                                If RecordID = (cpCore.siteProperties.getinteger("LandingPageID", 0)) Then
                                                    Call cpCore.siteProperties.getText("LandingPageID", "0")
                                                End If
                                            End If
                                        End If
                                        Call cpCore.db.cs_Close(CSEditRecord)
                                    End If
                                Next
                            End If
                        Case AdminActionReloadCDef
                            '
                            ' ccContent - save changes and reload content definitions
                            '
                            If (editRecord.Read_Only) Then
                                Call cpCore.error_AddUserError("Your request was blocked because the record you specified Is now locked by another authcontext.user.")
                            Else
                                Call LoadEditRecord(adminContent, editRecord)
                                Call LoadEditResponse(adminContent, editRecord)
                                Call ProcessActionSave(adminContent, editRecord, UseContentWatchLink)
                                cpCore.cache.invalidateAll()
                                cpCore.metaData.clear()
                            End If
                            AdminAction = AdminActionNop ' convert so action can be used in as a refresh
                        Case Else
                            '
                            ' Nop action or anything unrecognized - read in database
                            '
                    End Select
                End If
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError2("ProcessActions")
            Call cpCore.error_AddUserError("There was an unknown error processing this page at " & cpCore.app_startTime & ". Please try again, Or report this error To the site administrator.")
        End Sub
        '
        '========================================================================
        ' LoadAndSaveContentGroupRules
        '
        '   For a particular content, remove previous GroupRules, and Create new ones
        '========================================================================
        '
        Private Sub LoadAndSaveContentGroupRules(GroupID As Integer)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "LoadAndSaveContentGroupRules")
            '
            Dim GroupCount As Integer
            Dim GroupPointer As Integer
            Dim ContentCount As Integer
            Dim ContentPointer As Integer
            Dim CSPointer As Integer
            Dim ContentID As Integer
            Dim AllowAdd As Boolean
            Dim AllowDelete As Boolean
            Dim CSNew As Integer
            Dim RecordChanged As Boolean
            Dim RuleNeeded As Boolean
            Dim RuleFound As Boolean
            Dim SQL As String
            Dim DeleteIdList As String = ""
            Dim RuleId As Integer
            '
            ' ----- Delete duplicate Group Rules
            '
            SQL = "Select distinct DuplicateRules.ID" _
                & " from ccgrouprules" _
                & " Left join ccgrouprules As DuplicateRules On DuplicateRules.ContentID=ccGroupRules.ContentID" _
                & " where ccGroupRules.ID < DuplicateRules.ID" _
                & " And ccGroupRules.GroupID=DuplicateRules.GroupID"
            SQL = "Delete from ccGroupRules where ID In (" & SQL & ")"
            Call cpCore.db.executeSql(SQL)
            '
            ' --- create GroupRule records for all selected
            '
            CSPointer = cpCore.db.cs_open("Group Rules", "GroupID=" & GroupID, "ContentID, ID", True)
            ContentCount = cpCore.docProperties.getInteger("ContentCount")
            If ContentCount > 0 Then
                For ContentPointer = 0 To ContentCount - 1
                    RuleNeeded = cpCore.docProperties.getBoolean("Content" & ContentPointer)
                    ContentID = cpCore.docProperties.getInteger("ContentID" & ContentPointer)
                    AllowAdd = cpCore.docProperties.getBoolean("ContentGroupRuleAllowAdd" & ContentPointer)
                    AllowDelete = cpCore.docProperties.getBoolean("ContentGroupRuleAllowDelete" & ContentPointer)
                    '
                    RuleFound = False
                    cpCore.db.cs_goFirst(CSPointer)
                    If cpCore.db.cs_ok(CSPointer) Then
                        Do While cpCore.db.cs_ok(CSPointer)
                            If cpCore.db.cs_getInteger(CSPointer, "ContentID") = ContentID Then
                                RuleId = cpCore.db.cs_getInteger(CSPointer, "id")
                                RuleFound = True
                                Exit Do
                            End If
                            cpCore.db.cs_goNext(CSPointer)
                        Loop
                    End If
                    If RuleNeeded And Not RuleFound Then
                        CSNew = cpCore.db.cs_insertRecord("Group Rules")
                        If cpCore.db.cs_ok(CSNew) Then
                            Call cpCore.db.cs_set(CSNew, "GroupID", GroupID)
                            Call cpCore.db.cs_set(CSNew, "ContentID", ContentID)
                            Call cpCore.db.cs_set(CSNew, "AllowAdd", AllowAdd)
                            Call cpCore.db.cs_set(CSNew, "AllowDelete", AllowDelete)
                        End If
                        cpCore.db.cs_Close(CSNew)
                        RecordChanged = True
                    ElseIf RuleFound And Not RuleNeeded Then
                        DeleteIdList &= ", " & RuleId
                        'Call cpCore.main_DeleteCSRecord(CSPointer)
                        RecordChanged = True
                    ElseIf RuleFound And RuleNeeded Then
                        If (AllowAdd <> cpCore.db.cs_getBoolean(CSPointer, "AllowAdd")) Then
                            Call cpCore.db.cs_set(CSPointer, "AllowAdd", AllowAdd)
                            RecordChanged = True
                        End If
                        If (AllowDelete <> cpCore.db.cs_getBoolean(CSPointer, "AllowDelete")) Then
                            Call cpCore.db.cs_set(CSPointer, "AllowDelete", AllowDelete)
                            RecordChanged = True
                        End If
                    End If
                Next
            End If
            Call cpCore.db.cs_Close(CSPointer)
            If DeleteIdList <> "" Then
                SQL = "delete from ccgrouprules where id In (" & Mid(DeleteIdList, 2) & ")"
                Call cpCore.db.executeSql(SQL)
            End If
            If RecordChanged Then
                Call cpCore.cache.invalidateContent("Group Rules")
            End If
            Exit Sub
            '
ErrorTrap:
            Call handleLegacyClassError3("LoadAndSaveContentGroupRules")
        End Sub
        '
        '========================================================================
        ' LoadAndSaveGroupRules
        '   read groups from the edit form and modify Group Rules to match
        '========================================================================
        '
        Private Sub LoadAndSaveGroupRules(editRecord As editRecordClass)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "LoadAndSaveGroupRules")
            '
            If editRecord.id <> 0 Then
                Call LoadAndSaveGroupRules_ForContentAndChildren(editRecord.id, "")
            End If
            '
            Exit Sub
            '
ErrorTrap:
            Call handleLegacyClassError3("LoadAndSaveGroupRules")
        End Sub
        '
        '========================================================================
        ' LoadAndSaveGroupRules_ForContentAndChildren
        '   read groups from the edit form and modify Group Rules to match
        '========================================================================
        '
        Private Sub LoadAndSaveGroupRules_ForContentAndChildren(ContentID As Integer, ParentIDString As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "LoadAndSaveGroupRules_ForContentAndChildren")
            '
            Dim CSPointer As Integer
            Dim MyParentIDString As String
            '
            ' --- Create Group Rules for this content
            '
            If CBool(InStr(1, ParentIDString, "," & ContentID & ",")) Then
                Throw (New Exception("Child ContentID [" & ContentID & "] Is its own parent"))
            Else
                MyParentIDString = ParentIDString & "," & ContentID & ","
                Call LoadAndSaveGroupRules_ForContent(ContentID)
                '
                ' --- Create Group Rules for all child content
                '
                CSPointer = cpCore.db.cs_open("Content", "ParentID=" & ContentID)
                Do While cpCore.db.cs_ok(CSPointer)
                    Call LoadAndSaveGroupRules_ForContentAndChildren(cpCore.db.cs_getInteger(CSPointer, "id"), MyParentIDString)
                    Call cpCore.db.cs_goNext(CSPointer)
                Loop
                Call cpCore.db.cs_Close(CSPointer)
            End If
            '
            Exit Sub
            '
ErrorTrap:
            Call handleLegacyClassError3("LoadAndSaveGroupRules_ForContentAndChildren")
        End Sub
        '
        '========================================================================
        ' LoadAndSaveGroupRules_ForContent
        '
        '   For a particular content, remove previous GroupRules, and Create new ones
        '========================================================================
        '
        Private Sub LoadAndSaveGroupRules_ForContent(ContentID As Integer)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "LoadAndSaveGroupRules_ForContent")
            '
            Dim GroupCount As Integer
            Dim GroupPointer As Integer
            Dim CSPointer As Integer
            Dim GroupID As Integer
            Dim AllowAdd As Boolean
            Dim AllowDelete As Boolean
            Dim CSNew As Integer
            Dim RecordChanged As Boolean
            Dim RuleNeeded As Boolean
            Dim RuleFound As Boolean
            Dim SQL As String
            '
            ' ----- Delete duplicate Group Rules
            '

            SQL = "Delete from ccGroupRules where ID In (" _
                & "Select distinct DuplicateRules.ID from ccgrouprules Left join ccgrouprules As DuplicateRules On DuplicateRules.GroupID=ccGroupRules.GroupID where ccGroupRules.ID < DuplicateRules.ID  And ccGroupRules.ContentID=DuplicateRules.ContentID" _
                & ")"
            Call cpCore.db.executeSql(SQL)
            '
            ' --- create GroupRule records for all selected
            '
            CSPointer = cpCore.db.cs_open("Group Rules", "ContentID=" & ContentID, "GroupID,ID", True)
            GroupCount = cpCore.docProperties.getInteger("GroupCount")
            If GroupCount > 0 Then
                For GroupPointer = 0 To GroupCount - 1
                    RuleNeeded = cpCore.docProperties.getBoolean("Group" & GroupPointer)
                    GroupID = cpCore.docProperties.getInteger("GroupID" & GroupPointer)
                    AllowAdd = cpCore.docProperties.getBoolean("GroupRuleAllowAdd" & GroupPointer)
                    AllowDelete = cpCore.docProperties.getBoolean("GroupRuleAllowDelete" & GroupPointer)
                    '
                    RuleFound = False
                    cpCore.db.cs_goFirst(CSPointer)
                    If cpCore.db.cs_ok(CSPointer) Then
                        Do While cpCore.db.cs_ok(CSPointer)
                            If cpCore.db.cs_getInteger(CSPointer, "GroupID") = GroupID Then
                                RuleFound = True
                                Exit Do
                            End If
                            cpCore.db.cs_goNext(CSPointer)
                        Loop
                    End If
                    If RuleNeeded And Not RuleFound Then
                        CSNew = cpCore.db.cs_insertRecord("Group Rules")
                        If cpCore.db.cs_ok(CSNew) Then
                            Call cpCore.db.cs_set(CSNew, "ContentID", ContentID)
                            Call cpCore.db.cs_set(CSNew, "GroupID", GroupID)
                            Call cpCore.db.cs_set(CSNew, "AllowAdd", AllowAdd)
                            Call cpCore.db.cs_set(CSNew, "AllowDelete", AllowDelete)
                        End If
                        cpCore.db.cs_Close(CSNew)
                        RecordChanged = True
                    ElseIf RuleFound And Not RuleNeeded Then
                        Call cpCore.DeleteCSRecord(CSPointer)
                        RecordChanged = True
                    ElseIf RuleFound And RuleNeeded Then
                        If (AllowAdd <> cpCore.db.cs_getBoolean(CSPointer, "AllowAdd")) Then
                            Call cpCore.db.cs_set(CSPointer, "AllowAdd", AllowAdd)
                            RecordChanged = True
                        End If
                        If (AllowDelete <> cpCore.db.cs_getBoolean(CSPointer, "AllowDelete")) Then
                            Call cpCore.db.cs_set(CSPointer, "AllowDelete", AllowDelete)
                            RecordChanged = True
                        End If
                    End If
                Next
            End If
            Call cpCore.db.cs_Close(CSPointer)
            If RecordChanged Then
                Call cpCore.cache.invalidateContent("Group Rules")
            End If
            Exit Sub
            '
ErrorTrap:
            Call handleLegacyClassError3("LoadAndSaveGroupRules_ForContent")
        End Sub
        '
        '========================================================================
        ' Load Array
        '   Get defaults if no record ID
        '   Then load in any response elements
        '========================================================================
        '
        Private Sub LoadEditRecord(adminContent As cdefModel, editRecord As editRecordClass, Optional ByVal CheckUserErrors As Boolean = False)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "LoadEditRecord")
            '
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim ApprovedDate As Date
            Dim CS As Integer
            ''Dim arrayOfFields() As appServices_metaDataClass.CDefFieldClass
            '
            If adminContent.Name = "" Then
                '
                ' Can not load edit record because bad content definition
                '
                If adminContent.Id = 0 Then
                    Throw (New Exception("The record can Not be edited because no content definition was specified."))
                Else
                    Throw (New Exception("The record can Not be edited because a content definition For ID [" & adminContent.Id & "] was Not found."))
                End If
            Else
                '
                If editRecord.id = 0 Then
                    '
                    ' ----- New record, just load defaults
                    '
                    Call LoadEditRecord_Default(adminContent, editRecord)
                    Call LoadEditRecord_WherePairs(adminContent, editRecord)
                Else
                    '
                    ' ----- Load the Live Record specified
                    '
                    Call LoadEditRecord_Dbase(adminContent, editRecord, CheckUserErrors)
                    Call LoadEditRecord_WherePairs(adminContent, editRecord)
                End If
                '        '
                '        ' ----- Test for a change of admincontent (the record is a child of admincontent )
                '        '
                '        If EditRecord.ContentID <> AdminContent.Id Then
                '            AdminContent = cpCore.app.getCdef(EditRecord.ContentName)
                '        End If
                '
                ' ----- Capture core fields needed for processing
                '
                editRecord.menuHeadline = ""
                If editRecord.fieldsLc.ContainsKey("menuheadline") Then
                    editRecord.menuHeadline = genericController.encodeText(editRecord.fieldsLc.Item("menuheadline").value)
                End If
                '
                editRecord.menuHeadline = ""
                If editRecord.fieldsLc.ContainsKey("name") Then
                    'Dim editRecordField As editRecordFieldClass = editRecord.fieldsLc.Item("name")
                    'editRecord.nameLc = editRecordField.value.ToString()
                    editRecord.nameLc = genericController.encodeText(editRecord.fieldsLc.Item("name").value)
                End If
                '
                editRecord.menuHeadline = ""
                If editRecord.fieldsLc.ContainsKey("active") Then
                    editRecord.active = genericController.EncodeBoolean(editRecord.fieldsLc.Item("active").value)
                End If
                '
                editRecord.menuHeadline = ""
                If editRecord.fieldsLc.ContainsKey("contentcontrolid") Then
                    editRecord.contentControlId = genericController.EncodeInteger(editRecord.fieldsLc.Item("contentcontrolid").value)
                End If
                '
                editRecord.menuHeadline = ""
                If editRecord.fieldsLc.ContainsKey("parentid") Then
                    editRecord.parentID = genericController.EncodeInteger(editRecord.fieldsLc.Item("parentid").value)
                End If
                '
                editRecord.menuHeadline = ""
                If editRecord.fieldsLc.ContainsKey("rootpageid") Then
                    editRecord.RootPageID = genericController.EncodeInteger(editRecord.fieldsLc.Item("rootpageid").value)
                End If
                '
                ' ----- Set the local global copy of Edit Record Locks
                '
                Call cpCore.pages.pageManager_GetAuthoringStatus(adminContent.Name, editRecord.id, editRecord.SubmitLock, editRecord.ApproveLock, editRecord.SubmittedName, editRecord.ApprovedName, editRecord.IsInserted, editRecord.IsDeleted, editRecord.IsModified, editRecord.LockModifiedName, editRecord.LockModifiedDate, editRecord.SubmittedDate, editRecord.ApprovedDate)
                '
                ' ----- Set flags used to determine the Authoring State
                '
                Call cpCore.pages.pageManager_GetAuthoringPermissions(adminContent.Name, editRecord.id, editRecord.AllowInsert, editRecord.AllowCancel, editRecord.AllowSave, editRecord.AllowDelete, editRecord.AllowPublish, editRecord.AllowAbort, editRecord.AllowSubmit, editRecord.AllowApprove, editRecord.Read_Only)
                '
                ' ----- Set Edit Lock
                '
                If editRecord.id <> 0 Then
                    editRecord.EditLock = cpCore.workflow.GetEditLockStatus(adminContent.Name, editRecord.id)
                    If editRecord.EditLock Then
                        editRecord.EditLockMemberName = cpCore.workflow.GetEditLockMemberName(adminContent.Name, editRecord.id)
                        editRecord.EditLockExpires = cpCore.workflow.GetEditLockDateExpires(adminContent.Name, editRecord.id)
                    End If
                End If
                '
                ' ----- Set Read Only: for edit lock
                '
                If editRecord.EditLock Then
                    editRecord.Read_Only = True
                End If
                '
                ' ----- Set Read Only: if non-developer tries to edit a developer record
                '
                If genericController.vbUCase(adminContent.ContentTableName) = genericController.vbUCase("ccMembers") Then
                    If Not cpCore.authContext.isAuthenticatedDeveloper(cpCore) Then
                        If editRecord.fieldsLc.ContainsKey("developer") Then
                            If genericController.EncodeBoolean(editRecord.fieldsLc.Item("developer").value) Then
                                editRecord.Read_Only = True
                                cpCore.error_AddUserError("You Do Not have access rights To edit this record.")
                                BlockEditForm = True
                            End If
                        End If
                    End If
                End If
                '
                ' ----- Now make sure this record is locked from anyone else
                '
                If Not (editRecord.Read_Only) Then
                    Call cpCore.workflow.SetEditLock(adminContent.Name, editRecord.id)
                End If
                editRecord.Loaded = True
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("LoadEditRecord")
            '
        End Sub
        '
        '========================================================================
        '   Get the Wherepair value for a fieldname
        '       If there is a match with the left side, return the right
        '       If no match, return ""
        '========================================================================
        '
        Private Function GetWherePairValue(FieldName As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "GetWherePairValue")
            '
            Dim WhereCount As Integer
            '
            FieldName = genericController.vbUCase(FieldName)
            '
            GetWherePairValue = ""
            If WherePairCount > 0 Then
                For WhereCount = 0 To WherePairCount - 1
                    If FieldName = genericController.vbUCase(WherePair(0, WhereCount)) Then
                        GetWherePairValue = WherePair(1, WhereCount)
                        Exit For
                    End If
                Next
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetWherePairValue")
            '
        End Function
        '
        '========================================================================
        '   Load both Live and Edit Record values from definition defaults
        '========================================================================
        '
        Private Sub LoadEditRecord_Default(adminContent As cdefModel, editrecord As editRecordClass)
            Try
                Dim DefaultValueText As String
                Dim LookupContentName As String
                Dim UCaseDefaultValueText As String
                Dim lookups() As String
                Dim Ptr As Integer
                '' converted array to dictionary - Dim FieldPointer As Integer
                'Dim FieldCount As Integer
                Dim defaultValue As String
                Dim MethodName As String
                Dim editRecordField As editRecordFieldClass
                Dim field As CDefFieldModel
                '
                MethodName = "Admin.Method()"
                '
                editrecord.active = True
                editrecord.contentControlId = adminContent.Id
                editrecord.contentControlId_Name = adminContent.Name
                editrecord.EditLock = False
                editrecord.Loaded = False
                editrecord.Saved = False
                For Each keyValuePair In adminContent.fields
                    field = keyValuePair.Value
                    With field
                        If Not (editrecord.fieldsLc.ContainsKey(field.nameLc)) Then
                            editRecordField = New editRecordFieldClass
                            editrecord.fieldsLc.Add(field.nameLc, editRecordField)
                        End If
                        defaultValue = .defaultValue
                        '    End If
                        If .active And Not genericController.IsNull(defaultValue) Then
                            Select Case .fieldTypeId
                                Case FieldTypeIdInteger, FieldTypeIdAutoIdIncrement, FieldTypeIdMemberSelect
                                    '
                                    editrecord.fieldsLc(field.nameLc).value = genericController.EncodeInteger(defaultValue)
                                Case FieldTypeIdCurrency, FieldTypeIdFloat
                                    '
                                    editrecord.fieldsLc(field.nameLc).value = genericController.EncodeNumber(defaultValue)
                                Case FieldTypeIdBoolean
                                    '
                                    editrecord.fieldsLc(field.nameLc).value = genericController.EncodeBoolean(defaultValue)
                                Case FieldTypeIdDate
                                    '
                                    editrecord.fieldsLc(field.nameLc).value = genericController.EncodeDate(defaultValue)
                                Case FieldTypeIdLookup

                                    DefaultValueText = genericController.encodeText(.defaultValue)
                                    If DefaultValueText <> "" Then
                                        If genericController.vbIsNumeric(DefaultValueText) Then
                                            editrecord.fieldsLc(field.nameLc).value = DefaultValueText
                                        Else
                                            If .lookupContentID <> 0 Then
                                                LookupContentName = cpCore.metaData.getContentNameByID(.lookupContentID)
                                                If LookupContentName <> "" Then
                                                    editrecord.fieldsLc(field.nameLc).value = cpCore.main_GetRecordID(LookupContentName, DefaultValueText)
                                                End If
                                            ElseIf .lookupList <> "" Then
                                                UCaseDefaultValueText = genericController.vbUCase(DefaultValueText)
                                                lookups = Split(.lookupList, ",")
                                                For Ptr = 0 To UBound(lookups)
                                                    If UCaseDefaultValueText = genericController.vbUCase(lookups(Ptr)) Then
                                                        editrecord.fieldsLc(field.nameLc).value = Ptr + 1
                                                        Exit For
                                                    End If
                                                Next
                                            End If
                                        End If
                                    End If

                                Case Else
                                    '
                                    editrecord.fieldsLc(field.nameLc).value = genericController.encodeText(defaultValue)
                            End Select
                        End If
                        '
                        ' process reserved fields (set defaults just makes it look good)
                        ' (also, this presets readonly/devonly/adminonly fields not set to member)
                        '
                        Select Case genericController.vbUCase(.nameLc)
                            'Case "ID"
                            '    .readonlyfield = True
                            '    .Required = False
                            Case "MODIFIEDBY"
                                editrecord.fieldsLc(field.nameLc).value = cpCore.authContext.user.ID
                                '    .readonlyfield = True
                                '    .Required = False
                            Case "CREATEDBY"
                                editrecord.fieldsLc(field.nameLc).value = cpCore.authContext.user.ID
                                '    .readonlyfield = True
                                '    .Required = False
                                'Case "DATEADDED"
                                '    .readonlyfield = True
                                '    .Required = False
                            Case "CONTENTCONTROLID"
                                editrecord.fieldsLc(field.nameLc).value = adminContent.Id
                                'Case "SORTORDER"
                                ' default to ID * 100, but must be done later
                        End Select
                        editrecord.fieldsLc(field.nameLc).dbValue = editrecord.fieldsLc(field.nameLc).value
                    End With
                Next
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
        End Sub
        '
        '========================================================================
        '   Load both Live and Edit Record values from definition defaults
        '========================================================================
        '
        Private Sub LoadEditRecord_WherePairs(Admincontent As cdefModel, editRecord As editRecordClass)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "LoadEditRecord_WherePairs")
            '
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim FieldCount As Integer
            Dim DefaultValueText As String
            Dim MethodName As String
            '
            MethodName = "Admin.LoadEditRecord_WherePairs(adminContent, editRecord)"
            '
            For Each keyValuePair In Admincontent.fields
                Dim field As CDefFieldModel = keyValuePair.Value
                With field
                    DefaultValueText = GetWherePairValue(.nameLc)
                    If .active And (DefaultValueText <> "") Then
                        Select Case .fieldTypeId
                            Case FieldTypeIdInteger, FieldTypeIdLookup, FieldTypeIdAutoIdIncrement
                                '
                                editRecord.fieldsLc.Item(.nameLc).value = genericController.EncodeInteger(DefaultValueText)
                            Case FieldTypeIdCurrency, FieldTypeIdFloat
                                '
                                editRecord.fieldsLc.Item(.nameLc).value = genericController.EncodeNumber(DefaultValueText)
                            Case FieldTypeIdBoolean
                                '
                                editRecord.fieldsLc.Item(.nameLc).value = genericController.EncodeBoolean(DefaultValueText)
                            Case FieldTypeIdDate
                                '
                                editRecord.fieldsLc.Item(.nameLc).value = genericController.EncodeDate(DefaultValueText)
                            Case FieldTypeIdManyToMany
                                '
                                ' Many to Many can capture a list of ID values representing the 'secondary' values in the Many-To-Many Rules table
                                '
                                editRecord.fieldsLc.Item(.nameLc).value = DefaultValueText
                            Case Else
                                '
                                editRecord.fieldsLc.Item(.nameLc).value = DefaultValueText
                        End Select
                    End If
                End With
            Next
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("LoadEditRecord_WherePairs")
        End Sub
        '
        '========================================================================
        '   Load Records from the database
        '========================================================================
        '
        Private Sub LoadEditRecord_Dbase(ByVal adminContent As cdefModel, ByRef editrecord As editRecordClass, Optional ByVal CheckUserErrors As Boolean = False)
            Try
                '
                Dim DBValueVariant As Object
                Dim SQL As String
                Dim CSEditRecord As Integer
                Dim CSLiveRecord As Integer
                Dim NullVariant As Object
                Dim CSPointer As Integer
                Dim WorkflowAuthoring As Boolean
                '
                ' ----- test for content problem
                '
                If editrecord.id = 0 Then
                    '
                    ' ----- Skip load, this is a new record
                    '
                ElseIf adminContent.Id = 0 Then
                    '
                    ' ----- Error: no content ID
                    '
                    BlockEditForm = True
                    Call cpCore.error_AddUserError("No content definition was found For Content ID [" & editrecord.id & "]. Please contact your application developer For more assistance.")
                    Call handleLegacyClassError("AdminClass.LoadEditRecord_Dbase", "No content definition was found For Content ID [" & editrecord.id & "].")
                ElseIf adminContent.Name = "" Then
                    '
                    ' ----- Error: no content name
                    '
                    BlockEditForm = True
                    Call cpCore.error_AddUserError("No content definition could be found For ContentID [" & adminContent.Id & "]. This could be a menu Error. Please contact your application developer For more assistance.")
                    Call handleLegacyClassError("AdminClass.LoadEditRecord_Dbase", "No content definition For ContentID [" & adminContent.Id & "] could be found.")
                ElseIf adminContent.ContentTableName = "" Then
                    '
                    ' ----- Error: no content table
                    '
                    BlockEditForm = True
                    Call cpCore.error_AddUserError("The content definition [" & adminContent.Name & "] Is Not associated With a valid database table. Please contact your application developer For more assistance.")
                    Call handleLegacyClassError("AdminClass.LoadEditRecord_Dbase", "No content definition For ContentID [" & adminContent.Id & "] could be found.")
                    '
                    ' move block to the edit and listing pages - to handle content editor cases - so they can edit 'pages', and just get the records they are allowed
                    '
                    '    ElseIf Not UserAllowContentEdit Then
                    '        '
                    '        ' ----- Error: load blocked by UserAllowContentEdit
                    '        '
                    '        BlockEditForm = True
                    '        Call cpCore.htmldoc.main_AddUserError("Your account On this system does Not have access rights To edit this content.")
                    '        Call HandleInternalError("AdminClass.LoadEditRecord_Dbase", "User does Not have access To this content")
                ElseIf adminContent.fields.Count = 0 Then
                    '
                    ' ----- Error: content definition is not complete
                    '
                    BlockEditForm = True
                    Call cpCore.error_AddUserError("The content definition [" & adminContent.Name & "] has no field records defined. Please contact your application developer For more assistance.")
                    Call handleLegacyClassError("AdminClass.LoadEditRecord_Dbase", "Content [" & adminContent.Name & "] has no fields defined.")
                Else
                    '
                    '   Open Content Sets with the data
                    '
                    CSEditRecord = cpCore.csOpenRecord(adminContent.Name, editrecord.id, True, True)
                    '
                    ' Problem with this deal is when the record is saved as with it's parent cdef, when we attempt to reload, the record can not be read bc the id is not in the parent
                    CSLiveRecord = CSEditRecord
                    '##### if not workflow authoring, just point them both to the same data
                    '##### that way throughout the code, just use the appropriate CS, and the data works
                    'CSLiveRecord = -1
                    WorkflowAuthoring = cpCore.siteProperties.allowWorkflowAuthoring And adminContent.AllowWorkflowAuthoring
                    If WorkflowAuthoring Then
                        '
                        ' 32467-852: check for duplicate edit records
                        '
                        SQL = "Update " & adminContent.AuthoringTableName _
                        & " Set EditArchive=1" _
                        & " Where ID In (" _
                            & " Select B.ID" _
                            & " from " & adminContent.AuthoringTableName & " As A" _
                            & "," & adminContent.AuthoringTableName & " As B" _
                            & " where A.EditSourceID=B.EditSourceID" _
                            & " And A.EditSourceID Is Not null And B.EditSourceID Is Not null" _
                            & " And A.EditArchive=0 And B.EditArchive=0" _
                            & " And A.ID>B.ID" _
                        & ");"
                        Call cpCore.db.executeSql(SQL, adminContent.AuthoringDataSourceName)
                        'Call cpCore.main_ExecuteSQL(AdminContent.AuthoringDataSourceName, SQL)
                        '
                        ' 202-31245: quick fix. The CS should handle this instead.
                        ' Workflow authoring, also load the live record to display  Read_Only and Not_Editable records
                        '
                        CSLiveRecord = cpCore.csOpenRecord(adminContent.Name, editrecord.id, False)
                        If Not cpCore.db.cs_ok(CSLiveRecord) Then
                            '
                            ' Special case, if live record can not open, we may be in workflow mode, and this may
                            '   be a new record. If that is the case, display the edit record data, which should be
                            '   the defaults for ReadOnly, or the First Values for NotEditable.
                            '
                            Call cpCore.db.cs_Close(CSLiveRecord)
                            CSLiveRecord = CSEditRecord
                        End If
                    End If
                    '
                    ' store fieldvalues in RecordValuesVariant
                    '
                    If Not (cpCore.db.cs_ok(CSEditRecord)) Then
                        '
                        '   Live or Edit records were not found
                        '
                        BlockEditForm = True
                        Call cpCore.error_AddUserError("The information you have requested could not be found. The record could have been deleted, Or there may be a system Error.")
                        ' removed because it was throwing too many false positives (1/14/04 - tried to do it again)
                        ' If a CM hits the edit tag for a deleted record, this is hit. It should not cause the Developers to spend hours running down.
                        'Call HandleInternalError("AdminClass.LoadEditRecord_Dbase", "Content edit record For [" & AdminContent.Name & "." & EditRecord.ID & "] was Not found.")
                    Else
                        '
                        ' Read database values into RecordValuesVariant array
                        '
                        NullVariant = Nothing
                        For Each keyValuePair In adminContent.fields
                            Dim adminContentField As CDefFieldModel = keyValuePair.Value
                            Dim fieldNameLc As String = adminContentField.nameLc
                            Dim editRecordField As editRecordFieldClass
                            '
                            ' set editRecord.field to editRecordField and set values
                            '
                            If Not editrecord.fieldsLc.ContainsKey(fieldNameLc) Then
                                editRecordField = New editRecordFieldClass
                                editrecord.fieldsLc.Add(fieldNameLc, editRecordField)
                            Else
                                editRecordField = editrecord.fieldsLc(fieldNameLc)
                            End If
                            '
                            ' 1/21/2007 - added clause if required and null, set to default value
                            '
                            Dim fieldValue As Object
                            fieldValue = NullVariant
                            With adminContentField
                                If WorkflowAuthoring And (.ReadOnly Or .NotEditable) Then
                                    '
                                    ' 202-31245: quick fix. The CS should handle this instead.
                                    ' Workflowauthoring, If read only, use the live record data
                                    '
                                    CSPointer = CSLiveRecord
                                Else
                                    CSPointer = CSEditRecord
                                End If
                                '
                                ' Load the current Database value
                                '
                                Select Case .fieldTypeId
                                    Case FieldTypeIdRedirect, FieldTypeIdManyToMany
                                        DBValueVariant = ""
                                    Case FieldTypeIdFileTextPrivate, FieldTypeIdFileCSS, FieldTypeIdFileXML, FieldTypeIdFileJavascript, FieldTypeIdFileHTMLPrivate
                                        DBValueVariant = cpCore.db.cs_get(CSPointer, .nameLc)
                                    Case Else
                                        DBValueVariant = cpCore.cs_GetField(CSPointer, .nameLc)
                                End Select
                                '
                                ' Check for required and null case loading error
                                '
                                If CheckUserErrors And .Required And (genericController.IsNull(DBValueVariant)) Then
                                    '
                                    ' if required and null
                                    '
                                    If (String.IsNullOrEmpty(.defaultValue)) Then
                                        '
                                        ' default is null
                                        '
                                        If .editTabName = "" Then
                                            Call cpCore.error_AddUserError("The value for [" & .caption & "] was empty but is required. This must be set before you can save this record.")
                                        Else
                                            Call cpCore.error_AddUserError("The value for [" & .caption & "] in tab [" & .editTabName & "] was empty but is required. This must be set before you can save this record.")
                                        End If
                                    Else
                                        '
                                        ' if required and null, set value to the default
                                        '
                                        DBValueVariant = .defaultValue
                                        If .editTabName = "" Then
                                            Call cpCore.error_AddUserError("The value for [" & .caption & "] was null but is required. The default value Is shown, And will be saved if you save this record.")
                                        Else
                                            Call cpCore.error_AddUserError("The value for [" & .caption & "] in tab [" & .editTabName & "] was null but is required. The default value Is shown, And will be saved if you save this record.")
                                        End If
                                    End If
                                End If
                                '
                                ' Save EditRecord values
                                '
                                Select Case genericController.vbUCase(.nameLc)
                                    Case "DATEADDED"
                                        editrecord.dateAdded = cpCore.db.cs_getDate(CSLiveRecord, .nameLc)
                                    Case "MODIFIEDDATE"
                                        editrecord.modifiedDate = cpCore.db.cs_getDate(CSLiveRecord, .nameLc)
                                    Case "CREATEDBY"
                                        editrecord.createByMemberId = cpCore.db.cs_getInteger(CSLiveRecord, .nameLc)
                                    Case "MODIFIEDBY"
                                        editrecord.modifiedByMemberID = cpCore.db.cs_getInteger(CSLiveRecord, .nameLc)
                                    Case "CONTENTCATEGORYID"
                                        editrecord.contentCategoryID = cpCore.db.cs_getInteger(CSLiveRecord, .nameLc)
                                    Case "ACTIVE"
                                        editrecord.active = cpCore.db.cs_getBoolean(CSLiveRecord, .nameLc)
                                    Case "CONTENTCONTROLID"
                                        editrecord.contentControlId = cpCore.db.cs_getInteger(CSLiveRecord, .nameLc)
                                        editrecord.contentControlId_Name = cpCore.metaData.getContentNameByID(editrecord.contentControlId)
                                    Case "ID"
                                        editrecord.id = cpCore.db.cs_getInteger(CSLiveRecord, .nameLc)
                                    Case "MENUHEADLINE"
                                        editrecord.menuHeadline = cpCore.db.cs_getText(CSLiveRecord, .nameLc)
                                    Case "NAME"
                                        editrecord.nameLc = cpCore.db.cs_getText(CSLiveRecord, .nameLc)
                                    Case "PARENTID"
                                        editrecord.parentID = cpCore.db.cs_getInteger(CSLiveRecord, .nameLc)
                                        'Case Else
                                        '    EditRecordValuesVariant(FieldPointer) = DBValueVariant
                                End Select
                            End With
                            '
                            editRecordField.dbValue = DBValueVariant
                            editRecordField.value = DBValueVariant
                        Next
                    End If
                    Call cpCore.db.cs_Close(CSEditRecord)
                    If WorkflowAuthoring Then
                        '
                        ' 202-31245: quick fix. The CS should handle this instead.
                        ' Workflow authoring, close live record used to display Read_Only and Not_Editable records
                        '
                        Call cpCore.db.cs_Close(CSLiveRecord)
                    End If
                End If
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
        End Sub
        '
        '========================================================================
        '   Read the Form into the fields array
        '========================================================================
        '
        Private Sub LoadEditResponse(adminContent As cdefModel, editRecord As editRecordClass)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "LoadEditResponse")
            '
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim FieldCount As Integer
            Dim DataSourceName As String
            Dim PageNotFoundPageID As Integer
            'Dim LandingPageID As Integer
            Dim FormFieldListToBeLoaded As String
            Dim FormEmptyFieldList As String
            '
            ' List of fields that were created for the form, and should be verified (starts and ends with a comma)
            '
            FormFieldListToBeLoaded = cpCore.docProperties.getText("FormFieldList")
            If FormFieldListToBeLoaded = "" Then
                FormFieldListToBeLoaded = ","
            Else
                'FormFieldListToBeLoaded = "," & FormFieldListToBeLoaded & ","
            End If
            '
            ' List of fields coming from the form that are empty -- and should not be in stream (starts and ends with a comma)
            '
            FormEmptyFieldList = cpCore.docProperties.getText("FormEmptyFieldList")
            '
            If AllowAdminFieldCheck() And (FormFieldListToBeLoaded = ",") Then
                '
                ' The field list was not returned
                '
                Call cpCore.error_AddUserError("There has been an Error reading the response from your browser. Please Try your change again. If this Error occurs again, please report this problem To your site administrator. The Error Is [no field list].")
            ElseIf AllowAdminFieldCheck() And (FormEmptyFieldList = "") Then
                '
                ' The field list was not returned
                '
                Call cpCore.error_AddUserError("There has been an Error reading the response from your browser. Please Try your change again. If this Error occurs again, please report this problem To your site administrator. The Error Is [no empty field list].")
            Else
                '
                ' fixup the string so it can be reduced by each field found, leaving and empty string if all correct
                '
                Dim datasource As Models.Entity.dataSourceModel = Models.Entity.dataSourceModel.create(cpCore, adminContent.dataSourceId, New List(Of String))
                'DataSourceName = cpCore.db.getDataSourceNameByID(adminContent.dataSourceId)
                For Each keyValuePair In adminContent.fields
                    Dim field As CDefFieldModel = keyValuePair.Value
                    Call LoadEditResponseByPointer(adminContent, editRecord, field, datasource.Name, FormFieldListToBeLoaded, FormEmptyFieldList)
                Next
                '
                ' If there are any form fields that were no loaded, flag the error now
                '
                If AllowAdminFieldCheck() And (FormFieldListToBeLoaded <> ",") Then
                    Call cpCore.error_AddUserError("There has been an Error reading the response from your browser. Please Try your change again. If this Error occurs again, please report this problem To your site administrator. The following fields where Not found [" & Mid(FormFieldListToBeLoaded, 2, Len(FormFieldListToBeLoaded) - 2) & "].")
                    Throw (New ApplicationException("Unexpected exception")) '  cpCore.handleLegacyError2("AdminClass", "LoadEditResponse", cpCore.serverConfig.appConfig.name & ", There were fields In the fieldlist sent out To the browser that did Not Return, [" & Mid(FormFieldListToBeLoaded, 2, Len(FormFieldListToBeLoaded) - 2) & "]")
                Else
                    '
                    ' if page content, check for the 'pagenotfound','landingpageid' checkboxes in control tab
                    '
                    If genericController.vbLCase(adminContent.ContentTableName) = "ccpagecontent" Then
                        '
                        PageNotFoundPageID = (cpCore.siteProperties.getinteger("PageNotFoundPageID", 0))
                        If cpCore.docProperties.getBoolean("PageNotFound") Then
                            editRecord.SetPageNotFoundPageID = True
                        ElseIf editRecord.id = PageNotFoundPageID Then
                            Call cpCore.siteProperties.setProperty("PageNotFoundPageID", "0")
                        End If
                        '
                        If cpCore.docProperties.getBoolean("LandingPageID") Then
                            editRecord.SetLandingPageID = True
                        ElseIf (editRecord.id = 0) Then
                            '
                            ' New record, allow it to be set, but do not compare it to LandingPageID
                            '
                        ElseIf (editRecord.id = cpCore.siteProperties.landingPageID) Then
                            '
                            ' Do not reset the LandingPageID from here -- set another instead
                            '
                            Call cpCore.error_AddUserError("This page was marked As the Landing Page For the website, And the checkbox has been cleared. This Is Not allowed. To remove this page As the Landing Page, locate a New landing page And Select it, Or go To Settings &gt; Page Settings And Select a New Landing Page.")
                        End If
                    End If
                End If
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("LoadEditResponse")
            '
        End Sub
        ''
        ''========================================================================
        ''   Read in a Response value by name
        ''========================================================================
        ''
        'Private Sub LoadEditResponseByName(FieldName As String)
        '    On Error GoTo ErrorTrap: 'Dim th as integer: th = profileLogAdminMethodEnter("AdminClass.LoadEditResponseByName")
        '    '
        '    ' converted array to dictionary - Dim FieldPointer As Integer
        '    Dim FieldFound As Boolean
        '    Dim UcaseFieldName As String
        '    Dim DataSourceName As String
        '    Dim FormID As String
        '    '
        '    FieldFound = False
        '    DataSourceName = cpCore.db.getDataSourceNameByID(AdminContent.DataSourceID)
        '    If (FieldName <> "") Then
        '        UcaseFieldName = genericController.vbUCase(FieldName)
        '        If AdminContent.fields.count > 0 Then
        '            For FieldPointer = 0 To AdminContent.fields.count - 1
        '                If genericController.vbUCase(AdminContent.fields(FieldPointer).Name) = UcaseFieldName Then
        '                    Call LoadEditResponseByPointer(FormID, FieldPointer, DataSourceName)
        '                    FieldFound = True
        '                    Exit For
        '                    End If
        '                Next
        '            End If
        '        End If
        '    If Not FieldFound Then
        '        Call HandleInternalError("AdminClass.LoadEditResponseByName", "Field [" & FieldName & "] was Not found In content [" & AdminContent.Name & "]")
        '        End If
        '    '
        '    '''Dim th as integer: Exit Sub
        '    '
        '    ' ----- Error Trap
        '    '
        'ErrorTrap:
        '    Call HandleClassTrapErrorBubble("LoadEditResponseByName")
        '    '
        'End Sub
        '
        '========================================================================
        '   Read the Form into the fields array
        '========================================================================
        '
        Private Sub LoadEditResponseByPointer(adminContent As cdefModel, editRecord As editRecordClass, field As CDefFieldModel, DataSourceName As String, ByRef FormFieldListToBeLoaded As String, FormEmptyFieldList As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "LoadEditResponseByPointer")
            '
            Dim blockDuplicateUsername As Boolean
            Dim blockDuplicateEmail As Boolean
            Dim lcaseCopy As String
            Dim HasImg As Boolean
            Dim HasInput As Boolean
            Dim HasAC As Boolean
            Dim HasText As Boolean
            'Dim ResponseText As String
            Dim EditorPixelHeight As Integer
            Dim EditorRowHeight As Integer
            Dim HTMLDecode As htmlToTextControllers
            Dim Copy As String
            'Dim ResponseValueVariant As Object
            Dim FieldName As String
            Dim ResponseFieldValueIsOKToSave As Boolean
            Dim SQLUnique As String
            Dim CSPointer As Integer
            Dim ResponseFieldIsEmpty As Boolean
            Dim ResponseFieldValueText As String
            Dim Filename As String
            'Dim innovaEditor As New innovaEditorAddonClassFPO
            Dim HTML As New htmlParserController(cpCore)
            Dim ElementPointer As Integer
            Dim Result As String
            Dim Word As String
            Dim WordList As String
            'Dim Speller As New kmaSpellCheck2.SpellingClass
            Dim TabCopy As String = ""
            Dim ParentID As Integer
            Dim UsedIDs As String
            Dim LoopPtr As Integer
            Const LoopPtrMax = 100
            Dim CS As Integer
            Dim InLoadedFieldList As Boolean
            Dim InEmptyFieldList As Boolean
            Dim InResponse As Boolean
            Dim responseName As String
            '
            '   Read in form values
            '
            With field
                If Not .active Then
                    '
                    ' Exclude from all field testing, do not load a resposne for this field
                    '
                Else
                    '
                    ' Read value in and test it for valid response
                    ' Assume OK, mark not ok if there is a problem
                    '
                    ResponseFieldValueIsOKToSave = True
                    FieldName = genericController.vbUCase(.nameLc)
                    responseName = FieldName
                    InLoadedFieldList = (InStr(1, FormFieldListToBeLoaded, "," & FieldName & ",", vbTextCompare) <> 0)
                    InEmptyFieldList = (InStr(1, FormEmptyFieldList, "," & responseName & ",", vbTextCompare) <> 0)
                    InResponse = cpCore.docProperties.containsKey(responseName)
                    FormFieldListToBeLoaded = genericController.vbReplace(FormFieldListToBeLoaded, "," & FieldName & ",", ",", 1, 99, vbTextCompare)
                    ResponseFieldValueText = cpCore.web_ReadStreamText(responseName)
                    ResponseFieldIsEmpty = String.IsNullOrEmpty(ResponseFieldValueText)
                    If .editTabName <> "" Then
                        TabCopy = " In the " & .editTabName & " tab"
                    End If
                    '
                    If genericController.vbInstr(1, FieldName, "PARENTID", vbTextCompare) <> 0 Then
                        FieldName = FieldName
                    End If
                    '
                    ' process reserved fields
                    '
                    Select Case FieldName
                        '
                        ' ----- block control fields by name
                        '
                        Case "CONTENTCONTROLID"
                            '
                            '
                            '
                            If AllowAdminFieldCheck() Then
                                If (Not cpCore.docProperties.containsKey(FieldName)) Then
                                    If Not cpCore.error_IsUserError() Then
                                        '
                                        ' Add user error only for the first missing field
                                        '
                                        Call cpCore.error_AddUserError("There has been an Error reading the response from your browser. Please Try again, taking care Not To submit the page until your browser has finished loading. If this Error occurs again, please report this problem To your site administrator. The first Error was [" & FieldName & " Not found]. There may have been others.")
                                    End If
                                    Throw (New ApplicationException("Unexpected exception")) '  cpCore.handleLegacyError2("AdminClass", "LoadEditResponse", cpCore.serverConfig.appConfig.name & ", Field [" & FieldName & "] was In the forms field list, but Not found In the response stream.")
                                    Exit Sub
                                End If
                            End If
                            '
                            ResponseFieldValueText = cpCore.web_ReadStreamText(FieldName)
                            'ResponseValueVariant = cpCore.main_ReadStreamText(FieldName)
                            'ResponseValueText = genericController.encodeText(ResponseValueVariant)
                            If genericController.EncodeInteger(ResponseFieldValueText) = genericController.EncodeInteger(editRecord.fieldsLc(.nameLc).value) Then
                                '
                                ' No change
                                '
                            Else
                                '
                                ' new value
                                '
                                editRecord.fieldsLc(.nameLc).value = ResponseFieldValueText
                                ResponseFieldIsEmpty = False
                            End If
                        Case "CONTENTCATEGORYID"
                            '
                            '
                            '
                            InEmptyFieldList = (InStr(1, FormEmptyFieldList, "," & FieldName & ",", vbTextCompare) <> 0)
                            InResponse = cpCore.docProperties.containsKey(FieldName)
                            If AllowAdminFieldCheck() Then
                                If (Not InResponse) And (Not InEmptyFieldList) Then
                                    Call cpCore.error_AddUserError("There has been an Error reading the response from your browser. Please Try your change again. If this Error occurs again, please report this problem To your site administrator. The Error Is [" & FieldName & " Not found].")
                                    Throw (New ApplicationException("Unexpected exception")) '  cpCore.handleLegacyError2("AdminClass", "LoadEditResponse", cpCore.serverConfig.appConfig.name & ", Field [" & FieldName & "] was In the forms field list, but Not found In the response stream.")
                                    Exit Sub
                                End If
                            End If
                            '
                            ResponseFieldValueText = cpCore.web_ReadStreamText(FieldName)
                            'ResponseValueText = genericController.encodeText(ResponseValueVariant)
                            If genericController.EncodeInteger(ResponseFieldValueText) = genericController.EncodeInteger(editRecord.fieldsLc(.nameLc).value) Then
                                '
                                ' No change
                                '
                            Else
                                '
                                ' new value
                                '
                                editRecord.fieldsLc(.nameLc).value = ResponseFieldValueText
                                ResponseFieldIsEmpty = False
                            End If
                        Case "CCGUID"
                            '
                            '
                            '
                            InEmptyFieldList = (InStr(1, FormEmptyFieldList, "," & FieldName & ",", vbTextCompare) <> 0)
                            InResponse = cpCore.docProperties.containsKey(FieldName)
                            If AllowAdminFieldCheck() Then
                                If (Not InResponse) And (Not InEmptyFieldList) Then
                                    Call cpCore.error_AddUserError("There has been an Error reading the response from your browser. Please Try your change again. If this Error occurs again, please report this problem To your site administrator. The Error Is [" & FieldName & " Not found].")
                                    Throw (New ApplicationException("Unexpected exception")) '  cpCore.handleLegacyError2("AdminClass", "LoadEditResponse", cpCore.serverConfig.appConfig.name & ", Field [" & FieldName & "] was In the forms field list, but Not found In the response stream.")
                                    Exit Sub
                                End If
                            End If
                            '
                            ResponseFieldValueText = cpCore.web_ReadStreamText(FieldName)
                            If ResponseFieldValueText = editRecord.fieldsLc(.nameLc).value.ToString Then
                                '
                                ' No change
                                '
                            Else
                                '
                                ' new value
                                '
                                editRecord.fieldsLc(.nameLc).value = ResponseFieldValueText
                                ResponseFieldIsEmpty = False
                            End If
                        Case "ID", "MODIFIEDBY", "MODIFIEDDATE", "CREATEDBY", "DATEADDED"
                            '
                            ' -----Control fields that cannot be edited
                            '       9/24/2009 - do not save these into the response
                            ResponseFieldValueIsOKToSave = False
                            '
                        Case Else
                            '
                            ' ----- Read response for user fields
                            '       9/24/2009 - if fieldname is not in FormFieldListToBeLoaded, go with what is there (Db value or default value)
                            '
                            If (Not .authorable) Then
                                '
                                ' Is blocked from authoring, leave current value
                                '
                                ResponseFieldValueIsOKToSave = False
                            ElseIf (.fieldTypeId = FieldTypeIdAutoIdIncrement) Or (.fieldTypeId = FieldTypeIdRedirect) Or (.fieldTypeId = FieldTypeIdManyToMany) Then
                                '
                                ' These fields types have no values to load, leave current value
                                ' (many to many is handled during save)
                                '
                                ResponseFieldValueIsOKToSave = False
                            ElseIf (.adminOnly) And (Not cpCore.authContext.isAuthenticatedAdmin(cpCore)) Then
                                '
                                ' non-admin and admin only field, leave current value
                                '
                                ResponseFieldValueIsOKToSave = False
                            ElseIf (.developerOnly) And (Not cpCore.authContext.isAuthenticatedDeveloper(cpCore)) Then
                                '
                                ' non-developer and developer only field, leave current value
                                '
                                ResponseFieldValueIsOKToSave = False
                            ElseIf (.ReadOnly) Or (.NotEditable And (editRecord.id <> 0)) Then
                                '
                                ' read only field, leave current
                                '
                                ResponseFieldValueIsOKToSave = False
                            ElseIf (Not InLoadedFieldList) Then
                                '
                                ' Was not sent out, so just go with the current value
                                ' Also, if the loaded field list is not returned, and the field is not returned, this is the bestwe can do.
                                '
                                ResponseFieldValueIsOKToSave = False
                                'ElseIf (InEmptyFieldList And (Not InResponse)) Then
                                '    '
                                '    ' NO - InEmptyFieldList is what comes back from the browser as a list of fields that are blank after the submit button is pressed
                                '    ' Was sent out blank, and nothing was returned back, so go with current value
                                '    '
                                '    ResponseValueIsOKToSave = False
                            ElseIf AllowAdminFieldCheck() And (Not InResponse) And (Not InEmptyFieldList) Then
                                '
                                ' Was sent out non-blank, and no response back, flag error and leave the current value to a retry
                                '
                                Call cpCore.error_AddUserError("There has been an Error reading the response from your browser. The field [" & .caption & "]" & TabCopy & " was missing. Please Try your change again. If this Error happens repeatedly, please report this problem To your site administrator.")
                                Throw (New ApplicationException("Unexpected exception")) '  cpCore.handleLegacyError2("AdminClass", "LoadEditResponse", cpCore.serverConfig.appConfig.name & ", Field [" & FieldName & "] was In the forms field list, but Not found In the response stream.")
                                ResponseFieldValueIsOKToSave = False
                            Else
                                '
                                ' Test input value for valid data
                                '
                                Select Case .fieldTypeId
                                    Case FieldTypeIdInteger
                                        '
                                        ' ----- Integer
                                        '
                                        ResponseFieldIsEmpty = ResponseFieldIsEmpty Or (ResponseFieldValueText = "")
                                        If Not ResponseFieldIsEmpty Then
                                            If genericController.vbIsNumeric(ResponseFieldValueText) Then
                                                'ResponseValueVariant = genericController.EncodeInteger(ResponseValueVariant)
                                            Else
                                                cpCore.error_AddUserError("The record cannot be saved because the field [" & .caption & "]" & TabCopy & " must be a numeric value.")
                                                ResponseFieldValueIsOKToSave = False
                                            End If
                                        End If
                                    Case FieldTypeIdCurrency, FieldTypeIdFloat
                                        '
                                        ' ----- Floating point number
                                        '
                                        ResponseFieldIsEmpty = ResponseFieldIsEmpty Or (ResponseFieldValueText = "")
                                        If Not ResponseFieldIsEmpty Then
                                            If genericController.vbIsNumeric(ResponseFieldValueText) Then
                                                'ResponseValueVariant = EncodeNumber(ResponseValueVariant)
                                            Else
                                                cpCore.error_AddUserError("This record cannot be saved because the field [" & .caption & "]" & TabCopy & " must be a numeric value.")
                                                ResponseFieldValueIsOKToSave = False
                                            End If
                                        End If
                                    Case FieldTypeIdLookup
                                        '
                                        ' ----- Must be a recordID
                                        '
                                        ResponseFieldIsEmpty = ResponseFieldIsEmpty Or (ResponseFieldValueText = "")
                                        If Not ResponseFieldIsEmpty Then
                                            If genericController.vbIsNumeric(ResponseFieldValueText) Then
                                                'ResponseValueVariant = genericController.EncodeInteger(ResponseValueVariant)
                                            Else
                                                cpCore.error_AddUserError("This record cannot be saved because the field [" & .caption & "]" & TabCopy & " had an invalid selection.")
                                                ResponseFieldValueIsOKToSave = False
                                            End If
                                        End If
                                    Case FieldTypeIdDate
                                        '
                                        ' ----- Must be a Date value
                                        '
                                        ResponseFieldIsEmpty = ResponseFieldIsEmpty Or (ResponseFieldValueText = "")
                                        If Not ResponseFieldIsEmpty Then
                                            If Not IsDate(ResponseFieldValueText) Then
                                                cpCore.error_AddUserError("This record cannot be saved because the field [" & .caption & "]" & TabCopy & " must be a date And/Or time in the form mm/dd/yy 0000 AM(PM).")
                                                ResponseFieldValueIsOKToSave = False
                                            End If
                                        End If
                                        'End Case
                                    Case FieldTypeIdBoolean
                                        '
                                        ' ----- translate to boolean
                                        '
                                        ResponseFieldValueText = genericController.EncodeBoolean(ResponseFieldValueText).ToString
                                    Case FieldTypeIdLink
                                        '
                                        ' ----- Link field - if it starts with 'www.', add the http:// automatically
                                        '
                                        ResponseFieldValueText = genericController.encodeText(ResponseFieldValueText)
                                        If Left(LCase(ResponseFieldValueText), 4) = "www." Then
                                            ResponseFieldValueText = "http//" & ResponseFieldValueText
                                        End If
                                    Case FieldTypeIdHTML, FieldTypeIdFileHTMLPrivate
                                        '
                                        ' ----- Html fields
                                        '
                                        EditorRowHeight = cpCore.docProperties.getInteger(FieldName & "Rows")
                                        If EditorRowHeight <> 0 Then
                                            Call cpCore.userProperty.setProperty(adminContent.Name & "." & FieldName & ".RowHeight", EditorRowHeight)
                                        End If
                                        EditorPixelHeight = cpCore.docProperties.getInteger(FieldName & "PixelHeight")
                                        If EditorPixelHeight <> 0 Then
                                            Call cpCore.userProperty.setProperty(adminContent.Name & "." & FieldName & ".PixelHeight", EditorPixelHeight)
                                        End If
                                        '
                                        If Not .htmlContent Then
                                            lcaseCopy = genericController.vbLCase(ResponseFieldValueText)
                                            lcaseCopy = genericController.vbReplace(lcaseCopy, vbCr, "")
                                            lcaseCopy = genericController.vbReplace(lcaseCopy, vbLf, "")
                                            lcaseCopy = Trim(lcaseCopy)
                                            If (lcaseCopy = HTMLEditorDefaultCopyNoCr) Or (lcaseCopy = HTMLEditorDefaultCopyNoCr2) Then
                                                '
                                                ' if the editor was left blank, remote the default copy
                                                '
                                                ResponseFieldValueText = ""
                                            Else
                                                If genericController.vbInstr(1, ResponseFieldValueText, HTMLEditorDefaultCopyStartMark) <> 0 Then
                                                    '
                                                    ' if the default copy was editing, remote the markers
                                                    '
                                                    ResponseFieldValueText = genericController.vbReplace(ResponseFieldValueText, HTMLEditorDefaultCopyStartMark, "")
                                                    ResponseFieldValueText = genericController.vbReplace(ResponseFieldValueText, HTMLEditorDefaultCopyEndMark, "")
                                                    'ResponseValueVariant = ResponseValueText
                                                End If
                                                '
                                                ' If the response is only white space, remove it
                                                ' this is a fix for when content editors leave white space in the editor, and do not realize it
                                                '   then cannot fixgure out how to remove it
                                                '
                                                ResponseFieldValueText = cpCore.htmlDoc.html_DecodeContent(ResponseFieldValueText)
                                                ResponseFieldValueText = genericController.vbLCase(genericController.encodeText(ResponseFieldValueText))
                                                If Len(ResponseFieldValueText) < 20 Then
                                                    HasInput = (InStr(1, ResponseFieldValueText, "<input ") <> 0)
                                                    If Not HasInput Then
                                                        HasImg = (InStr(1, ResponseFieldValueText, "<img ") <> 0)
                                                        If Not HasImg Then
                                                            HasAC = (InStr(1, ResponseFieldValueText, "<ac ") <> 0)
                                                            If Not HasAC Then
                                                                HTMLDecode = New htmlToTextControllers(cpCore)
                                                                Copy = Trim(HTMLDecode.convert(genericController.encodeText(ResponseFieldValueText)))
                                                                If Copy = "" Then
                                                                    ResponseFieldValueText = ""
                                                                End If
                                                                HTMLDecode = Nothing
                                                            End If
                                                        End If
                                                    End If
                                                End If
                                            End If
                                        End If
                                    Case Else
                                        '
                                        ' ----- text types
                                        '
                                        EditorRowHeight = cpCore.docProperties.getInteger(FieldName & "Rows")
                                        If EditorRowHeight <> 0 Then
                                            Call cpCore.userProperty.setProperty(adminContent.Name & "." & FieldName & ".RowHeight", EditorRowHeight)
                                        End If
                                        EditorPixelHeight = cpCore.docProperties.getInteger(FieldName & "PixelHeight")
                                        If EditorPixelHeight <> 0 Then
                                            Call cpCore.userProperty.setProperty(adminContent.Name & "." & FieldName & ".PixelHeight", EditorPixelHeight)
                                        End If
                                End Select
                                If (LCase(FieldName) = "parentid") Then
                                    '
                                    ' check circular reference on all parentid fields
                                    '

                                    ParentID = genericController.EncodeInteger(ResponseFieldValueText)
                                    LoopPtr = 0
                                    UsedIDs = editRecord.id.ToString
                                    Do While (LoopPtr < LoopPtrMax) And (ParentID <> 0) And (InStr(1, "," & UsedIDs & ",", "," & CStr(ParentID) & ",", vbBinaryCompare) = 0)
                                        UsedIDs = UsedIDs & "," & CStr(ParentID)
                                        CS = cpCore.db.cs_open(adminContent.Name, "ID=" & ParentID, , , , , , "ParentID")
                                        If Not cpCore.db.cs_ok(CS) Then
                                            ParentID = 0
                                        Else
                                            ParentID = cpCore.db.cs_getInteger(CS, "ParentID")
                                        End If
                                        Call cpCore.db.cs_Close(CS)
                                        LoopPtr = LoopPtr + 1
                                    Loop
                                    If LoopPtr = LoopPtrMax Then
                                        '
                                        ' Too deep
                                        '
                                        cpCore.error_AddUserError("This record cannot be saved because the field [" & .caption & "]" & TabCopy & " creates a relationship between records that Is too large. Please limit the depth of this relationship to " & LoopPtrMax & " records.")
                                        ResponseFieldValueIsOKToSave = False
                                    ElseIf (editRecord.id <> 0) And (editRecord.id = ParentID) Then
                                        '
                                        ' Reference to iteslf
                                        '
                                        cpCore.error_AddUserError("This record cannot be saved because the field [" & .caption & "]" & TabCopy & " contains a circular reference. This record points back to itself. This Is Not allowed.")
                                        ResponseFieldValueIsOKToSave = False
                                    ElseIf ParentID <> 0 Then
                                        '
                                        ' Circular reference
                                        '
                                        cpCore.error_AddUserError("This record cannot be saved because the field [" & .caption & "]" & TabCopy & " contains a circular reference. This field either points to other records which then point back to this record. This Is Not allowed.")
                                        ResponseFieldValueIsOKToSave = False
                                    End If
                                End If
                                If .TextBuffered Then
                                    '
                                    ' text buffering
                                    '
                                    ResponseFieldValueText = cpCore.main_RemoveControlCharacters(ResponseFieldValueText)
                                End If
                                If (.Required) And (ResponseFieldIsEmpty) Then
                                    '
                                    ' field is required and is not given
                                    '
                                    cpCore.error_AddUserError("This record cannot be saved because the field [" & .caption & "]" & TabCopy & " Is required but has no value.")
                                    ResponseFieldValueIsOKToSave = False
                                End If
                                '
                                ' special case - people records without Allowduplicateusername require username to be unique
                                '
                                If genericController.vbLCase(adminContent.ContentTableName) = "ccmembers" Then
                                    If genericController.vbLCase(.nameLc) = "username" Then
                                        blockDuplicateUsername = Not (cpCore.siteProperties.getBoolean("allowduplicateusername", False))
                                    End If
                                    If genericController.vbLCase(.nameLc) = "email" Then
                                        blockDuplicateEmail = (cpCore.siteProperties.getBoolean("allowemaillogin", False))
                                    End If
                                End If
                                If (blockDuplicateUsername Or blockDuplicateEmail Or .UniqueName) And (Not ResponseFieldIsEmpty) Then
                                    '
                                    ' ----- Do the unique check for this field
                                    '
                                    ' 7/22/2009 - moved this out of EditRecord.ID<>0 check -- so unique does not check edit or archive records
                                    If editRecord.id = 0 Then
                                        '
                                        ' new record
                                        '
                                        If AdminContentWorkflowAuthoring Then
                                            SQLUnique = "SELECT ID,EditSourceID FROM " & adminContent.ContentTableName & " WHERE (" & FieldName & "=" & cpCore.db.EncodeSQL(ResponseFieldValueText, .fieldTypeId) & ")And(ID<>0)And(" & cpCore.metaData.content_getContentControlCriteria(adminContent.Name) & ")"
                                            SQLUnique = SQLUnique & "And((EditArchive Is null)Or(EditArchive=0))"
                                        Else
                                            SQLUnique = "SELECT ID,0 as editsourceid FROM " & adminContent.ContentTableName & " WHERE (" & FieldName & "=" & cpCore.db.EncodeSQL(ResponseFieldValueText, .fieldTypeId) & ")And(ID<>0)And(" & cpCore.metaData.content_getContentControlCriteria(adminContent.Name) & ")"
                                        End If
                                    Else
                                        '
                                        ' editing record
                                        '
                                        If AdminContentWorkflowAuthoring Then
                                            '
                                            ' check for another edit record that matches this record -or- a live record that matches it
                                            '
                                            SQLUnique = "SELECT ID,EditSourceID FROM " & adminContent.ContentTableName & " WHERE (" & FieldName & "=" & cpCore.db.EncodeSQL(ResponseFieldValueText, .fieldTypeId) & ")And(ID<>0)And(" & cpCore.metaData.content_getContentControlCriteria(adminContent.Name) & ")"
                                            SQLUnique = SQLUnique & "And( (EditSourceID Is null) Or ((EditSourceID<>" & editRecord.id & ")And((EditArchive Is null)Or(EditArchive=0))))"
                                        Else
                                            SQLUnique = "SELECT ID,0 as editsourceid FROM " & adminContent.ContentTableName & " WHERE (" & FieldName & "=" & cpCore.db.EncodeSQL(ResponseFieldValueText, .fieldTypeId) & ")And(ID<>0)And(" & cpCore.metaData.content_getContentControlCriteria(adminContent.Name) & ")"
                                        End If
                                        SQLUnique = SQLUnique & "And(ID<>" & editRecord.id & ")"
                                    End If
                                    CSPointer = cpCore.db.cs_openCsSql_rev(DataSourceName, SQLUnique)
                                    If cpCore.db.cs_ok(CSPointer) Then
                                        '
                                        ' field is not unique, skip it and flag error
                                        '
                                        If blockDuplicateUsername Then
                                            '
                                            '
                                            '
                                            cpCore.error_AddUserError("This record cannot be saved because the field [" & .caption & "]" & TabCopy & " must be unique And there Is another record with [" & ResponseFieldValueText & "]. This must be unique because the preference Allow Duplicate Usernames Is Not checked.")
                                        ElseIf blockDuplicateEmail Then
                                            '
                                            '
                                            '
                                            cpCore.error_AddUserError("This record cannot be saved because the field [" & .caption & "]" & TabCopy & " must be unique And there Is another record with [" & ResponseFieldValueText & "]. This must be unique because the preference Allow Email Login Is checked.")
                                        ElseIf AdminContentWorkflowAuthoring Then
                                            '
                                            ' Workflow
                                            '
                                            If (cpCore.db.cs_getInteger(CSPointer, "EditSourceID") = 0) Then
                                                '
                                                ' there is a live record that matches
                                                '
                                                cpCore.error_AddUserError("This record cannot be saved because the field [" & .caption & "]" & TabCopy & " must be unique And there Is another record with the value [" & ResponseFieldValueText & "].")
                                            Else
                                                '
                                                ' there is an edit record that matches
                                                '
                                                cpCore.error_AddUserError("This record cannot be saved because the field [" & .caption & "]" & TabCopy & " must be unique And there Is another record whose current edits include the value [" & ResponseFieldValueText & "].")
                                            End If
                                        Else
                                            '
                                            ' non-workflow
                                            '
                                            cpCore.error_AddUserError("This record cannot be saved because the field [" & .caption & "]" & TabCopy & " must be unique And there Is another record with [" & ResponseFieldValueText & "].")
                                        End If
                                        ResponseFieldValueIsOKToSave = False
                                    End If
                                    Call cpCore.db.cs_Close(CSPointer)
                                End If
                            End If
                            ' end case
                    End Select
                    '
                    ' Save response if it is valid
                    '
                    If ResponseFieldValueIsOKToSave Then
                        editRecord.fieldsLc(.nameLc).value = ResponseFieldValueText
                    End If
                End If
            End With
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("LoadEditResponseByPointer")
            '
        End Sub
        '
        '========================================================================
        '   Save Whats New values if present
        '
        '   does NOT check AuthoringLocked -- you must check before calling
        '========================================================================
        '
        Private Sub SaveContentTracking(adminContent As cdefModel, editRecord As editRecordClass)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "SaveContentTracking")
            '
            Dim ContentID As Integer
            Dim CSPointer As Integer
            Dim CSRules As Integer
            Dim CSContentWatch As Integer
            Dim CSContentWatchList As Integer
            Dim ContentWatchID As Integer
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim MethodName As String
            '
            MethodName = "Admin.SaveContentTracking()"
            '
            '
            If adminContent.AllowContentTracking And (Not editRecord.Read_Only) Then
                '
                ' ----- Set default content watch link label
                '
                If (ContentWatchListIDCount > 0) And (ContentWatchLinkLabel = "") Then
                    If editRecord.menuHeadline <> "" Then
                        ContentWatchLinkLabel = editRecord.menuHeadline
                    ElseIf editRecord.nameLc <> "" Then
                        ContentWatchLinkLabel = editRecord.nameLc
                    Else
                        ContentWatchLinkLabel = "Click Here"
                    End If
                End If
                ' ----- update/create the content watch record for this content record
                '
                ContentID = editRecord.contentControlId
                CSContentWatch = cpCore.db.cs_open("Content Watch", "(ContentID=" & cpCore.db.encodeSQLNumber(ContentID) & ")And(RecordID=" & cpCore.db.encodeSQLNumber(editRecord.id) & ")")
                If Not cpCore.db.cs_ok(CSContentWatch) Then
                    Call cpCore.db.cs_Close(CSContentWatch)
                    CSContentWatch = cpCore.db.cs_insertRecord("Content Watch")
                    Call cpCore.db.cs_set(CSContentWatch, "contentid", ContentID)
                    Call cpCore.db.cs_set(CSContentWatch, "recordid", editRecord.id)
                    Call cpCore.db.cs_set(CSContentWatch, "ContentRecordKey", ContentID & "." & editRecord.id)
                    Call cpCore.db.cs_set(CSContentWatch, "clicks", 0)
                End If
                If Not cpCore.db.cs_ok(CSContentWatch) Then
                    Call handleLegacyClassError(MethodName, "SaveContentTracking, can Not create New record")
                Else
                    ContentWatchID = cpCore.db.cs_getInteger(CSContentWatch, "ID")
                    Call cpCore.db.cs_set(CSContentWatch, "LinkLabel", ContentWatchLinkLabel)
                    Call cpCore.db.cs_set(CSContentWatch, "WhatsNewDateExpires", ContentWatchExpires)
                    Call cpCore.db.cs_set(CSContentWatch, "Link", ContentWatchLink)
                    '
                    ' ----- delete all rules for this ContentWatch record
                    '
                    'Call cpCore.app.DeleteContentRecords("Content Watch List Rules", "(ContentWatchID=" & ContentWatchID & ")")
                    CSPointer = cpCore.db.cs_open("Content Watch List Rules", "(ContentWatchID=" & ContentWatchID & ")")
                    Do While cpCore.db.cs_ok(CSPointer)
                        Call cpCore.DeleteCSRecord(CSPointer)
                        Call cpCore.db.cs_goNext(CSPointer)
                    Loop
                    Call cpCore.db.cs_Close(CSPointer)
                    '
                    ' ----- Update ContentWatchListRules for all entries in ContentWatchListID( ContentWatchListIDCount )
                    '
                    Dim ListPointer As Integer
                    If ContentWatchListIDCount > 0 Then
                        For ListPointer = 0 To ContentWatchListIDCount - 1
                            CSRules = cpCore.db.cs_insertRecord("Content Watch List Rules")
                            If cpCore.db.cs_ok(CSRules) Then
                                Call cpCore.db.cs_set(CSRules, "ContentWatchID", ContentWatchID)
                                Call cpCore.db.cs_set(CSRules, "ContentWatchListID", ContentWatchListID(ListPointer))
                            End If
                            Call cpCore.db.cs_Close(CSRules)
                        Next
                    End If
                End If
                Call cpCore.db.cs_Close(CSContentWatch)
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("SaveContentTracking")
            '
        End Sub
        '
        '========================================================================
        '   Read in Whats New values if present
        '========================================================================
        '
        Private Sub LoadContentTrackingResponse(adminContent As cdefModel, editRecord As editRecordClass)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "LoadContentTrackingResponse")
            '
            Dim CSContentWatchList As Integer
            Dim RecordID As Integer
            '
            ContentWatchListIDCount = 0
            If (cpCore.docProperties.getText("WhatsNewResponse") <> "") And (adminContent.AllowContentTracking) Then
                '
                ' ----- set single fields
                '
                ContentWatchLinkLabel = cpCore.docProperties.getText("ContentWatchLinkLabel")
                ContentWatchExpires = cpCore.docProperties.getDate("ContentWatchExpires")
                '
                ' ----- Update ContentWatchListRules for all checked boxes
                '
                CSContentWatchList = cpCore.db.cs_open("Content Watch Lists")
                Do While cpCore.db.cs_ok(CSContentWatchList)
                    RecordID = (cpCore.db.cs_getInteger(CSContentWatchList, "ID"))
                    If cpCore.docProperties.getBoolean("ContentWatchList." & RecordID) Then
                        If ContentWatchListIDCount >= ContentWatchListIDSize Then
                            ContentWatchListIDSize = ContentWatchListIDSize + 50
                            ReDim Preserve ContentWatchListID(ContentWatchListIDSize)
                        End If
                        ContentWatchListID(ContentWatchListIDCount) = RecordID
                        ContentWatchListIDCount = ContentWatchListIDCount + 1
                    End If
                    Call cpCore.db.cs_goNext(CSContentWatchList)
                Loop
                Call cpCore.db.cs_Close(CSContentWatchList)
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("LoadContentTrackingResponse")
            '
        End Sub
        '
        '========================================================================
        '   Load and Save
        '       From both response and database
        '
        '   This needs to be updated:
        '       - Divide into LoadCalendarEvents / SaveCalendarEvents
        '       - Put LoadCalendarEvents in LoadResponse/LoadDatabase
        '       - Put SaveCalendarEvents with SaveEditRecord
        '       - this is so a usererror will preserve form responses
        '       - Dont delete all and recreate / just update records
        '========================================================================
        '
        Private Sub LoadAndSaveMetaContent()
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "LoadAndSaveMetaContent")
            '
            Dim CS As Integer
            Dim MetaContentID As Integer
            Dim MetaKeywordList As String
            '
            MetaContentID = cpCore.docProperties.getInteger("MetaContent.MetaContentID")
            If (MetaContentID <> 0) Then
                '
                ' ----- Load from Response
                '
                CS = cpCore.csOpen("Meta Content", MetaContentID)
                If cpCore.db.cs_ok(CS) Then
                    Call cpCore.db.cs_set(CS, "Name", cpCore.docProperties.getText("MetaContent.PageTitle"))
                    Call cpCore.db.cs_set(CS, "MetaDescription", cpCore.docProperties.getText("MetaContent.MetaDescription"))
                    If True Then ' 3.3.930" Then
                        Call cpCore.db.cs_set(CS, "OtherHeadTags", cpCore.docProperties.getText("MetaContent.OtherHeadTags"))
                        MetaKeywordList = cpCore.docProperties.getText("MetaContent.MetaKeywordList")
                        MetaKeywordList = genericController.vbReplace(MetaKeywordList, ",", vbCrLf)
                        Do While genericController.vbInstr(1, MetaKeywordList, vbCrLf & " ") <> 0
                            MetaKeywordList = genericController.vbReplace(MetaKeywordList, vbCrLf & " ", vbCrLf)
                        Loop
                        Do While genericController.vbInstr(1, MetaKeywordList, " " & vbCrLf) <> 0
                            MetaKeywordList = genericController.vbReplace(MetaKeywordList, " " & vbCrLf, vbCrLf)
                        Loop
                        Do While genericController.vbInstr(1, MetaKeywordList, vbCrLf & vbCrLf) <> 0
                            MetaKeywordList = genericController.vbReplace(MetaKeywordList, vbCrLf & vbCrLf, vbCrLf)
                        Loop
                        Do While (MetaKeywordList <> "") And (Right(MetaKeywordList, 2) = vbCrLf)
                            MetaKeywordList = Left(MetaKeywordList, Len(MetaKeywordList) - 2)
                        Loop
                        Call cpCore.db.cs_set(CS, "MetaKeywordList", MetaKeywordList)
                    ElseIf cpCore.db.cs_isFieldSupported(CS, "OtherHeadTags") Then
                        Call cpCore.db.cs_set(CS, "OtherHeadTags", cpCore.docProperties.getText("MetaContent.OtherHeadTags"))
                    End If
                    Call cpCore.main_ProcessCheckList("MetaContent.KeywordList", "Meta Content", genericController.encodeText(MetaContentID), "Meta Keywords", "Meta Keyword Rules", "MetaContentID", "MetaKeywordID")
                End If
                Call cpCore.db.cs_Close(CS)
                '
                ' Clear any bakes involving this content
                '
                Call cpCore.cache.invalidateContent("Meta Content")
                Call cpCore.cache.invalidateContent("Meta Keyword Rules")
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("LoadAndSaveMetaContent")
            '
        End Sub
        '
        '========================================================================
        '   Save Link Alias field if it supported, and is non-authoring
        '   if it is authoring, it will be saved by the userfield routines
        '   if not, it appears in the LinkAlias tab, and must be saved here
        '========================================================================
        '
        Private Sub SaveLinkAlias(adminContent As cdefModel, editRecord As editRecordClass)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "SaveLinkAlias")
            '
            Dim isDupError As Boolean
            Dim FieldPtr As Integer
            Dim CS As Integer
            Dim linkAlias As String
            Dim OverRideDuplicate As Boolean
            Dim DupCausesWarning As Boolean
            '
            ' use field ptr to test if the field is supported yet
            '
            isDupError = False
            If adminContent.fields.ContainsKey("linklalias") Then
                If cpCore.siteProperties.allowLinkAlias Then
                    'If AdminContent.fields(FieldPtr).Authorable Then
                    'If Not AdminContent.fields(FieldPtr).Authorable Then
                    linkAlias = cpCore.docProperties.getText("linkalias")
                    OverRideDuplicate = cpCore.docProperties.getBoolean("OverRideDuplicate")
                    If linkAlias = "" Then
                        '
                        ' Link Alias is blank, use the record name
                        '
                        linkAlias = editRecord.nameLc
                        DupCausesWarning = True
                    End If
                    If (linkAlias <> "") Then
                        If OverRideDuplicate Then
                            Call cpCore.db.executeSql("update " & adminContent.ContentTableName & " set linkalias=null where ( linkalias=" & cpCore.db.encodeSQLText(linkAlias) & ") and (id<>" & editRecord.id & ")")
                        Else
                            CS = cpCore.db.cs_open(adminContent.Name, "( linkalias=" & cpCore.db.encodeSQLText(linkAlias) & ")and(id<>" & editRecord.id & ")and(editsourceid is null)")
                            If cpCore.db.cs_ok(CS) Then
                                isDupError = True
                                Call cpCore.error_AddUserError("The Link Alias you entered can not be used because another record uses this value [" & linkAlias & "]. Enter a different Link Alias, or check the Override Duplicates checkbox in the Link Alias tab.")
                            End If
                            Call cpCore.db.cs_Close(CS)
                        End If
                        If Not isDupError Then
                            DupCausesWarning = True
                            CS = cpCore.csOpenRecord(adminContent.Name, editRecord.id, True, True)
                            If cpCore.db.cs_ok(CS) Then
                                Call cpCore.db.cs_set(CS, "linkalias", linkAlias)
                            End If
                            Call cpCore.db.cs_Close(CS)
                            '
                            ' Update the Link Aliases
                            '
                            Call cpCore.app_addLinkAlias2(linkAlias, editRecord.id, "", OverRideDuplicate, DupCausesWarning)
                        End If
                    End If
                    'End If
                End If
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("SaveLinkAlias")
            '
        End Sub
        '
        '========================================================================
        '   Read in Whats New values if present
        '   Field values must be loaded
        '========================================================================
        '
        Private Sub LoadContentTrackingDataBase(adminContent As cdefModel, editRecord As editRecordClass)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "LoadContentTrackingDataBase")
            '
            Dim ContentID As Integer
            Dim CSPointer As Integer
            ' converted array to dictionary - Dim FieldPointer As Integer
            '
            ' ----- check if admin record is present
            '
            If (editRecord.id <> 0) And (adminContent.AllowContentTracking) Then
                '
                ' ----- Open the content watch record for this content record
                '
                ContentID = editRecord.contentControlId
                CSPointer = cpCore.db.cs_open("Content Watch", "(ContentID=" & cpCore.db.encodeSQLNumber(ContentID) & ")AND(RecordID=" & cpCore.db.encodeSQLNumber(editRecord.id) & ")")
                If cpCore.db.cs_ok(CSPointer) Then
                    ContentWatchLoaded = True
                    ContentWatchRecordID = (cpCore.db.cs_getInteger(CSPointer, "ID"))
                    ContentWatchLink = (cpCore.db.cs_get(CSPointer, "Link"))
                    ContentWatchClicks = (cpCore.db.cs_getInteger(CSPointer, "Clicks"))
                    ContentWatchLinkLabel = (cpCore.db.cs_get(CSPointer, "LinkLabel"))
                    ContentWatchExpires = (cpCore.db.cs_getDate(CSPointer, "WhatsNewDateExpires"))
                    Call cpCore.db.cs_Close(CSPointer)
                End If
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("LoadContentTrackingDataBase")
            '
        End Sub
        '
        '========================================================================
        '   Save the field array to the database
        '
        '   The ResponseFormID is needed in case there is an upload file in the stream -- the content is not pre-processed
        '========================================================================
        '
        Private Sub SaveEditRecord(adminContent As cdefModel, editRecord As editRecordClass)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "SaveEditRecord")
            '
            Dim testStr As String
            Dim CS As Integer
            Dim ActivityLogOrganizationID As Integer
            Dim FieldChanged As Boolean
            '
            Dim CSEditRecord As Integer
            Dim FieldName As String
            Dim UcaseFieldName As String
            Dim SQL As String
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim Filename As String
            Dim fieldValueObject As Object
            Dim FieldValueText As String
            Dim MethodName As String
            Dim NewRecord As Boolean
            Dim RecordChanged As Boolean
            Dim AbortSave As Boolean
            Dim MTMContent0 As String
            Dim MTMContent1 As String
            Dim MTMRuleContent As String
            Dim MTMRuleField0 As String
            Dim MTMRuleField1 As String
            Dim RecordValueText As String
            Dim RecordValueInteger As Integer
            Dim RecordValueFloat As Double
            Dim RecordValueDate As Date
            Dim RecordValueBoolean As Boolean
            Dim Path As String
            Dim SQLUnique As String
            'Dim RSUnique as datatable
            Dim SaveCCIDValue As Integer
            'Dim DataSource As Models.Entity.dataSourceModel = Models.Entity.dataSourceModel.create(cpCore, adminContent.dataSourceId, New List(Of String))
            '
            MethodName = "SaveEditRecord"
            '
            SaveCCIDValue = 0
            ActivityLogOrganizationID = -1
            If cpCore.error_IsUserError Then
                '
                ' If There is an error, block the save
                '
                AdminAction = AdminActionNop
            ElseIf Not cpCore.authContext.isAuthenticatedContentManager(cpCore, adminContent.Name) Then
                '
                ' save blocked by BlockCurrentRecord
                '
            ElseIf editRecord.Read_Only Then
                '
                ' save blocked by BlockCurrentRecord
                ' no error message -- this happens when an admin publishes over an approved record
                '
                '    Call cpCore.htmldoc.main_AddUserError(editrecord.read_onlyUserError)
            Else
                '
                ' ----- Record will be saved, create a new one if this is an add
                '
                If editRecord.id = 0 Then
                    NewRecord = True
                    RecordChanged = True
                    CSEditRecord = cpCore.db.cs_insertRecord(adminContent.Name)
                Else
                    NewRecord = False
                    CSEditRecord = cpCore.csOpenRecord(adminContent.Name, editRecord.id, True, True)
                End If
                If Not cpCore.db.cs_ok(CSEditRecord) Then
                    '
                    ' ----- Error: new record could not be created
                    '
                    If NewRecord Then
                        '
                        ' Could not insert record
                        '
                        Call handleLegacyClassError(MethodName, "A new record could not be inserted for content [" & adminContent.Name & "]. Verify the Database table and field DateAdded, CreateKey, and ID.")
                    Else
                        '
                        ' Could not locate record you requested
                        '
                        Call handleLegacyClassError(MethodName, "The record you requested (ID=" & editRecord.id & ") could not be found for content [" & adminContent.Name & "]")
                    End If
                Else
                    '
                    ' ----- Get the ID of the current record
                    '
                    editRecord.id = cpCore.db.cs_getInteger(CSEditRecord, "ID")
                    '
                    ' ----- Create the update sql
                    '
                    For Each keyValuePair In adminContent.fields
                        Dim field As CDefFieldModel = keyValuePair.Value
                        With field
                            Dim editRecordField As editRecordFieldClass = editRecord.fieldsLc(.nameLc)
                            fieldValueObject = editRecordField.value
                            FieldValueText = genericController.encodeText(fieldValueObject)
                            FieldChanged = False
                            FieldName = .nameLc
                            UcaseFieldName = genericController.vbUCase(FieldName)
                            '
                            ' ----- Handle special case fields
                            '
                            Select Case UcaseFieldName
                                Case "NAME"
                                    '
                                    editRecord.nameLc = genericController.encodeText(fieldValueObject)
                                Case "CCGUID"
                                    Dim saveValue As String = genericController.encodeText(fieldValueObject)
                                    If cpCore.db.cs_getText(CSEditRecord, FieldName) <> saveValue Then
                                        FieldChanged = True
                                        RecordChanged = True
                                        Call cpCore.db.cs_set(CSEditRecord, FieldName, saveValue)
                                    End If
                                        'RecordChanged = True
                                        'Call cpCore.app.SetCS(CSEditRecord, FieldName, FieldValueVariant)
                                Case "CONTENTCATEGORYID"
                                    Dim saveValue As Integer = genericController.EncodeInteger(fieldValueObject)
                                    If cpCore.db.cs_getInteger(CSEditRecord, FieldName) <> saveValue Then
                                        FieldChanged = True
                                        RecordChanged = True
                                        Call cpCore.db.cs_set(CSEditRecord, FieldName, saveValue)
                                    End If
                                Case "CONTENTCONTROLID"
                                    '
                                    ' run this after the save, so it will be blocked if the save fails
                                    ' block the change from this save
                                    ' Update the content control ID here, for all the children, and all the edit and archive records of both
                                    '
                                    Dim saveValue As Integer = genericController.EncodeInteger(fieldValueObject)
                                    If editRecord.contentControlId <> saveValue Then
                                        SaveCCIDValue = saveValue
                                        RecordChanged = True
                                    End If
                                Case "ACTIVE"
                                    Dim saveValue As Boolean = genericController.EncodeBoolean(fieldValueObject)
                                    If (Not saveValue) Then
                                        '
                                        ' ----- record is being saved inactive, delete contentwatch and contentwatchlistrules
                                        '
                                        ContentWatchListIDCount = 0
                                        ContentWatchLink = ""
                                    End If
                                        '
                                Case "DATEEXPIRES"
                                    '
                                    ' ----- make sure content watch expires before content expires
                                    '
                                    If (Not genericController.IsNull(fieldValueObject)) Then
                                        If IsDate(fieldValueObject) Then
                                            Dim saveValue As Date = genericController.EncodeDate(fieldValueObject)
                                            If ContentWatchExpires <= Date.MinValue Then
                                                ContentWatchExpires = saveValue
                                            ElseIf ContentWatchExpires > saveValue Then
                                                ContentWatchExpires = saveValue
                                            End If
                                        End If
                                    End If
                                        '
                                Case "DATEARCHIVE"
                                    '
                                    ' ----- make sure content watch expires before content archives
                                    '
                                    If (Not genericController.IsNull(fieldValueObject)) Then
                                        If IsDate(fieldValueObject) Then
                                            Dim saveValue As Date = genericController.EncodeDate(fieldValueObject)
                                            If (ContentWatchExpires) <= Date.MinValue Then
                                                ContentWatchExpires = saveValue
                                            ElseIf ContentWatchExpires > saveValue Then
                                                ContentWatchExpires = saveValue
                                            End If
                                        End If
                                    End If
                            End Select
                            '
                            ' ----- Put the field in the SQL to be saved
                            '
                            If IsVisibleUserField(.adminOnly, .developerOnly, .active, .authorable, .nameLc, adminContent.ContentTableName) And (NewRecord Or (Not .ReadOnly)) And (NewRecord Or (Not .NotEditable)) Then
                                '
                                ' ----- save the value by field type
                                '
                                Select Case .fieldTypeId
                                    Case FieldTypeIdAutoIdIncrement, FieldTypeIdRedirect
                                            '
                                            ' do nothing with these
                                            '
                                    Case FieldTypeIdFile, FieldTypeIdFileImage
                                        '
                                        ' filenames, upload to cdnFiles
                                        '
                                        If cpCore.docProperties.getBoolean(FieldName & ".DeleteFlag") Then
                                            RecordChanged = True
                                            FieldChanged = True
                                            Call cpCore.db.cs_set(CSEditRecord, FieldName, "")
                                        End If
                                        FieldValueText = genericController.encodeText(fieldValueObject)
                                        If FieldValueText <> "" Then
                                            Filename = FieldValueText
                                            Dim pathFilename As String = cpCore.db.cs_getFilename(CSEditRecord, FieldName, Filename, adminContent.Name)
                                            Path = pathFilename
                                            Path = genericController.vbReplace(Path, "\", "/")
                                            Path = genericController.vbReplace(Path, "/" & Filename, "")
                                            cpCore.cdnFiles.saveUpload(FieldName, Path, Filename)
                                            Call cpCore.db.cs_set(CSEditRecord, FieldName, Path & Filename)
                                            'Call cpCore.web_processFormInputFile(FieldName, cpCore.cdnFiles, Path)
                                            RecordChanged = True
                                            FieldChanged = True
                                        End If
                                    Case FieldTypeIdBoolean
                                        '
                                        ' boolean
                                        '
                                        Dim saveValue As Boolean = genericController.EncodeBoolean(fieldValueObject)
                                        If cpCore.db.cs_getBoolean(CSEditRecord, FieldName) <> saveValue Then
                                            RecordChanged = True
                                            FieldChanged = True
                                            Call cpCore.db.cs_set(CSEditRecord, FieldName, saveValue)
                                        End If
                                    Case FieldTypeIdCurrency, FieldTypeIdFloat
                                        '
                                        ' Floating pointer numbers
                                        '
                                        Dim saveValue As Double = genericController.EncodeNumber(fieldValueObject)
                                        If cpCore.db.cs_getNumber(CSEditRecord, FieldName) <> saveValue Then
                                            RecordChanged = True
                                            FieldChanged = True
                                            Call cpCore.db.cs_set(CSEditRecord, FieldName, saveValue)
                                        End If
                                    Case FieldTypeIdDate
                                        '
                                        ' Date
                                        '
                                        Dim saveValue As Date = genericController.EncodeDate(fieldValueObject)
                                        If cpCore.db.cs_getDate(CSEditRecord, FieldName) <> saveValue Then
                                            FieldChanged = True
                                            RecordChanged = True
                                            Call cpCore.db.cs_set(CSEditRecord, FieldName, saveValue)
                                        End If
                                    Case FieldTypeIdInteger, FieldTypeIdLookup
                                        '
                                        ' Integers
                                        '
                                        Dim saveValue As Integer = genericController.EncodeInteger(fieldValueObject)
                                        If saveValue <> cpCore.db.cs_getInteger(CSEditRecord, FieldName) Then
                                            FieldChanged = True
                                            RecordChanged = True
                                            Call cpCore.db.cs_set(CSEditRecord, FieldName, saveValue)
                                        End If
                                    Case FieldTypeIdLongText, FieldTypeIdText, FieldTypeIdFileTextPrivate, FieldTypeIdFileCSS, FieldTypeIdFileXML, FieldTypeIdFileJavascript, FieldTypeIdHTML, FieldTypeIdFileHTMLPrivate
                                        '
                                        ' Text
                                        '
                                        Dim saveValue As String = genericController.encodeText(fieldValueObject)
                                        If cpCore.db.cs_get(CSEditRecord, FieldName) <> saveValue Then
                                            FieldChanged = True
                                            RecordChanged = True
                                            Call cpCore.db.cs_set(CSEditRecord, FieldName, saveValue)
                                        End If
                                    Case FieldTypeIdManyToMany
                                        '
                                        ' Many to Many checklist
                                        '
                                        MTMContent0 = cpCore.metaData.getContentNameByID(.contentId)
                                        MTMContent1 = cpCore.metaData.getContentNameByID(.manyToManyContentID)
                                        MTMRuleContent = cpCore.metaData.getContentNameByID(.manyToManyRuleContentID)
                                        MTMRuleField0 = .ManyToManyRulePrimaryField
                                        MTMRuleField1 = .ManyToManyRuleSecondaryField
                                        Call cpCore.main_ProcessCheckList("ManyToMany" & .id, MTMContent0, CStr(editRecord.id), MTMContent1, MTMRuleContent, MTMRuleField0, MTMRuleField1)
                                    Case Else
                                        '
                                        ' Unknown other types
                                        '

                                        Dim saveValue As String = genericController.encodeText(fieldValueObject)
                                        FieldChanged = True
                                        RecordChanged = True
                                        Call cpCore.db.cs_set(CSEditRecord, UcaseFieldName, saveValue)
                                        'sql &=  "," & .Name & "=" & cpCore.app.EncodeSQL(FieldValueVariant, .FieldType)
                                End Select
                            End If
                            '
                            ' ----- put any changes back in array for the next page to display
                            '
                            editRecordField.value = fieldValueObject
                        End With
                        '
                        ' Log Activity for changes to people and organizattions
                        '
                        If FieldChanged Then
                            Select Case genericController.vbLCase(adminContent.ContentTableName)
                                Case genericController.vbLCase("ccMembers")
                                    'Case "ccmembers"
                                    '
                                    ' Log people
                                    '
                                    If ActivityLogOrganizationID < 0 Then
                                        CS = cpCore.csOpenRecord("people", editRecord.id, , , "OrganizationID")
                                        If cpCore.db.cs_ok(CS) Then
                                            ActivityLogOrganizationID = cpCore.db.cs_getInteger(CS, "OrganizationID")
                                        End If
                                        Call cpCore.db.cs_Close(CS)
                                    End If
                                    logController.logActivity2(cpCore, "modifying field " & FieldName, editRecord.id, ActivityLogOrganizationID)
                                Case "organizations"
                                    '
                                    ' Log organization
                                    '
                                    Call logController.logActivity2(cpCore, "modifying field " & FieldName, 0, editRecord.id)
                                Case "cclibraryfiles"
                                    '
                                    ' if new upload to files, clear AltSizeList
                                    '
                                    If True Then ' 3.4.200" Then
                                        If cpCore.docProperties.getText("filename") <> "" Then
                                            Call cpCore.db.cs_set(CSEditRecord, "altsizelist", "")
                                        End If
                                    End If
                            End Select
                        End If
                    Next
                    '
                    Call cpCore.db.cs_Close(CSEditRecord)
                    '            If RecordChanged And SaveCCIDValue <> 0 Then
                    '                Call cpCore.main_SetContentControl(EditRecord.ContentID, EditRecord.ID, SaveCCIDValue)
                    '            End If
                    If RecordChanged And Not AdminContentWorkflowAuthoring Then
                        '
                        ' if record is changed, and not workflow, clear the contenttimestamp
                        '
                        If editRecord.contentControlId = 0 Then
                            Call cpCore.cache.invalidateContent(adminContent.Name)
                        Else
                            Call cpCore.cache.invalidateContent(editRecord.contentControlId_Name)
                            'call cpCore.main_ClearBake (cpCore.metaData.getContentNameByID(EditRecord.ContentID))
                        End If
                    End If
                    '
                    ' ----- Clear/Set PageNotFound
                    '
                    If editRecord.SetPageNotFoundPageID Then
                        Call cpCore.siteProperties.setProperty("PageNotFoundPageID", genericController.encodeText(editRecord.id))
                    End If
                    '
                    ' ----- Clear/Set LandingPageID
                    '
                    If editRecord.SetLandingPageID Then
                        Call cpCore.siteProperties.setProperty("LandingPageID", genericController.encodeText(editRecord.id))
                    End If
                    '
                    ' ----- clear/set authoring controls
                    '
                    Call cpCore.workflow.ClearEditLock(adminContent.Name, editRecord.id)
                    '
                    ' ----- if admin content is changed, reload the admincontent data in case this is a save, and not an OK
                    '
                    If RecordChanged And SaveCCIDValue <> 0 Then
                        Call cpCore.content_SetContentControl(editRecord.contentControlId, editRecord.id, SaveCCIDValue)
                        editRecord.contentControlId_Name = cpCore.metaData.getContentNameByID(SaveCCIDValue)
                        adminContent = cpCore.metaData.getCdef(editRecord.contentControlId_Name)
                        adminContent.Id = adminContent.Id
                        adminContent.Name = adminContent.Name
                        AdminContentWorkflowAuthoring = cpCore.siteProperties.allowWorkflowAuthoring And adminContent.AllowWorkflowAuthoring
                    End If
                End If
                editRecord.Saved = True
            End If
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("SaveEditRecord")
            '
        End Sub
        '
        '========================================================================
        ' Get Just the tablename from a sql statement
        '   This is to be compatible with the old way of setting up FieldTypeLookup
        '========================================================================
        '
        Private Function GetJustTableName(ByVal SQL As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "GetJustTableName")
            '
            GetJustTableName = Trim(UCase(SQL))
            Do While (GetJustTableName <> "") And (InStr(GetJustTableName, " ") <> 0)
                GetJustTableName = Mid(GetJustTableName, genericController.vbInstr(GetJustTableName, " ") + 1)
            Loop
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetJustTableName")
            '
        End Function
        '
        '========================================================================
        ' Test Content Access -- return based on Admin/Developer/MemberRules
        '   if developer, let all through
        '   if admin, block if table is developeronly
        '   if member, run blocking query (which also traps adminonly and developer only)
        '       if blockin query has a null RecordID, this member gets everything
        '       if not null recordid in blocking query, use RecordIDs in result for Where clause on this lookup
        '========================================================================
        '
        Private Function userHasContentAccess(ByVal ContentID As Integer) As Boolean
            Dim returnHas As Boolean = False
            Try
                Dim ContentName As String
                '
                ContentName = cpCore.metaData.getContentNameByID(ContentID)
                If ContentName <> "" Then
                    returnHas = cpCore.authContext.isAuthenticatedContentManager(cpCore, ContentName)
                End If
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return returnHas
        End Function
        '
        '========================================================================
        '   Display a field in the admin index form
        '========================================================================
        '
        Private Function GetForm_Index_GetCell(adminContent As cdefModel, editRecord As editRecordClass, fieldName As String, ByVal CS As Integer, ByVal IsLookupFieldValid As Boolean, ByVal IsEmailContent As Boolean) As String
            Dim return_formIndexCell As String = ""
            Try
                Dim FieldText As String
                Dim Filename As String
                Dim Copy As String
                Dim Stream As New stringBuilderLegacyController
                Dim lookups() As String
                Dim LookupPtr As Integer
                Dim Pos As Integer
                Dim lookupTableCnt As Integer = 0
                '
                With adminContent.fields(fieldName.ToLower())
                    lookupTableCnt = .id ' workaround for universally creating the left join tablename for each field
                    Select Case .fieldTypeId
                        'Case FieldTypeImage
                        '    Stream.Add( Mid(cpCore.app.cs_get(CS, .Name), 7 + Len(.Name) + Len(AdminContent.ContentTableName)))
                        Case FieldTypeIdFile, FieldTypeIdFileImage
                            Filename = cpCore.db.cs_get(CS, .nameLc)
                            Filename = genericController.vbReplace(Filename, "\", "/")
                            Pos = InStrRev(Filename, "/")
                            If Pos <> 0 Then
                                Filename = Mid(Filename, Pos + 1)
                            End If
                            Stream.Add(Filename)
                        Case FieldTypeIdLookup
                            If IsLookupFieldValid Then
                                Stream.Add(cpCore.db.cs_get(CS, "LookupTable" & lookupTableCnt & "Name"))
                                lookupTableCnt += 1
                            ElseIf .lookupList <> "" Then
                                lookups = Split(.lookupList, ",")
                                LookupPtr = cpCore.db.cs_getInteger(CS, .nameLc) - 1
                                If LookupPtr <= UBound(lookups) Then
                                    If LookupPtr < 0 Then
                                        'Stream.Add( "-1")
                                    Else
                                        Stream.Add(lookups(LookupPtr))
                                    End If
                                Else
                                    'Stream.Add( "-2")
                                End If

                            Else
                                'Stream.Add( "-3")
                                Stream.Add(" ")
                            End If
                        Case FieldTypeIdMemberSelect
                            If IsLookupFieldValid Then
                                Stream.Add(cpCore.db.cs_get(CS, "LookupTable" & lookupTableCnt & "Name"))
                                lookupTableCnt += 1
                            Else
                                Stream.Add(cpCore.db.cs_get(CS, .nameLc))
                            End If
                        Case FieldTypeIdBoolean
                            If cpCore.db.cs_getBoolean(CS, .nameLc) Then
                                Stream.Add("yes")
                            Else
                                Stream.Add("no")
                            End If
                        Case FieldTypeIdCurrency
                            Stream.Add(FormatCurrency(cpCore.db.cs_getNumber(CS, .nameLc)))
                        Case FieldTypeIdLongText, FieldTypeIdHTML
                            FieldText = cpCore.db.cs_get(CS, .nameLc)
                            If Len(FieldText) > 50 Then
                                FieldText = Mid(FieldText, 1, 50) & "[more]"
                            End If
                            Stream.Add(FieldText)
                        Case FieldTypeIdFileTextPrivate, FieldTypeIdFileCSS, FieldTypeIdFileXML, FieldTypeIdFileJavascript, FieldTypeIdFileHTMLPrivate
                            ' rw( "n/a" )
                            Filename = cpCore.db.cs_get(CS, .nameLc)
                            If Filename <> "" Then
                                Copy = cpCore.cdnFiles.readFile(Filename)
                                Copy = cpCore.htmlDoc.html_encodeContent10(Copy, cpCore.authContext.user.ID, "", 0, 0, True, False, False, False, True, False, "", "", IsEmailContent, 0, "", Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextAdmin, cpCore.authContext.isAuthenticated, Nothing, cpCore.authContext.isEditingAnything(cpCore))
                                Stream.Add(Copy)
                            End If
                        Case FieldTypeIdRedirect, FieldTypeIdManyToMany
                            Stream.Add("n/a")
                        Case Else
                            If .Password Then
                                Stream.Add("****")
                            Else
                                Stream.Add(cpCore.db.cs_get(CS, .nameLc))
                            End If
                    End Select
                End With
                '
                return_formIndexCell = cpCore.htmlDoc.html_EncodeHTML(Stream.Text)
            Catch ex As Exception
                Call cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return return_formIndexCell

        End Function
        '
        '========================================================================
        ' Get the Normal Edit Button Bar String
        '
        '   used on Normal Edit and others
        '========================================================================
        '
        Private Function GetForm_Edit_ButtonBar(adminContent As cdefModel, editRecord As editRecordClass, ByVal AllowDelete As Boolean, ByVal allowSave As Boolean, ByVal AllowAdd As Boolean, Optional ByVal AllowRefresh As Boolean = False) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "GetForm_Edit_ButtonBar")
            '
            Dim Adminui As New adminUIController(cpCore)
            Dim IncludeCDefReload As Boolean
            Dim IsPageContent As Boolean
            Dim HasChildRecords As Boolean
            Dim CS As Integer
            Dim AllowMarkReviewed As Boolean
            '
            If Not AdminContentWorkflowAuthoring Then
                IsPageContent = cpCore.IsWithinContent(adminContent.Id, cpCore.metaData.getContentId("Page Content"))
                If cpCore.main_IsContentFieldSupported(adminContent.Name, "parentid") Then
                    CS = cpCore.db.cs_open(adminContent.Name, "parentid=" & editRecord.id, , , , , , "ID")
                    HasChildRecords = cpCore.db.cs_ok(CS)
                    Call cpCore.db.cs_Close(CS)
                End If
            End If
            IncludeCDefReload = (LCase(adminContent.ContentTableName) = "cccontent") Or (LCase(adminContent.ContentTableName) = "ccdatasources") Or (LCase(adminContent.ContentTableName) = "cctables") Or (LCase(adminContent.ContentTableName) = "ccfields")
            AllowMarkReviewed = cpCore.db.isSQLTableField("default", adminContent.ContentTableName, "DateReviewed")
            '
            GetForm_Edit_ButtonBar = Adminui.GetEditButtonBar2(MenuDepth, AllowDelete And editRecord.AllowDelete, editRecord.AllowCancel, (allowSave And editRecord.AllowSave), (SpellCheckSupported And (Not SpellCheckRequest)), editRecord.AllowPublish, editRecord.AllowAbort, editRecord.AllowSubmit, editRecord.AllowApprove, (AllowAdd And adminContent.AllowAdd And editRecord.AllowInsert), IncludeCDefReload, HasChildRecords, IsPageContent, AllowMarkReviewed, AllowRefresh, (allowSave And editRecord.AllowSave And (editRecord.id <> 0)))
            'GetForm_Edit_ButtonBar = AdminUI.GetEditButtonBar2( MenuDepth, iAllowDelete And EditRecord.AllowDelete, EditRecord.AllowCancel, (iAllowSave And EditRecord.AllowSave), (SpellCheckSupported And (Not SpellCheckRequest)), EditRecord.AllowPublish, EditRecord.AllowAbort, EditRecord.AllowSubmit, EditRecord.AllowApprove, (AdminContent.allowAdd And EditRecord.AllowInsert), IncludeCDefReload, HasChildRecords, IsPageContent, AllowMarkReviewed)
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Edit_ButtonBar")
            '
        End Function
        '
        '========================================================================
        ' ----- Print the edit form
        '
        '   Prints the correct form based on the current AdminContent.contenttablename
        '   AdminContent.type is not longer used
        '========================================================================
        '
        Private Function GetForm_Edit(adminContent As cdefModel, editRecord As editRecordClass) As String
            Dim returnHtml As String = ""
            Try
                Dim ContentType As csv_contentTypeEnum
                Dim editorAddonListJSON As String
                Dim Active As Boolean
                Dim Name As String
                Dim WFMessage As String = ""
                Dim IgnoreInteger As Integer
                Dim IgnoreString As String = ""
                Dim IgnoreBoolean As Boolean
                Dim styleList As String
                Dim styleOptionList As String = ""
                Dim fieldEditorList As String
                Dim fieldTypeDefaultEditors As String()
                Dim fieldEditorPreferencesList As String
                Dim dt As DataTable
                Dim Cells As String(,)
                Dim fieldId As Integer
                Dim TableID As Integer
                Dim LastSendTestDate As Date
                Dim AllowEmailSendWithoutTest As Boolean
                'Dim fieldEditorOptions() As fieldEditorType
                Dim fieldEditorOptions As New Dictionary(Of String, Integer)
                Dim Ptr As Integer
                Dim fieldEditorOptionCnt As Integer
                Dim SQL As String
                Dim IsTemplateTable As Boolean
                Dim TemplateIDForStyles As Integer
                Dim emailIdForStyles As Integer
                Dim RootPageSectionID As Integer
                Dim AllowajaxTabs As Boolean
                Dim XMLTools As New xmlController(cpCore)
                Dim IsPageContentTable As Boolean
                Dim IsSectionTable As Boolean
                Dim IsEmailTable As Boolean
                Dim IsLandingPageTemp As Boolean
                Dim Pos As Integer
                'Dim LandingPageID As Integer
                Dim PCC As String(,)
                Dim TestPageID As Integer
                Dim EditRecordRootPageID As Integer
                Dim PCCPtr As Integer
                Dim IsLandingPageParent As Boolean
                Dim LoopPtr As Integer
                Dim IsLandingSection As Boolean
                Dim CreatedCopy As String
                Dim ModifiedCopy As String
                Dim CS As Integer
                Dim EditReferer As String
                Dim CustomDescription As String
                Dim EditSectionButtonBar As String
                Dim EmailSent As Boolean
                Dim EmailSubmitted As Boolean
                Dim Stream As New stringBuilderLegacyController
                Dim SystemEmailCID As Integer
                Dim ConditionalEmailCID As Integer
                Dim HeaderDescription As String
                Dim Adminui As New adminUIController(cpCore)
                Dim IsLandingPage As Boolean
                Dim IsRootPage As Boolean
                Dim CreatedBy As String
                Dim allowCMEdit As Boolean
                Dim allowCMAdd As Boolean
                Dim allowCMDelete As Boolean
                Dim AllowAdd As Boolean
                Dim AllowDelete As Boolean
                Dim allowSave As Boolean
                '
                CustomDescription = ""
                AllowajaxTabs = (cpCore.siteProperties.getBoolean("AllowAjaxEditTabBeta", False))
                '
                If (cpCore.error_IsUserError And editRecord.Loaded) Then
                    '
                    ' block load if there was a user error and it is already loaded (assume error was from response )
                    '
                ElseIf (adminContent.Id <= 0) Then
                    '
                    ' Invalid Content
                    '
                    Call cpCore.error_AddUserError("There was a problem identifying the content you requested. Please return to the previous form and verify your selection.")
                    Exit Function
                ElseIf editRecord.Loaded And Not editRecord.Saved Then
                    '
                    '   File types need to be reloaded from the Db, because...
                    '       LoadDb - sets them to the path-page
                    '       LoadResponse - sets the blank if no change, filename if there is an upload
                    '       SaveEditRecord - if blank, no change. If a filename it saves the uploaded file
                    '       GetForm_Edit - expects the Db value to be in EditRecordValueVariants (path-page)
                    '
                    ' xx This was added to bypass the load for the editrefresh case (reload the response so the editor preference can change)
                    ' xx  I do not know why the following section says "reload even if it is loaded", but lets try this
                    '
                    For Each keyValuePair In adminContent.fields
                        Dim field As CDefFieldModel = keyValuePair.Value
                        Select Case field.fieldTypeId
                            Case FieldTypeIdFile, FieldTypeIdFileImage
                                editRecord.fieldsLc(field.nameLc).value = editRecord.fieldsLc(field.nameLc).dbValue
                        End Select
                    Next
                    'For Ptr = 0 To adminContent.fields.Count - 1
                    '    fieldType = arrayOfFields(Ptr).fieldType
                    '    Select Case fieldType
                    '        Case FieldTypeFile, FieldTypeImage
                    '            EditRecordValuesObject(Ptr) = EditRecordDbValues(Ptr)
                    '    End Select
                    'Next
                Else
                    '
                    ' otherwise, load the record, even if it was loaded during a previous form process
                    '
                    Call LoadEditRecord(adminContent, editRecord, True)
                    If (editRecord.contentControlId = 0) Then
                        If cpCore.error_IsUserError Then
                            '
                            ' known user error, just return
                            '
                        Else
                            '
                            ' unknown error, set userError and return
                            '
                            cpCore.error_AddUserError("There was an unknown error in your request for data. Please let the site administrator know.")
                        End If
                        Exit Function
                    End If
                End If
                '
                ' Set if in workflow mode, if so, call getpccptr.
                ' problem was the GetLandingPageID uses IsWorkflowAuthoring to trigger EditRecord use. If you are editing
                ' you need editrecords, but the cache for PCC gets loaded during the GetLandingPageID call.
                '
                AdminContentWorkflowAuthoring = AdminContentWorkflowAuthoring
                'IsWorkflowMode = cpCore.app.SiteProperty_AllowWorkflowAuthoring And AdminContent.AllowWorkflowAuthoring
                If cpCore.pages.cache_pageContent_rows = 0 Then
                    Call cpCore.pages.cache_pageContent_load(AdminContentWorkflowAuthoring, False)
                End If
                'Ptr = cpCore.pageManager.pageManager_cache_pageContent_getPtr(0, AdminContentWorkflowAuthoring, False)
                '
                ' Test if this editors has access to this record
                '
                If Not userHasContentAccess(editRecord.contentControlId) Then
                    Call cpCore.error_AddUserError("Your account on this system does not have access rights to edit this content.")
                    Exit Function
                End If
                If False Then
                    '
                    ' Test for 100Mb available in Content Files drive
                    '
                    If cpCore.appRootFiles.getDriveFreeSpace() < 1.0E+8! Then
                        Call cpCore.error_AddUserError("The server drive holding data for this site may not have enough free space to complete this edit operation. If you attempt to save, your data may be lost. Please contact the site administrator.")
                    End If
                    If cpCore.privateFiles.getDriveFreeSpace() < 1.0E+8! Then
                        Call cpCore.error_AddUserError("The server drive holding data for this site may not have enough free space to complete this edit operation. If you attempt to save, your data may be lost. Please contact the site administrator.")
                    End If
                End If
                '
                ' Setup Edit Referer
                '
                EditReferer = cpCore.docProperties.getText(RequestNameEditReferer)
                If EditReferer = "" Then
                    EditReferer = cpCore.webServer.webServerIO_requestReferer
                    If EditReferer <> "" Then
                        '
                        ' special case - if you are coming from the advanced search, go back to the list page
                        '
                        EditReferer = genericController.vbReplace(EditReferer, "&af=39", "")
                        '
                        ' if referer includes AdminWarningMsg (admin hint message), remove it -- this edit may fix the problem
                        '
                        Pos = genericController.vbInstr(1, EditReferer, "AdminWarningMsg=", vbTextCompare)
                        If Pos <> 0 Then
                            EditReferer = Left(EditReferer, Pos - 2)
                        End If
                    End If
                End If
                Call cpCore.htmlDoc.webServerIO_addRefreshQueryString(RequestNameEditReferer, EditReferer)
                '
                ' Print common form elements
                '
                Call Stream.Add(GetForm_EditFormStart(AdminFormEdit))
                '
                IsLandingPageParent = False
                'LandingPageID = 0
                IsLandingPage = False
                IsRootPage = False
                TemplateIDForStyles = 0
                IsTemplateTable = (LCase(adminContent.ContentTableName) = "cctemplates")
                IsPageContentTable = (LCase(adminContent.ContentTableName) = "ccpagecontent")
                IsSectionTable = (LCase(adminContent.ContentTableName) = "ccsections")
                IsEmailTable = (LCase(adminContent.ContentTableName) = "ccemail")
                '
                If IsEmailTable Then
                    '
                    ' ----- special case - email
                    '
                    emailIdForStyles = editRecord.id
                End If
                '
                If IsPageContentTable Then
                    '
                    ' ----- special case - page content
                    '
                    If (editRecord.id <> 0) Then
                        '
                        ' landing page case
                        '
                        '$$$$$ problem -- could be landing page based on domain, not property
                        'LandingPageID = (cpCore.siteProperties.getinteger("LandingPageID", 0))
                        If cpCore.siteProperties.landingPageID = 0 Then
                            '
                            ' The call generated a user error because the landingpageid could not be determined
                            ' block it
                            '
                            'Call cpCore.main_GetUserError
                        Else
                            IsLandingPage = (editRecord.id = cpCore.siteProperties.landingPageID)
                            'If IsLandingPage Then
                            '    If genericController.EncodeInteger(cpCore.main_GetSiteProperty2("LandingPageID", "", True)) <> LandingPageID Then
                            '        IsLandingPageTemp = True
                            '    End If
                            'End If
                            IsRootPage = IsPageContentTable And (editRecord.parentID = 0)
                            If IsRootPage Then
                                '$$$$$ cache
                                CS = cpCore.db.cs_open("Site Sections", "RootPageID=" & editRecord.id, , , , , , "ID")
                                IsRootPage = cpCore.db.cs_ok(CS)
                                If IsRootPage Then
                                    RootPageSectionID = cpCore.db.cs_getInteger(CS, "ID")
                                End If
                                Call cpCore.db.cs_Close(CS)
                            End If
                        End If
                    End If
                End If
                '
                If (Not IsLandingPage) And (IsPageContentTable Or IsSectionTable) Then
                    '
                    ' ----- special case, Is this page a LandingPageParent (Parent of the landing page), or is this section the landing page section
                    '
                    PCC = cpCore.pages.cache_pageContent_get(False, False)
                    If Not IsNothing(PCC) Then
                        TestPageID = cpCore.siteProperties.landingPageID
                        Do While LoopPtr < 20 And (TestPageID <> 0)
                            IsLandingPageParent = IsPageContentTable And (editRecord.id = TestPageID)
                            IsLandingSection = IsSectionTable And (EditRecordRootPageID = TestPageID)
                            If IsLandingPageParent Or IsLandingSection Then
                                Exit Do
                            End If
                            PCCPtr = cpCore.pages.cache_pageContent_getPtr(TestPageID, False, False)
                            If PCCPtr >= 0 Then
                                TestPageID = genericController.EncodeInteger(PCC(PCC_ParentID, PCCPtr))
                            End If
                            LoopPtr = LoopPtr + 1
                        Loop
                    End If
                End If
                '
                ' ----- special case messages
                '
                If IsLandingSection Then
                    CustomDescription = "<div>This is the default Landing Section for this website. This section is displayed when no specific page is requested. It should not be deleted, renamed, marked inactive, blocked or hidden.</div>"
                ElseIf IsLandingPageTemp Then
                    CustomDescription = "<div>This page is being used as the default Landing Page for this website, although it has not been set. This may be because a landing page has not been created, or it has been deleted. To make this page the permantent landing page, check the appropriate box in the control tab.</div>"
                ElseIf IsLandingPage Then
                    CustomDescription = "<div>This is the default Landing Page for this website. It should not be deleted. You can not mark this record inactive, or use the Publish Date, Expire Date or Archive Date features.</div>"
                ElseIf IsLandingPageParent Then
                    CustomDescription = "<div>This page is a parent of the default Landing Page for this website. It should not be deleted. You can not mark this record inactive, or use the Publish Date, Expire Date or Archive Date features.</div>"
                ElseIf IsRootPage Then
                    CustomDescription = "<div>This page is a Root Page. A Root Page is the primary page of a section. If you delete or inactivate this page, the section will create a new blank page in its place. If you need to hide or delete a section, <a href=""?af=4&cid=" & cpCore.metaData.getContentId("site sections") & "&id=" & RootPageSectionID & """>edit</a> the section record. You can not use the Publish Date, Expire Date or Archive Date features on this page.</div>"
                End If
                '
                ' ----- Determine TemplateIDForStyles
                '
                If IsTemplateTable Then
                    TemplateIDForStyles = editRecord.id
                ElseIf IsPageContentTable Then
                    Call cpCore.pages.pageManager_GetPageArgs(editRecord.id, AdminContentWorkflowAuthoring, False, IgnoreInteger, TemplateIDForStyles, IgnoreInteger, IgnoreString, IgnoreBoolean, IgnoreInteger, IgnoreBoolean, "")
                End If
                '
                ' ----- create page headers
                '
                If editRecord.id = 0 Then
                    HeaderDescription = "<div>New Record</div>"
                Else
                    HeaderDescription = "" _
                    & "<table border=0 cellpadding=0 cellspacing=0 style=""width:90%"">"
                    If CustomDescription <> "" Then
                        HeaderDescription = HeaderDescription & "<tr><td colspan=2>" & CustomDescription & "<div>&nbsp;</div></td></tr>"
                    End If
                    HeaderDescription = HeaderDescription _
                    & "<tr><td width=""50%"">" _
                    & "Name: " & editRecord.nameLc _
                    & "<br>Record ID: " & editRecord.id _
                    & "</td><td width=""50%"">"
                    '
                    CreatedCopy = ""
                    Dim editRecordDateAdded As Date
                    editRecordDateAdded = genericController.EncodeDate(editRecord.fieldsLc("dateadded").value)
                    If editRecord.dateAdded <> Date.MinValue Then
                        CreatedCopy = CreatedCopy & " " & editRecordDateAdded.ToString()  ' editRecord.dateAdded
                    End If
                    '
                    CreatedBy = "the system"
                    If editRecord.createByMemberId <> 0 Then
                        CS = cpCore.db.cs_openCsSql_rev("default", "select Name,Active from ccMembers where id=" & editRecord.createByMemberId)
                        'CS = cpCore.app.openCsSql_rev("default", "select Name,Active from ccmembers where id=" & EditRecord.AddedByMemberID)
                        If cpCore.db.cs_ok(CS) Then
                            Name = cpCore.db.cs_getText(CS, "name")
                            Active = cpCore.db.cs_getBoolean(CS, "active")
                            If Not Active And (Name <> "") Then
                                CreatedBy = "Inactive user " & Name
                            ElseIf Not Active Then
                                CreatedBy = "Inactive user #" & editRecord.createByMemberId
                            ElseIf Name = "" Then
                                CreatedBy = "Unnamed user #" & editRecord.createByMemberId
                            Else
                                CreatedBy = Name
                            End If
                        Else
                            CreatedBy = "deleted user #" & editRecord.createByMemberId
                        End If
                        Call cpCore.db.cs_Close(CS)
                    End If
                    If CreatedBy <> "" Then
                        CreatedCopy = CreatedCopy & " by " & CreatedBy
                    Else
                    End If
                    HeaderDescription = HeaderDescription & "Created:" & CreatedCopy
                    '
                    ModifiedCopy = ""
                    If editRecord.modifiedDate = Date.MinValue Then
                        ModifiedCopy = CreatedCopy
                    Else
                        ModifiedCopy = ModifiedCopy & " " & editRecord.modifiedDate
                        CreatedBy = "the system"
                        If editRecord.modifiedByMemberID <> 0 Then
                            CS = cpCore.db.cs_openCsSql_rev("default", "select Name,Active from ccMembers where id=" & editRecord.modifiedByMemberID)
                            'CS = cpCore.app.openCsSql_rev("default", "select Name,Active from ccmembers where id=" & EditRecord.ModifiedByMemberID)
                            If cpCore.db.cs_ok(CS) Then
                                Name = cpCore.db.cs_getText(CS, "name")
                                Active = cpCore.db.cs_getBoolean(CS, "active")
                                If Not Active And (Name <> "") Then
                                    CreatedBy = "Inactive user " & Name
                                ElseIf Not Active Then
                                    CreatedBy = "Inactive user #" & editRecord.modifiedByMemberID
                                ElseIf Name = "" Then
                                    CreatedBy = "Unnamed user #" & editRecord.modifiedByMemberID
                                Else
                                    CreatedBy = Name
                                End If
                            Else
                                CreatedBy = "deleted user #" & editRecord.modifiedByMemberID
                            End If
                            Call cpCore.db.cs_Close(CS)
                        End If
                        If CreatedBy <> "" Then
                            ModifiedCopy = ModifiedCopy & " by " & CreatedBy
                        Else
                        End If
                    End If
                    If AdminContentWorkflowAuthoring Then
                        If editRecord.IsInserted Then
                            HeaderDescription = HeaderDescription & "<BR >Last Published: not published"
                        Else
                            HeaderDescription = HeaderDescription & "<BR >Last Published:" & ModifiedCopy
                        End If
                    Else
                        HeaderDescription = HeaderDescription & "<BR >Last Modified:" & ModifiedCopy
                    End If
                    '
                    ' Add Edit Locking to right panel
                    '
                    If editRecord.EditLock Then
                        HeaderDescription = HeaderDescription & "<BR ><b>Record is locked by " & editRecord.EditLockMemberName & " until " & editRecord.EditLockExpires & "</b>"
                    End If
                    '
                    HeaderDescription = HeaderDescription & "</td></tr>"
                    '
                    If Not AdminContentWorkflowAuthoring Then
                        HeaderDescription = HeaderDescription & "<tr><td colspan=2>Authoring Mode: Immediate</td></tr>"
                    Else
                        HeaderDescription = HeaderDescription & "<tr><td style=""vertical-align:top;"">Authoring Mode: Workflow</td>"
                        If editRecord.EditLock Then
                            WFMessage = WFMessage & "<div>Locked: Currently being edited by " & editRecord.EditLockMemberName & "</div>"
                        End If
                        If editRecord.LockModifiedDate <> Date.MinValue Then
                            WFMessage = WFMessage & "<div>Modified: " & editRecord.LockModifiedDate & " by " & editRecord.LockModifiedName & " and has not been published</div>"
                        End If
                        If editRecord.SubmitLock Then
                            WFMessage = WFMessage & "<div>Submitted for Publishing: " & editRecord.SubmittedDate & " by " & editRecord.SubmittedName & "</div>"
                        End If
                        If editRecord.ApproveLock Then
                            WFMessage = WFMessage & "<div>Approved for Publishing: " & editRecord.SubmittedDate & " by " & editRecord.SubmittedName & "</div>"
                        End If
                        If WFMessage <> "" Then
                            HeaderDescription = HeaderDescription & "<td>" & WFMessage & "</td></tr>"
                        Else
                            HeaderDescription = HeaderDescription & "<td>&nbsp;</td></tr>"
                        End If
                    End If
                    '
                    HeaderDescription = HeaderDescription & "</table>"
                End If
                '
                ' ----- determine access details
                '
                Call cpCore.authContext.getContentAccessRights(cpCore, adminContent.Name, allowCMEdit, allowCMAdd, allowCMDelete)
                AllowAdd = adminContent.AllowAdd And allowCMAdd
                AllowDelete = adminContent.AllowDelete And allowCMDelete And (editRecord.id <> 0)
                allowSave = allowCMEdit
                '
                ' ----- custom fieldEditors
                '
                '
                '   Editor Preference
                '   any addon can be an editor for a fieldtype with a checkbox in the addon
                '   the editor in any field can be over-ridden by just a single member with a popup next to the editor
                '       that popup (fancybox) sets the hidden fieldEditorPreference to fieldid:addonid and submits the form
                '       the edit form does a refresh action after setting the members property "editorPreferencesForContent:99"
                '   if no editor preference, the default editor is used from a drop-down selection in fieldtypes
                '   if nothing in field types, Contensive handles it internally
                '
                Call Stream.Add(cr & "<input type=""hidden"" name=""fieldEditorPreference"" id=""fieldEditorPreference"" value="""">")
                '
                fieldEditorList = cpCore.getFieldTypeDefaultEditorAddonIdList()
                fieldTypeDefaultEditors = Split(fieldEditorList, ",")
                '
                ' load user's editor preferences to fieldEditorPreferences() - this is the editor this user has picked when there are >1
                '   fieldId:addonId,fieldId:addonId,etc
                '   with custom FancyBox form in edit window with button "set editor preference"
                '   this button causes a 'refresh' action, reloads fields with stream without save
                '
                fieldEditorPreferencesList = cpCore.userProperty.getText("editorPreferencesForContent:" & adminContent.Id, "")
                '
                ' add the addon editors assigned to each field
                ' !!!!! this should be added to metaData load
                '
                Dim Cnt As Integer
                SQL = "select" _
                    & " f.id,f.editorAddonID" _
                    & " from ccfields f" _
                    & " where" _
                    & " f.ContentID=" & adminContent.Id _
                    & " and f.editorAddonId is not null"
                dt = cpCore.db.executeSql(SQL)

                Cells = cpCore.db.convertDataTabletoArray(dt)
                Cnt = Cells.GetLength(1)
                'If CBool(Cells.GetLength(0)) Then
                '    Cnt = 0
                'Else
                '    Cnt = UBound(Cells, 2) + 1
                'End If
                For Ptr = 0 To Cnt - 1
                    fieldId = genericController.EncodeInteger(Cells(0, Ptr))
                    If fieldId > 0 Then
                        fieldEditorPreferencesList = fieldEditorPreferencesList & "," & fieldId & ":" & Cells(1, Ptr)
                    End If
                Next
                '
                ' load fieldEditorOptions - these are all the editors available for each field
                '
                fieldEditorOptionCnt = 0
                SQL = "select r.contentFieldTypeId,a.Id" _
                    & " from ccAddonContentFieldTypeRules r" _
                    & " left join ccaggregatefunctions a on a.id=r.addonid" _
                    & " where (r.active<>0)and(a.active<>0)and(a.id is not null) order by r.contentFieldTypeID"
                dt = cpCore.db.executeSql(SQL)
                Cells = cpCore.db.convertDataTabletoArray(dt)
                fieldEditorOptionCnt = UBound(Cells, 2) + 1
                For Ptr = 0 To fieldEditorOptionCnt - 1
                    fieldId = genericController.EncodeInteger(Cells(0, Ptr))
                    If (fieldId > 0) And (Not fieldEditorOptions.ContainsKey(fieldId.ToString)) Then
                        fieldEditorOptions.Add(fieldId.ToString, genericController.EncodeInteger(Cells(1, Ptr)))
                    End If
                Next
                '
                ' ----- determine contentType for editor
                '
                If genericController.vbLCase(adminContent.Name) = "email templates" Then
                    ContentType = csv_contentTypeEnum.contentTypeEmailTemplate
                ElseIf genericController.vbLCase(adminContent.ContentTableName) = "cctemplates" Then
                    ContentType = csv_contentTypeEnum.contentTypeWebTemplate
                ElseIf genericController.vbLCase(adminContent.ContentTableName) = "ccemail" Then
                    ContentType = csv_contentTypeEnum.contentTypeEmail
                Else
                    ContentType = csv_contentTypeEnum.contentTypeWeb
                End If
                '
                ' ----- editor strings needed - needs to be on-demand
                '
                editorAddonListJSON = cpCore.htmlDoc.main_GetEditorAddonListJSON(ContentType)
                styleList = cpCore.htmlDoc.main_GetStyleSheet2(ContentType, TemplateIDForStyles, emailIdForStyles)
                '
                ' ----- Create edit page
                '
                Select Case genericController.vbUCase(adminContent.ContentTableName)
                    Case genericController.vbUCase("ccMembers")
                        If Not (cpCore.authContext.isAuthenticatedAdmin(cpCore)) Then
                            '
                            ' Must be admin
                            '
                            Call Stream.Add(GetForm_Error(
                            "This edit form requires Member Administration access." _
                            , ""
                            ))
                        Else
                            EditSectionButtonBar = GetForm_Edit_ButtonBar(adminContent, editRecord, AllowDelete, allowSave, AllowAdd)
                            EditSectionButtonBar = genericController.vbReplace(EditSectionButtonBar, ButtonDelete, ButtonDeletePerson)
                            Call Stream.Add(EditSectionButtonBar)
                            Call Stream.Add(Adminui.GetTitleBar(GetForm_EditTitle(adminContent, editRecord), HeaderDescription))
                            Call Stream.Add(GetForm_Edit_Tabs(adminContent, editRecord, editRecord.Read_Only, False, False, ContentType, AllowajaxTabs, TemplateIDForStyles, fieldTypeDefaultEditors, fieldEditorPreferencesList, styleList, styleOptionList, emailIdForStyles, IsTemplateTable, editorAddonListJSON))
                            Call Stream.Add(GetForm_Edit_AddTab("Groups", GetForm_Edit_MemberGroups(adminContent, editRecord), allowAdminTabs))
                            'Call Stream.Add(GetForm_Edit_AddTab("Topics", GetForm_Edit_TopicRules, AllowAdminTabs))
                            'Call Stream.Add(GetForm_Edit_AddTab("Calendar", GetForm_Edit_CalendarEvents, AllowAdminTabs))
                            Call Stream.Add(GetForm_Edit_AddTab("Reports", GetForm_Edit_MemberReports(adminContent, editRecord), allowAdminTabs))
                            Call Stream.Add(GetForm_Edit_AddTab("Control&nbsp;Info", GetForm_Edit_Control(adminContent, editRecord), allowAdminTabs))
                            If allowAdminTabs Then
                                Call Stream.Add(cpCore.htmlDoc.menu_GetComboTabs())
                            End If
                            Call Stream.Add(EditSectionButtonBar)
                        End If
                    '
                    Case "CCPATHS"
                        If Not (cpCore.authContext.isAuthenticatedAdmin(cpCore)) Then
                            '
                            ' Must be admin
                            '
                            Call Stream.Add(GetForm_Error(
                            "This edit form requires Member Administration access." _
                            , "This edit form requires Member Administration access."
                            ))
                        Else
                            EditSectionButtonBar = GetForm_Edit_ButtonBar(adminContent, editRecord, AllowDelete, allowSave, AllowAdd)
                            EditSectionButtonBar = genericController.vbReplace(EditSectionButtonBar, ButtonDelete, ButtonDeleteRecord)
                            Call Stream.Add(EditSectionButtonBar)
                            Call Stream.Add(Adminui.GetTitleBar(GetForm_EditTitle(adminContent, editRecord), HeaderDescription))
                            Call Stream.Add(GetForm_Edit_Tabs(adminContent, editRecord, editRecord.Read_Only, False, False, ContentType, AllowajaxTabs, TemplateIDForStyles, fieldTypeDefaultEditors, fieldEditorPreferencesList, styleList, styleOptionList, emailIdForStyles, IsTemplateTable, editorAddonListJSON))
                            Call Stream.Add(GetForm_Edit_AddTab("Path Rules", GetForm_Edit_PathRules(adminContent, editRecord), allowAdminTabs))
                            'Call Stream.Add(GetForm_Edit_AddTab("Calendar", GetForm_Edit_CalendarEvents, AllowAdminTabs))
                            Call Stream.Add(GetForm_Edit_AddTab("Control&nbsp;Info", GetForm_Edit_Control(adminContent, editRecord), allowAdminTabs))
                            If allowAdminTabs Then
                                Call Stream.Add(cpCore.htmlDoc.menu_GetComboTabs())
                                'Call Stream.Add("<div class=""ccPanelBackground"">" & cpCore.main_GetComboTabs() & "</div>")
                            End If
                            Call Stream.Add(EditSectionButtonBar)
                        End If
                    Case "CCEMAIL"
                        '
                        ' ----- Email table
                        '
                        SystemEmailCID = cpCore.metaData.getContentId("System Email")
                        ConditionalEmailCID = cpCore.metaData.getContentId("Conditional Email")
                        LastSendTestDate = Date.MinValue
                        If True Then ' 3.4.201" Then
                            AllowEmailSendWithoutTest = (cpCore.siteProperties.getBoolean("AllowEmailSendWithoutTest", False))
                            If editRecord.fieldsLc.ContainsKey("lastsendtestdate") Then
                                LastSendTestDate = genericController.EncodeDate(editRecord.fieldsLc("lastsendtestdate").value)
                            End If
                        End If
                        If Not (cpCore.authContext.isAuthenticatedAdmin(cpCore)) Then
                            '
                            ' Must be admin
                            '
                            Call Stream.Add(GetForm_Error(
                            "This edit form requires Member Administration access." _
                            , "This edit form requires Member Administration access."
                            ))
                        ElseIf cpCore.IsWithinContent(editRecord.contentControlId, SystemEmailCID) Then
                            '
                            ' System Email
                            '
                            EmailSubmitted = False
                            If editRecord.id <> 0 Then
                                If editRecord.fieldsLc.ContainsKey("testmemberid") Then
                                    editRecord.fieldsLc.Item("testmemberid").value = cpCore.authContext.user.ID
                                End If
                            End If
                            EditSectionButtonBar = ""
                            If MenuDepth > 0 Then
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonClose, , , "window.close();")
                            Else
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonCancel, , , "Return processSubmit(this)")
                            End If
                            If (AllowDelete) And (cpCore.authContext.isAuthenticatedDeveloper(cpCore)) Then
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonDeleteEmail, , , "If(!DeleteCheck())Return False;")
                            End If
                            If (Not EmailSubmitted) And (Not EmailSent) Then
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonSave, , , "Return processSubmit(this)")
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonOK, , , "Return processSubmit(this)")
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonSendTest, , , "Return processSubmit(this)")
                            ElseIf AllowAdd Then
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonCreateDuplicate, , , "Return processSubmit(this)")
                            End If
                            EditSectionButtonBar = cpCore.main_GetPanel(EditSectionButtonBar, "ccPanel", "ccPanelHilite", "ccPanelShadow", "100%", 4)
                            '
                            Call Stream.Add(EditSectionButtonBar)
                            Call Stream.Add(Adminui.GetTitleBar(GetForm_EditTitle(adminContent, editRecord), HeaderDescription))
                            Call Stream.Add(GetForm_Edit_Tabs(adminContent, editRecord, editRecord.Read_Only, False, False, ContentType, AllowajaxTabs, TemplateIDForStyles, fieldTypeDefaultEditors, fieldEditorPreferencesList, styleList, styleOptionList, emailIdForStyles, IsTemplateTable, editorAddonListJSON))
                            Call Stream.Add(GetForm_Edit_AddTab("Send&nbsp;To&nbsp;Groups", GetForm_Edit_EmailRules(adminContent, editRecord, editRecord.Read_Only And (Not cpCore.authContext.isAuthenticatedDeveloper(cpCore))), allowAdminTabs))
                            Call Stream.Add(GetForm_Edit_AddTab("Send&nbsp;To&nbsp;Topics", GetForm_Edit_EmailTopics(adminContent, editRecord, editRecord.Read_Only And (Not cpCore.authContext.isAuthenticatedDeveloper(cpCore))), allowAdminTabs))
                            Call Stream.Add(GetForm_Edit_AddTab("Bounce&nbsp;Control", GetForm_Edit_EmailBounceStatus(), allowAdminTabs))
                            Call Stream.Add(GetForm_Edit_AddTab("Control&nbsp;Info", GetForm_Edit_Control(adminContent, editRecord), allowAdminTabs))
                            If allowAdminTabs Then
                                Call Stream.Add(cpCore.htmlDoc.menu_GetComboTabs())
                                'Call Stream.Add("<div Class=""ccPanelBackground"">" & cpCore.main_GetComboTabs() & "</div>")
                            End If
                            Call Stream.Add(EditSectionButtonBar)
                        ElseIf cpCore.IsWithinContent(editRecord.contentControlId, ConditionalEmailCID) Then
                            '
                            ' Conditional Email
                            '
                            EmailSubmitted = False
                            If editRecord.id <> 0 Then
                                If editRecord.fieldsLc.ContainsKey("testmemberid") Then
                                    editRecord.fieldsLc.Item("testmemberid").value = cpCore.authContext.user.ID
                                End If
                                If editRecord.fieldsLc.ContainsKey("submitted") Then
                                    EmailSubmitted = genericController.EncodeBoolean(editRecord.fieldsLc.Item("submitted").value)
                                End If
                            End If
                            EditSectionButtonBar = ""
                            If MenuDepth > 0 Then
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonClose, , , "window.close();")
                            Else
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonCancel, , , "Return processSubmit(this)")
                            End If
                            If AllowDelete Then
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonDeleteEmail, , , "If(!DeleteCheck())Return False;")
                            End If
                            If (Not EmailSubmitted) Then
                                '
                                ' Not Submitted
                                '
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonSave, , , "Return processSubmit(this)")
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonOK, , , "Return processSubmit(this)")
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton2(ButtonActivate, , , "Return processSubmit(this)", (LastSendTestDate = Date.MinValue) And (Not AllowEmailSendWithoutTest))
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonSendTest, , , "Return processSubmit(this)")
                            Else
                                '
                                ' Submitted
                                '
                                If AllowAdd Then
                                    EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonCreateDuplicate, , , "Return processSubmit(this)")
                                End If
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonDeactivate, , , "Return processSubmit(this)")
                            End If
                            EditSectionButtonBar = cpCore.main_GetPanel(EditSectionButtonBar, "ccPanel", "ccPanelHilite", "ccPanelShadow", "100%", 4)
                            '
                            Call Stream.Add(EditSectionButtonBar)
                            Call Stream.Add(Adminui.GetTitleBar(GetForm_EditTitle(adminContent, editRecord), HeaderDescription))
                            Call Stream.Add(GetForm_Edit_Tabs(adminContent, editRecord, editRecord.Read_Only Or EmailSubmitted, False, False, ContentType, AllowajaxTabs, TemplateIDForStyles, fieldTypeDefaultEditors, fieldEditorPreferencesList, styleList, styleOptionList, emailIdForStyles, IsTemplateTable, editorAddonListJSON))
                            Call Stream.Add(GetForm_Edit_AddTab("Condition&nbsp;Groups", GetForm_Edit_EmailRules(adminContent, editRecord, editRecord.Read_Only Or EmailSubmitted), allowAdminTabs))
                            'Call Stream.Add(GetForm_Edit_AddTab("Send&nbsp;To&nbsp;Topics", GetForm_Edit_EmailTopics(editrecord.read_only Or EmailSubmitted), AllowAdminTabs))
                            Call Stream.Add(GetForm_Edit_AddTab("Bounce&nbsp;Control", GetForm_Edit_EmailBounceStatus(), allowAdminTabs))
                            Call Stream.Add(GetForm_Edit_AddTab("Control&nbsp;Info", GetForm_Edit_Control(adminContent, editRecord), allowAdminTabs))
                            If allowAdminTabs Then
                                Call Stream.Add(cpCore.htmlDoc.menu_GetComboTabs())
                                'Call Stream.Add("<div Class=""ccPanelBackground"">" & cpCore.main_GetComboTabs() & "</div>")
                            End If
                            Call Stream.Add(EditSectionButtonBar)
                        Else
                            '
                            ' Group Email
                            '
                            EmailSubmitted = False
                            EmailSent = False
                            If editRecord.id <> 0 Then
                                If editRecord.fieldsLc.ContainsKey("testmemberid") Then
                                    editRecord.fieldsLc.Item("testmemberid").value = cpCore.authContext.user.ID
                                End If
                                If editRecord.fieldsLc.ContainsKey("submitted") Then
                                    EmailSubmitted = genericController.EncodeBoolean(editRecord.fieldsLc.Item("submitted").value)
                                End If
                                If editRecord.fieldsLc.ContainsKey("sent") Then
                                    EmailSent = genericController.EncodeBoolean(editRecord.fieldsLc.Item("sent").value)
                                End If
                            End If
                            EditSectionButtonBar = ""
                            If MenuDepth > 0 Then
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonClose, , , "window.close();")
                            Else
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonCancel, , , "Return processSubmit(this)")
                            End If
                            If (editRecord.id <> 0) Then
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonDeleteEmail, , , "If(!DeleteCheck())Return False;")
                            End If
                            If (Not EmailSubmitted) And (Not EmailSent) Then
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonSave, , , "Return processSubmit(this)")
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonOK, , , "Return processSubmit(this)")
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton2(ButtonSend, , , "Return processSubmit(this)", (LastSendTestDate = Date.MinValue) And (Not AllowEmailSendWithoutTest))
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonSendTest, , , "Return processSubmit(this)")
                            Else
                                '
                                ' Submitted
                                '
                                EditSectionButtonBar = EditSectionButtonBar & cpCore.htmlDoc.html_GetFormButton(ButtonCreateDuplicate, , , "Return processSubmit(this)")
                            End If
                            EditSectionButtonBar = cpCore.main_GetPanel(EditSectionButtonBar, "ccPanel", "ccPanelHilite", "ccPanelShadow", "100%", 4)
                            '
                            Call Stream.Add(EditSectionButtonBar)
                            Call Stream.Add(Adminui.GetTitleBar(GetForm_EditTitle(adminContent, editRecord), HeaderDescription))
                            Call Stream.Add(GetForm_Edit_Tabs(adminContent, editRecord, editRecord.Read_Only Or EmailSubmitted Or EmailSent, False, False, ContentType, AllowajaxTabs, TemplateIDForStyles, fieldTypeDefaultEditors, fieldEditorPreferencesList, styleList, styleOptionList, emailIdForStyles, IsTemplateTable, editorAddonListJSON))
                            Call Stream.Add(GetForm_Edit_AddTab("Send&nbsp;To&nbsp;Groups", GetForm_Edit_EmailRules(adminContent, editRecord, editRecord.Read_Only Or EmailSubmitted Or EmailSent), allowAdminTabs))
                            Call Stream.Add(GetForm_Edit_AddTab("Send&nbsp;To&nbsp;Topics", GetForm_Edit_EmailTopics(adminContent, editRecord, editRecord.Read_Only Or EmailSubmitted Or EmailSent), allowAdminTabs))
                            Call Stream.Add(GetForm_Edit_AddTab("Bounce&nbsp;Control", GetForm_Edit_EmailBounceStatus(), allowAdminTabs))
                            Call Stream.Add(GetForm_Edit_AddTab("Control&nbsp;Info", GetForm_Edit_Control(adminContent, editRecord), allowAdminTabs))
                            If allowAdminTabs Then
                                Call Stream.Add(cpCore.htmlDoc.menu_GetComboTabs())
                                'Call Stream.Add("<div Class=""ccPanelBackground"">" & cpCore.main_GetComboTabs() & "</div>")
                            End If
                            Call Stream.Add(EditSectionButtonBar)
                        End If
                    Case "CCCONTENT"
                        If Not (cpCore.authContext.isAuthenticatedAdmin(cpCore)) Then
                            '
                            ' Must be admin
                            '
                            Call Stream.Add(GetForm_Error(
                            "This edit form requires Member Administration access." _
                            , "This edit form requires Member Administration access."
                            ))
                        Else
                            EditSectionButtonBar = GetForm_Edit_ButtonBar(adminContent, editRecord, AllowDelete, allowSave, AllowAdd)
                            EditSectionButtonBar = genericController.vbReplace(EditSectionButtonBar, ButtonDelete, ButtonDeleteRecord)
                            Call Stream.Add(EditSectionButtonBar)
                            Call Stream.Add(Adminui.GetTitleBar(GetForm_EditTitle(adminContent, editRecord), HeaderDescription))
                            Call Stream.Add(GetForm_Edit_Tabs(adminContent, editRecord, editRecord.Read_Only, False, False, ContentType, AllowajaxTabs, TemplateIDForStyles, fieldTypeDefaultEditors, fieldEditorPreferencesList, styleList, styleOptionList, emailIdForStyles, IsTemplateTable, editorAddonListJSON))
                            Call Stream.Add(GetForm_Edit_AddTab("Authoring Permissions", GetForm_Edit_GroupRules(adminContent, editRecord), allowAdminTabs))
                            Call Stream.Add(GetForm_Edit_AddTab("Control&nbsp;Info", GetForm_Edit_Control(adminContent, editRecord), allowAdminTabs))
                            If allowAdminTabs Then
                                Call Stream.Add(cpCore.htmlDoc.menu_GetComboTabs())
                                'Call Stream.Add("<div class=""ccPanelBackground"">" & cpCore.main_GetComboTabs() & "</div>")
                            End If
                            Call Stream.Add(EditSectionButtonBar)
                        End If
                    '
                    Case "CCPAGECONTENT"
                        '
                        ' Page Content
                        '
                        TableID = cpCore.main_GetRecordID("Tables", "ccPageContent")
                        EditSectionButtonBar = GetForm_Edit_ButtonBar(adminContent, editRecord, (Not IsLandingPage) And (Not IsLandingPageParent) And AllowDelete, allowSave, AllowAdd, True)
                        EditSectionButtonBar = genericController.vbReplace(EditSectionButtonBar, ButtonDelete, ButtonDeletePage)
                        Call Stream.Add(EditSectionButtonBar)
                        Call Stream.Add(Adminui.GetTitleBar(GetForm_EditTitle(adminContent, editRecord), HeaderDescription))
                        Call Stream.Add(GetForm_Edit_Tabs(adminContent, editRecord, editRecord.Read_Only, IsLandingPage Or IsLandingPageParent, IsRootPage, ContentType, AllowajaxTabs, TemplateIDForStyles, fieldTypeDefaultEditors, fieldEditorPreferencesList, styleList, styleOptionList, emailIdForStyles, IsTemplateTable, editorAddonListJSON))
                        Call Stream.Add(GetForm_Edit_AddTab("Meta Content", GetForm_Edit_MetaContent(adminContent, editRecord, editRecord.Read_Only), allowAdminTabs))
                        Call Stream.Add(GetForm_Edit_AddTab("Link Aliases", GetForm_Edit_LinkAliases(adminContent, editRecord, editRecord.Read_Only), allowAdminTabs))
                        'Call Stream.Add(GetForm_Edit_AddTab("Topics", GetForm_Edit_TopicRules, AllowAdminTabs))
                        'Call Stream.Add(GetForm_Edit_AddTab("RSS/Podcasts", GetForm_Edit_RSSFeeds(EditRecord.ContentName, EditRecord.ContentID, EditRecord.ID, cpCore.main_GetPageLink(EditRecord.ID)), AllowAdminTabs))
                        Call Stream.Add(GetForm_Edit_AddTab("Content Watch", GetForm_Edit_ContentTracking(adminContent, editRecord), allowAdminTabs))
                        'Call Stream.Add(GetForm_Edit_AddTab("Calendar", GetForm_Edit_CalendarEvents, AllowAdminTabs))
                        Call Stream.Add(GetForm_Edit_AddTab("Control Info", GetForm_Edit_Control(adminContent, editRecord), allowAdminTabs))
                        If allowAdminTabs Then
                            Call Stream.Add(cpCore.htmlDoc.menu_GetComboTabs())
                        End If
                        Call Stream.Add(EditSectionButtonBar)
                    'Case "CCSECTIONS"
                    '    '
                    '    ' Site Sections
                    '    '
                    '    EditSectionButtonBar = GetForm_Edit_ButtonBar(adminContent, editRecord, (Not IsLandingSection) And AllowDelete, allowSave, AllowAdd)
                    '    EditSectionButtonBar = genericController.vbReplace(EditSectionButtonBar, ButtonDelete, ButtonDeleteRecord)
                    '    Call Stream.Add(EditSectionButtonBar)
                    '    Call Stream.Add(Adminui.GetTitleBar(GetForm_EditTitle(adminContent, editRecord), HeaderDescription))
                    '    Call Stream.Add(GetForm_Edit_Tabs(adminContent, editRecord, editRecord.Read_Only, IsLandingSection, False, ContentType, AllowajaxTabs, TemplateIDForStyles, fieldTypeDefaultEditors, fieldEditorPreferencesList, styleList, styleOptionList, emailIdForStyles, IsTemplateTable, editorAddonListJSON))
                    '    Call Stream.Add(GetForm_Edit_AddTab("Select Menus", GetForm_Edit_SectionDynamicMenuRules(adminContent, editRecord), allowAdminTabs))
                    '    Call Stream.Add(GetForm_Edit_AddTab("Section Blocking", GetForm_Edit_SectionBlockRules(adminContent, editRecord), allowAdminTabs))
                    '    Call Stream.Add(GetForm_Edit_AddTab("Control Info", GetForm_Edit_Control(adminContent, editRecord), allowAdminTabs))
                    '    If allowAdminTabs Then
                    '        Call Stream.Add(cpCore.htmlDoc.menu_GetComboTabs())
                    '        'Call Stream.Add("<div class=""ccPanelBackground"">" & cpCore.main_GetComboTabs() & "</div>")
                    '    End If
                    '    Call Stream.Add(EditSectionButtonBar)
                    'Case "CCDYNAMICMENUS"
                    '    '
                    '    ' Edit Dynamic Sections
                    '    '
                    '    EditSectionButtonBar = GetForm_Edit_ButtonBar(adminContent, editRecord, AllowDelete, allowSave, AllowAdd)
                    '    EditSectionButtonBar = genericController.vbReplace(EditSectionButtonBar, ButtonDelete, ButtonDeleteRecord)
                    '    Call Stream.Add(EditSectionButtonBar)
                    '    Call Stream.Add(Adminui.GetTitleBar(GetForm_EditTitle(adminContent, editRecord), HeaderDescription))
                    '    Call Stream.Add(GetForm_Edit_Tabs(adminContent, editRecord, editRecord.Read_Only, False, False, ContentType, AllowajaxTabs, TemplateIDForStyles, fieldTypeDefaultEditors, fieldEditorPreferencesList, styleList, styleOptionList, emailIdForStyles, IsTemplateTable, editorAddonListJSON))
                    '    Call Stream.Add(GetForm_Edit_AddTab("Select Sections", GetForm_Edit_DynamicMenuSectionRules(adminContent, editRecord), allowAdminTabs))
                    '    Call Stream.Add(GetForm_Edit_AddTab("Control Info", GetForm_Edit_Control(adminContent, editRecord), allowAdminTabs))
                    '    If allowAdminTabs Then
                    '        Call Stream.Add(cpCore.htmlDoc.menu_GetComboTabs())
                    '        'Call Stream.Add("<div class=""ccPanelBackground"">" & cpCore.main_GetComboTabs() & "</div>")
                    '    End If
                    '    Call Stream.Add(EditSectionButtonBar)
                    Case "CCLIBRARYFOLDERS"
                        '
                        ' Library Folders
                        '
                        EditSectionButtonBar = GetForm_Edit_ButtonBar(adminContent, editRecord, AllowDelete, allowSave, AllowAdd)
                        EditSectionButtonBar = genericController.vbReplace(EditSectionButtonBar, ButtonDelete, ButtonDeleteRecord)
                        Call Stream.Add(EditSectionButtonBar)
                        Call Stream.Add(Adminui.GetTitleBar(GetForm_EditTitle(adminContent, editRecord), HeaderDescription))
                        Call Stream.Add(GetForm_Edit_Tabs(adminContent, editRecord, editRecord.Read_Only, False, False, ContentType, AllowajaxTabs, TemplateIDForStyles, fieldTypeDefaultEditors, fieldEditorPreferencesList, styleList, styleOptionList, emailIdForStyles, IsTemplateTable, editorAddonListJSON))
                        Call Stream.Add(GetForm_Edit_AddTab("Authoring Access", GetForm_Edit_LibraryFolderRules(adminContent, editRecord), allowAdminTabs))
                        Call Stream.Add(GetForm_Edit_AddTab("Control Info", GetForm_Edit_Control(adminContent, editRecord), allowAdminTabs))
                        If allowAdminTabs Then
                            Call Stream.Add(cpCore.htmlDoc.menu_GetComboTabs())
                        End If
                        Call Stream.Add(EditSectionButtonBar)
                    Case genericController.vbUCase("ccGroups")
                        'Case "CCGROUPS"
                        '
                        ' Groups
                        '
                        EditSectionButtonBar = GetForm_Edit_ButtonBar(adminContent, editRecord, AllowDelete, allowSave, AllowAdd)
                        EditSectionButtonBar = genericController.vbReplace(EditSectionButtonBar, ButtonDelete, ButtonDeleteRecord)
                        Call Stream.Add(EditSectionButtonBar)
                        Call Stream.Add(Adminui.GetTitleBar(GetForm_EditTitle(adminContent, editRecord), HeaderDescription))
                        Call Stream.Add(GetForm_Edit_Tabs(adminContent, editRecord, editRecord.Read_Only, False, False, ContentType, AllowajaxTabs, TemplateIDForStyles, fieldTypeDefaultEditors, fieldEditorPreferencesList, styleList, styleOptionList, emailIdForStyles, IsTemplateTable, editorAddonListJSON))
                        Call Stream.Add(GetForm_Edit_AddTab("Authoring Permissions", GetForm_Edit_ContentGroupRules(adminContent, editRecord), allowAdminTabs))
                        Call Stream.Add(GetForm_Edit_AddTab("Meta Content", GetForm_Edit_MetaContent(adminContent, editRecord, editRecord.Read_Only), allowAdminTabs))
                        'Call Stream.Add(GetForm_Edit_AddTab("Topics", GetForm_Edit_TopicRules, AllowAdminTabs))
                        Call Stream.Add(GetForm_Edit_AddTab("Content Watch", GetForm_Edit_ContentTracking(adminContent, editRecord), allowAdminTabs))
                        'Call Stream.Add(GetForm_Edit_AddTab("Calendar", GetForm_Edit_CalendarEvents, AllowAdminTabs))
                        Call Stream.Add(GetForm_Edit_AddTab("Control Info", GetForm_Edit_Control(adminContent, editRecord), allowAdminTabs))
                        If allowAdminTabs Then
                            Call Stream.Add(cpCore.htmlDoc.menu_GetComboTabs())
                        End If
                        Call Stream.Add(EditSectionButtonBar)
                    '
                    ' This is the beginnings of a good idea. use a selector string to create the value input. The problem is
                    ' both the selector and value appear on the same page. if you screw up the selector, you can not save it
                    ' again without also saving the 'bad' value it creates.
                    '
                    ' For now, skip this and put the higher-level interface in control pages (an add-on type).
                    '
                    '        Case "CCSETUP"
                    '            '
                    '            '   Site Properties
                    '            '
                    '            EditSectionButtonBar = GetForm_Edit_ButtonBar(adminContent, editRecord,)
                    '            EditSectionButtonBar = genericController.vbReplace(EditSectionButtonBar, ButtonDelete, ButtonDeleteRecord)
                    '            Call Stream.Add(EditSectionButtonBar)
                    '            Call Stream.Add(Adminui.GetTitleBar( GetForm_EditTitle(adminContent, editRecord), HeaderDescription))
                    '            Call Stream.Add(GetForm_Edit_UserFieldTabs(adminContent, editRecord,FormID, editrecord.read_only, False, False, ContentType, AllowAjaxTabs))
                    '            Call Stream.Add(GetForm_Edit_AddTab("Site Property", GetForm_Edit_SiteProperties(FormID), AllowAdminTabs))
                    '            Call Stream.Add(GetForm_Edit_AddTab("Control Info", GetForm_Edit_Control(adminContent, editrecord), AllowAdminTabs))
                    '            If AllowAdminTabs Then
                    '                Call Stream.Add(cpCore.main_GetComboTabs())
                    '            End If
                    '            Call Stream.Add(EditSectionButtonBar)
                    Case "CCLAYOUTS"
                        '
                        ' LAYOUTS
                        '
                        EditSectionButtonBar = GetForm_Edit_ButtonBar(adminContent, editRecord, AllowDelete, allowSave, AllowAdd)
                        EditSectionButtonBar = genericController.vbReplace(EditSectionButtonBar, ButtonDelete, ButtonDeleteRecord)
                        Call Stream.Add(EditSectionButtonBar)
                        Call Stream.Add(Adminui.GetTitleBar(GetForm_EditTitle(adminContent, editRecord), HeaderDescription))
                        Call Stream.Add(GetForm_Edit_Tabs(adminContent, editRecord, editRecord.Read_Only, False, False, ContentType, AllowajaxTabs, TemplateIDForStyles, fieldTypeDefaultEditors, fieldEditorPreferencesList, styleList, styleOptionList, emailIdForStyles, IsTemplateTable, editorAddonListJSON))
                        Call Stream.Add(GetForm_Edit_AddTab("Reports", GetForm_Edit_LayoutReports(adminContent, editRecord), allowAdminTabs))
                        Call Stream.Add(GetForm_Edit_AddTab("Control Info", GetForm_Edit_Control(adminContent, editRecord), allowAdminTabs))
                        If allowAdminTabs Then
                            Call Stream.Add(cpCore.htmlDoc.menu_GetComboTabs())
                        End If
                        Call Stream.Add(EditSectionButtonBar)
                    Case Else
                        '
                        ' All other tables (User definined)
                        '
                        EditSectionButtonBar = GetForm_Edit_ButtonBar(adminContent, editRecord, AllowDelete, allowSave, AllowAdd)
                        EditSectionButtonBar = genericController.vbReplace(EditSectionButtonBar, ButtonDelete, ButtonDeleteRecord)
                        Call Stream.Add(EditSectionButtonBar)
                        Call Stream.Add(Adminui.GetTitleBar(GetForm_EditTitle(adminContent, editRecord), HeaderDescription))
                        Call Stream.Add(GetForm_Edit_Tabs(adminContent, editRecord, editRecord.Read_Only, False, False, ContentType, AllowajaxTabs, TemplateIDForStyles, fieldTypeDefaultEditors, fieldEditorPreferencesList, styleList, styleOptionList, emailIdForStyles, IsTemplateTable, editorAddonListJSON))
                        Call Stream.Add(GetForm_Edit_AddTab("Meta Content", GetForm_Edit_MetaContent(adminContent, editRecord, editRecord.Read_Only), allowAdminTabs))
                        Call Stream.Add(GetForm_Edit_AddTab("Content Watch", GetForm_Edit_ContentTracking(adminContent, editRecord), allowAdminTabs))
                        Call Stream.Add(GetForm_Edit_AddTab("Control Info", GetForm_Edit_Control(adminContent, editRecord), allowAdminTabs))
                        If allowAdminTabs Then
                            Call Stream.Add(cpCore.htmlDoc.menu_GetComboTabs())
                        End If
                        Call Stream.Add(EditSectionButtonBar)
                End Select
                Call Stream.Add("</form>")
                returnHtml = Stream.Text
                If editRecord.id = 0 Then
                    Call cpCore.htmlDoc.main_AddPagetitle("Add " & adminContent.Name)
                ElseIf editRecord.nameLc = "" Then
                    Call cpCore.htmlDoc.main_AddPagetitle("Edit #" & editRecord.id & " in " & editRecord.contentControlId_Name)
                Else
                    Call cpCore.htmlDoc.main_AddPagetitle("Edit " & editRecord.nameLc & " in " & editRecord.contentControlId_Name)
                End If
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return returnHtml
        End Function
        ''
        ''========================================================================
        '' Print the DHTMLEdit form
        ''========================================================================
        ''
        'Private Function GetForm_EditHTML() As String
        '    On Error GoTo ErrorTrap: 'Dim th as integer: th = profileLogAdminMethodEnter("AdminClass.GetForm_EditHTML")
        '    '
        '    Dim WhereCount as integer
        '    Dim FastString As fastStringClass
        '    '
        '    FastString = New FastStringClass
        '    FastString.Add( cpCore.main_GetFormInputHidden(RequestNameAdminDepth, MenuDepth))
        '    FastString.Add( cpCore.main_GetFormInputHidden(RequestNameTitleExtension, TitleExtension))
        '    If WherePairCount > 0 Then
        '        For WhereCount = 0 To WherePairCount - 1
        '            FastString.Add( cpCore.main_GetFormInputHidden("wl" & WhereCount, WherePair(0, WhereCount)))
        '            FastString.Add( cpCore.main_GetFormInputHidden("wr" & WhereCount, WherePair(1, WhereCount)))
        '            Next
        '        End If
        '    GetForm_EditHTML = cpCore.main_GetActiveEditor(AdminContent.Name, EditRecord.ID, InputFieldName, FastString.Text)
        '    FastString = Nothing
        '    '
        '    '''Dim th as integer: Exit Function
        '    '
        '    ' ----- Error Trap
        '    '
        'ErrorTrap:
        '    FastString = Nothing
        '    Call HandleClassTrapErrorBubble("PrintDHTMLEditForm")
        '    '
        'End Function
        '
        '========================================================================
        ' Print the DHTMLEdit form
        '========================================================================
        '
        Private Function GetForm_StaticPublishControl() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "GetForm_StaticPublishControl")
            '
            Dim WhereCount As Integer
            Dim Content As New stringBuilderLegacyController
            Dim EDGPublishNow As Boolean
            Dim Activity As String
            Dim TargetDomain As String
            Dim EDGCreateSnapShot As Boolean
            Dim EDGPublishToProduction As Boolean
            Dim CSPointer As Integer
            Dim Copy As String
            Dim StagingServer As String
            Dim PagesFound As Integer
            Dim PagesComplete As Integer
            Dim SQL As String
            Dim Button As String
            Dim EDGAuthUsername As String
            Dim EDGAuthPassword As String
            Dim QueryString As String
            Dim Adminui As New adminUIController(cpCore)
            Dim Description As String
            Dim ButtonList As String = ""
            '
            Button = cpCore.docProperties.getText(RequestNameButton)
            If Button = ButtonCancel Then
                '
                '
                '
                Call cpCore.webServer.redirect(cpCore.siteProperties.adminURL, "StaticPublishControl, Cancel Button Pressed", False)
            ElseIf Not cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                '
                '
                '
                ButtonList = ButtonCancel
                Content.Add(Adminui.GetFormBodyAdminOnly())
            Else
                Content.Add(Adminui.EditTableOpen)
                '
                ' Set defaults
                '
                EDGCreateSnapShot = (cpCore.siteProperties.getBoolean("EDGCreateSnapShot", True))
                EDGPublishToProduction = (cpCore.siteProperties.getBoolean("EDGPublishToProduction", True))
                EDGPublishNow = (cpCore.siteProperties.getBoolean("EDGPublishNow"))
                EDGAuthUsername = cpCore.siteProperties.getText("EDGAuthUsername", "")
                EDGAuthPassword = cpCore.siteProperties.getText("EDGAuthPassword", "")
                '
                ' Process Requests
                '
                Select Case Button
                    Case ButtonBegin
                        '
                        ' Save form values
                        '
                        EDGAuthUsername = cpCore.docProperties.getText("EDGAuthUsername")
                        Call cpCore.siteProperties.setProperty("EDGAuthUsername", EDGAuthUsername)
                        '
                        EDGAuthPassword = cpCore.docProperties.getText("EDGAuthPassword")
                        Call cpCore.siteProperties.setProperty("EDGAuthPassword", EDGAuthPassword)
                        '
                        EDGCreateSnapShot = cpCore.docProperties.getBoolean("EDGCreateSnapShot")
                        Call cpCore.siteProperties.setProperty("EDGCreateSnapShot", genericController.encodeText(EDGCreateSnapShot))
                        '
                        EDGPublishToProduction = cpCore.docProperties.getBoolean("EDGPublishToProduction")
                        Call cpCore.siteProperties.setProperty("EDGPublishToProduction", genericController.encodeText(EDGPublishToProduction))
                        '
                        ' Begin Publish
                        '
                        EDGPublishNow = (EDGCreateSnapShot Or EDGPublishToProduction)
                        Call cpCore.siteProperties.setProperty("EDGPublishNow", genericController.encodeText(EDGPublishNow))
                    Case ButtonAbort
                        '
                        ' Abort Publish
                        '
                        EDGPublishNow = False
                        Call cpCore.siteProperties.setProperty("EDGPublishNow", genericController.encodeText(EDGPublishNow))
                    Case ButtonRefresh
                        '
                        ' Refresh (no action)
                        '
                End Select
                '
                ' ----- Status
                '
                If EDGPublishNow Then
                    Copy = "Started"
                Else
                    Copy = "Stopped"
                End If
                Call Content.Add(Adminui.GetEditRow(Copy, "Status", "", False, False, ""))
                '
                ' ----- activity
                '
                Copy = genericController.encodeText(cpCore.siteProperties.getText("EDGPublishStatus", "Waiting"))
                Call Content.Add(Adminui.GetEditRow(Copy, "Activity", "", False, False, ""))
                '
                ' ----- Pages Found
                '
                Copy = "n/a"
                SQL = "SELECT Count(ccEDGPublishDocs.ID) AS PagesFound FROM ccEDGPublishDocs;"
                CSPointer = cpCore.db.cs_openCsSql_rev("Default", SQL)
                If cpCore.db.cs_ok(CSPointer) Then
                    Copy = genericController.encodeText(cpCore.db.cs_getInteger(CSPointer, "PagesFound"))
                End If
                Call cpCore.db.cs_Close(CSPointer)
                Call Content.Add(Adminui.GetEditRow(Copy, "Links Found", "", False, False, ""))
                '
                ' ----- Pages Complete
                '
                Copy = "n/a"
                SQL = "SELECT Count(ccEDGPublishDocs.ID) AS PagesFound FROM ccEDGPublishDocs where (UpToDate=1);"
                CSPointer = cpCore.db.cs_openCsSql_rev("Default", SQL)
                If cpCore.db.cs_ok(CSPointer) Then
                    Copy = genericController.encodeText(cpCore.db.cs_getInteger(CSPointer, "PagesFound"))
                End If
                Call cpCore.db.cs_Close(CSPointer)
                Call Content.Add(Adminui.GetEditRow(Copy, "Pages Complete", "", False, False, ""))
                '
                ' ----- Bad Links
                '
                Copy = "n/a"
                QueryString = genericController.ModifyQueryString(cpCore.htmlDoc.refreshQueryString, RequestNameAdminForm, AdminFormReports, True)
                QueryString = genericController.ModifyQueryString(QueryString, RequestNameReportForm, ReportFormEDGDocErrors, True)
                SQL = "SELECT Count(ccEDGPublishDocs.ID) AS PagesFound FROM ccEDGPublishDocs where (UpToDate=1) And (LinkAlias Is Not null) And ((HTTPResponse Is null) Or ((Not (HTTPResponse Like '% 200 %'))and (not (HTTPResponse like '% 302 %'))));"
                CSPointer = cpCore.db.cs_openCsSql_rev("Default", SQL)
                If cpCore.db.cs_ok(CSPointer) Then
                    Copy = genericController.encodeText(cpCore.db.cs_getInteger(CSPointer, "PagesFound"))
                End If
                Call cpCore.db.cs_Close(CSPointer)
                Call Content.Add(Adminui.GetEditRow("<a href=""" & cpCore.htmlDoc.html_EncodeHTML(cpCore.serverConfig.appConfig.adminRoute & "?" & QueryString) & """ target=""_blank"">" & SpanClassAdminNormal & Copy & "</a>", "Bad Links", "", False, False, ""))
                '
                ' ----- Options
                '

                'Content.Add( "<tr><td align=""right"">" & SpanClassAdminSmall & "Options</span></td>")
                If EDGPublishNow Then
                    '
                    ' Publishing
                    '
                    Call Content.Add(Adminui.GetEditRow(cpCore.main_GetYesNo(EDGCreateSnapShot), "Create Staging Snap-Shot", "", False, False, ""))
                    Call Content.Add(Adminui.GetEditRow(cpCore.main_GetYesNo(EDGPublishToProduction), "Publish Snap-Shot to Production", "", False, False, ""))
                Else
                    '
                    ' Ready
                    '
                    Call Content.Add(Adminui.GetEditRow(cpCore.htmlDoc.html_GetFormInputCheckBox2("EDGCreateSnapShot", EDGCreateSnapShot), "Create Staging Snap-Shot", "", False, False, ""))
                    Call Content.Add(Adminui.GetEditRow(cpCore.htmlDoc.html_GetFormInputCheckBox2("EDGPublishToProduction", EDGPublishToProduction), "Publish Snap-Shot to Production", "", False, False, ""))
                End If
                '
                ' Username
                '
                Call Content.Add(Adminui.GetEditRow(cpCore.htmlDoc.html_GetFormInputText2("EDGAuthUsername", EDGAuthUsername), "Username", "", False, False, ""))
                '
                ' Password
                '
                Call Content.Add(Adminui.GetEditRow(cpCore.htmlDoc.html_GetFormInputText2("EDGAuthPassword", EDGAuthPassword), "Password", "", False, False, ""))
                '
                ' Seed Documents
                '
                Copy = ""
                CSPointer = cpCore.db.cs_open("EDG Publish Seeds")
                Do While cpCore.db.cs_ok(CSPointer)
                    If Copy <> "" Then
                        Copy = Copy & "<br>"
                    End If
                    Copy = Copy & cpCore.cs_cs_getRecordEditLink(CSPointer) & cpCore.db.cs_get(CSPointer, "Name")
                    cpCore.db.cs_goNext(CSPointer)
                Loop
                Call cpCore.db.cs_Close(CSPointer)
                Copy = Copy & "<br>" & cpCore.main_cs_getRecordAddLink(CSPointer)
                Call Content.Add(Adminui.GetEditRow(Copy, "Seed URLs", "", False, False, ""))
                '
                ' Production Servers
                '
                Copy = ""
                CSPointer = cpCore.db.cs_open("EDG Publish Servers")
                Do While cpCore.db.cs_ok(CSPointer)
                    If Copy <> "" Then
                        Copy = Copy & "<br>"
                    End If
                    Copy = Copy & cpCore.cs_cs_getRecordEditLink(CSPointer) & cpCore.db.cs_get(CSPointer, "Name")
                    cpCore.db.cs_goNext(CSPointer)
                Loop
                Call cpCore.db.cs_Close(CSPointer)
                'If cpCore.visitProperty_AllowEditing Then
                '    If Copy <> "" Then
                '        'Copy = Copy & "<br>"
                '        End If
                Copy = Copy & "<br>" & cpCore.main_cs_getRecordAddLink(CSPointer)
                '    End If
                Call Content.Add(Adminui.GetEditRow(Copy, "Production Servers", "", False, False, ""))
                '
                ' Buttons
                '
                If Not EDGPublishNow Then
                    ButtonList = ButtonBegin
                Else
                    ButtonList = ButtonAbort & "," & ButtonRefresh
                End If
                '
                Content.Add(Adminui.EditTableClose)
                Content.Add(cpCore.htmlDoc.html_GetFormInputHidden(RequestNameAdminSourceForm, AdminFormEDGControl))
            End If
            '
            Description = "Static Publishing lets you create a completely static version of your website on remote servers. Some dynamic features such as personalization will not work on a static site."
            GetForm_StaticPublishControl = Adminui.GetBody("Static Publish Control", ButtonList, "", True, True, Description, "", 0, Content.Text)
            Content = Nothing
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Content = Nothing
            Call handleLegacyClassError3("PrintDHTMLEditForm")
            '
        End Function
        '
        '========================================================================
        ' ----- Print the Normal Content Edit form
        '
        '   Print the content fields and Topic Groups section
        '========================================================================
        '
        Private Function GetForm_Publish() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "GetForm_Publish")
            '
            Dim FieldList As String
            Dim ModifiedDateString As String
            Dim SubmittedDateString As String
            Dim ApprovedDateString As String
            Dim Adminui As New adminUIController(cpCore)
            Dim ButtonList As String = ""
            Dim Caption As String
            Dim CS As Integer
            Dim SQL As String
            Dim RowColor As String
            Dim RecordCount As Integer
            Dim RecordLast As Integer
            Dim RecordNext As Integer
            Dim RecordPrevious As Integer
            Dim RecordName As String
            Dim Copy As String
            Dim ContentID As Integer
            Dim ContentName As String
            Dim RecordID As Integer
            Dim Link As String
            Dim CSAuthoringRecord As Integer
            Dim TableName As String
            Dim PageNumber As Integer
            '
            Dim IsInserted As Boolean
            Dim IsDeleted As Boolean
            '
            Dim IsModified As Boolean
            Dim ModifiedName As String = ""
            Dim ModifiedDate As Date
            '
            Dim IsSubmitted As Boolean
            Dim SubmitName As String = ""
            Dim SubmittedDate As Date
            '
            Dim IsApproved As Boolean
            Dim ApprovedName As String = ""
            Dim ApprovedDate As Date
            Dim Stream As New stringBuilderLegacyController
            Dim Body As String = ""
            Dim Description As String
            Dim Button As String
            Dim BR As String = ""
            '
            Button = cpCore.docProperties.getText(RequestNameButton)
            If Button = ButtonCancel Then
                '
                '
                '
                Call cpCore.webServer.redirect(cpCore.siteProperties.adminURL, "Admin Publish, Cancel Button Pressed", False)
            ElseIf Not cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                '
                '
                '
                ButtonList = ButtonCancel
                Body &= Adminui.GetFormBodyAdminOnly()
            Else
                '
                ' ----- Page Body
                '
                BR = "<BR >"
                Body &= cr & "<table border=""0"" cellpadding=""2"" cellspacing=""2"" width=""100%"">"
                Body &= cr & "<tr>"
                Body &= cr & "<td width=""50"" class=""ccPanel"" align=""center"" class=""ccAdminSmall"">Pub" & BR & "<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""42"" height=""1"" ></td>"
                Body &= cr & "<td width=""50"" class=""ccPanel"" align=""center"" class=""ccAdminSmall"">Sub'd" & BR & "<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""42"" height=""1"" ></td>"
                Body &= cr & "<td width=""50"" class=""ccPanel"" align=""center"" class=""ccAdminSmall"">Appr'd" & BR & "<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""42"" height=""1"" ></td>"
                Body &= cr & "<td width=""50"" class=""ccPanel"" class=""ccAdminSmall"">Edit" & BR & "<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""42"" height=""1"" ></td>"
                Body &= cr & "<td width=""200"" class=""ccPanel"" class=""ccAdminSmall"">Name" & BR & "<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""192"" height=""1"" ></td>"
                Body &= cr & "<td width=""100"" class=""ccPanel"" class=""ccAdminSmall"">Content" & BR & "<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""92"" height=""1"" ></td>"
                Body &= cr & "<td width=""50"" class=""ccPanel"" class=""ccAdminSmall"">#" & BR & "<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""92"" height=""1"" ></td>"
                Body &= cr & "<td width=""100"" class=""ccPanel"" class=""ccAdminSmall"">Public" & BR & "<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""92"" height=""1"" ></td>"
                Body &= cr & "<td width=""100%"" class=""ccPanel"" class=""ccAdminSmall"">Status" & BR & "<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""1"" ></td>"
                Body &= cr & "</tr>"
                '
                ' ----- select modified,submitted,approved records (all non-editing controls)
                '
                SQL = "SELECT DISTINCT top 100 ccAuthoringControls.ContentID AS ContentID, ccContent.Name AS ContentName, ccAuthoringControls.RecordID, ccContentWatch.Link AS Link, ccContent.AllowWorkflowAuthoring AS ContentAllowWorkflowAuthoring,min(ccAuthoringControls.ID)" _
                    & " FROM (ccAuthoringControls" _
                    & " LEFT JOIN ccContent ON ccAuthoringControls.ContentID = ccContent.ID)" _
                    & " LEFT JOIN ccContentWatch ON ccAuthoringControls.ContentRecordKey = ccContentWatch.ContentRecordKey" _
                    & " Where (ccAuthoringControls.ControlType > 1)" _
                    & " GROUP BY ccAuthoringControls.ContentID, ccContent.Name, ccAuthoringControls.RecordID, ccContentWatch.Link, ccContent.AllowWorkflowAuthoring" _
                    & " order by min(ccAuthoringControls.ID) desc"
                ''PageNumber = 1 + (RecordTop / RecordsPerPage)
                'SQL = "SELECT DISTINCT ccContent.ID AS ContentID, ccContent.Name AS ContentName, ccAuthoringControls.RecordID, ccContentWatch.Link AS Link, ccContent.AllowWorkflowAuthoring AS ContentAllowWorkflowAuthoring,max(ccAuthoringControls.DateAdded) as DateAdded" _
                '    & " FROM (ccAuthoringControls LEFT JOIN ccContent ON ccAuthoringControls.ContentID = ccContent.ID) LEFT JOIN ccContentWatch ON ccAuthoringControls.ContentRecordKey = ccContentWatch.ContentRecordKey" _
                '    & " GROUP BY ccAuthoringControls.ID,ccContent.ID, ccContent.Name, ccAuthoringControls.RecordID, ccContentWatch.Link, ccContent.AllowWorkflowAuthoring, ccAuthoringControls.ControlType" _
                '    & " HAVING (ccAuthoringControls.ControlType>1)" _
                '    & " order by max(ccAuthoringControls.DateAdded) Desc"
                CS = cpCore.db.cs_openCsSql_rev("Default", SQL)
                'CS = cpCore.app_openCsSql_Rev_Internal("Default", SQL, RecordsPerPage, PageNumber)
                RecordCount = 0
                If cpCore.db.cs_ok(CS) Then
                    RowColor = ""
                    RecordLast = RecordTop + RecordsPerPage
                    '
                    ' --- Print out the records
                    '
                    Do While cpCore.db.cs_ok(CS) And RecordCount < 100
                        ContentID = cpCore.db.cs_getInteger(CS, "contentID")
                        ContentName = cpCore.db.cs_getText(CS, "contentname")
                        RecordID = cpCore.db.cs_getInteger(CS, "recordid")
                        Link = cpCore.pages.getPageLink4(RecordID, "", True, False)
                        'Link = cpCore.main_GetPageLink3(RecordID, "", True)
                        'If Link = "" Then
                        '    Link = cpCore.db.cs_getText(CS, "Link")
                        'End If
                        If (ContentID = 0) Or (ContentName = "") Or (RecordID = 0) Then
                            '
                            ' This control is not valid, delete it
                            '
                            SQL = "delete from ccAuthoringControls where ContentID=" & ContentID & " and RecordID=" & RecordID
                            Call cpCore.db.executeSql(SQL)
                        Else
                            TableName = cpCore.GetContentProperty(ContentName, "ContentTableName")
                            If Not (cpCore.db.cs_getBoolean(CS, "ContentAllowWorkflowAuthoring")) Then
                                '
                                ' Authoring bug -- This record should not be here, the content does not support workflow authoring
                                '
                                Call handleLegacyClassError2("GetForm_Publish", "Admin Workflow Publish selected an authoring control record [" & ContentID & "." & RecordID & "] for a content definition [" & ContentName & "] that does not AllowWorkflowAuthoring.")
                                'Call HandleInternalError("GetForm_Publish", "Admin Workflow Publish selected an authoring control record [" & ContentID & "." & RecordID & "] for a content definition [" & ContentName & "] that does not AllowWorkflowAuthoring.")
                            Else

                                Call cpCore.pages.pageManager_GetAuthoringStatus(ContentName, RecordID, IsSubmitted, IsApproved, SubmitName, ApprovedName, IsInserted, IsDeleted, IsModified, ModifiedName, ModifiedDate, SubmittedDate, ApprovedDate)
                                If RowColor = "class=""ccPanelRowOdd""" Then
                                    RowColor = "class=""ccPanelRowEven"""
                                Else
                                    RowColor = "class=""ccPanelRowOdd"""
                                End If
                                '
                                ' make sure the record exists
                                '
                                If genericController.vbUCase(TableName) = "CCPAGECONTENT" Then
                                    FieldList = "ID,Name,Headline,MenuHeadline"
                                    'SQL = "SELECT ID,Name,Headline,MenuHeadline from " & TableName & " WHERE ID=" & RecordID
                                Else
                                    FieldList = "ID,Name,Name as Headline,Name as MenuHeadline"
                                    'SQL = "SELECT ID,Name,Name as Headline,Name as MenuHeadline from " & TableName & " WHERE ID=" & RecordID
                                End If
                                CSAuthoringRecord = cpCore.csOpen(ContentName, RecordID, True, True, FieldList)
                                'CSAuthoringRecord = cpCore.app_openCsSql_Rev_Internal("Default", SQL, 1)
                                If Not cpCore.db.cs_ok(CSAuthoringRecord) Then
                                    '
                                    ' This authoring control is not valid, delete it
                                    '
                                    SQL = "delete from ccAuthoringControls where ContentID=" & ContentID & " and RecordID=" & RecordID
                                    Call cpCore.db.executeSql(SQL)
                                Else
                                    RecordName = cpCore.db.cs_get(CSAuthoringRecord, "name")
                                    If RecordName = "" Then
                                        RecordName = cpCore.db.cs_get(CSAuthoringRecord, "headline")
                                        If RecordName = "" Then
                                            RecordName = cpCore.db.cs_get(CSAuthoringRecord, "headline")
                                            If RecordName = "" Then
                                                RecordName = "Record " & cpCore.db.cs_get(CSAuthoringRecord, "ID")
                                            End If
                                        End If
                                    End If
                                    If True Then
                                        If Link = "" Then
                                            Link = "unknown"
                                        Else
                                            Link = "<a href=""" & cpCore.htmlDoc.html_EncodeHTML(Link) & """ target=""_blank"">" & Link & "</a>"
                                        End If
                                        '
                                        ' get approved status of the submitted record
                                        '
                                        Body &= (vbLf & "<tr>")
                                        '
                                        ' Publish Checkbox
                                        '
                                        Body &= ("<td align=""center"" valign=""top"" " & RowColor & ">" _
                                            & cpCore.htmlDoc.html_GetFormInputCheckBox2("row" & RecordCount, False) _
                                            & cpCore.htmlDoc.html_GetFormInputHidden("rowid" & RecordCount, RecordID) _
                                            & cpCore.htmlDoc.html_GetFormInputHidden("rowcontentname" & RecordCount, ContentName) _
                                            & "</td>")
                                        '
                                        ' Submitted
                                        '
                                        If IsSubmitted Then
                                            Copy = "yes"
                                        Else
                                            Copy = "no"
                                        End If
                                        Body &= ("<td align=""center"" valign=""top"" " & RowColor & " class=""ccAdminSmall"">" & Copy & "</td>")
                                        '
                                        ' Approved
                                        '
                                        If IsApproved Then
                                            Copy = "yes"
                                        Else
                                            Copy = "no"
                                        End If
                                        Body &= ("<td align=""center"" valign=""top"" " & RowColor & " class=""ccAdminSmall"">" & Copy & "</td>")
                                        '
                                        ' Edit
                                        '
                                        Body = Body _
                                            & "<td align=""left"" valign=""top"" " & RowColor & " class=""ccAdminSmall"">" _
                                            & "<a href=""?" & RequestNameAdminForm & "=" & AdminFormEdit & "&cid=" & ContentID & "&id=" & RecordID & "&" & RequestNameAdminDepth & "=1"">Edit</a>" _
                                            & "</td>"
                                        '
                                        ' Name
                                        '
                                        Body &= ("<td align=""left"" valign=""top"" " & RowColor & " class=""ccAdminSmall""  style=""white-space:nowrap;"">" & RecordName & "</td>")
                                        '
                                        ' Content
                                        '
                                        Body &= ("<td align=""left"" valign=""top"" " & RowColor & " class=""ccAdminSmall"">" & ContentName & "</td>")
                                        '
                                        ' RecordID
                                        '
                                        Body &= ("<td align=""left"" valign=""top"" " & RowColor & " class=""ccAdminSmall"">" & RecordID & "</td>")
                                        '
                                        ' Public
                                        '
                                        If IsInserted Then
                                            Link = Link & "*"
                                        ElseIf IsDeleted Then
                                            Link = Link & "**"
                                        End If
                                        Body &= ("<td align=""left"" valign=""top"" " & RowColor & " class=""ccAdminSmall"" style=""white-space:nowrap;"">" & Link & "</td>")
                                        '
                                        ' Description
                                        '
                                        'Call cpCore.app.closeCS(CSLink)
                                        Body &= ("<td align=""left"" valign=""top"" " & RowColor & ">" & SpanClassAdminNormal)
                                        '
                                        'If RecordName <> "" Then
                                        '    Body &=  (cpCore.htmldoc.main_encodeHTML(RecordName) & ", ")
                                        'End If
                                        'Body &=  ("Content: " & ContentName & ", RecordID: " & RecordID & "" & br & "")
                                        If ModifiedDate = Date.MinValue Then
                                            ModifiedDateString = "unknown"
                                        Else
                                            ModifiedDateString = CStr(ModifiedDate)
                                        End If
                                        If ModifiedName = "" Then
                                            ModifiedName = "unknown"
                                        End If
                                        If SubmitName = "" Then
                                            SubmitName = "unknown"
                                        End If
                                        If ApprovedName = "" Then
                                            ApprovedName = "unknown"
                                        End If
                                        If IsInserted Then
                                            Body &= ("Added: " & ModifiedDateString & " by " & ModifiedName & "" & BR & "")
                                        ElseIf IsDeleted Then
                                            Body &= ("Deleted: " & ModifiedDateString & " by " & ModifiedName & "" & BR & "")
                                        Else
                                            Body &= ("Modified: " & ModifiedDateString & " by " & ModifiedName & "" & BR & "")
                                        End If
                                        If IsSubmitted Then
                                            If SubmittedDate = Date.MinValue Then
                                                SubmittedDateString = "unknown"
                                            Else
                                                SubmittedDateString = CStr(SubmittedDate)
                                            End If
                                            Body &= ("Submitted: " & SubmittedDateString & " by " & SubmitName & "" & BR & "")
                                        End If
                                        If IsApproved Then
                                            If ApprovedDate = Date.MinValue Then
                                                ApprovedDateString = "unknown"
                                            Else
                                                ApprovedDateString = CStr(ApprovedDate)
                                            End If
                                            Body &= ("Approved: " & ApprovedDate & " by " & ApprovedName & "" & BR & "")
                                        End If
                                        'Body &=  ("Admin Site: <a href=""?" & RequestNameAdminForm & "=" & AdminFormEdit & "&cid=" & ContentID & "&id=" & RecordID & "&" & RequestNameAdminDepth & "=1"" target=""_blank"">Open in New Window</a>" & br & "")
                                        'Body &=  ("Public Site: " & Link & "" & br & "")
                                        '
                                        Body &= ("</td>")
                                        '
                                        Body &= (vbLf & "</tr>")
                                        RecordCount = RecordCount + 1
                                    End If
                                End If
                                Call cpCore.db.cs_Close(CSAuthoringRecord)
                            End If
                        End If
                        Call cpCore.db.cs_goNext(CS)
                    Loop
                    '
                    ' --- print out the stuff at the bottom
                    '
                    RecordNext = RecordTop
                    If cpCore.db.cs_ok(CS) Then
                        RecordNext = RecordCount
                    End If
                    RecordPrevious = RecordTop - RecordsPerPage
                    If RecordPrevious < 0 Then
                        RecordPrevious = 0
                    End If
                End If
                Call cpCore.db.cs_Close(CS)
                If RecordCount = 0 Then
                    '
                    ' No records printed
                    '
                    Body &= cr & "<tr><td width=""100%"" colspan=""9"" class=""ccAdminSmall"" style=""padding-top:10px;"">There are no modified records to review</td></tr>"
                Else
                    Body &= cr & "<tr><td width=""100%"" colspan=""9"" class=""ccAdminSmall"" style=""padding-top:10px;"">* To view these records on the public site you must enable Rendering Mode because they are new records that have not been published.</td></tr>"
                    Body &= cr & "<tr><td width=""100%"" colspan=""9"" class=""ccAdminSmall"">** To view these records on the public site you must disable Rendering Mode because they are deleted records that have not been published.</td></tr>"
                End If
                Body &= cr & "</table>"
                Body &= cpCore.htmlDoc.html_GetFormInputHidden("RowCnt", RecordCount)
                Body = "<div style=""Background-color:white;"">" & Body & "</div>"
                '
                ' Headers, etc
                '
                ButtonList = ""
                If MenuDepth > 0 Then
                    ButtonList = ButtonList & "," & ButtonClose
                Else
                    ButtonList = ButtonList & "," & ButtonCancel
                End If
                ButtonList = ButtonList & "," & ButtonWorkflowPublishApproved & "," & ButtonWorkflowPublishSelected
                ButtonList = Mid(ButtonList, 2)
                '
                ' Assemble Page
                '
                Body &= cpCore.htmlDoc.html_GetFormInputHidden(RequestNameAdminSourceForm, AdminFormPublishing)
            End If
            '
            Caption = SpanClassAdminNormal & "<strong>Workflow Publishing</strong></span>"
            Description = "Monitor and Approve Workflow Publishing Changes"
            If RecordCount >= 100 Then
                Description = Description & BR & BR & "Only the first 100 record are displayed"
            End If
            GetForm_Publish = Adminui.GetBody(Caption, ButtonList, "", True, True, Description, "", 0, Body)
            Call cpCore.htmlDoc.main_AddPagetitle("Workflow Publishing")
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Publish")
            '
        End Function
        '
        '========================================================================
        '   Generate the content of a tab in the Edit Screen
        '========================================================================
        '
        Private Function GetForm_Edit_Tab(adminContent As cdefModel, editRecord As editRecordClass, ByVal RecordID As Integer, ByVal ContentID As Integer, ByVal ForceReadOnly As Boolean, ByVal IsLandingPage As Boolean, ByVal IsRootPage As Boolean, ByVal EditTab As String, ByVal EditorContext As csv_contentTypeEnum, ByRef return_NewFieldList As String, ByVal TemplateIDForStyles As Integer, ByVal HelpCnt As Integer, ByVal HelpIDCache() As Integer, ByVal helpDefaultCache() As String, ByVal HelpCustomCache() As String, ByVal AllowHelpMsgCustom As Boolean, ByVal helpIdIndex As keyPtrController, ByVal fieldTypeDefaultEditors As String(), ByVal fieldEditorPreferenceList As String, ByVal styleList As String, ByVal styleOptionList As String, ByVal emailIdForStyles As Integer, ByVal IsTemplateTable As Boolean, ByVal editorAddonListJSON As String) As String
            Dim returnHtml As String = ""
            Try
                '
                Dim AjaxQS As String
                Dim fancyBoxLinkId As String
                Dim fancyBoxContentId As String
                Dim fieldTypeDefaultEditorAddonId As Integer
                Dim fieldIdPos As Integer
                Dim Pos As Integer
                Dim editorAddonID As Integer
                Dim editorReadOnly As Boolean
                Dim addonOptionString As String
                Dim AllowHelpIcon As Boolean
                Dim fieldId As Integer
                Dim FieldHelpFound As Boolean
                Dim LcaseName As String
                Dim IsEmptyList As Boolean
                Dim HelpMsgCustom As String
                Dim HelpMsgDefault As String
                '
                Dim FieldValueDate As Date
                Dim WhyReadOnlyMsg As String
                Dim IsLongHelp As Boolean
                Dim IsEmptyHelp As Boolean
                Dim HelpMsg As String
                Dim CS As Integer
                Dim EditorStyleModifier As String
                Dim HelpClosedContentID As String
                Dim AllowHelpRow As Boolean
                Dim EditorRightSideIcon As String
                Dim EditorHelp As String
                Dim HelpEditorID As String
                Dim HelpOpenedReadID As String
                Dim HelpOpenedEditID As String
                Dim HelpClosedID As String
                Dim HelpID As String
                Dim HelpMsgClosed As String
                Dim HelpMsgOpenedRead As String
                Dim HelpMsgOpenedEdit As String
                Dim NewWay As Boolean
                Dim RecordName As String
                Dim GroupName As String
                Dim SelectMessage As String
                Dim IsBaseField As Boolean
                Dim FieldReadOnly As Boolean
                Dim NonEncodedLink As String
                Dim EncodedLink As String
                Dim Caption As String
                Dim lookups() As String
                Dim CSPointer As Integer
                Dim FieldName As String
                Dim FieldValueText As String
                Dim FieldValueInteger As Integer
                Dim FieldValueNumber As Double
                Dim FieldValueBoolean As Boolean
                Dim fieldTypeId As Integer
                Dim FieldValueObject As Object
                Dim FieldPreferenceHTML As Boolean
                Dim CSLookup As Integer
                Dim RedirectPath As String
                Dim LookupContentName As String
                Dim s As New stringBuilderLegacyController
                Dim RecordReadOnly As Boolean
                Dim MethodName As String
                Dim FormFieldLCaseName As String
                Dim FieldRows As Integer
                Dim EditorString As String
                Dim FieldOptionRow As String
                Dim MTMContent0 As String
                Dim MTMContent1 As String
                Dim MTMRuleContent As String
                Dim MTMRuleField0 As String
                Dim MTMRuleField1 As String
                Dim AlphaSort As String
                Dim Adminui As New adminUIController(cpCore)
                Dim StartTickCount As Integer
                Dim needUniqueEmailMessage As Boolean
                '
                needUniqueEmailMessage = False
                StartTickCount = GetTickCount
                '
                returnHtml = ""
                MethodName = "AdminClass.GetFormEdit_UserFields"
                NewWay = True
                '
                ' ----- Open the panel
                '
                If adminContent.fields.Count <= 0 Then
                    '
                    ' There are no visible fiels, return empty
                    '
                    Throw (New ApplicationException("The content definition for this record is invalid. It contains no valid fields."))
                Else
                    RecordReadOnly = ForceReadOnly
                    '
                    ' ----- Build an index to sort the fields by EditSortOrder
                    '
                    Dim sortingFields As New Dictionary(Of String, CDefFieldModel)
                    '
                    For Each keyValuePair In adminContent.fields
                        Dim field As CDefFieldModel = keyValuePair.Value
                        With field
                            If .editTabName.ToLower() = EditTab.ToLower() Then
                                If IsVisibleUserField(.adminOnly, .developerOnly, .active, .authorable, .nameLc, adminContent.ContentTableName) Then
                                    AlphaSort = genericController.GetIntegerString(.editSortPriority, 10) & "-" & genericController.GetIntegerString(.id, 10)
                                    sortingFields.Add(AlphaSort, field)
                                End If
                            End If
                        End With
                    Next
                    '
                    ' ----- display the record fields
                    '
                    AllowHelpIcon = cpCore.visitProperty.getBoolean("AllowHelpIcon")
                    For Each kvp In sortingFields
                        Dim field As CDefFieldModel = kvp.Value
                        With field
                            fieldId = .id
                            WhyReadOnlyMsg = ""
                            FieldName = .nameLc
                            FormFieldLCaseName = genericController.vbLCase(FieldName)
                            fieldTypeId = .fieldTypeId
                            FieldValueObject = editRecord.fieldsLc(.nameLc).value
                            FieldValueText = genericController.encodeText(FieldValueObject)
                            FieldRows = 1
                            FieldOptionRow = "&nbsp;"
                            FieldPreferenceHTML = .htmlContent
                            '
                            Caption = .caption
                            If .UniqueName Then
                                Caption = "&nbsp;**" & Caption
                            Else
                                If (LCase(.nameLc) = "email") Then
                                    If (LCase(adminContent.ContentTableName) = "ccmembers") And ((cpCore.siteProperties.getBoolean("allowemaillogin", False))) Then
                                        Caption = "&nbsp;***" & Caption
                                        needUniqueEmailMessage = True
                                    End If
                                End If
                            End If
                            If .Required Then
                                Caption = "&nbsp;*" & Caption
                            End If
                            IsBaseField = .blockAccess ' field renamed
                            FormInputCount = FormInputCount + 1
                            FieldReadOnly = False
                            '
                            ' Read only Special Cases
                            '
                            If IsLandingPage Then
                                Select Case genericController.vbLCase(.nameLc)
                                    Case "active"
                                        '
                                        ' if active, it is read only -- if inactive, let them set it active.
                                        '
                                        FieldReadOnly = (genericController.EncodeBoolean(FieldValueObject))
                                        If FieldReadOnly Then
                                            WhyReadOnlyMsg = "&nbsp;(disabled because you can not mark the landing page inactive)"
                                        End If
                                    Case "dateexpires", "pubdate", "datearchive", "blocksection", "hidemenu"
                                        '
                                        ' These fields are read only on landing pages
                                        '
                                        FieldReadOnly = True
                                        WhyReadOnlyMsg = "&nbsp;(disabled for the landing page)"
                                End Select
                            End If
                            '
                            If IsRootPage Then
                                Select Case genericController.vbLCase(.nameLc)
                                    Case "dateexpires", "pubdate", "datearchive", "archiveparentid"
                                        FieldReadOnly = True
                                        WhyReadOnlyMsg = "&nbsp;(disabled for root pages)"
                                    Case "allowinmenus", "allowinchildlists"
                                        FieldValueBoolean = True
                                        FieldValueObject = "1"
                                        FieldReadOnly = True
                                        WhyReadOnlyMsg = "&nbsp;(disabled for root pages)"
                                End Select
                            End If
                            '
                            ' Special Case - ccemail table Alloweid should be disabled if siteproperty AllowLinkLogin is false
                            '
                            If genericController.vbLCase(adminContent.ContentTableName) = "ccemail" And genericController.vbLCase(FieldName) = "allowlinkeid" Then
                                If Not (cpCore.siteProperties.getBoolean("AllowLinkLogin", True)) Then
                                    '.ValueVariant = "0"
                                    FieldValueObject = "0"
                                    FieldReadOnly = True
                                    FieldValueBoolean = False
                                    FieldValueText = "0"
                                End If
                            End If
                            EditorStyleModifier = genericController.vbLCase(cpCore.db.getFieldTypeNameFromFieldTypeId(fieldTypeId))
                            EditorString = ""
                            editorReadOnly = (RecordReadOnly Or .ReadOnly Or (editRecord.id <> 0 And .NotEditable) Or (FieldReadOnly))
                            '
                            ' Determine the editor: Contensive editor, field type default, or add-on preference
                            '
                            editorAddonID = 0
                            'editorPreferenceAddonId = 0
                            fieldIdPos = genericController.vbInstr(1, "," & fieldEditorPreferenceList, "," & CStr(fieldId) & ":")
                            Do While (editorAddonID = 0) And (fieldIdPos > 0)
                                fieldIdPos = fieldIdPos + 1 + Len(CStr(fieldId))
                                Pos = genericController.vbInstr(fieldIdPos, fieldEditorPreferenceList & ",", ",")
                                If Pos > 0 Then
                                    editorAddonID = genericController.EncodeInteger(Mid(fieldEditorPreferenceList, fieldIdPos, Pos - fieldIdPos))
                                    'editorPreferenceAddonId = genericController.EncodeInteger(Mid(fieldEditorPreferenceList, fieldIdPos, Pos - fieldIdPos))
                                    'editorAddonID = editorPreferenceAddonId
                                End If
                                fieldIdPos = genericController.vbInstr(fieldIdPos + 1, "," & fieldEditorPreferenceList, "," & CStr(fieldId) & ":")
                            Loop
                            If editorAddonID = 0 Then
                                fieldTypeDefaultEditorAddonId = genericController.EncodeInteger(fieldTypeDefaultEditors(fieldTypeId))
                                editorAddonID = fieldTypeDefaultEditorAddonId
                            End If
                            Dim useEditorAddon As Boolean
                            useEditorAddon = False
                            If (editorAddonID <> 0) Then
                                '
                                '--------------------------------------------------------------------------------------------
                                ' ----- Custom Editor
                                '--------------------------------------------------------------------------------------------
                                '
                                ' generate the style list on demand
                                ' note: &editorFieldType should be deprecated
                                '
                                addonOptionString = "" _
                                    & "editorName=" & genericController.encodeNvaArgument(FormFieldLCaseName) _
                                    & "&editorValue=" & genericController.encodeNvaArgument(FieldValueText) _
                                    & "&editorFieldId=" & fieldId _
                                    & "&editorFieldType=" & fieldTypeId _
                                    & "&editorReadOnly=" & editorReadOnly _
                                    & "&editorWidth=" _
                                    & "&editorHeight=" _
                                    & ""
                                If genericController.EncodeBoolean((fieldTypeId = FieldTypeIdHTML) Or (fieldTypeId = FieldTypeIdFileHTMLPrivate)) Then
                                    '
                                    ' include html related arguments
                                    '
                                    '                            ac = New innovaEditorAddonClassFPO
                                    '                            Call ac.Init()
                                    '                            editorAddonListJSON = ac.GetEditorAddonListJSON(IsTemplateTable, EditorContext)

                                    addonOptionString = addonOptionString _
                                        & "&editorAllowActiveContent=1" _
                                        & "&editorAddonList=" & genericController.encodeNvaArgument(editorAddonListJSON) _
                                        & "&editorStyles=" & genericController.encodeNvaArgument(styleList) _
                                        & "&editorStyleOptions=" & genericController.encodeNvaArgument(styleOptionList) _
                                        & ""
                                End If

                                EditorString = cpCore.addon.execute(editorAddonID, "", addonOptionString, Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextEditor, "", 0, "", "", False, 0, "", useEditorAddon, Nothing, "", Nothing, "", 0, False)
                                If useEditorAddon Then
                                    return_NewFieldList = return_NewFieldList & "," & FieldName
                                Else
                                    '
                                    ' editor failed, determine if it is missing (or inactive). If missing, remove it from the members preferences
                                    '
                                    Dim SQL As String
                                    SQL = "select id from ccaggregatefunctions where id=" & editorAddonID
                                    CS = cpCore.db.cs_openSql(SQL)
                                    If cpCore.db.cs_ok(CS) Then
                                        '
                                        ' just inactive
                                        '
                                    Else
                                        '
                                        ' missing
                                        '
                                        EditorString = ""
                                        '
                                        ' load user's editor preferences to fieldEditorPreferences() - this is the editor this user has picked when there are >1
                                        '   fieldId:addonId,fieldId:addonId,etc
                                        '   with custom FancyBox form in edit window with button "set editor preference"
                                        '   this button causes a 'refresh' action, reloads fields with stream without save
                                        '
                                        Dim tmpList As String
                                        Dim PosStart As Integer
                                        Dim PosEnd As Integer
                                        tmpList = cpCore.userProperty.getText("editorPreferencesForContent:" & adminContent.Id, "")
                                        PosStart = genericController.vbInstr(1, "," & tmpList, "," & fieldId & ":")
                                        If PosStart > 0 Then
                                            PosEnd = genericController.vbInstr(PosStart + 1, "," & tmpList, ",")
                                            If PosEnd = 0 Then
                                                tmpList = Mid(tmpList, 1, PosStart - 1)
                                            Else
                                                tmpList = Mid(tmpList, 1, PosStart - 1) & Mid(tmpList, PosEnd)
                                            End If
                                            Call cpCore.userProperty.setProperty("editorPreferencesForContent:" & adminContent.Id, tmpList)
                                        End If


                                    End If
                                    Call cpCore.db.cs_Close(CS)
                                End If
                                'EditorString = cpCore.main_ExecuteAddon3(CStr(editorAddonID), addonOptionString, Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextEditor)
                            End If
                            If Not useEditorAddon Then
                                '
                                ' if custom editor not used or if it failed
                                '
                                If (fieldTypeId = FieldTypeIdRedirect) Then
                                    'ElseIf (FieldType = FieldTypeRedirect) Then
                                    '
                                    '--------------------------------------------------------------------------------------------
                                    ' ----- Default Editor, Redirect fields (the same for normal/readonly/spelling)
                                    '--------------------------------------------------------------------------------------------
                                    '
                                    RedirectPath = cpCore.serverConfig.appConfig.adminRoute
                                    If .RedirectPath <> "" Then
                                        RedirectPath = .RedirectPath
                                    End If
                                    RedirectPath = RedirectPath _
                                        & "?" & RequestNameTitleExtension & "=" & cpCore.htmlDoc.main_EncodeRequestVariable(" For " & editRecord.nameLc & TitleExtension) _
                                        & "&" & RequestNameAdminDepth & "=" & (MenuDepth + 1) _
                                        & "&wl0=" & .RedirectID _
                                        & "&wr0=" & editRecord.id
                                    If .RedirectContentID <> 0 Then
                                        RedirectPath = RedirectPath & "&cid=" & .RedirectContentID
                                    Else
                                        RedirectPath = RedirectPath & "&cid=" & editRecord.contentControlId
                                    End If
                                    If editRecord.id = 0 Then
                                        EditorString &= ("[available after save]")
                                    Else
                                        RedirectPath = genericController.vbReplace(RedirectPath, "'", "\'")
                                        EditorString &= ("<a href=""#""")
                                        EditorString &= (" onclick=""" _
                                            & " window.open('" & RedirectPath & "', '_blank', 'scrollbars=yes,toolbar=no,status=no,resizable=yes');" _
                                            & " return false;""")
                                        EditorString &= (">")
                                        EditorString &= ("Open in New Window</A>")
                                    End If
                                    's.Add( "<td class=""ccAdminEditField""><nobr>" & SpanClassAdminNormal & EditorString & "&nbsp;</span></nobr></td>")
                                ElseIf editorReadOnly Then
                                    '
                                    '--------------------------------------------------------------------------------------------
                                    ' ----- Display fields as read only
                                    '--------------------------------------------------------------------------------------------
                                    '
                                    If WhyReadOnlyMsg <> "" Then
                                        WhyReadOnlyMsg = "<span class=""ccDisabledReason"">" & WhyReadOnlyMsg & "</span>"
                                    End If
                                    EditorStyleModifier = ""
                                    Select Case fieldTypeId
                                        Case FieldTypeIdBoolean
                                            '
                                            ' ----- Boolean ReadOnly
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueBoolean = genericController.EncodeBoolean(FieldValueObject)
                                            EditorString &= (cpCore.htmlDoc.html_GetFormInputHidden(FormFieldLCaseName, genericController.encodeText(FieldValueBoolean)))
                                            EditorString &= (cpCore.htmlDoc.html_GetFormInputCheckBox2(FormFieldLCaseName, FieldValueBoolean, , True, "checkBox"))
                                            EditorString &= WhyReadOnlyMsg
                                            '
                                        Case FieldTypeIdFile, FieldTypeIdFileImage
                                            '
                                            ' ----- File ReadOnly
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            NonEncodedLink = cpCore.webServer.requestDomain & cpCore.getCdnFileLink(FieldValueText)
                                            EncodedLink = genericController.EncodeURL(NonEncodedLink)
                                            EditorString &= (cpCore.htmlDoc.html_GetFormInputHidden(FormFieldLCaseName, ""))
                                            If FieldValueText = "" Then
                                                EditorString &= ("[no file]")
                                            Else
                                                Dim filename As String = ""
                                                Dim path As String = ""
                                                cpCore.privateFiles.splitPathFilename(FieldValueText, path, filename)
                                                EditorString &= ("&nbsp;<a href=""http://" & EncodedLink & """ target=""_blank"">" & SpanClassAdminSmall & "[" & filename & "]</A>")
                                            End If
                                            EditorString &= WhyReadOnlyMsg
                                            '
                                        Case FieldTypeIdLookup
                                            '
                                            ' ----- Lookup ReadOnly
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueInteger = genericController.EncodeInteger(FieldValueObject)
                                            EditorString &= (cpCore.htmlDoc.html_GetFormInputHidden(FormFieldLCaseName, genericController.encodeText(FieldValueInteger)))
                                            'Call s.Add("<td class=""ccAdminEditField""><nobr>" & SpanClassAdminNormal)
                                            LookupContentName = ""
                                            If .lookupContentID <> 0 Then
                                                LookupContentName = genericController.encodeText(cpCore.metaData.getContentNameByID(.lookupContentID))
                                            End If
                                            If LookupContentName <> "" Then
                                                CSLookup = cpCore.csOpenRecord(LookupContentName, FieldValueInteger, False, , "Name,ContentControlID")
                                                If cpCore.db.cs_ok(CSLookup) Then
                                                    If cpCore.db.cs_get(CSLookup, "Name") = "" Then
                                                        EditorString &= ("No Name")
                                                    Else
                                                        EditorString &= (cpCore.htmlDoc.main_encodeHTML(cpCore.db.cs_get(CSLookup, "Name")))
                                                    End If
                                                    EditorString &= ("&nbsp;[<a TabIndex=-1 href=""?" & RequestNameAdminForm & "=4&cid=" & .lookupContentID & "&id=" & FieldValueObject.ToString & """ target=""_blank"">View details in new window</a>]")
                                                Else
                                                    EditorString &= ("None")
                                                End If
                                                Call cpCore.db.cs_Close(CSLookup)
                                                EditorString &= ("&nbsp;[<a TabIndex=-1 href=""?cid=" & .lookupContentID & """ target=""_blank"">See all " & LookupContentName & "</a>]")
                                            ElseIf .lookupList <> "" Then
                                                lookups = Split(.lookupList, ",")
                                                If FieldValueInteger < 1 Then
                                                    EditorString &= ("None")
                                                ElseIf FieldValueInteger > (UBound(lookups) + 1) Then
                                                    EditorString &= ("None")
                                                Else
                                                    EditorString &= (lookups(FieldValueInteger - 1))
                                                End If
                                            End If
                                            EditorString &= WhyReadOnlyMsg
                                            '
                                        Case FieldTypeIdMemberSelect
                                            '
                                            ' ----- Member Select ReadOnly
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueInteger = genericController.EncodeInteger(FieldValueObject)
                                            EditorString &= (cpCore.htmlDoc.html_GetFormInputHidden(FormFieldLCaseName, genericController.encodeText(FieldValueInteger)))
                                            If FieldValueInteger = 0 Then
                                                EditorString &= ("None")
                                            Else
                                                RecordName = cpCore.content_GetRecordName("people", FieldValueInteger)
                                                If RecordName = "" Then
                                                    EditorString &= ("No Name")
                                                Else
                                                    EditorString &= (cpCore.htmlDoc.main_encodeHTML(RecordName))
                                                End If
                                                SelectMessage = "Select from Administrators"
                                                'If .MemberSelectGroupID <> 0 Then
                                                '    GroupName = cpCore.main_GetRecordName("groups", .MemberSelectGroupID)
                                                '    If GroupName <> "" Then
                                                '        SelectMessage = SelectMessage & " and members of " & GroupName
                                                '    End If
                                                'End If
                                                'EditorString &=  ("&nbsp;[<a TabIndex=-1 href=""?cid=" & cpCore.main_GetContentID("groups") & """ target=""_blank"">" & SelectMessage & "</a>]")
                                                EditorString &= ("&nbsp;[<a TabIndex=-1 href=""?af=4&cid=" & cpCore.metaData.getContentId("people") & "&id=" & FieldValueObject.ToString & """ target=""_blank"">View details in new window</a>]")
                                            End If
                                            EditorString &= WhyReadOnlyMsg
                                            '
                                        Case FieldTypeIdManyToMany
                                            '
                                            '   Placeholder
                                            '
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            MTMContent0 = cpCore.metaData.getContentNameByID(.contentId)
                                            MTMContent1 = cpCore.metaData.getContentNameByID(.manyToManyContentID)
                                            MTMRuleContent = cpCore.metaData.getContentNameByID(.manyToManyRuleContentID)
                                            MTMRuleField0 = .ManyToManyRulePrimaryField
                                            MTMRuleField1 = .ManyToManyRuleSecondaryField
                                            EditorString &= (cpCore.htmlDoc.main_GetFormInputCheckListCategories("ManyToMany" & .id, MTMContent0, editRecord.id, MTMContent1, MTMRuleContent, MTMRuleField0, MTMRuleField1, , , True, MTMContent1))
                                            EditorString &= WhyReadOnlyMsg
                                            '
                                        Case FieldTypeIdCurrency
                                            '
                                            ' ----- Currency ReadOnly
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueNumber = genericController.EncodeNumber(FieldValueObject)
                                            EditorString &= (cpCore.htmlDoc.html_GetFormInputHidden(FormFieldLCaseName, genericController.encodeText(FieldValueNumber)))
                                            EditorString &= (cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, CStr(FieldValueNumber), , , , , True, "text"))
                                            EditorString &= (FormatCurrency(FieldValueNumber))
                                            EditorString &= WhyReadOnlyMsg
                                            '
                                        Case FieldTypeIdDate
                                            '
                                            ' ----- date
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueDate = genericController.encodeDateMinValue(genericController.EncodeDate(FieldValueObject))
                                            If FieldValueDate = Date.MinValue Then
                                                FieldValueText = ""
                                            Else
                                                FieldValueText = CStr(FieldValueDate)
                                            End If
                                            EditorString &= (cpCore.htmlDoc.html_GetFormInputHidden(FormFieldLCaseName, FieldValueText))
                                            EditorString &= (cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, FieldValueText, , , , , True, "date"))
                                            EditorString &= WhyReadOnlyMsg
                                            '
                                        Case FieldTypeIdAutoIdIncrement, FieldTypeIdFloat, FieldTypeIdInteger
                                            '
                                            ' ----- number
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            EditorString &= (cpCore.htmlDoc.html_GetFormInputHidden(FormFieldLCaseName, FieldValueText))
                                            EditorString &= (cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, FieldValueText, , , , , True, "number"))
                                            EditorString &= WhyReadOnlyMsg
                                            '
                                        Case FieldTypeIdHTML, FieldTypeIdFileHTMLPrivate
                                            '
                                            ' ----- HTML types
                                            '
                                            If .htmlContent Then
                                                '
                                                ' edit html as html (see the code)
                                                '
                                                return_NewFieldList = return_NewFieldList & "," & FieldName
                                                FieldValueText = genericController.encodeText(FieldValueObject)
                                                EditorString &= cpCore.htmlDoc.html_GetFormInputHidden(FormFieldLCaseName, FieldValueText)
                                                EditorStyleModifier = "textexpandable"
                                                FieldRows = (cpCore.properties_user_getInteger(adminContent.Name & "." & FieldName & ".RowHeight", 10))
                                                EditorString &= cpCore.htmlDoc.html_GetFormInputTextExpandable2(FormFieldLCaseName, FieldValueText, FieldRows, , FormFieldLCaseName, False, True)
                                            Else
                                                '
                                                ' edit html as wysiwyg
                                                '
                                                return_NewFieldList = return_NewFieldList & "," & FieldName
                                                FieldValueText = genericController.encodeText(FieldValueObject)
                                                EditorString &= cpCore.htmlDoc.html_GetFormInputHidden(FormFieldLCaseName, FieldValueText)
                                                '
                                                EditorStyleModifier = "text"
                                                FieldRows = (cpCore.properties_user_getInteger(adminContent.Name & "." & FieldName & ".PixelHeight", 500))
                                                'EditorString &=  cpCore.main_GetFormInputHTML(FormFieldLCaseName, FieldValueText)
                                                '
                                                EditorString &= cpCore.htmlDoc.html_GetFormInputHTML3(FormFieldLCaseName, FieldValueText, "500", , True, True, editorAddonListJSON, styleList, styleOptionList)
                                                'innovaEditor = New innovaEditorAddonClassFPO
                                                'EditorString &=  innovaEditor.getInnovaEditor( FormFieldLCaseName, EditorContext, FieldValueText, "", "", True, True, TemplateIDForStyles, emailIdForStyles)
                                                EditorString = "<div style=""width:95%"">" & EditorString & "</div>"
                                                FieldOptionRow = "&nbsp;"
                                            End If
                                        Case FieldTypeIdText, FieldTypeIdLink, FieldTypeIdResourceLink
                                            '
                                            ' ----- FieldTypeText
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            EditorString &= cpCore.htmlDoc.html_GetFormInputHidden(FormFieldLCaseName, FieldValueText)
                                            If .Password Then
                                                '
                                                ' Password forces simple text box
                                                '
                                                EditorString &= cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, "*****", , , , True, True, "password")
                                            Else
                                                '
                                                ' non-password
                                                '
                                                EditorString &= cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, FieldValueText, 1, , , , True, "text")
                                            End If
                                        Case FieldTypeIdLongText, FieldTypeIdFileTextPrivate
                                            '
                                            ' ----- LongText, TextFile
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            EditorString &= cpCore.htmlDoc.html_GetFormInputHidden(FormFieldLCaseName, FieldValueText)
                                            EditorStyleModifier = "textexpandable"
                                            FieldRows = (cpCore.properties_user_getInteger(adminContent.Name & "." & FieldName & ".RowHeight", 10))
                                            EditorString &= cpCore.htmlDoc.html_GetFormInputTextExpandable2(FormFieldLCaseName, FieldValueText, FieldRows, , FormFieldLCaseName, False, True)
                                        Case Else
                                            '
                                            ' ----- Legacy text type -- not used unless something was missed
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            EditorString &= cpCore.htmlDoc.html_GetFormInputHidden(FormFieldLCaseName, FieldValueText)
                                            If .Password Then
                                                '
                                                ' Password forces simple text box
                                                '
                                                EditorString &= cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, "*****", , , , True, True, "password")
                                            ElseIf (Not .htmlContent) Then
                                                '
                                                ' not HTML capable, textarea with resizing
                                                '
                                                If (fieldTypeId = FieldTypeIdText) And (InStr(1, FieldValueText, vbLf) = 0) And (Len(FieldValueText) < 40) Then
                                                    '
                                                    ' text field shorter then 40 characters without a CR
                                                    '
                                                    EditorString &= cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, FieldValueText, 1, , , , True, "text")
                                                Else
                                                    '
                                                    ' longer text data, or text that contains a CR
                                                    '
                                                    EditorStyleModifier = "textexpandable"
                                                    EditorString &= cpCore.htmlDoc.html_GetFormInputTextExpandable2(FormFieldLCaseName, FieldValueText, 10, , , , True)
                                                End If
                                            ElseIf .htmlContent And FieldPreferenceHTML Then
                                                '
                                                ' HTMLContent true, and prefered
                                                '
                                                EditorStyleModifier = "text"
                                                FieldRows = (cpCore.properties_user_getInteger(adminContent.Name & "." & FieldName & ".PixelHeight", 500))
                                                EditorString &= cpCore.htmlDoc.html_GetFormInputHTML3(FormFieldLCaseName, FieldValueText, "500", , False, True, editorAddonListJSON, styleList, styleOptionList)
                                                'innovaEditor = New innovaEditorAddonClassFPO
                                                'EditorString &=  innovaEditor.getInnovaEditor( FormFieldLCaseName, EditorContext, FieldValueText, "", "", True, True, TemplateIDForStyles, emailIdForStyles)
                                                EditorString = "<div style=""width:95%"">" & EditorString & "</div>"
                                                FieldOptionRow = "&nbsp;"
                                            Else
                                                '
                                                ' HTMLContent true, but text editor selected
                                                '
                                                EditorStyleModifier = "textexpandable"
                                                FieldRows = (cpCore.properties_user_getInteger(adminContent.Name & "." & FieldName & ".RowHeight", 10))
                                                EditorString &= cpCore.htmlDoc.html_GetFormInputTextExpandable2(FormFieldLCaseName, FieldValueText, FieldRows, , FormFieldLCaseName, False, True)
                                                'EditorString = cpCore.main_GetFormInputTextExpandable(FormFieldLCaseName, encodeHTML(FieldValueText), FieldRows, "600px", FormFieldLCaseName, False)
                                            End If
                                    End Select
                                Else
                                    '
                                    '--------------------------------------------------------------------------------------------
                                    '   Not Read Only - Display fields as form elements to be modified
                                    '--------------------------------------------------------------------------------------------
                                    '
                                    Select Case fieldTypeId
                                        Case FieldTypeIdBoolean
                                            '
                                            ' ----- Boolean
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueBoolean = genericController.EncodeBoolean(FieldValueObject)
                                            's.Add( "<td class=""ccAdminEditField""><nobr>" & SpanClassAdminNormal)
                                            EditorString &= (cpCore.htmlDoc.html_GetFormInputCheckBox2(FormFieldLCaseName, FieldValueBoolean, , , "checkBox"))
                                            's.Add( "&nbsp;</span></nobr></td>")
                                            '
                                        Case FieldTypeIdFile, FieldTypeIdFileImage
                                            '
                                            ' ----- File
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            'Call s.Add("<td class=""ccAdminEditField""><nobr>" & SpanClassAdminNormal)
                                            If FieldValueText = "" Then
                                                EditorString &= (cpCore.htmlDoc.html_GetFormInputFile2(FormFieldLCaseName, , "file"))
                                            Else
                                                NonEncodedLink = cpCore.webServer.requestDomain & cpCore.getCdnFileLink(FieldValueText)
                                                EncodedLink = genericController.EncodeURL(NonEncodedLink)
                                                Dim filename As String = ""
                                                Dim path As String = ""
                                                cpCore.privateFiles.splitPathFilename(FieldValueText, path, filename)
                                                EditorString &= ("&nbsp;<a href=""http://" & EncodedLink & """ target=""_blank"">" & SpanClassAdminSmall & "[" & filename & "]</A>")
                                                EditorString &= ("&nbsp;&nbsp;&nbsp;Delete:&nbsp;" & cpCore.htmlDoc.html_GetFormInputCheckBox2(FormFieldLCaseName & ".DeleteFlag", False))
                                                EditorString &= ("&nbsp;&nbsp;&nbsp;Change:&nbsp;" & cpCore.htmlDoc.html_GetFormInputFile2(FormFieldLCaseName, , "file"))
                                            End If
                                            '
                                        Case FieldTypeIdLookup
                                            '
                                            ' ----- Lookup
                                            '
                                            FieldValueInteger = genericController.EncodeInteger(FieldValueObject)
                                            LookupContentName = ""
                                            If .lookupContentID <> 0 Then
                                                LookupContentName = genericController.encodeText(cpCore.metaData.getContentNameByID(.lookupContentID))
                                            End If
                                            If LookupContentName <> "" Then
                                                return_NewFieldList = return_NewFieldList & "," & FieldName
                                                If Not .Required Then
                                                    EditorString &= (cpCore.htmlDoc.main_GetFormInputSelect2(FormFieldLCaseName, FieldValueInteger, LookupContentName, "", "None", "", IsEmptyList, "select"))
                                                Else
                                                    EditorString &= (cpCore.htmlDoc.main_GetFormInputSelect2(FormFieldLCaseName, FieldValueInteger, LookupContentName, "", "", "", IsEmptyList, "select"))
                                                End If
                                                If FieldValueInteger <> 0 Then
                                                    CSPointer = cpCore.csOpenRecord(LookupContentName, FieldValueInteger, , , "ID")
                                                    If cpCore.db.cs_ok(CSPointer) Then
                                                        EditorString &= ("&nbsp;[<a TabIndex=-1 href=""?" & RequestNameAdminForm & "=4&cid=" & .lookupContentID & "&id=" & FieldValueObject.ToString & """ target=""_blank"">Details</a>]")
                                                    End If
                                                    Call cpCore.db.cs_Close(CSPointer)
                                                End If
                                                EditorString &= ("&nbsp;[<a TabIndex=-1 href=""?cid=" & .lookupContentID & """ target=""_blank"">See all " & LookupContentName & "</a>]")
                                            ElseIf .lookupList <> "" Then
                                                return_NewFieldList = return_NewFieldList & "," & FieldName
                                                If Not .Required Then
                                                    EditorString &= cpCore.htmlDoc.main_GetFormInputSelectList2(FormFieldLCaseName, FieldValueInteger, .lookupList, "Select One", "", "select")
                                                Else
                                                    EditorString &= cpCore.htmlDoc.main_GetFormInputSelectList2(FormFieldLCaseName, FieldValueInteger, .lookupList, "", "", "select")
                                                End If
                                            Else
                                                Throw (New ApplicationException("Field [" & FieldName & "] is a Lookup field, but no LookupContent or LookupList has been configured"))
                                                EditorString &= "[Selection not configured]"
                                            End If
                                            '
                                        Case FieldTypeIdMemberSelect
                                            '
                                            ' ----- Member Select
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueInteger = genericController.EncodeInteger(FieldValueObject)
                                            's.Add( "<td class=""ccAdminEditField""><nobr>" & SpanClassAdminNormal)
                                            If Not .Required Then
                                                EditorString &= (cpCore.htmlDoc.html_GetFormInputMemberSelect(FormFieldLCaseName, FieldValueInteger, .MemberSelectGroupID, "", "None", "select"))
                                            Else
                                                EditorString &= (cpCore.htmlDoc.html_GetFormInputMemberSelect(FormFieldLCaseName, FieldValueInteger, .MemberSelectGroupID, "", "", "select"))
                                            End If
                                            If FieldValueInteger <> 0 Then
                                                CSPointer = cpCore.csOpenRecord("people", FieldValueInteger, , , "ID")
                                                If cpCore.db.cs_ok(CSPointer) Then
                                                    EditorString &= ("&nbsp;[<a TabIndex=-1 href=""?" & RequestNameAdminForm & "=4&cid=" & cpCore.metaData.getContentId("people") & "&id=" & FieldValueObject.ToString & """ target=""_blank"">Details</a>]")
                                                End If
                                                Call cpCore.db.cs_Close(CSPointer)
                                            End If
                                            GroupName = cpCore.content_GetRecordName("groups", .MemberSelectGroupID)
                                            EditorString &= ("&nbsp;[<a TabIndex=-1 href=""?cid=" & cpCore.metaData.getContentId("groups") & """ target=""_blank"">Select from members of " & GroupName & "</a>]")
                                            's.Add( "</span></nobr></td>")
                                            '
                                        Case FieldTypeIdManyToMany
                                            '
                                            '   Placeholder
                                            '
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            'Call s.Add("<td class=""ccAdminEditField""><nobr>" & SpanClassAdminNormal)
                                            '
                                            MTMContent0 = cpCore.metaData.getContentNameByID(.contentId)
                                            MTMContent1 = cpCore.metaData.getContentNameByID(.manyToManyContentID)
                                            MTMRuleContent = cpCore.metaData.getContentNameByID(.manyToManyRuleContentID)
                                            MTMRuleField0 = .ManyToManyRulePrimaryField
                                            MTMRuleField1 = .ManyToManyRuleSecondaryField
                                            EditorString &= (cpCore.htmlDoc.main_GetFormInputCheckListCategories("ManyToMany" & .id, MTMContent0, editRecord.id, MTMContent1, MTMRuleContent, MTMRuleField0, MTMRuleField1, , , False, MTMContent1, FieldValueText))
                                        Case FieldTypeIdDate
                                            '
                                            ' ----- Date
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueDate = genericController.encodeDateMinValue(genericController.EncodeDate(FieldValueObject))
                                            If FieldValueDate = Date.MinValue Then
                                                FieldValueText = ""
                                            Else
                                                FieldValueText = CStr(FieldValueDate)
                                            End If
                                            EditorString &= (cpCore.htmlDoc.html_GetFormInputDate(FormFieldLCaseName, FieldValueText))
                                            's.Add( "&nbsp;</span></nobr></td>")
                                        Case FieldTypeIdAutoIdIncrement, FieldTypeIdCurrency, FieldTypeIdFloat, FieldTypeIdInteger
                                            '
                                            ' ----- Others that simply print
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            's.Add( "<td class=""ccAdminEditField""><nobr>" & SpanClassAdminNormal)
                                            If .Password Then
                                                EditorString &= (cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, FieldValueText, , , , True, False, "password"))
                                            Else
                                                If (FieldValueText = "") Then
                                                    EditorString &= (cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, , , , , , , "text"))
                                                Else
                                                    If CBool(InStr(1, FieldValueText, vbLf)) Or (Len(FieldValueText) > 40) Then
                                                        EditorString &= (cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, FieldValueText, , , , , , "text"))
                                                    Else
                                                        EditorString &= (cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, FieldValueText, 1, , , , , "text"))
                                                    End If
                                                End If
                                                's.Add( "&nbsp;</span></nobr></td>")
                                            End If
                                            '
                                        Case FieldTypeIdLink
                                            '
                                            ' ----- Link (href value
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            EditorString = "" _
                                                & cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, FieldValueText, 1, 80, FormFieldLCaseName, , , "link") _
                                                & "&nbsp;<a href=""#"" onClick=""OpenResourceLinkWindow( '" & FormFieldLCaseName & "' ) ;return false;""><img src=""/ccLib/images/ResourceLink1616.gif"" width=16 height=16 border=0 alt=""Link to a resource"" title=""Link to a resource""></a>" _
                                                & "&nbsp;<a href=""#"" onClick=""OpenSiteExplorerWindow( '" & FormFieldLCaseName & "' ) ;return false;""><img src=""/ccLib/images/PageLink1616.gif"" width=16 height=16 border=0 alt=""Link to a page"" title=""Link to a page""></a>"
                                            's.Add( "<td class=""ccAdminEditField""><nobr>" & SpanClassAdminNormal & EditorString & "</span></nobr></td>")
                                        Case FieldTypeIdResourceLink
                                            '
                                            ' ----- Resource Link (src value)
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            EditorString = "" _
                                                & cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, FieldValueText, 1, 80, FormFieldLCaseName, , , "resourceLink") _
                                                & "&nbsp;<a href=""#"" onClick=""OpenResourceLinkWindow( '" & FormFieldLCaseName & "' ) ;return false;""><img src=""/ccLib/images/ResourceLink1616.gif"" width=16 height=16 border=0 alt=""Link to a resource"" title=""Link to a resource""></a>"
                                            '
                                        Case FieldTypeIdText
                                            '
                                            ' ----- Text Type
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            If .Password Then
                                                '
                                                ' Password forces simple text box
                                                '
                                                EditorString = cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, FieldValueText, , , , True, , "password")
                                            Else
                                                '
                                                ' non-password
                                                '
                                                If (InStr(1, FieldValueText, vbLf) = 0) And (Len(FieldValueText) < 40) Then
                                                    '
                                                    ' text field shorter then 40 characters without a CR
                                                    '
                                                    EditorString = cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, FieldValueText, 1, , , , , "text")
                                                Else
                                                    '
                                                    ' longer text data, or text that contains a CR
                                                    '
                                                    EditorStyleModifier = "textexpandable"
                                                    EditorString = cpCore.htmlDoc.html_GetFormInputTextExpandable2(FormFieldLCaseName, FieldValueText, 10, , , , , "text")
                                                End If
                                            End If
                                            '
                                        Case FieldTypeIdHTML, FieldTypeIdFileHTMLPrivate
                                            '
                                            ' content is html
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            '
                                            ' 9/7/2012 -- added this to support:
                                            '   html fields types mean they hold html
                                            '   .htmlContent means edit it with text editor (so you edit the html)
                                            '
                                            If .htmlContent And FieldPreferenceHTML Then
                                                '
                                                ' View the content as Html, not wysiwyg
                                                '
                                                EditorStyleModifier = "textexpandable"
                                                EditorString = cpCore.htmlDoc.html_GetFormInputTextExpandable2(FormFieldLCaseName, FieldValueText, 10, , , , , "text")
                                            Else
                                                '
                                                ' wysiwyg editor
                                                '
                                                If FieldValueText = "" Then
                                                    '
                                                    ' editor needs a starting p tag to setup correctly
                                                    '
                                                    FieldValueText = HTMLEditorDefaultCopyNoCr
                                                End If
                                                EditorStyleModifier = "htmleditor"
                                                FieldRows = (cpCore.properties_user_getInteger(adminContent.Name & "." & FieldName & ".PixelHeight", 500))
                                                EditorString &= cpCore.htmlDoc.html_GetFormInputHTML3(FormFieldLCaseName, FieldValueText, "500", , False, True, editorAddonListJSON, styleList, styleOptionList)
                                                'innovaEditor = New innovaEditorAddonClassFPO
                                                'EditorString = innovaEditor.getInnovaEditor( FormFieldLCaseName, EditorContext, FieldValueText, "", "", True, False, TemplateIDForStyles, emailIdForStyles)
                                                EditorString = "<div style=""width:95%"">" & EditorString & "</div>"
                                                FieldOptionRow = "&nbsp;"
                                            End If
                                            '
                                        Case FieldTypeIdLongText, FieldTypeIdFileTextPrivate
                                            '
                                            ' -- Long Text, use text editor
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            '
                                            EditorStyleModifier = "textexpandable"
                                            FieldRows = (cpCore.properties_user_getInteger(adminContent.Name & "." & FieldName & ".RowHeight", 10))
                                            EditorString = cpCore.htmlDoc.html_GetFormInputTextExpandable2(FormFieldLCaseName, FieldValueText, FieldRows, , FormFieldLCaseName, False, , "text")
                                            '
                                        Case FieldTypeIdFileCSS
                                            '
                                            ' ----- CSS field
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            EditorStyleModifier = "textexpandable"
                                            FieldRows = (cpCore.properties_user_getInteger(adminContent.Name & "." & FieldName & ".RowHeight", 10))
                                            EditorString = cpCore.main_GetFormInputStyles(FormFieldLCaseName, FieldValueText, , "styles")
                                            '
                                        Case FieldTypeIdFileJavascript
                                            '
                                            ' ----- Javascript field
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            EditorStyleModifier = "textexpandable"
                                            FieldRows = (cpCore.properties_user_getInteger(adminContent.Name & "." & FieldName & ".RowHeight", 10))
                                            EditorString = cpCore.htmlDoc.html_GetFormInputTextExpandable2(FormFieldLCaseName, FieldValueText, FieldRows, , FormFieldLCaseName, False, , "text")
                                            '
                                        Case FieldTypeIdFileXML
                                            '
                                            ' ----- xml field
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            EditorStyleModifier = "textexpandable"
                                            FieldRows = (cpCore.properties_user_getInteger(adminContent.Name & "." & FieldName & ".RowHeight", 10))
                                            EditorString = cpCore.htmlDoc.html_GetFormInputTextExpandable2(FormFieldLCaseName, FieldValueText, FieldRows, , FormFieldLCaseName, False, , "text")
                                            '
                                        Case Else
                                            '
                                            ' ----- Legacy text type -- not used unless something was missed
                                            '
                                            return_NewFieldList = return_NewFieldList & "," & FieldName
                                            FieldValueText = genericController.encodeText(FieldValueObject)
                                            If .Password Then
                                                '
                                                ' Password forces simple text box
                                                '
                                                EditorString = cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, FieldValueText, , , , True, , "password")
                                            ElseIf (Not .htmlContent) Then
                                                '
                                                ' not HTML capable, textarea with resizing
                                                '
                                                If (fieldTypeId = FieldTypeIdText) And (InStr(1, FieldValueText, vbLf) = 0) And (Len(FieldValueText) < 40) Then
                                                    '
                                                    ' text field shorter then 40 characters without a CR
                                                    '
                                                    EditorString = cpCore.htmlDoc.html_GetFormInputText2(FormFieldLCaseName, FieldValueText, 1, , , , , "text")
                                                Else
                                                    '
                                                    ' longer text data, or text that contains a CR
                                                    '
                                                    EditorStyleModifier = "textexpandable"
                                                    EditorString = cpCore.htmlDoc.html_GetFormInputTextExpandable2(FormFieldLCaseName, FieldValueText, 10, , , , , "text")
                                                End If
                                            ElseIf .htmlContent And FieldPreferenceHTML Then
                                                '
                                                ' HTMLContent true, and prefered
                                                '
                                                If FieldValueText = "" Then
                                                    '
                                                    ' editor needs a starting p tag to setup correctly
                                                    '
                                                    FieldValueText = HTMLEditorDefaultCopyNoCr
                                                End If
                                                EditorStyleModifier = "htmleditor"
                                                FieldRows = (cpCore.properties_user_getInteger(adminContent.Name & "." & FieldName & ".PixelHeight", 500))
                                                EditorString &= cpCore.htmlDoc.html_GetFormInputHTML3(FormFieldLCaseName, FieldValueText, "500", , False, True, editorAddonListJSON, styleList, styleOptionList)
                                                'innovaEditor = New innovaEditorAddonClassFPO
                                                'EditorString = innovaEditor.getInnovaEditor( FormFieldLCaseName, EditorContext, FieldValueText, "", "", True, False, TemplateIDForStyles, emailIdForStyles)
                                                EditorString = "<div style=""width:95%"">" & EditorString & "</div>"
                                                FieldOptionRow = "&nbsp;"
                                            Else
                                                '
                                                ' HTMLContent true, but text editor selected
                                                '
                                                EditorStyleModifier = "textexpandable"
                                                FieldRows = (cpCore.properties_user_getInteger(adminContent.Name & "." & FieldName & ".RowHeight", 10))
                                                EditorString = cpCore.htmlDoc.html_GetFormInputTextExpandable2(FormFieldLCaseName, cpCore.htmlDoc.html_EncodeHTML(FieldValueText), FieldRows, "600px", FormFieldLCaseName, False, , "text")
                                            End If
                                            's.Add( "<td class=""ccAdminEditField""><nobr>" & SpanClassAdminNormal & EditorString & "</span></nobr></td>")
                                    End Select
                                End If
                            End If
                            '
                            ' Build Help Line Below editor
                            '
                            includeFancyBox = True
                            FieldHelpFound = False
                            EditorRightSideIcon = ""
                            HelpMsgDefault = ""
                            HelpMsgCustom = ""
                            EditorHelp = ""
                            LcaseName = genericController.vbLCase(.nameLc)
                            If AllowHelpMsgCustom Then
                                HelpMsgDefault = .HelpDefault
                                HelpMsgCustom = .HelpCustom
                                'HelpPtr = helpIdIndex.getPtr(CStr(.id))
                                'If HelpPtr >= 0 Then
                                '    FieldHelpFound = True
                                '    HelpMsgDefault = helpDefaultCache(HelpPtr)
                                '    HelpMsgCustom = HelpCustomCache(HelpPtr)
                                'End If
                            End If
                            '
                            ' 12/4/2016 - REFACTOR - this is from the old system. Delete this after we varify it is no longer needed
                            '
                            'If Not FieldHelpFound Then
                            '    Call getFieldHelpMsgs(adminContent.parentID, .nameLc, HelpMsgDefault, HelpMsgCustom)
                            '    CS = cpCore.app.csInsertRecord("Content Field Help")
                            '    If cpCore.app.csOk(CS) Then
                            '        Call cpCore.app.setCS(CS, "fieldid", fieldId)
                            '        Call cpCore.app.setCS(CS, "name", adminContent.Name & "." & .nameLc)
                            '        Call cpCore.app.setCS(CS, "HelpDefault", HelpMsgDefault)
                            '        Call cpCore.app.setCS(CS, "HelpCustom", HelpMsgCustom)
                            '    End If
                            '    Call cpCore.app.csClose(CS)
                            'End If
                            If HelpMsgCustom <> "" Then
                                HelpMsg = HelpMsgCustom
                            Else
                                HelpMsg = HelpMsgDefault
                            End If
                            HelpMsgOpenedRead = HelpMsg
                            HelpMsgClosed = HelpMsg
                            IsEmptyHelp = Len(HelpMsgClosed) = 0
                            IsLongHelp = (Len(HelpMsgClosed) > 100)
                            If IsLongHelp Then
                                HelpMsgClosed = Left(HelpMsgClosed, 100) & "..."
                            End If
                            '
                            HelpID = "helpId" & fieldId
                            HelpEditorID = "helpEditorId" & fieldId
                            HelpOpenedReadID = "HelpOpenedReadID" & fieldId
                            HelpOpenedEditID = "HelpOpenedEditID" & fieldId
                            HelpClosedID = "helpClosedId" & fieldId
                            HelpClosedContentID = "helpClosedContentId" & fieldId
                            AllowHelpRow = True
                            '
                            '------------------------------------------------------------------------------------------------------------
                            ' editor preferences form - a fancybox popup that interfaces with a hardcoded ajax function in init() to set a member property
                            '------------------------------------------------------------------------------------------------------------
                            '
                            AjaxQS = RequestNameAjaxFunction & "=" & ajaxGetFieldEditorPreferenceForm & "&fieldid=" & fieldId & "&currentEditorAddonId=" & editorAddonID & "&fieldTypeDefaultEditorAddonId=" & fieldTypeDefaultEditorAddonId
                            fancyBoxLinkId = "fbl" & fancyBoxPtr
                            fancyBoxContentId = "fbc" & fancyBoxPtr
                            fancyBoxHeadJS = fancyBoxHeadJS _
                                & vbCrLf _
                                & "jQuery('#" & fancyBoxLinkId & "').fancybox({" _
                                & "'titleShow':false," _
                                & "'transitionIn':'elastic'," _
                                & "'transitionOut':'elastic'," _
                                & "'overlayOpacity':'.2'," _
                                & "'overlayColor':'#000000'," _
                                & "'onStart':function(){cj.ajax.qs('" & AjaxQS & "','','" & fancyBoxContentId & "')}" _
                                & "});"
                            EditorHelp = EditorHelp _
                                & cr & "<div style=""float:right;"">" _
                                & cr2 & "<a id=""" & fancyBoxLinkId & """ href=""#" & fancyBoxContentId & """ title=""select an alternate editor for this field."" tabindex=""-1""><img src=""/ccLib/images/NavAltEditor.gif"" width=18 height=18 border=0 style=""vertical-align:middle;"" title=""select an alternate editor for this field.""></a>" _
                                & cr2 & "<div style=""display:none;"">" _
                                & cr3 & "<div class=""ccEditorPreferenceCon"" id=""" & fancyBoxContentId & """><div style=""margin:20px auto auto auto;""><img src=""/ccLib/images/ajax-loader-big.gif"" width=""32"" height=""32""></div></div>" _
                                & cr2 & "</div>" _
                                & cr & "</div>" _
                                & ""
                            fancyBoxPtr = fancyBoxPtr + 1
                            '
                            '------------------------------------------------------------------------------------------------------------
                            ' field help
                            '------------------------------------------------------------------------------------------------------------
                            '
                            If cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                                '
                                ' Admin view
                                '
                                If HelpMsgDefault = "" Then
                                    HelpMsgDefault = "Admin: No default help is available for this field."
                                End If
                                HelpMsgOpenedRead = "" _
                                        & "<!-- close icon --><div class="""" style=""float:right""><a href=""javascript:cj.hide('" & HelpOpenedReadID & "');cj.show('" & HelpClosedID & "');""><img src=""/ccLib/images/NavHelp.gif"" width=18 height=18 border=0 style=""vertical-align:middle;"" title=""close""></a></div>" _
                                        & "<div class=""header"">Default Help</div>" _
                                        & "<div class=""body"">" & HelpMsgDefault & "</div>" _
                                        & "<div class=""header"">Custom Help</div>" _
                                        & "<div class=""body"">" & HelpMsgCustom & "</div>" _
                                    & ""
                                HelpMsgOpenedEdit = "" _
                                        & "<div class=""header"">Default Help</div>" _
                                        & "<div class=""body"">" & HelpMsgDefault & "</div>" _
                                        & "<div class=""header"">Custom Help</div>" _
                                        & "<div class=""body""><textarea id=""" & HelpEditorID & """ ROWS=""10"" style=""width:100%;"">" & HelpMsgCustom & "</TEXTAREA></div>" _
                                        & "<div class="""">" _
                                            & "<input type=""submit"" name=""button"" value=""Update"" onClick=""updateFieldHelp('" & fieldId & "','" & HelpEditorID & "','" & HelpClosedContentID & "');cj.hide('" & HelpOpenedEditID & "');cj.show('" & HelpClosedID & "');return false"">" _
                                            & "<input type=""submit"" name=""button"" value=""Cancel"" onClick=""cj.hide('" & HelpOpenedEditID & "');cj.show('" & HelpClosedID & "');return false"">" _
                                        & "</div>" _
                                    & ""
                                If IsLongHelp Then
                                    '
                                    ' Long help, closed gets MoreHelpIcon (opens to HelpMsgOpenedRead) and HelpEditIcon (opens to readonly default copy plus editor with custom copy)
                                    '
                                    HelpMsgClosed = "" _
                                            & "<!-- open read icon --><div style=""float:right;""><a href=""javascript:cj.hide('" & HelpClosedID & "');cj.show('" & HelpOpenedReadID & "');"" tabindex=""-1""><img src=""/ccLib/images/NavHelp.gif"" width=18 height=18 border=0 style=""vertical-align:middle;"" title=""more help""></a></div>" _
                                            & "<!-- open edit icon --><div style=""float:right;""><a href=""javascript:cj.hide('" & HelpClosedID & "');cj.show('" & HelpOpenedEditID & "');"" tabindex=""-1""><img src=""/ccLib/images/NavHelpEdit.gif"" width=18 height=18 border=0 style=""vertical-align:middle;"" title=""edit help""></a></div>" _
                                            & "<div id=""" & HelpClosedContentID & """>" & HelpMsgClosed & "</div>" _
                                        & ""
                                ElseIf Not IsEmptyHelp Then
                                    '
                                    ' short help, closed gets helpmsgclosed + HelpEditIcon (opens to readonly default copy plus editor with custom copy)
                                    '
                                    HelpMsgClosed = "" _
                                            & "<!-- open edit icon --><div style=""float:right;""><a href=""javascript:cj.hide('" & HelpClosedID & "');cj.show('" & HelpOpenedEditID & "');"" tabindex=""-1""><img src=""/ccLib/images/NavHelpEdit.gif"" width=18 height=18 border=0 style=""vertical-align:middle;"" title=""edit help""></a></div>" _
                                            & "<div id=""" & HelpClosedContentID & """>" & HelpMsgClosed & "</div>" _
                                        & ""
                                Else
                                    '
                                    ' Empty help, closed gets helpmsgclosed + HelpEditIcon (opens to readonly default copy plus editor with custom copy)
                                    '
                                    HelpMsgClosed = "" _
                                            & "<!-- open edit icon --><div style=""float:right;""><a href=""javascript:cj.hide('" & HelpClosedID & "');cj.show('" & HelpOpenedEditID & "');"" tabindex=""-1""><img src=""/ccLib/images/NavHelpEdit.gif"" width=18 height=18 border=0 style=""vertical-align:middle;"" title=""edit help""></a></div>" _
                                            & "<div id=""" & HelpClosedContentID & """>" & HelpMsgClosed & "</div>" _
                                        & ""
                                End If
                                EditorHelp = EditorHelp _
                                    & "<div id=""" & HelpOpenedReadID & """ class=""opened"">" & HelpMsgOpenedRead & "</div>" _
                                    & "<div id=""" & HelpOpenedEditID & """ class=""opened"">" & HelpMsgOpenedEdit & "</div>" _
                                    & "<div id=""" & HelpClosedID & """ class=""closed"">" & HelpMsgClosed & "</div>" _
                                    & ""
                            Else
                                '
                                ' Non-admin view
                                '
                                HelpMsgOpenedRead = "" _
                                        & "<div class=""body"">" _
                                        & "<!-- close icon --><a href=""javascript:cj.hide('" & HelpOpenedReadID & "');cj.show('" & HelpClosedID & "');""><img src=""/ccLib/images/NavHelp.gif"" width=18 height=18 border=0 style=""vertical-align:middle;float:right"" title=""close""></a>" _
                                        & HelpMsg _
                                        & "</div>" _
                                    & ""
                                'HelpMsgOpenedRead = "" _
                                '        & "<!-- close icon --><div class="""" style=""float:right""><a href=""javascript:cj.hide('" & HelpOpenedReadID & "');cj.show('" & HelpClosedID & "');""><img src=""/ccLib/images/NavHelp.gif"" width=18 height=18 border=0 style=""vertical-align:middle;"" title=""close""></a></div>" _
                                '        & "<div class=""body"">" & HelpMsg & "</div>" _
                                '    & ""
                                HelpMsgOpenedEdit = "" _
                                    & ""
                                If IsLongHelp Then
                                    '
                                    ' Long help
                                    '
                                    HelpMsgClosed = "" _
                                        & "<div class=""body"">" _
                                        & "<!-- open read icon --><a href=""javascript:cj.hide('" & HelpClosedID & "');cj.show('" & HelpOpenedReadID & "');""><img src=""/ccLib/images/NavHelp.gif"" width=18 height=18 border=0 style=""vertical-align:middle;float:right;"" title=""more help""></a>" _
                                        & HelpMsgClosed _
                                        & "</div>" _
                                        & ""
                                ElseIf Not IsEmptyHelp Then
                                    '
                                    ' short help
                                    '
                                    HelpMsgClosed = "" _
                                        & "<div class=""body"">" _
                                            & HelpMsg _
                                        & "</div>" _
                                        & ""
                                Else
                                    '
                                    ' no help
                                    '
                                    AllowHelpRow = False
                                    HelpMsgClosed = "" _
                                        & ""
                                End If
                                EditorHelp = EditorHelp _
                                    & "<div id=""" & HelpOpenedReadID & """ class=""opened"">" & HelpMsgOpenedRead & "</div>" _
                                    & "<div id=""" & HelpClosedID & """ class=""closed"">" & HelpMsgClosed & "</div>" _
                                    & ""
                            End If
                            '
                            ' assemble the help line
                            '
                            s.Add("<tr>" _
                                & "<td class=""ccEditCaptionCon""><div class=""" & EditorStyleModifier & """>" & Caption & "<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""15"" ></div></td>" _
                                & "<td class=""ccEditFieldCon"">" _
                                & "<div class=""ccEditorCon"">" & EditorString & "</div>")
                            If AllowHelpRow Then
                                s.Add("<div class=""ccEditorHelpCon"">" & EditorHelp & "</div>")
                            End If
                            s.Add("" _
                                & "</td>" _
                                & "</tr>")
                        End With
                    Next
                    '
                    ' ----- add the *Required Fields footer
                    '
                    Call s.Add("" _
                    & "<tr><td colspan=2 style=""padding-top:10px;font-size:70%"">" _
                    & "<div>* Field is required.</div>" _
                    & "<div>** Field must be unique.</div>")
                    If needUniqueEmailMessage Then
                        Call s.Add("<div>*** Field must be unique because this site allows login by email.</div>")
                    End If
                    Call s.Add("</td></tr>")
                    '
                    ' ----- close the panel
                    '
                    If EditTab = "" Then
                        Caption = "Content Fields"
                    Else
                        Caption = "Content Fields - " & EditTab
                    End If
                    EditSectionPanelCount = EditSectionPanelCount + 1
                    returnHtml = Adminui.GetEditPanel((Not allowAdminTabs), Caption, "", Adminui.EditTableOpen & s.Text & Adminui.EditTableClose)
                    EditSectionPanelCount = EditSectionPanelCount + 1
                    s = Nothing
                    'If Return_NewFieldList <> "" Then
                    '    returnHtml = returnHtml & cpCore.main_GetFormInputHidden( "FormFieldList", Mid(Return_NewFieldList, 2))
                    'End If
                End If
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return returnHtml
        End Function
        '
        '========================================================================
        '   Display field in the admin/edit
        '========================================================================
        '
        Private Function GetForm_Edit_ContentTracking(adminContent As cdefModel, editRecord As editRecordClass) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_ContentTracking")
            '
            Dim CSRules As Integer
            Dim HTMLFieldString As String
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim CSPointer As Integer
            Dim RecordID As Integer
            Dim ContentID As Integer
            Dim CSLists As Integer
            Dim RecordCount As Integer
            Dim ContentWatchListID As Integer
            Dim FastString As stringBuilderLegacyController
            Dim Copy As String
            Dim Adminui As New adminUIController(cpCore)
            '
            If adminContent.AllowContentTracking Then
                FastString = New stringBuilderLegacyController
                '
                If Not ContentWatchLoaded Then
                    '
                    ' ----- Load in the record to print
                    '
                    Call LoadContentTrackingDataBase(adminContent, editRecord)
                    Call LoadContentTrackingResponse(adminContent, editRecord)
                    '        Call LoadAndSaveCalendarEvents
                End If
                CSLists = cpCore.db.cs_open("Content Watch Lists", "name<>" & cpCore.db.encodeSQLText(""), "ID")
                If cpCore.db.cs_ok(CSLists) Then
                    '
                    ' ----- Open the panel
                    '
                    'Call cpCore.main_PrintPanelTop("ccPanel", "ccPanelShadow", "ccPanelHilite", "100%", 5)
                    'Call FastString.Add(adminui.EditTableOpen)
                    'Call FastString.Add(vbCrLf & "<tr><td colspan=""3"" class=""ccAdminEditSubHeader"">Content Tracking</td></tr>")
                    '            '
                    '            ' ----- Print matching Content Watch fields
                    '            '
                    '            Call FastString.Add(cpCore.main_GetFormInputHidden("WhatsNewResponse", -1))
                    '            Call FastString.Add(cpCore.main_GetFormInputHidden("contentwatchrecordid", ContentWatchRecordID))
                    '
                    ' ----- Content Watch Lists, checking the ones that have active rules
                    '
                    RecordCount = 0
                    Do While cpCore.db.cs_ok(CSLists)
                        ContentWatchListID = cpCore.db.cs_getInteger(CSLists, "id")
                        '
                        If ContentWatchRecordID <> 0 Then
                            CSRules = cpCore.db.cs_open("Content Watch List Rules", "(ContentWatchID=" & ContentWatchRecordID & ")AND(ContentWatchListID=" & ContentWatchListID & ")")
                            If editRecord.Read_Only Then
                                HTMLFieldString = genericController.encodeText(cpCore.db.cs_ok(CSRules))
                            Else
                                HTMLFieldString = cpCore.htmlDoc.html_GetFormInputCheckBox2("ContentWatchList." & cpCore.db.cs_get(CSLists, "ID"), cpCore.db.cs_ok(CSRules))
                            End If
                            Call cpCore.db.cs_Close(CSRules)
                        Else
                            If editRecord.Read_Only Then
                                HTMLFieldString = genericController.encodeText(False)
                            Else
                                HTMLFieldString = cpCore.htmlDoc.html_GetFormInputCheckBox2("ContentWatchList." & cpCore.db.cs_get(CSLists, "ID"), False)
                            End If
                        End If
                        '
                        Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Include in " & cpCore.db.cs_get(CSLists, "name"), "When true, this Content Record can be included in the '" & cpCore.db.cs_get(CSLists, "name") & "' list", False, False, ""))
                        Call cpCore.db.cs_goNext(CSLists)
                        RecordCount = RecordCount + 1
                    Loop
                    '
                    ' ----- Whats New Headline (editable)
                    '
                    If editRecord.Read_Only Then
                        HTMLFieldString = cpCore.htmlDoc.main_encodeHTML(ContentWatchLinkLabel)
                    Else
                        HTMLFieldString = cpCore.htmlDoc.html_GetFormInputText2("ContentWatchLinkLabel", ContentWatchLinkLabel, 1, cpCore.siteProperties.defaultFormInputWidth)
                        'HTMLFieldString = "<textarea rows=""1"" name=""ContentWatchLinkLabel"" cols=""" & cpCore.app.SiteProperty_DefaultFormInputWidth & """>" & ContentWatchLinkLabel & "</textarea>"
                    End If
                    Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Caption", "This caption is displayed on all Content Watch Lists, linked to the location on the web site where this content is displayed. RSS feeds created from Content Watch Lists will use this caption as the record title if not other field is selected in the Content Definition.", False, True, "ContentWatchLinkLabel"))
                    '
                    ' ----- Whats New Expiration
                    '
                    Copy = ContentWatchExpires.ToString
                    If Copy = "12:00:00 AM" Then
                        Copy = ""
                    End If
                    If editRecord.Read_Only Then
                        HTMLFieldString = cpCore.htmlDoc.main_encodeHTML(Copy)
                    Else
                        HTMLFieldString = cpCore.htmlDoc.html_GetFormInputDate("ContentWatchExpires", Copy, cpCore.siteProperties.defaultFormInputWidth.ToString)
                        'HTMLFieldString = "<textarea rows=""1"" name=""ContentWatchExpires"" cols=""" & cpCore.app.SiteProperty_DefaultFormInputWidth & """>" & Copy & "</textarea>"
                    End If
                    Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Expires", "When this record is included in a What's New list, this record is blocked from the list after this date.", False, False, ""))
                    '
                    ' ----- Public Link (read only)
                    '
                    HTMLFieldString = ContentWatchLink
                    If HTMLFieldString = "" Then
                        HTMLFieldString = "(must first be viewed on public site)"
                    End If
                    Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Location on Site", "The public site URL where this content was last viewed.", False, False, ""))
                    '
                    ' removed 11/27/07 - RSS clicks not counted, rc/ri method of counting link clicks is not reliable.
                    '            '
                    '            ' ----- Clicks (read only)
                    '            '
                    '            HTMLFieldString = ContentWatchClicks
                    '            If HTMLFieldString = "" Then
                    '                HTMLFieldString = 0
                    '                End If
                    '            Call FastString.Add(AdminUI.GetEditRow( HTMLFieldString, "Clicks", "The number of site users who have clicked this link in what's new lists", False, False, ""))
                    '
                    ' ----- close the panel
                    '
                    Dim s As String
                    s = "" _
                        & Adminui.EditTableOpen _
                        & FastString.Text _
                        & Adminui.EditTableClose _
                        & cpCore.htmlDoc.html_GetFormInputHidden("WhatsNewResponse", "-1") _
                        & cpCore.htmlDoc.html_GetFormInputHidden("contentwatchrecordid", ContentWatchRecordID.ToString)
                    GetForm_Edit_ContentTracking = Adminui.GetEditPanel((Not allowAdminTabs), "Content Tracking", "Include in Content Watch Lists", s)
                    EditSectionPanelCount = EditSectionPanelCount + 1
                    '
                End If
                Call cpCore.db.cs_Close(CSLists)
                FastString = Nothing
            End If
            '
            Exit Function
            '
ErrorTrap:
            FastString = Nothing
            Call handleLegacyClassError3("GetForm_Edit_ContentTracking")
        End Function
        '
        '========================================================================
        '   Display field in the admin/edit
        '========================================================================
        '
        Private Function GetForm_Edit_Control(adminContent As cdefModel, editRecord As editRecordClass) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_Control")
            '
            Dim s As String
            Dim ContentCategoryID As Integer
            Dim AllowEID As Boolean
            Dim EID As String
            Dim IsEmptyList As Boolean
            Dim ParentID As Integer
            Dim ParentCID As Integer
            Dim Criteria As String
            Dim LimitContentSelectToThisID As Integer
            Dim SQL As String
            Dim TableID As Integer
            Dim TableName As Integer
            Dim ChildCID As Integer
            Dim CIDList As String = ""
            Dim TableName2 As String
            Dim RecordContentName As String
            Dim ContentSupportsParentID As Boolean
            Dim CS As Integer
            Dim HTMLFieldString As String
            'Dim FieldPtr As Integer
            Dim CSPointer As Integer
            Dim RecordID As Integer
            Dim hiddenInputs As String = ""
            Dim FastString As stringBuilderLegacyController
            Dim FieldValueInteger As Integer
            Dim FieldRequired As Boolean
            Dim FieldHelp As String
            Dim AuthoringStatusMessage As String
            Dim Delimiter As String
            Dim Copy As String
            Dim Adminui As New adminUIController(cpCore)
            '''Dim arrayOfFields() As appServices_metaDataClass.CDefFieldClass
            '
            FastString = New stringBuilderLegacyController
            '
            'arrayOfFields = adminContent.fields
            With adminContent
                '
                ' ----- test admin content before using it
                '
                If .Name = "" Then
                    '
                    ' Content not found or not loaded
                    '
                    If .Id = 0 Then
                        '
                        ' Content Definition was not found
                        '
                        Call handleLegacyClassError("GetForm_Edit_Control", "No content definition was specified for this page")
                    Else
                        '
                        ' Content Definition was not specified
                        '
                        Call handleLegacyClassError("GetForm_Edit_Control", "The content definition specified for this page [" & .Id & "] was not found")
                    End If
                Else
                End If
                '
                Dim Checked As Boolean
                '
                ' ----- Authoring status
                '
                FieldHelp = "In immediate authoring mode, the live site is changed when each record is saved. In Workflow authoring mode, there are several steps to publishing a change. This field displays the current stage of this record."
                FieldRequired = False
                AuthoringStatusMessage = cpCore.main_GetAuthoringStatusMessage(AdminContentWorkflowAuthoring, editRecord.EditLock, editRecord.EditLockMemberName, editRecord.EditLockExpires, editRecord.ApproveLock, editRecord.ApprovedName, editRecord.SubmitLock, editRecord.SubmittedName, editRecord.IsDeleted, editRecord.IsInserted, editRecord.IsModified, editRecord.LockModifiedName)
                Call FastString.Add(Adminui.GetEditRow(AuthoringStatusMessage, "Authoring Status", FieldHelp, FieldRequired, False, ""))
                'Call FastString.Add(AdminUI.GetEditRow( AuthoringStatusMessage, "Authoring Status", FieldHelp, FieldRequired, False, ""))
                '
                ' ----- RecordID
                '
                FieldHelp = "This is the unique number that identifies this record within this content."
                If editRecord.id = 0 Then
                    HTMLFieldString = "(available after save)"
                Else
                    HTMLFieldString = genericController.encodeText(editRecord.id)
                End If
                HTMLFieldString = cpCore.htmlDoc.html_GetFormInputText2("ignore", HTMLFieldString, , , , , True)
                Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Record Number", FieldHelp, True, False, ""))
                '
                ' ----- If Page Content , check if this is the default PageNotFound page
                '
                If genericController.vbLCase(adminContent.ContentTableName) = "ccpagecontent" Then
                    '
                    ' Landing Page
                    '
                    Copy = "If selected, this page will be displayed when a user comes to your website with just your domain name and no other page is requested. This is called your default Landing Page. Only one page on the site can be the default Landing Page. If you want a unique Landing Page for a specific domain name, add it in the 'Domains' content and the default will not be used for that docpCore.main_"
                    Checked = ((editRecord.id <> 0) And (editRecord.id = (cpCore.siteProperties.getinteger("LandingPageID", 0))))
                    If cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                        HTMLFieldString = cpCore.htmlDoc.html_GetFormInputCheckBox2("LandingPageID", Checked)
                    Else
                        HTMLFieldString = "<b>" & genericController.GetYesNo(Checked) & "</b>" & cpCore.htmlDoc.html_GetFormInputHidden("LandingPageID", Checked)
                    End If
                    HTMLFieldString = HTMLFieldString
                    Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Set Default Landing Page", Copy, False, False, ""))
                    '
                    ' Page Not Found
                    '
                    Copy = "If selected, this content will be displayed when a page can not be found. Only one page on the site can be marked."
                    Checked = ((editRecord.id <> 0) And (editRecord.id = (cpCore.siteProperties.getinteger("PageNotFoundPageID", 0))))
                    If cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                        HTMLFieldString = cpCore.htmlDoc.html_GetFormInputCheckBox2("PageNotFound", Checked)
                    Else
                        HTMLFieldString = "<b>" & genericController.GetYesNo(Checked) & "</b>" & cpCore.htmlDoc.html_GetFormInputHidden("PageNotFound", Checked)
                    End If
                    '            If (EditRecord.ID <> 0) And (EditRecord.ID = cpCore.main_GetSiteProperty2("PageNotFoundPageID", "0", True)) Then
                    '                HTMLFieldString = cpCore.main_GetFormInputCheckBox2("PageNotFound", True)
                    '            Else
                    '                HTMLFieldString = cpCore.main_GetFormInputCheckBox2("PageNotFound", False)
                    '            End If
                    HTMLFieldString = HTMLFieldString
                    Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Set Page Not Found", Copy, False, False, ""))
                End If
                '
                ' ----- Last Known Public Site URL
                '
                If (UCase(adminContent.ContentTableName) = "CCPAGECONTENT") Or (UCase(adminContent.ContentTableName) = "ITEMS") Then
                    FieldHelp = "This is the URL where this record was last displayed on the site. It may be blank if the record has not been displayed yet."
                    Copy = cpCore.pages.getContentWatchLinkByKey(editRecord.contentControlId & "." & editRecord.id, , False)
                    If Copy = "" Then
                        HTMLFieldString = "unknown"
                    Else
                        HTMLFieldString = "<a href=""" & cpCore.htmlDoc.html_EncodeHTML(Copy) & """ target=""_blank"">" & Copy & "</a>"
                    End If
                    Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Last Known Public URL", FieldHelp, False, False, ""))
                End If
                '
                ' ----- Widget Code
                '
                If genericController.vbLCase(adminContent.ContentTableName) = "ccaggregatefunctions" Then
                    '
                    ' ----- Add-ons
                    '
                    Dim AllowWidget As Boolean
                    AllowWidget = False
                    If editRecord.fieldsLc.ContainsKey("remotemethod") Then
                        AllowWidget = genericController.EncodeBoolean(editRecord.fieldsLc.Item("remotemethod").value)
                    End If
                    If Not AllowWidget Then
                        FieldHelp = "If you wish to use this add-on as a widget, enable 'Is Remote Method' on the 'Placement' tab and save the record. The necessary html code, or 'embed code' will be created here for you to cut-and-paste into the website."
                        HTMLFieldString = ""
                        HTMLFieldString = cpCore.htmlDoc.html_GetFormInputTextExpandable2("ignore", HTMLFieldString, 1, , , , True)
                        Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Widget Code", FieldHelp, True, False, ""))
                    Else
                        FieldHelp = "If you wish to use this add-on as a widget, cut and paste the 'Widget Code' into the website content. If any code appears in the 'Widget Head', this will need to be pasted into the head section of the website."
                        HTMLFieldString = "" _
                            & "<SCRIPT type=text/javascript>" _
                            & vbCrLf & "var ccProto=(('https:'==document.location.protocol) ? 'https://' : 'http://');" _
                            & vbCrLf & "document.write(unescape(""%3Cscript src='"" + ccProto + """ & cpCore.webServer.webServerIO_requestDomain & "/ccLib/ClientSide/Core.js' type='text/javascript'%3E%3C/script%3E""));" _
                            & vbCrLf & "document.write(unescape(""%3Cscript src='"" + ccProto + """ & cpCore.webServer.webServerIO_requestDomain & "/" & genericController.EncodeURL(editRecord.nameLc) & "?requestjsform=1' type='text/javascript'%3E%3C/script%3E""));" _
                            & vbCrLf & "</SCRIPT>"
                        '<SCRIPT type=text/javascript>
                        'var gaJsHost = (("https:" == document.location.protocol) ? "https://ssl." : "http://www.");
                        'document.write(unescape("%3Cscript src='" + gaJsHost + "google-analytics.com/ga.js' type='text/javascript'%3E%3C/script%3E"));
                        '</SCRIPT>
                        '                HTMLFieldString = "" _
                        '                    & "<script language=""javascript"" type=""text/javascript"" src=""http://" & cpCore.main_ServerDomain & "/ccLib/ClientSide/Core.js""></script>" _
                        '                    & vbCrLf & "<script language=""javascript"" type=""text/javascript"" src=""http://" & cpCore.main_ServerDomain & "/" & EditRecord.Name & "?requestjsform=1""></script>" _
                        '                    & ""
                        HTMLFieldString = cpCore.htmlDoc.html_GetFormInputTextExpandable2("ignore", HTMLFieldString, 8)
                        Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Widget Code", FieldHelp, True, False, ""))
                    End If
                End If
                '
                ' ----- GUID
                '
                If editRecord.fieldsLc.ContainsKey("ccguid") Then
                    Dim contentField As CDefFieldModel = adminContent.fields.Item("ccguid")
                    HTMLFieldString = genericController.encodeText(editRecord.fieldsLc.Item("ccguid").value)
                    FieldHelp = "This is a unique number that identifies this record globally. A GUID is not required, but when set it should never be changed. GUIDs are used to synchronize records. When empty, you can create a new guid. Only Developers can modify the guid."
                    If HTMLFieldString = "" Then
                        '
                        ' add a set button
                        '
                        Dim ccGuid As String
                        ccGuid = "{" & Guid.NewGuid.ToString() & "}"
                        HTMLFieldString = cpCore.htmlDoc.html_GetFormInputText2("ccguid", HTMLFieldString, , , "ccguid", , False) & "<input type=button value=set onclick=""var e=document.getElementById('ccguid');e.value='" & ccGuid & "';this.disabled=true;"">"
                    Else
                        '
                        ' field is read-only except for developers
                        '
                        If cpCore.authContext.isAuthenticatedDeveloper(cpCore) Then
                            HTMLFieldString = cpCore.htmlDoc.html_GetFormInputText2("ccguid", HTMLFieldString, , , , , False) & ""
                        Else
                            HTMLFieldString = cpCore.htmlDoc.html_GetFormInputText2("ccguid", HTMLFieldString, , , , , True) & cpCore.htmlDoc.html_GetFormInputHidden("ccguid", HTMLFieldString)
                        End If
                    End If
                    Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "GUID", FieldHelp, False, False, ""))
                End If
                '
                ' ----- ContentCategoryID
                '
                FieldHelp = "All content on the site can be subdivided into content categories. This is the category for this record."
                HTMLFieldString = cpCore.htmlDoc.main_GetFormInputSelect2("ContentCategoryID", editRecord.contentCategoryID, "Content Categories", "", "", "", IsEmptyList)
                If IsEmptyList Then
                    hiddenInputs &= cpCore.htmlDoc.html_GetFormInputHidden("contentcategoryid", editRecord.contentCategoryID)
                Else
                    Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Content Category", FieldHelp, True, False, ""))
                End If
                '
                ' ----- EID (Encoded ID)
                '
                FieldHelp = ""
                If genericController.vbUCase(adminContent.ContentTableName) = genericController.vbUCase("ccMembers") Then
                    AllowEID = (cpCore.siteProperties.getBoolean("AllowLinkLogin", True)) Or (cpCore.siteProperties.getBoolean("AllowLinkRecognize", True))
                    If (Not AllowEID) Then
                        HTMLFieldString = "(link login and link recognize are disabled in security preferences)"
                    ElseIf editRecord.id = 0 Then
                        HTMLFieldString = "(available after save)"
                    Else
                        EID = genericController.encodeText(cpCore.security.encodeToken(editRecord.id, cpCore.app_startTime))
                        If (cpCore.siteProperties.getBoolean("AllowLinkLogin", True)) Then
                            HTMLFieldString = EID
                            'HTMLFieldString = EID _
                            '            & "<div>Any visitor who hits the site with eid=" & EID & " will be logged in as this member.</div>"
                            FieldHelp = "Any visitor who hits the site with eid=" & EID & " will be logged in as this member."
                        Else
                            FieldHelp = "Any visitor who hits the site with eid=" & EID & " will be recognized as this member, but not logged in."
                            HTMLFieldString = EID
                            'HTMLFieldString = EID _
                            '            & "<div>Any visitor who hits the site with eid=" & EID & " will be recognized as this member, but not logged in</div>"
                        End If
                        FieldHelp = FieldHelp & " To enable, disable or modify this feature, use the security tab on the Preferences page."
                    End If
                    HTMLFieldString = cpCore.htmlDoc.html_GetFormInputText2("ignore", HTMLFieldString)
                    Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Member Link Login EID", FieldHelp, True, False, ""))
                End If
                '
                ' ----- Controlling Content
                '
                HTMLFieldString = ""
                FieldHelp = "The content in which this record is stored. This is similar to a database table."
                Dim field As CDefFieldModel
                If adminContent.fields.ContainsKey("contentcontrolid") Then
                    field = adminContent.fields("contentcontrolid")
                    With field
                        '
                        ' if this record has a parent id, only include CDefs compatible with the parent record - otherwise get all for the table
                        '
                        FieldHelp = genericController.encodeText(.HelpMessage)
                        FieldRequired = genericController.EncodeBoolean(.Required)
                        FieldValueInteger = editRecord.contentControlId
                        '
                        '
                        '
                        If Not cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                            HTMLFieldString = HTMLFieldString & cpCore.htmlDoc.html_GetFormInputHidden("ContentControlID", FieldValueInteger)
                        Else
                            RecordContentName = editRecord.contentControlId_Name
                            Dim RecordCDef As cdefModel
                            TableName2 = cpCore.GetContentTablename(RecordContentName)
                            TableID = cpCore.main_GetRecordID("Tables", TableName2)
                            '
                            ' Test for parentid
                            '
                            ParentID = 0
                            ContentSupportsParentID = False
                            If editRecord.id > 0 Then
                                CS = cpCore.csOpen(RecordContentName, editRecord.id)
                                If cpCore.db.cs_ok(CS) Then
                                    ContentSupportsParentID = cpCore.db.cs_isFieldSupported(CS, "ParentID")
                                    If ContentSupportsParentID Then
                                        ParentID = cpCore.db.cs_getInteger(CS, "ParentID")
                                    End If
                                End If
                                Call cpCore.db.cs_Close(CS)
                            End If
                            '
                            LimitContentSelectToThisID = 0
                            If ContentSupportsParentID Then
                                '
                                ' Parentid - restrict CDefs to those compatible with the parentid
                                '
                                If ParentID <> 0 Then
                                    '
                                    ' This record has a parent, set LimitContentSelectToThisID to the parent's CID
                                    '
                                    CSPointer = cpCore.csOpen(RecordContentName, ParentID, , , "ContentControlID")
                                    If cpCore.db.cs_ok(CSPointer) Then
                                        LimitContentSelectToThisID = cpCore.db.cs_getInteger(CSPointer, "ContentControlID")
                                    End If
                                    Call cpCore.db.cs_Close(CSPointer)
                                End If

                            End If
                            If cpCore.authContext.isAuthenticatedAdmin(cpCore) And (LimitContentSelectToThisID = 0) Then
                                '
                                ' administrator, and either ( no parentid or does not support it), let them select any content compatible with the table
                                '
                                HTMLFieldString = HTMLFieldString & cpCore.htmlDoc.main_GetFormInputSelect2("ContentControlID", FieldValueInteger, "Content", "ContentTableID=" & TableID, "", "", IsEmptyList)
                                FieldHelp = FieldHelp & " (Only administrators have access to this control. Changing the Controlling Content allows you to change who can author the record, as well as how it is edited.)"
                            Else
                                '
                                ' Limit the list to only those cdefs that are within the record's parent contentid
                                '
                                RecordContentName = editRecord.contentControlId_Name
                                TableName2 = cpCore.GetContentTablename(RecordContentName)
                                TableID = cpCore.main_GetRecordID("Tables", TableName2)
                                CSPointer = cpCore.db.cs_open("Content", "ContentTableID=" & TableID, , , , , , "ContentControlID")
                                Do While cpCore.db.cs_ok(CSPointer)
                                    ChildCID = cpCore.db.cs_getInteger(CSPointer, "ID")
                                    If (cpCore.IsWithinContent(ChildCID, LimitContentSelectToThisID)) Then
                                        If (cpCore.authContext.isAuthenticatedAdmin(cpCore)) Or (cpCore.authContext.isAuthenticatedContentManager(cpCore, cpCore.metaData.getContentNameByID(ChildCID))) Then
                                            CIDList = CIDList & "," & ChildCID
                                        End If
                                    End If
                                    cpCore.db.cs_goNext(CSPointer)
                                Loop
                                Call cpCore.db.cs_Close(CSPointer)
                                If CIDList <> "" Then
                                    CIDList = Mid(CIDList, 2)
                                    HTMLFieldString = cpCore.htmlDoc.main_GetFormInputSelect2("ContentControlID", FieldValueInteger, "Content", "id in (" & CIDList & ")", "", "", IsEmptyList)
                                    FieldHelp = FieldHelp & " (Only administrators have access to this control. Changing the Controlling Content allows you to change who can author the record, as well as how it is edited. This record includes a Parent field, so your choices for controlling content are limited to those compatible with the parent of this record.)"
                                End If
                            End If
                        End If
                    End With
                End If
                If HTMLFieldString = "" Then
                    HTMLFieldString = editRecord.contentControlId_Name
                    'HTMLFieldString = cpCore.metaData.getContentNameByID(EditRecord.ContentID)
                End If
                Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Controlling Content", FieldHelp, FieldRequired, False, ""))
                '
                ' ----- Created By
                '
                FieldHelp = "The people account of the user who created this record."
                If editRecord.id = 0 Then
                    HTMLFieldString = "(available after save)"
                Else
                    FieldValueInteger = editRecord.createByMemberId
                    If FieldValueInteger = 0 Then
                        HTMLFieldString = "unknown"
                    Else
                        CSPointer = cpCore.csOpenRecord("people", FieldValueInteger, True)
                        If Not cpCore.db.cs_ok(CSPointer) Then
                            HTMLFieldString = "unknown"
                        Else
                            HTMLFieldString = cpCore.db.cs_get(CSPointer, "name")
                        End If
                        Call cpCore.db.cs_Close(CSPointer)
                    End If
                End If
                HTMLFieldString = cpCore.htmlDoc.html_GetFormInputText2("ignore", HTMLFieldString, , , , , True)
                Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Created By", FieldHelp, FieldRequired, False, ""))
                '
                ' ----- Created Date
                '
                FieldHelp = "The date and time when this record was originally created."
                If editRecord.id = 0 Then
                    HTMLFieldString = "(available after save)"
                Else
                    HTMLFieldString = genericController.encodeText(genericController.EncodeDate(editRecord.dateAdded))
                    If HTMLFieldString = "12:00:00 AM" Then
                        HTMLFieldString = "unknown"
                    End If
                End If
                HTMLFieldString = cpCore.htmlDoc.html_GetFormInputText2("ignore", HTMLFieldString, , , , , True)
                Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Created Date", FieldHelp, FieldRequired, False, ""))
                '
                ' ----- Modified By
                '
                FieldHelp = "The people account of the last user who modified this record."
                If editRecord.id = 0 Then
                    HTMLFieldString = "(available after save)"
                Else
                    FieldValueInteger = editRecord.modifiedByMemberID
                    HTMLFieldString = "unknown"
                    If FieldValueInteger > 0 Then
                        CSPointer = cpCore.csOpenRecord("people", FieldValueInteger, True, , "name")
                        If cpCore.db.cs_ok(CSPointer) Then
                            HTMLFieldString = cpCore.db.cs_get(CSPointer, "name")
                        End If
                        Call cpCore.db.cs_Close(CSPointer)
                    End If
                End If
                HTMLFieldString = cpCore.htmlDoc.html_GetFormInputText2("ignore", HTMLFieldString, , , , , True)
                Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Modified By", FieldHelp, FieldRequired, False, ""))
                '
                ' ----- Modified Date
                '
                FieldHelp = "The date and time when this record was last modified"
                If editRecord.id = 0 Then
                    HTMLFieldString = "(available after save)"
                Else
                    HTMLFieldString = genericController.encodeText(genericController.EncodeDate(editRecord.modifiedDate))
                    If HTMLFieldString = "12:00:00 AM" Then
                        HTMLFieldString = "unknown"
                    End If
                End If
                HTMLFieldString = cpCore.htmlDoc.html_GetFormInputText2("ignore", HTMLFieldString, , , , , True)
                Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, "Modified Date", FieldHelp, False, False, ""))
            End With
            s = "" _
                & Adminui.EditTableOpen _
                & FastString.Text _
                & Adminui.EditTableClose _
                & hiddenInputs _
                & ""
            GetForm_Edit_Control = Adminui.GetEditPanel((Not allowAdminTabs), "Control Information", "", s)
            EditSectionPanelCount = EditSectionPanelCount + 1
            FastString = Nothing
            '
            Exit Function
            '
ErrorTrap:
            FastString = Nothing
            Call handleLegacyClassError3("GetForm_Edit_Control")
        End Function
        '
        '========================================================================
        '   Display field in the admin/edit
        '========================================================================
        '
        Private Function GetForm_Edit_SiteProperties(adminContent As cdefModel, editRecord As editRecordClass) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_SiteProperties")
            '
            Dim ExpandedSelector As String = ""
            Dim ignore As String = ""
            Dim OptionCaption As String
            Dim OptionValue As String
            Dim OptionValue_AddonEncoded As String
            Dim OptionPtr As Integer
            Dim OptionCnt As Integer
            Dim OptionValues() As String
            Dim OptionSuffix As String = ""
            Dim LCaseOptionDefault As String
            Dim Pos As Integer
            Dim Checked As Boolean
            Dim ParentID As Integer
            Dim ParentCID As Integer
            Dim Criteria As String
            Dim RootCID As Integer
            Dim SQL As String
            Dim TableID As Integer
            Dim TableName As Integer
            Dim ChildCID As Integer
            Dim CIDList As String
            Dim TableName2 As String
            Dim RecordContentName As String
            Dim HasParentID As Boolean
            Dim CS As Integer
            Dim HTMLFieldString As String
            ' converted array to dictionary - Dim FieldPointer As Integer
            Dim CSPointer As Integer
            Dim RecordID As Integer
            Dim FastString As stringBuilderLegacyController
            Dim FieldValueInteger As Integer
            Dim FieldRequired As Boolean
            Dim FieldHelp As String
            Dim AuthoringStatusMessage As String
            Dim Delimiter As String
            Dim Copy As String = ""
            Dim Adminui As New adminUIController(cpCore)
            '
            Dim FieldPtr As Integer
            Dim SitePropertyName As String
            Dim SitePropertyValue As String
            Dim selector As String
            Dim FieldName As String
            '
            FastString = New stringBuilderLegacyController
            '
            SitePropertyName = ""
            SitePropertyValue = ""
            selector = ""
            For Each keyValuePair As KeyValuePair(Of String, CDefFieldModel) In adminContent.fields
                Dim field As CDefFieldModel = keyValuePair.Value
                '
                FieldName = field.nameLc
                If genericController.vbLCase(FieldName) = "name" Then
                    SitePropertyName = genericController.encodeText(editRecord.fieldsLc(field.nameLc).value)
                ElseIf (LCase(FieldName) = "fieldvalue") Then
                    SitePropertyValue = genericController.encodeText(editRecord.fieldsLc(field.nameLc).value)
                ElseIf (LCase(FieldName) = "selector") Then
                    selector = genericController.encodeText(editRecord.fieldsLc(field.nameLc).value)
                End If
            Next
            If SitePropertyName = "" Then
                HTMLFieldString = "This Site Property is not defined"
            Else
                HTMLFieldString = cpCore.htmlDoc.html_GetFormInputHidden("name", SitePropertyName)
                Call cpCore.addon.buildAddonOptionLists(ignore, ExpandedSelector, SitePropertyName & "=" & selector, SitePropertyName & "=" & SitePropertyValue, "0", True)



                '--------------

                Pos = genericController.vbInstr(1, ExpandedSelector, "[")
                If Pos <> 0 Then
                    '
                    ' List of Options, might be select, radio or checkbox
                    '
                    LCaseOptionDefault = genericController.vbLCase(Mid(ExpandedSelector, 1, Pos - 1))
                    LCaseOptionDefault = genericController.decodeNvaArgument(LCaseOptionDefault)

                    ExpandedSelector = Mid(ExpandedSelector, Pos + 1)
                    Pos = genericController.vbInstr(1, ExpandedSelector, "]")
                    If Pos > 0 Then
                        If Pos < Len(ExpandedSelector) Then
                            OptionSuffix = genericController.vbLCase(Trim(Mid(ExpandedSelector, Pos + 1)))
                        End If
                        ExpandedSelector = Mid(ExpandedSelector, 1, Pos - 1)
                    End If
                    OptionValues = Split(ExpandedSelector, "|")
                    HTMLFieldString = ""
                    OptionCnt = UBound(OptionValues) + 1
                    For OptionPtr = 0 To OptionCnt - 1
                        OptionValue_AddonEncoded = Trim(OptionValues(OptionPtr))
                        If OptionValue_AddonEncoded <> "" Then
                            Pos = genericController.vbInstr(1, OptionValue_AddonEncoded, ":")
                            If Pos = 0 Then
                                OptionValue = genericController.decodeNvaArgument(OptionValue_AddonEncoded)
                                OptionCaption = OptionValue
                            Else
                                OptionCaption = genericController.decodeNvaArgument(Mid(OptionValue_AddonEncoded, 1, Pos - 1))
                                OptionValue = genericController.decodeNvaArgument(Mid(OptionValue_AddonEncoded, Pos + 1))
                            End If
                            Select Case OptionSuffix
                                Case "checkbox"
                                    '
                                    ' Create checkbox HTMLFieldString
                                    '
                                    If genericController.vbInstr(1, "," & LCaseOptionDefault & ",", "," & genericController.vbLCase(OptionValue) & ",") <> 0 Then
                                        HTMLFieldString = HTMLFieldString & "<div style=""white-space:nowrap""><input type=""checkbox"" name=""" & SitePropertyName & OptionPtr & """ value=""" & OptionValue & """ checked=""checked"">" & OptionCaption & "</div>"
                                    Else
                                        HTMLFieldString = HTMLFieldString & "<div style=""white-space:nowrap""><input type=""checkbox"" name=""" & SitePropertyName & OptionPtr & """ value=""" & OptionValue & """ >" & OptionCaption & "</div>"
                                    End If
                                Case "radio"
                                    '
                                    ' Create Radio HTMLFieldString
                                    '
                                    If genericController.vbLCase(OptionValue) = LCaseOptionDefault Then
                                        HTMLFieldString = HTMLFieldString & "<div style=""white-space:nowrap""><input type=""radio"" name=""" & SitePropertyName & """ value=""" & OptionValue & """ checked=""checked"" >" & OptionCaption & "</div>"
                                    Else
                                        HTMLFieldString = HTMLFieldString & "<div style=""white-space:nowrap""><input type=""radio"" name=""" & SitePropertyName & """ value=""" & OptionValue & """ >" & OptionCaption & "</div>"
                                    End If
                                Case Else
                                    '
                                    ' Create select HTMLFieldString
                                    '
                                    If genericController.vbLCase(OptionValue) = LCaseOptionDefault Then
                                        HTMLFieldString = HTMLFieldString & "<option value=""" & OptionValue & """ selected>" & OptionCaption & "</option>"
                                    Else
                                        HTMLFieldString = HTMLFieldString & "<option value=""" & OptionValue & """>" & OptionCaption & "</option>"
                                    End If
                            End Select
                        End If
                    Next
                    Select Case OptionSuffix
                        Case "checkbox"
                            '
                            ' FormID-SitePropertyName-Cnt is the count of Options used with checkboxes
                            ' This is used
                            '
                            Copy = Copy & "<input type=""hidden"" name=""" & SitePropertyName & "CheckBoxCnt"" value=""" & OptionCnt & """ >"
                        Case "radio"
                            '
                            ' Create Radio HTMLFieldString
                            '
                            'HTMLFieldString = "<div>" & genericController.vbReplace(HTMLFieldString, "><", "></div><div><") & "</div>"
                        Case Else
                            '
                            ' Create select HTMLFieldString
                            '
                            HTMLFieldString = "<select name=""" & SitePropertyName & """>" & HTMLFieldString & "</select>"
                    End Select
                Else
                    '
                    ' Create Text HTMLFieldString
                    '

                    selector = genericController.decodeNvaArgument(selector)
                    HTMLFieldString = cpCore.htmlDoc.html_GetFormInputText2(SitePropertyName, selector, 1, 20)
                End If
                '--------------

                'HTMLFieldString = cpCore.main_GetFormInputText2( genericController.vbLCase(FieldName), VAlue)
            End If
            Call FastString.Add(Adminui.GetEditRow(HTMLFieldString, SitePropertyName, "", False, False, ""))
            GetForm_Edit_SiteProperties = Adminui.GetEditPanel((Not allowAdminTabs), "Control Information", "", Adminui.EditTableOpen & FastString.Text & Adminui.EditTableClose)
            EditSectionPanelCount = EditSectionPanelCount + 1
            FastString = Nothing
            Exit Function
            '
ErrorTrap:
            FastString = Nothing
            Call handleLegacyClassError3("GetForm_Edit_SiteProperties")
        End Function
        '
        '========================================================================
        '   Print the root form
        '========================================================================
        '
        Private Function GetForm_Root() As String
            Dim returnHtml As String = ""
            Try
                Dim CS As Integer
                Dim Stream As New stringBuilderLegacyController
                Dim addonId As Integer
                Dim AddonIDText As String
                '
                ' This is really messy -- there must be a better way
                '
                addonId = 0
                If (cpCore.authContext.visit.ID = cpCore.docProperties.getInteger(RequestNameDashboardReset)) Then
                    '$$$$$ cache this
                    CS = cpCore.db.cs_open(cnAddons, "ccguid=" & cpCore.db.encodeSQLText(DashboardAddonGuid))
                    If cpCore.db.cs_ok(CS) Then
                        addonId = cpCore.db.cs_getInteger(CS, "id")
                        Call cpCore.siteProperties.setProperty("AdminRootAddonID", genericController.encodeText(addonId))
                    End If
                    Call cpCore.db.cs_Close(CS)
                End If
                If addonId = 0 Then
                    '
                    ' Get AdminRootAddon
                    '
                    AddonIDText = cpCore.siteProperties.getText("AdminRootAddonID", "")
                    If AddonIDText = "" Then
                        '
                        ' the desktop is likely unset, auto set it to dashboard
                        '
                        addonId = -1
                    ElseIf AddonIDText = "0" Then
                        '
                        ' the desktop has been set to none - go with default desktop
                        '
                        addonId = 0
                    ElseIf genericController.vbIsNumeric(AddonIDText) Then
                        '
                        ' it has been set to a non-zero number
                        '
                        addonId = genericController.EncodeInteger(AddonIDText)
                        '
                        ' Verify it so there is no error when it runs
                        '
                        CS = cpCore.csOpen(cnAddons, addonId)
                        If Not cpCore.db.cs_ok(CS) Then
                            '
                            ' it was set, but the add-on is not available, auto set to dashboard
                            '
                            addonId = -1
                            Call cpCore.siteProperties.setProperty("AdminRootAddonID", "")
                        End If
                        Call cpCore.db.cs_Close(CS)
                    End If
                    If addonId = -1 Then
                        '
                        ' This has never been set, try to get the dashboard ID
                        '
                        '$$$$$ cache this
                        CS = cpCore.db.cs_open(cnAddons, "ccguid=" & cpCore.db.encodeSQLText(DashboardAddonGuid))
                        If cpCore.db.cs_ok(CS) Then
                            addonId = cpCore.db.cs_getInteger(CS, "id")
                            Call cpCore.siteProperties.setProperty("AdminRootAddonID", genericController.encodeText(addonId))
                        End If
                        Call cpCore.db.cs_Close(CS)
                    End If
                End If
                If addonId <> 0 Then
                    '
                    ' Display the Addon
                    '
                    If cpCore.error_IsUserError Then
                        returnHtml = returnHtml _
                        & "<div style=""clear:both;margin-top:20px;"">&nbsp;</div>" _
                        & "<div style=""clear:both;margin-top:20px;"">" & cpCore.error_GetUserError() & "</div>"
                    End If
                    returnHtml = returnHtml & cpCore.addon.execute_legacy4(CStr(addonId), "", Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextAdmin)
                End If
                If returnHtml = "" Then
                    '
                    ' Nothing Displayed, show default root page
                    '
                    returnHtml = returnHtml _
                    & vbCrLf & "<div style=""padding:20px;height:450px"">" _
                    & vbCrLf & "<div><a href=http://www.Contensive.com target=_blank><img style=""border:1px solid #000;"" src=""/ccLib/images/ContensiveAdminLogo.GIF"" border=0 ></A></div>" _
                    & vbCrLf & "<div><strong>Contensive/" & cpCore.codeVersion & "</strong></div>" _
                    & vbCrLf & "<div style=""clear:both;height:18px;margin-top:10px""><div style=""float:left;width:200px;"">Domain Name</div><div style=""float:left;"">" & cpCore.webServer.webServerIO_requestDomain & "</div></div>" _
                    & vbCrLf & "<div style=""clear:both;height:18px;""><div style=""float:left;width:200px;"">Login Member Name</div><div style=""float:left;"">" & cpCore.authContext.user.Name & "</div></div>" _
                    & vbCrLf & "<div style=""clear:both;height:18px;""><div style=""float:left;width:200px;"">Quick Reports</div><div style=""float:left;""><a Href=""?" & RequestNameAdminForm & "=" & AdminFormQuickStats & """>Real-Time Activity</A></div></div>" _
                    & vbCrLf & "<div style=""clear:both;height:18px;""><div style=""float:left;width:200px;""><a Href=""?" & RequestNameDashboardReset & "=" & cpCore.authContext.visit.ID & """>Run Dashboard</A></div></div>" _
                    & vbCrLf & "<div style=""clear:both;height:18px;""><div style=""float:left;width:200px;""><a Href=""?addonguid=" & AddonManagerGuid & """>Add-on Manager</A></div></div>"
                    '
                    If cpCore.error_IsUserError Then
                        returnHtml = returnHtml _
                        & "<div style=""clear:both;margin-top:20px;"">&nbsp;</div>" _
                        & "<div style=""clear:both;margin-top:20px;"">" & cpCore.error_GetUserError() & "</div>"
                    End If
                    '
                    returnHtml = returnHtml _
                    & vbCrLf & "</div>" _
                    & ""
                End If
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return returnHtml
        End Function
        '
        '========================================================================
        '   Print the root form
        '========================================================================
        '
        Private Function GetForm_QuickStats() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_QuickStats")
            '
            Dim SQL As String
            Dim CS As Integer
            Dim RowColor As String
            Dim Panel As String
            Dim VisitID As Integer
            Dim VisitCount As Integer
            Dim PageCount As Double
            Dim Stream As New stringBuilderLegacyController
            '
            ' --- Start a form to make a refresh button
            '
            Call Stream.Add(cpCore.htmlDoc.html_GetFormStart)
            Call Stream.Add(cpCore.main_GetPanelButtons(ButtonCancel & "," & ButtonRefresh, "" & RequestNameButton & ""))
            Call Stream.Add("<input TYPE=""hidden"" NAME=""asf"" VALUE=""" & AdminFormQuickStats & """>")
            Call Stream.Add(cpCore.main_GetPanel(" "))
            '
            ' --- Indented part (Title Area plus page)
            '
            Stream.Add("<table border=""0"" cellpadding=""20"" cellspacing=""0"" width=""100%""><tr><td>" & SpanClassAdminNormal)
            Stream.Add("<h1>Real-Time Activity Report</h1>")
            '
            ' --- set column width
            '
            Stream.Add("<h2>Visits Today</h2>")
            Stream.Add("<table border=""0"" cellpadding=""3"" cellspacing=""0"" width=""100%"" style=""background-color:white;border-top:1px solid #888;"">")
            'Stream.Add( "<tr"">")
            'Stream.Add( "<td width=""150""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""140"" height=""1"" ></td>")
            'Stream.Add( "<td width=""150""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""140"" height=""1"" ></td>")
            'Stream.Add( "<td width=""100%""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""1"" ></td>")
            'Stream.Add( "</tr>")
            '
            ' ----- All Visits Today
            '
            SQL = "SELECT Count(ccVisits.ID) AS VisitCount, Avg(ccVisits.PageVisits) AS PageCount FROM ccVisits WHERE ((ccVisits.StartTime)>" & cpCore.db.encodeSQLDate(cpCore.app_startTime.Date) & ");"
            CS = cpCore.db.cs_openSql(SQL)
            If cpCore.db.cs_ok(CS) Then
                VisitCount = cpCore.db.cs_getInteger(CS, "VisitCount")
                PageCount = cpCore.db.cs_getNumber(CS, "pageCount")
                Stream.Add("<tr>")
                Stream.Add("<td style=""border-bottom:1px solid #888;"" valign=top>" & SpanClassAdminNormal & "All Visits</span></td>")
                Stream.Add("<td style=""width:150px;border-bottom:1px solid #888;"" valign=top>" & SpanClassAdminNormal & "<a target=""_blank"" href=""" & cpCore.htmlDoc.html_EncodeHTML(cpCore.serverConfig.appConfig.adminRoute & "?" & RequestNameAdminForm & "=" & AdminFormReports & "&rid=3&DateFrom=" & cpCore.app_startTime & "&DateTo=" & cpCore.app_startTime.ToShortDateString) & """>" & VisitCount & "</A>, " & FormatNumber(PageCount, 2) & " pages/visit.</span></td>")
                Stream.Add("<td style=""border-bottom:1px solid #888;"" valign=top>" & SpanClassAdminNormal & "This includes all visitors to the website, including guests, bots and administrators. Pages/visit includes page hits and not ajax or remote method hits.</span></td>")
                Stream.Add("</tr>")
            End If
            Call cpCore.db.cs_Close(CS)
            '
            ' ----- Non-Bot Visits Today
            '
            SQL = "SELECT Count(ccVisits.ID) AS VisitCount, Avg(ccVisits.PageVisits) AS PageCount FROM ccVisits WHERE (ccVisits.CookieSupport=1)and((ccVisits.StartTime)>" & cpCore.db.encodeSQLDate(cpCore.app_startTime.Date) & ");"
            CS = cpCore.db.cs_openSql(SQL)
            If cpCore.db.cs_ok(CS) Then
                VisitCount = cpCore.db.cs_getInteger(CS, "VisitCount")
                PageCount = cpCore.db.cs_getNumber(CS, "pageCount")
                Stream.Add("<tr>")
                Stream.Add("<td style=""border-bottom:1px solid #888;"" valign=top>" & SpanClassAdminNormal & "Non-bot Visits</span></td>")
                Stream.Add("<td style=""border-bottom:1px solid #888;"" valign=top>" & SpanClassAdminNormal & "<a target=""_blank"" href=""" & cpCore.htmlDoc.html_EncodeHTML(cpCore.serverConfig.appConfig.adminRoute & "?" & RequestNameAdminForm & "=" & AdminFormReports & "&rid=3&DateFrom=" & cpCore.app_startTime.ToShortDateString & "&DateTo=" & cpCore.app_startTime.ToShortDateString) & """>" & VisitCount & "</A>, " & FormatNumber(PageCount, 2) & " pages/visit.</span></td>")
                Stream.Add("<td style=""border-bottom:1px solid #888;"" valign=top>" & SpanClassAdminNormal & "This excludes hits from visitors identified as bots. Pages/visit includes page hits and not ajax or remote method hits.</span></td>")
                Stream.Add("</tr>")
            End If
            Call cpCore.db.cs_Close(CS)
            '
            ' ----- Visits Today by new visitors
            '
            SQL = "SELECT Count(ccVisits.ID) AS VisitCount, Avg(ccVisits.PageVisits) AS PageCount FROM ccVisits WHERE (ccVisits.CookieSupport=1)and(ccVisits.StartTime>" & cpCore.db.encodeSQLDate(cpCore.app_startTime.Date) & ")AND(ccVisits.VisitorNew<>0);"
            CS = cpCore.db.cs_openSql(SQL)
            If cpCore.db.cs_ok(CS) Then
                VisitCount = cpCore.db.cs_getInteger(CS, "VisitCount")
                PageCount = cpCore.db.cs_getNumber(CS, "pageCount")
                Stream.Add("<tr>")
                Stream.Add("<td style=""border-bottom:1px solid #888;"" valign=top>" & SpanClassAdminNormal & "Visits by New Visitors</span></td>")
                Stream.Add("<td style=""border-bottom:1px solid #888;"" valign=top>" & SpanClassAdminNormal & "<a target=""_blank"" href=""" & cpCore.htmlDoc.html_EncodeHTML(cpCore.serverConfig.appConfig.adminRoute & "?" & RequestNameAdminForm & "=" & AdminFormReports & "&rid=3&ExcludeOldVisitors=1&DateFrom=" & cpCore.app_startTime.ToShortDateString & "&DateTo=" & cpCore.app_startTime.ToShortDateString) & """>" & VisitCount & "</A>, " & FormatNumber(PageCount, 2) & " pages/visit.</span></td>")
                Stream.Add("<td style=""border-bottom:1px solid #888;"" valign=top>" & SpanClassAdminNormal & "This includes only new visitors not identified as bots. Pages/visit includes page hits and not ajax or remote method hits.</span></td>")
                Stream.Add("</tr>")
            End If
            Call cpCore.db.cs_Close(CS)
            '
            Call Stream.Add("</table>")
            '
            ' ----- Visits currently online
            '
            If True Then
                Panel = ""
                Stream.Add("<h2>Current Visits</h2>")
                SQL = "SELECT ccVisits.HTTP_REFERER as referer,ccVisits.remote_addr as Remote_Addr, ccVisits.LastVisitTime as LastVisitTime, ccVisits.PageVisits as PageVisits, ccMembers.Name as MemberName, ccVisits.ID as VisitID, ccMembers.ID as MemberID" _
                    & " FROM ccVisits LEFT JOIN ccMembers ON ccVisits.MemberID = ccMembers.ID" _
                    & " WHERE (((ccVisits.LastVisitTime)>" & cpCore.db.encodeSQLDate(cpCore.app_startTime.AddHours(-1)) & "))" _
                    & " ORDER BY ccVisits.LastVisitTime DESC;"
                CS = cpCore.db.cs_openSql(SQL)
                If cpCore.db.cs_ok(CS) Then
                    Panel = Panel & "<table width=""100%"" border=""0"" cellspacing=""1"" cellpadding=""2"">"
                    Panel = Panel & "<tr bgcolor=""#B0B0B0"">"
                    Panel = Panel & "<td width=""20%"" align=""left"">" & SpanClassAdminNormal & "User</td>"
                    Panel = Panel & "<td width=""20%"" align=""left"">" & SpanClassAdminNormal & "IP&nbsp;Address</td>"
                    Panel = Panel & "<td width=""20%"" align=""left"">" & SpanClassAdminNormal & "Last&nbsp;Page&nbsp;Hit</td>"
                    Panel = Panel & "<td width=""10%"" align=""right"">" & SpanClassAdminNormal & "Page&nbsp;Hits</td>"
                    Panel = Panel & "<td width=""10%"" align=""right"">" & SpanClassAdminNormal & "Visit</td>"
                    Panel = Panel & "<td width=""30%"" align=""left"">" & SpanClassAdminNormal & "Referer</td>"
                    Panel = Panel & "</tr>"
                    RowColor = "ccPanelRowEven"
                    Do While cpCore.db.cs_ok(CS)
                        VisitID = cpCore.db.cs_getInteger(CS, "VisitID")
                        Panel = Panel & "<tr class=""" & RowColor & """>"
                        Panel = Panel & "<td align=""left"">" & SpanClassAdminNormal & "<a target=""_blank"" href=""" & cpCore.htmlDoc.html_EncodeHTML(cpCore.serverConfig.appConfig.adminRoute & "?" & RequestNameAdminForm & "=" & AdminFormReports & "&rid=16&MemberID=" & cpCore.db.cs_getInteger(CS, "MemberID")) & """>" & cpCore.db.cs_get(CS, "MemberName") & "</A></span></td>"
                        Panel = Panel & "<td align=""left"">" & SpanClassAdminNormal & cpCore.db.cs_get(CS, "Remote_Addr") & "</span></td>"
                        Panel = Panel & "<td align=""left"">" & SpanClassAdminNormal & FormatDateTime(cpCore.db.cs_getDate(CS, "LastVisitTime"), vbLongTime) & "</span></td>"
                        Panel = Panel & "<td align=""right"">" & SpanClassAdminNormal & "<a target=""_blank"" href=""" & cpCore.serverConfig.appConfig.adminRoute & "?" & RequestNameAdminForm & "=" & AdminFormReports & "&rid=10&VisitID=" & VisitID & """>" & cpCore.db.cs_get(CS, "PageVisits") & "</A></span></td>"
                        Panel = Panel & "<td align=""right"">" & SpanClassAdminNormal & "<a target=""_blank"" href=""" & cpCore.serverConfig.appConfig.adminRoute & "?" & RequestNameAdminForm & "=" & AdminFormReports & "&rid=17&VisitID=" & VisitID & """>" & VisitID & "</A></span></td>"
                        Panel = Panel & "<td align=""left"">" & SpanClassAdminNormal & "&nbsp;" & cpCore.db.cs_getText(CS, "referer") & "</span></td>"
                        Panel = Panel & "</tr>"
                        If RowColor = "ccPanelRowEven" Then
                            RowColor = "ccPanelRowOdd"
                        Else
                            RowColor = "ccPanelRowEven"
                        End If
                        Call cpCore.db.cs_goNext(CS)
                    Loop
                    Panel = Panel & "</table>"
                End If
                Call cpCore.db.cs_Close(CS)
                Stream.Add(cpCore.main_GetPanel(Panel, "ccPanel", "ccPanelShadow", "ccPanelHilite", "100%", 0))
            End If
            Call Stream.Add("</td></tr></table>")
            Call Stream.Add(cpCore.htmlDoc.html_GetFormEnd)
            '
            GetForm_QuickStats = Stream.Text
            Call cpCore.htmlDoc.main_AddPagetitle("Quick Stats")
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_QuickStats")
            '
        End Function
        ''
        ''========================================================================
        ''   Print the Topic Rules section of any edit form
        ''========================================================================
        ''
        'Private Function GetForm_Edit_TopicRules() As String
        '    On Error GoTo ErrorTrap: 'Dim th as integer: th = profileLogAdminMethodEnter("AdminClass.GetForm_Edit_TopicRules")
        '    '
        '    Dim SQL As String
        '    Dim CS as integer
        '    Dim MembershipCount as integer
        '    Dim MembershipSize as integer
        '    Dim MembershipPointer as integer
        '    Dim SectionName As String
        '    Dim TopicCount as integer
        '    Dim Membership() as integer
        '    Dim f As New fastStringClass
        '    Dim Checked As Boolean
        '    Dim TableID as integer
        '    Dim Adminui As New adminUIclass(cpcore)
        '    '
        '    If AdminContent.AllowTopicRules Then
        '        '
        '        ' ----- can not use common call
        '        '       problem, TopicRules has 2 primary content keys (ContentID and RecordID)
        '        '       if we changed it to only use ContentRecordKey, we could use that as the only primary key.
        '        '
        '        ' ----- Gather all the topics to which this member belongs
        '        '
        '        MembershipCount = 0
        '        MembershipSize = 0
        '        If EditRecord.ID <> 0 Then
        '            SQL = "SELECT ccTopicRules.TopicID AS TopicID FROM (ccContent LEFT JOIN ccTopicRules ON ccContent.ID = ccTopicRules.ContentID) LEFT JOIN ccTables ON ccContent.ContentTableID = ccTables.ID WHERE (((ccTables.Name)=" & encodeSQLText(AdminContent.ContentTableName) & ") AND ((ccTopicRules.RecordID)=" & EditRecord.ID & ") AND ((ccContent.Active)<>0) AND ((ccTopicRules.Active)<>0));"
        '
        '            'SQL = "SELECT ccTopicRules.TopicID as ID" _
        '             '   & " FROM ccContent LEFT JOIN ccTopicRules ON ccContent.ID = ccTopicRules.ContentID" _
        '              '  & " WHERE (((ccContent.ContentTablename)=" & encodeSQLText(AdminContent.ContentTableName) & ") AND ((ccTopicRules.RecordID)=" & EditRecord.ID & ") AND ((ccContent.Active)<>0) AND ((ccTopicRules.Active)<>0))"
        '            CS = cpCore.app_openCsSql_Rev_Internal("Default", SQL)
        '            If cpCore.app.csv_IsCSOK(CS) Then
        '                If True Then
        '                    MembershipSize = 10
        '                    ReDim Membership(MembershipSize)
        '                    Do While cpCore.app.csv_IsCSOK(CS)
        '                        If MembershipCount >= MembershipSize Then
        '                            MembershipSize = MembershipSize + 10
        '                            ReDim Preserve Membership(MembershipSize)
        '                            End If
        '                        Membership(MembershipCount) = cpCore.app.cs_getInteger(CS, "TopicID")
        '                        MembershipCount = MembershipCount + 1
        '                        Call cpCore.app.nextCSRecord(CS)
        '                        Loop
        '                    End If
        '                End If
        '            cpCore.main_CloseCS (CS)
        '            End If
        '        '
        '        ' ----- Gather all the topics, sorted by ContentName (no topics, skip section)
        '        '
        '        SQL = "SELECT ccTopics.ID AS ID, ccContent.Name AS SectionName, ccTopics.Name AS TopicName, ccTopics.SortOrder" _
        '            & " FROM ccTopics LEFT JOIN ccContent ON ccTopics.ContentControlID = ccContent.ID" _
        '            & " Where (((ccTopics.Active) <> " & SQLFalse & ") And ((ccContent.Active) <> " & SQLFalse & "))" _
        '            & " GROUP BY ccTopics.ID, ccContent.Name, ccTopics.Name, ccTopics.SortOrder" _
        '            & " ORDER BY ccContent.Name, ccTopics.SortOrder"
        '        CS = cpCore.app_openCsSql_Rev_Internal("Default", SQL)
        '        If cpCore.app.csv_IsCSOK(CS) Then
        '            If True Then
        '                '
        '                ' ----- Open the panel
        '                '
        '                Call f.Add(AdminUI.EditTableOpen)
        '                SectionName = ""
        '                TopicCount = 0
        '                Do While cpCore.app.csv_IsCSOK(CS)
        '                    f.Add( "<tr>"
        '                    If SectionName <> cpCore.app.cs_get(CS, "SectionName") Then
        '                        '
        '                        ' ----- create the next content Topic row
        '                        '
        '                        SectionName = cpCore.app.cs_get(CS, "SectionName")
        '                        Call f.Add("<td class=""ccAdminEditCaption"">" & SectionName & "</td>")
        '                    Else
        '                        Call f.Add("<td class=""ccAdminEditCaption"">&nbsp;</td>")
        '                    End If
        '                    Call f.Add("<td class=""ccAdminEditField"">")
        '                    Checked = False
        '                    If MembershipCount <> 0 Then
        '                        For MembershipPointer = 0 To MembershipCount - 1
        '                            If Membership(MembershipPointer) = cpCore.app.cs_getInteger(CS, "ID") Then
        '                                Checked = True
        '                                Exit For
        '                            End If
        '                        Next
        '                    End If
        '                    If editrecord.read_only And Not Checked Then
        '                        f.Add( "<input type=""checkbox"" disabled>"
        '                    ElseIf editrecord.read_only Then
        '                        f.Add( "<input type=""checkbox"" disabled checked>"
        '                        f.Add( "<input type=hidden name=""Topic" & TopicCount & """ value=1>"
        '                    ElseIf Checked Then
        '                        f.Add( "<input type=""checkbox"" name=""Topic" & TopicCount & """ checked>"
        '                    Else
        '                        f.Add( "<input type=""checkbox"" name=""Topic" & TopicCount & """>"
        '                    End If
        '                    f.Add( "<input type=""hidden"" name=""TopicID" & TopicCount & """ value=""" & cpCore.app.cs_get(CS, "ID") & """>"
        '                    f.Add( SpanClassAdminNormal & cpCore.app.cs_get(CS, "TopicName") & "</span></td>"
        '                    f.Add( "</tr>"
        '                    '
        '                    TopicCount = TopicCount + 1
        '                    Call cpCore.app.nextCSRecord(CS)
        '                Loop
        '                f.Add( vbCrLf & "<input type=""hidden"" name=""TopicCount"" value=""" & TopicCount & """>"
        '                f.Add( AdminUI.EditTableClose
        '                '
        '                ' ----- close the panel
        '                '
        '                GetForm_Edit_TopicRules = AdminUI.GetEditPanel( (Not AllowAdminTabs), "Topic Rules", "This content is associated with the following topics", f.Text)
        '                EditSectionPanelCount = EditSectionPanelCount + 1
        '                '
        '                End If
        '            End If
        '        Call cpCore.app.closeCS(CS)
        '    End If
        '    '''Dim th as integer: Exit Function
        '    '
        'ErrorTrap:
        '    Call HandleClassTrapErrorBubble("GetForm_Edit_TopicRules")
        'End Function
        '
        '========================================================================
        '   Print the Topic Rules section of any edit form
        '========================================================================
        '
        Private Function GetForm_Edit_LinkAliases(adminContent As cdefModel, editRecord As editRecordClass, ByVal readOnlyField As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_LinkAliases")
            '
            Dim LinkCnt As Integer
            Dim LinkList As String = ""
            Dim f As New stringBuilderLegacyController
            Dim Adminui As New adminUIController(cpCore)
            Dim Ptr As Integer
            Dim linkAlias As String
            Dim AllowLinkAliasInTab As Boolean
            Dim Link As String
            Dim CS As Integer
            Dim tabContent As String
            Dim TabDescription As String
            '
            '
            ' Link Alias value from the admin data
            '
            TabDescription = "Link Aliases are URLs used for this content that are more friendly to users and search engines. If you set the Link Alias field, this name will be used on the URL for this page. If you leave the Link Alias blank, the page name will be used. Below is a list of names that have been used previously and are still active. All of these entries when used in the URL will resolve to this page. The first entry in this list will be used to create menus on the site. To move an entry to the top, type it into the Link Alias field and save."
            If Not cpCore.siteProperties.allowLinkAlias Then
                '
                ' Disabled
                '
                tabContent = "&nbsp;"
                TabDescription = "<p>The Link Alias feature is currently disabled. To enable Link Aliases, check the box marked 'Allow Link Alias' on the Page Settings page found on the Navigator under 'Settings'.</p><p>" & TabDescription & "</p>"
            Else
                '
                ' Link Alias Field
                '
                linkAlias = ""
                If adminContent.fields.ContainsKey("linkalias") Then
                    linkAlias = genericController.encodeText(editRecord.fieldsLc.Item("linkalias").value)
                End If
                Call f.Add("<tr><td class=""ccAdminEditCaption"">" & SpanClassAdminSmall & "Link Alias</td>")
                Call f.Add("<td class=""ccAdminEditField"" align=""left"" colspan=""2"">" & SpanClassAdminNormal)
                If readOnlyField Then
                    Call f.Add(linkAlias)
                Else
                    Call f.Add(cpCore.htmlDoc.html_GetFormInputText2("LinkAlias", linkAlias))
                End If
                Call f.Add("</span></td></tr>")
                '
                ' Override Duplicates
                '
                Call f.Add("<tr><td class=""ccAdminEditCaption"">" & SpanClassAdminSmall & "Override Duplicates</td>")
                Call f.Add("<td class=""ccAdminEditField"" align=""left"" colspan=""2"">" & SpanClassAdminNormal)
                If readOnlyField Then
                    Call f.Add("No")
                Else
                    Call f.Add(cpCore.htmlDoc.html_GetFormInputCheckBox2("OverrideDuplicate", False))
                End If
                Call f.Add("</span></td></tr>")
                '
                ' Table of old Link Aliases
                '
                Link = cpCore.pages.main_GetPageDynamicLink(editRecord.id, False)
                CS = cpCore.db.cs_open("Link Aliases", "pageid=" & editRecord.id, "ID Desc", , , , , "name")
                Do While cpCore.db.cs_ok(CS)
                    LinkList = LinkList & "<div style=""margin-left:4px;margin-bottom:4px;"">" & cpCore.htmlDoc.html_EncodeHTML(cpCore.db.cs_getText(CS, "name")) & "</div>"
                    LinkCnt = LinkCnt + 1
                    Call cpCore.db.cs_goNext(CS)
                Loop
                Call cpCore.db.cs_Close(CS)
                If LinkCnt > 0 Then
                    Call f.Add("<tr><td class=""ccAdminEditCaption"">" & SpanClassAdminSmall & "Previous Link Alias List</td>")
                    Call f.Add("<td class=""ccAdminEditField"" align=""left"" colspan=""2"">" & SpanClassAdminNormal)
                    Call f.Add(LinkList)
                    Call f.Add("</span></td></tr>")
                End If
                tabContent = Adminui.EditTableOpen & f.Text & Adminui.EditTableClose
            End If
            '
            GetForm_Edit_LinkAliases = Adminui.GetEditPanel((Not allowAdminTabs), "Link Aliases", TabDescription, tabContent)
            EditSectionPanelCount = EditSectionPanelCount + 1
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Edit_LinkAliases")
        End Function
        '
        '========================================================================
        '   Print the Topic Rules section of any edit form
        '========================================================================
        '
        Private Function GetForm_Edit_MetaContent(adminContent As cdefModel, editRecord As editRecordClass, ByVal readOnlyField As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_MetaContent")
            '
            Dim s As String
            Dim SQL As String
            Dim FastString As New stringBuilderLegacyController
            Dim Checked As Boolean
            Dim TableID As Integer
            Dim MetaContentID As Integer
            Dim CS As Integer
            Dim PageTitle As String = ""
            Dim MetaDescription As String = ""
            Dim MetaKeywordList As String = ""
            Dim OtherHeadTags As String = ""
            Dim Adminui As New adminUIController(cpCore)
            '
            If adminContent.AllowMetaContent Then
                CS = cpCore.db.cs_open("Meta Content", "(ContentID=" & editRecord.contentControlId & ")and(RecordID=" & editRecord.id & ")")
                If Not cpCore.db.cs_ok(CS) Then
                    CS = cpCore.InsertCSContent("Meta Content")
                    Call cpCore.db.cs_set(CS, "ContentID", editRecord.contentControlId)
                    Call cpCore.db.cs_set(CS, "RecordID", editRecord.id)
                    Call cpCore.db.cs_save2(CS)
                End If
                If cpCore.db.cs_ok(CS) Then
                    MetaContentID = cpCore.db.cs_getInteger(CS, "ID")
                    PageTitle = cpCore.db.cs_get(CS, "Name")
                    MetaDescription = cpCore.db.cs_get(CS, "MetaDescription")
                    If True Then ' 3.3.930" Then
                        MetaKeywordList = cpCore.db.cs_get(CS, "MetaKeywordList")
                        OtherHeadTags = cpCore.db.cs_get(CS, "OtherHeadTags")
                    ElseIf cpCore.db.cs_isFieldSupported(CS, "OtherHeadTags") Then
                        OtherHeadTags = cpCore.db.cs_get(CS, "OtherHeadTags")
                    End If
                End If
                Call cpCore.db.cs_Close(CS)
                '
                'Call FastString.Add(cpCore.main_GetFormInputHidden("MetaContent.MetaContentID", MetaContentID))
                '
                ' Page Title
                '
                Call FastString.Add("<tr><td class=""ccAdminEditCaption"">" & SpanClassAdminSmall & "Page Title</td>")
                Call FastString.Add("<td class=""ccAdminEditField"" align=""left"" colspan=""2"">" & SpanClassAdminNormal)
                If readOnlyField Then
                    Call FastString.Add(PageTitle)
                Else
                    Call FastString.Add(cpCore.htmlDoc.html_GetFormInputText2("MetaContent.PageTitle", PageTitle))
                End If
                Call FastString.Add("</span></td></tr>")
                '
                ' Meta Description
                '
                Call FastString.Add("<tr><td class=""ccAdminEditCaption"">" & SpanClassAdminSmall & "Meta Description</td>")
                Call FastString.Add("<td class=""ccAdminEditField"" align=""left"" colspan=""2"">" & SpanClassAdminNormal)
                If readOnlyField Then
                    Call FastString.Add(MetaDescription)
                Else
                    Call FastString.Add(cpCore.htmlDoc.html_GetFormInputTextExpandable("MetaContent.MetaDescription", MetaDescription, 10))
                End If
                Call FastString.Add("</span></td></tr>")
                '
                ' Meta Keyword List
                '
                Call FastString.Add("<tr><td class=""ccAdminEditCaption"">" & SpanClassAdminSmall & "Meta Keyword List</td>")
                Call FastString.Add("<td class=""ccAdminEditField"" align=""left"" colspan=""2"">" & SpanClassAdminNormal)
                If readOnlyField Then
                    Call FastString.Add(MetaKeywordList)
                Else
                    Call FastString.Add(cpCore.htmlDoc.html_GetFormInputTextExpandable("MetaContent.MetaKeywordList", MetaKeywordList, 10))
                End If
                Call FastString.Add("</span></td></tr>")
                '
                ' Meta Keywords, Shared
                '
                Call FastString.Add("<tr><td class=""ccAdminEditCaption"">" & SpanClassAdminSmall & "Shared Meta Keywords</td>")
                Call FastString.Add("<td class=""ccAdminEditField"" colspan=""2"">")
                Call FastString.Add(cpCore.htmlDoc.main_GetFormInputCheckListCategories("MetaContent.KeywordList", "Meta Content", MetaContentID, "Meta Keywords", "Meta Keyword Rules", "MetaContentID", "MetaKeywordID", , "Name", readOnlyField, "Meta Keywords"))
                Call FastString.Add("</td></tr>")
                '
                ' Other Head Tags
                '
                Call FastString.Add("<tr><td class=""ccAdminEditCaption"">" & SpanClassAdminSmall & "Other Head Tags</td>")
                Call FastString.Add("<td class=""ccAdminEditField"" colspan=""2"">" & SpanClassAdminNormal)
                If readOnlyField Then
                    Call FastString.Add(OtherHeadTags)
                Else
                    Call FastString.Add(cpCore.htmlDoc.html_GetFormInputTextExpandable("MetaContent.OtherHeadTags", OtherHeadTags, 10))
                End If
                Call FastString.Add("</span></td></tr>")
                '
                s = "" _
                    & Adminui.EditTableOpen & FastString.Text & Adminui.EditTableClose _
                    & cpCore.htmlDoc.html_GetFormInputHidden("MetaContent.MetaContentID", MetaContentID) _
                    & ""
                '
                GetForm_Edit_MetaContent = Adminui.GetEditPanel((Not allowAdminTabs), "Meta Content", "Meta Tags available for pages using this content", s)
                EditSectionPanelCount = EditSectionPanelCount + 1
                '
                FastString = Nothing
            End If
            '
            Exit Function
            '
ErrorTrap:
            FastString = Nothing
            Call handleLegacyClassError3("GetForm_Edit_MetaContent")
        End Function
        '
        '========================================================================
        ' Print the Email form Group associations
        '
        '   Content must conform to ccMember fields
        '========================================================================
        '
        Private Function GetForm_Edit_EmailRules(adminContent As cdefModel, editRecord As editRecordClass, ByVal readOnlyField As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_EmailRules")
            '
            Dim f As New stringBuilderLegacyController
            Dim GroupList As String
            Dim GroupSplit() As String
            Dim Ptr As Integer
            Dim IDPtr As Integer
            Dim IDEndPtr As Integer
            Dim GroupID As Integer
            Dim ReportLink As String
            Dim Cnt As Integer
            Dim Adminui As New adminUIController(cpCore)
            Dim s As String
            '
            s = cpCore.htmlDoc.main_GetFormInputCheckListCategories("EmailGroups", "Group Email", editRecord.id, "Groups", "Email Groups", "EmailID", "GroupID", , "Caption", readOnlyField, "Groups")
            s = "<tr>" _
                & "<td class=""ccAdminEditCaption"">Groups</td>" _
                & "<td class=""ccAdminEditField"" colspan=2>" & SpanClassAdminNormal & s & "</span></td>" _
                & "</tr><tr>" _
                & "<td class=""ccAdminEditCaption"">&nbsp;</td>" _
                & "<td class=""ccAdminEditField"" colspan=2>" & SpanClassAdminNormal & "[<a href=?cid=" & cpCore.metaData.getContentId("Groups") & " target=_blank>Manage Groups</a>]</span></td>" _
                & "</tr>"
            s = Adminui.EditTableOpen & s & Adminui.EditTableClose
            s = Adminui.GetEditPanel((Not allowAdminTabs), "Email Rules", "Send email to people in these groups", s)
            GetForm_Edit_EmailRules = s
            Exit Function
            'GroupList = cpCore.htmldoc.main_GetFormInputCheckList("EmailGroups", "Group Email", EditRecord.ID, "Groups", "Email Groups", "EmailID", "GroupID", , "Caption", readOnlyField)
            GroupSplit = Split(GroupList, "<br >", , vbTextCompare)
            Cnt = UBound(GroupSplit) + 1
            If Cnt = 0 Then
                f.Add("<tr>")
                f.Add("<td class=""ccAdminEditCaption"">&nbsp;</td>")
                f.Add("<td class=""ccAdminEditField"" colspan=2>" & SpanClassAdminNormal & "There are no currently no groups defined.</span></td>")
                f.Add("</tr>")
            Else
                For Ptr = 0 To Cnt - 1
                    GroupID = 0
                    Dim HiddenPos As Integer
                    HiddenPos = genericController.vbInstr(1, GroupSplit(Ptr), "hidden", vbTextCompare)
                    If HiddenPos > 0 Then
                        IDPtr = genericController.vbInstr(1, GroupSplit(Ptr), "value=", vbTextCompare)
                        'IDPtr = genericController.vbInstr(HiddenPos, GroupSplit(Ptr), "value=", vbTextCompare)
                        If IDPtr > 0 Then
                            IDEndPtr = genericController.vbInstr(IDPtr, GroupSplit(Ptr), ">")
                            If IDEndPtr > 0 Then
                                GroupID = genericController.EncodeInteger(Mid(GroupSplit(Ptr), IDPtr + 6, IDEndPtr - IDPtr - 6))
                            End If
                        End If
                        If GroupID > 0 Then
                            ReportLink = "[<a href=""?" & RequestNameAdminForm & "=12&rid=35&recordid=" & GroupID & """ target=_blank>Group&nbsp;Report</a>]"
                        Else
                            ReportLink = "&nbsp;"
                        End If
                    End If
                    f.Add("<tr>" _
                        & "<td class=""ccAdminEditCaption"">&nbsp;</td>" _
                        & "<td class=""ccAdminEditField"" colspan=2>" & SpanClassAdminNormal & GroupSplit(Ptr) & "&nbsp;" & ReportLink & "</span></td>" _
                        & "</tr>")
                Next
            End If
            f.Add("<tr>")
            f.Add("<td class=""ccAdminEditCaption"">&nbsp;</td>")
            f.Add("<td class=""ccAdminEditCaption"" colspan=2>" & SpanClassAdminNormal & "[<a href=?cid=" & cpCore.metaData.getContentId("Groups") & " target=_blank>Manage Groups</a>]</span></td>")
            f.Add("</tr>")
            GetForm_Edit_EmailRules = Adminui.GetEditPanel((Not allowAdminTabs), "Email Rules", "Send email to people in these groups", Adminui.EditTableOpen & f.Text & Adminui.EditTableClose)
            EditSectionPanelCount = EditSectionPanelCount + 1
            Exit Function
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Edit_EmailRules")
        End Function
        '
        '========================================================================
        ' Print the Email for Topic associations
        '
        '   Content must conform to ccMember fields
        '========================================================================
        '
        Private Function GetForm_Edit_EmailTopics(adminContent As cdefModel, editRecord As editRecordClass, ByVal readOnlyField As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_EmailTopics")
            '
            Dim f As New stringBuilderLegacyController
            Dim GroupList As String
            Dim GroupSplit() As String
            Dim Ptr As Integer
            Dim IDPtr As Integer
            Dim IDEndPtr As Integer
            Dim GroupID As Integer
            Dim ReportLink As String
            Dim Cnt As Integer
            Dim Adminui As New adminUIController(cpCore)
            '
            Dim s As String
            '
            s = cpCore.htmlDoc.main_GetFormInputCheckListCategories("EmailTopics", "Group Email", editRecord.id, "Topics", "Email Topics", "EmailID", "TopicID", , "Name", readOnlyField, "Topics")
            s = "<tr>" _
                & "<td class=""ccAdminEditCaption"">Topics</td>" _
                & "<td class=""ccAdminEditField"" colspan=2>" & SpanClassAdminNormal & s & "</span></td>" _
                & "</tr><tr>" _
                & "<td class=""ccAdminEditCaption"">&nbsp;</td>" _
                & "<td class=""ccAdminEditField"" colspan=2>" & SpanClassAdminNormal & "[<a href=?cid=" & cpCore.metaData.getContentId("Topics") & " target=_blank>Manage Topics</a>]</span></td>" _
                & "</tr>"
            s = Adminui.EditTableOpen & s & Adminui.EditTableClose
            s = Adminui.GetEditPanel((Not allowAdminTabs), "Email Rules", "Send email to people in these groups", s)
            GetForm_Edit_EmailTopics = s
            Exit Function

            'GroupList = cpCore.htmldoc.main_GetFormInputCheckList("EmailTopics", "Group Email", EditRecord.ID, "Topics", "Email Topics", "EmailID", "TopicID", , "Name", readOnlyField)
            'GroupSplit = Split(GroupList, "<br >", , vbTextCompare)
            'Cnt = UBound(GroupSplit) + 1
            'If Cnt = 0 Then
            '    f.Add("<tr>")
            '    f.Add("<td class=""ccAdminEditCaption"">&nbsp;</td>")
            '    f.Add("<td class=""ccAdminEditField"" colspan=2>" & SpanClassAdminNormal & "There are no currently no topics defined.</span></td>")
            '    f.Add("</tr>")
            'Else
            '    For Ptr = 0 To UBound(GroupSplit)
            '        GroupID = 0
            '        IDPtr = genericController.vbInstr(1, GroupSplit(Ptr), "value=", vbTextCompare)
            '        If IDPtr > 0 Then
            '            IDEndPtr = genericController.vbInstr(IDPtr, GroupSplit(Ptr), ">")
            '            If IDEndPtr > 0 Then
            '                GroupID = genericController.EncodeInteger(Mid(GroupSplit(Ptr), IDPtr + 6, IDEndPtr - IDPtr - 6))
            '            End If
            '        End If
            '        If GroupID > 0 Then
            '            ReportLink = "&nbsp;"
            '            'ReportLink = "<a href=""?" & RequestNameAdminForm & "=12&rid=35&recordid=" & GroupID & """ target=_blank>Group&nbsp;Report</a>"
            '        Else
            '            ReportLink = "&nbsp;"
            '        End If
            '        f.Add("<tr>" _
            '            & "<td class=""ccAdminEditCaption"">&nbsp;</td>" _
            '            & "<td class=""ccAdminEditField"" colspan=2>" & SpanClassAdminNormal & GroupSplit(Ptr) & ReportLink & "</span></td>" _
            '            & "</tr>")
            '    Next
            'End If
            'f.Add("<tr>")
            'f.Add("<td class=""ccAdminEditCaption"">&nbsp;</td>")
            'f.Add("<td class=""ccAdminEditField"" colspan=2>" & SpanClassAdminNormal & "[<a href=?cid=" & cpCore.main_GetContentID("Topics") & " target=_blank>Manage Topics</a>]</span></td>")
            'f.Add("</tr>")
            'GetForm_Edit_EmailTopics = Adminui.GetEditPanel((Not AllowAdminTabs), "Email Topics", "Send email to people who are associated with these topics", Adminui.EditTableOpen & f.Text & Adminui.EditTableClose)
            'EditSectionPanelCount = EditSectionPanelCount + 1
            'Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Edit_EmailTopics")
            '
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Private Function GetForm_Edit_EmailBounceStatus() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_EmailBounceStatus")
            '
            Dim f As New stringBuilderLegacyController
            Dim Copy As String
            Dim Adminui As New adminUIController(cpCore)
            '
            f.Add(Adminui.GetEditRow("<a href=?" & RequestNameAdminForm & "=28 target=_blank>Open in New Window</a>", "Email Control", "The settings in this section can be modified with the Email Control page."))
            f.Add(Adminui.GetEditRow(cpCore.siteProperties.getText("EmailBounceAddress", ""), "Bounce Email Address", "All bounced emails will be sent to this address automatically. This must be a valid email account, and you should either use Contensive Bounce processing to capture the emails, or manually remove them from the account yourself."))
            f.Add(Adminui.GetEditRow(genericController.GetYesNo(genericController.EncodeBoolean(cpCore.siteProperties.getBoolean("AllowEmailBounceProcessing", False))), "Allow Bounce Email Processing", "If checked, Contensive will periodically retrieve all the email from the POP email account and take action on the membefr account that sent the email."))
            Select Case cpCore.siteProperties.getText("EMAILBOUNCEPROCESSACTION", "0")
                Case "1"
                    Copy = "Clear the Allow Group Email field for all members with a matching Email address"
                Case "2"
                    Copy = "Clear all member Email addresses that match the Email address"
                Case "3"
                    Copy = "Delete all Members with a matching Email address"
                Case Else
                    Copy = "Do Nothing"
            End Select
            f.Add(Adminui.GetEditRow(Copy, "Bounce Email Action", "When an email is determined to be a bounce, this action will taken against member with that email address."))
            f.Add(Adminui.GetEditRow(cpCore.siteProperties.getText("POPServerStatus"), "Last Email Retrieve Status", "This is the status of the last POP email retrieval attempted."))
            '
            GetForm_Edit_EmailBounceStatus = Adminui.GetEditPanel((Not allowAdminTabs), "Bounced Email Handling", "", Adminui.EditTableOpen & f.Text & Adminui.EditTableClose)
            EditSectionPanelCount = EditSectionPanelCount + 1
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Edit_EmailBounceStatus")
            '
        End Function
        '
        '========================================================================
        ' Print the Member Edit form
        '
        '   Content must conform to ccMember fields
        '========================================================================
        '
        Private Function GetForm_Edit_MemberGroups(adminContent As cdefModel, editRecord As editRecordClass) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_MemberGroups")
            '
            Dim f As New stringBuilderLegacyController
            Dim Copy As String
            Dim SQL As String
            Dim CS As Integer
            Dim MembershipCount As Integer
            Dim MembershipSize As Integer
            Dim MembershipPointer As Integer
            Dim SectionName As String
            Dim PeopleContentID As Integer
            Dim GroupContentID As Integer
            Dim CanSeeHiddenGroups As Boolean
            Dim DateExpireValue As String
            Dim GroupCount As Integer
            Dim GroupID As Integer
            Dim GroupName As String
            Dim GroupCaption As String
            Dim GroupActive As Boolean
            Dim Membership() As Integer = {}
            Dim DateExpires() As Date = {}
            Dim Active() As Boolean = {}
            Dim Caption As String
            Dim MethodName As String
            Dim ReportLink As String
            Dim Adminui As New adminUIController(cpCore)
            '
            MethodName = "GetForm_Edit_MemberGroups"
            '
            ' ----- Gather all the SecondaryContent that associates to the PrimaryContent
            '
            PeopleContentID = cpCore.metaData.getContentId("People")
            GroupContentID = cpCore.metaData.getContentId("Groups")
            '
            MembershipCount = 0
            MembershipSize = 0
            If True Then
                'If EditRecord.ID <> 0 Then
                '
                ' ----- read in the groups that this member has subscribed (exclude new member records)
                '
                If editRecord.id <> 0 Then
                    SQL = "SELECT Active,GroupID,DateExpires" _
                        & " FROM ccMemberRules" _
                        & " WHERE MemberID=" & editRecord.id
                    CS = cpCore.db.cs_openCsSql_rev("Default", SQL)
                    Do While cpCore.db.cs_ok(CS)
                        If MembershipCount >= MembershipSize Then
                            MembershipSize = MembershipSize + 10
                            ReDim Preserve Membership(MembershipSize)
                            ReDim Preserve Active(MembershipSize)
                            ReDim Preserve DateExpires(MembershipSize)
                        End If
                        Membership(MembershipCount) = cpCore.db.cs_getInteger(CS, "GroupID")
                        DateExpires(MembershipCount) = cpCore.db.cs_getDate(CS, "DateExpires")
                        Active(MembershipCount) = cpCore.db.cs_getBoolean(CS, "Active")
                        MembershipCount = MembershipCount + 1
                        cpCore.db.cs_goNext(CS)
                    Loop
                    Call cpCore.db.cs_Close(CS)
                End If
                '
                ' ----- read in all the groups, sorted by ContentName
                '
                SQL = "SELECT ccGroups.ID AS ID, ccContent.Name AS SectionName, ccGroups.Caption AS GroupCaption, ccGroups.name AS GroupName, ccGroups.SortOrder" _
                    & " FROM ccGroups LEFT JOIN ccContent ON ccGroups.ContentControlID = ccContent.ID" _
                    & " Where (((ccGroups.Active) <> " & SQLFalse & ") And ((ccContent.Active) <> " & SQLFalse & "))"
                SQL &= "" _
                    & " GROUP BY ccGroups.ID, ccContent.Name, ccGroups.Caption, ccGroups.name, ccGroups.SortOrder" _
                    & " ORDER BY ccGroups.Caption"
                'sql &= "" _
                '    & " GROUP BY ccGroups.ID, ccContent.Name, ccGroups.Caption, ccGroups.name, ccGroups.SortOrder" _
                '    & " ORDER BY ccContent.Name, ccGroups.Caption"
                CS = cpCore.db.cs_openCsSql_rev("Default", SQL)
                '
                ' Output all the groups, with the active and dateexpires from those joined
                '
                f.Add(Adminui.EditTableOpen)
                SectionName = ""
                GroupCount = 0
                CanSeeHiddenGroups = cpCore.authContext.isAuthenticatedDeveloper(cpCore)
                Do While cpCore.db.cs_ok(CS)
                    GroupName = cpCore.db.cs_get(CS, "GroupName")
                    If (Mid(GroupName, 1, 1) <> "_") Or CanSeeHiddenGroups Then
                        GroupCaption = cpCore.db.cs_get(CS, "GroupCaption")
                        GroupID = cpCore.db.cs_getInteger(CS, "ID")
                        If GroupCaption = "" Then
                            GroupCaption = GroupName
                            If GroupCaption = "" Then
                                GroupCaption = "Group&nbsp;" & GroupID
                            End If
                        End If
                        GroupActive = False
                        DateExpireValue = ""
                        If MembershipCount <> 0 Then
                            For MembershipPointer = 0 To MembershipCount - 1
                                If Membership(MembershipPointer) = GroupID Then
                                    GroupActive = Active(MembershipPointer)
                                    If DateExpires(MembershipPointer) > Date.MinValue Then
                                        DateExpireValue = genericController.encodeText(DateExpires(MembershipPointer))
                                    End If
                                    Exit For
                                End If
                            Next
                        End If
                        ReportLink = ""
                        ReportLink = ReportLink & "[<a href=""?af=4&cid=" & GroupContentID & "&id=" & GroupID & """>Edit&nbsp;Group</a>]"
                        If GroupID > 0 Then
                            ReportLink = ReportLink & "&nbsp;[<a href=""?" & RequestNameAdminForm & "=12&rid=35&recordid=" & GroupID & """>Group&nbsp;Report</a>]"
                        End If
                        '
                        If GroupCount = 0 Then
                            Caption = SpanClassAdminSmall & "Groups</span>"
                        Else
                            Caption = "&nbsp;"
                        End If
                        f.Add("<tr><td class=""ccAdminEditCaption"">" & Caption & "</td>")
                        f.Add("<td class=""ccAdminEditField"">")
                        f.Add("<table border=0 cellpadding=0 cellspacing=0 width=""100%"" ><tr>")
                        f.Add("<td width=""40%"">" & cpCore.htmlDoc.html_GetFormInputHidden("Memberrules." & GroupCount & ".ID", GroupID) & cpCore.htmlDoc.html_GetFormInputCheckBox2("MemberRules." & GroupCount, GroupActive) & GroupCaption & "</td>")
                        f.Add("<td width=""30%""> Expires " & cpCore.htmlDoc.html_GetFormInputText2("MemberRules." & GroupCount & ".DateExpires", DateExpireValue, 1, 20) & "</td>")
                        f.Add("<td width=""30%"">" & ReportLink & "</td>")
                        f.Add("</tr></table>")
                        f.Add("</td></tr>")
                        GroupCount = GroupCount + 1
                    End If
                    cpCore.db.cs_goNext(CS)
                Loop
                cpCore.db.cs_Close(CS)
            End If
            If GroupCount = 0 Then
                'If EditRecord.ID = 0 Then
                '    F.Add( "<tr>" _
                '        & "<td valign=middle align=right>" & SpanClassAdminSmall & "Groups</span></td>" _
                '        & "<td>" & SpanClassAdminNormal & "Groups will be available after this record is saved</span></td>" _
                '        & "</tr>"
                'ElseIf GroupCount = 0 Then
                f.Add("<tr>" _
                    & "<td valign=middle align=right>" & SpanClassAdminSmall & "Groups</span></td>" _
                    & "<td>" & SpanClassAdminNormal & "There are currently no groups defined</span></td>" _
                    & "</tr>")
            Else
                f.Add("<input type=""hidden"" name=""MemberRules.RowCount"" value=""" & GroupCount & """>")
            End If
            f.Add("<tr>")
            f.Add("<td class=""ccAdminEditCaption"">&nbsp;</td>")
            f.Add("<td class=""ccAdminEditField"">" & SpanClassAdminNormal & "[<a href=?cid=" & cpCore.metaData.getContentId("Groups") & " target=_blank>Manage Groups</a>]</span></td>")
            f.Add("</tr>")

            GetForm_Edit_MemberGroups = Adminui.GetEditPanel((Not allowAdminTabs), "Group Membership", "This person is a member of these groups", Adminui.EditTableOpen & f.Text & Adminui.EditTableClose)
            EditSectionPanelCount = EditSectionPanelCount + 1
            Exit Function
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Edit_MemberGroups")
        End Function
        '
        '========================================================================
        '   Special case tab for Layout records
        '========================================================================
        '
        Private Function GetForm_Edit_LayoutReports(adminContent As cdefModel, editRecord As editRecordClass) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_LayoutReports")
            '
            Dim FastString As stringBuilderLegacyController
            Dim Adminui As New adminUIController(cpCore)
            '
            FastString = New stringBuilderLegacyController
            Call FastString.Add("<tr>")
            Call FastString.Add("<td valign=""top"" align=""right"">&nbsp;</td>")
            Call FastString.Add("<td colspan=""2"" class=""ccAdminEditField"" align=""left"">" & SpanClassAdminNormal)
            Call FastString.Add("<ul class=""ccList"">")
            Call FastString.Add("<li class=""ccListItem""><a target=""_blank"" href=""/preview?layout=" & editRecord.id & """>Preview this layout</A></LI>")
            Call FastString.Add("</ul>")
            Call FastString.Add("</span></td></tr>")
            GetForm_Edit_LayoutReports = Adminui.GetEditPanel((Not allowAdminTabs), "Contensive Reporting", "", Adminui.EditTableOpen & FastString.Text & Adminui.EditTableClose)
            EditSectionPanelCount = EditSectionPanelCount + 1
            FastString = Nothing
            Exit Function
            '
ErrorTrap:
            FastString = Nothing
            Call handleLegacyClassError3("GetForm_Edit_LayoutReports")
        End Function
        '
        '========================================================================
        '   Special case tab for People records
        '========================================================================
        '
        Private Function GetForm_Edit_MemberReports(adminContent As cdefModel, editRecord As editRecordClass) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_MemberReports")
            '
            Dim FastString As stringBuilderLegacyController
            Dim Adminui As New adminUIController(cpCore)
            '
            FastString = New stringBuilderLegacyController
            Call FastString.Add("<tr>")
            Call FastString.Add("<td valign=""top"" align=""right"">&nbsp;</td>")
            Call FastString.Add("<td colspan=""2"" class=""ccAdminEditField"" align=""left"">" & SpanClassAdminNormal)
            Call FastString.Add("<ul class=""ccList"">")
            Call FastString.Add("<li class=""ccListItem""><a target=""_blank"" href=""" & cpCore.serverConfig.appConfig.adminRoute & "?" & RequestNameAdminForm & "=" & AdminFormReports & "&rid=3&MemberID=" & editRecord.id & "&DateTo=" & Int(cpCore.app_startTime.ToOADate) & "&DateFrom=" & Int(cpCore.app_startTime.ToOADate) - 365 & """>All visits from this person</A></LI>")
            Call FastString.Add("<li class=""ccListItem""><a target=""_blank"" href=""" & cpCore.serverConfig.appConfig.adminRoute & "?" & RequestNameAdminForm & "=" & AdminFormReports & "&rid=13&MemberID=" & editRecord.id & "&DateTo=" & Int(CDbl(cpCore.app_startTime.ToOADate)) & "&DateFrom=" & Int(CDbl(cpCore.app_startTime.ToOADate) - 365) & """>All orders from this person</A></LI>")
            Call FastString.Add("</ul>")
            Call FastString.Add("</span></td></tr>")
            GetForm_Edit_MemberReports = Adminui.GetEditPanel((Not allowAdminTabs), "Contensive Reporting", "", Adminui.EditTableOpen & FastString.Text & Adminui.EditTableClose)
            EditSectionPanelCount = EditSectionPanelCount + 1
            FastString = Nothing
            Exit Function
            '
ErrorTrap:
            FastString = Nothing
            Call handleLegacyClassError3("GetForm_Edit_MemberReports")
        End Function
        '
        '========================================================================
        '   Print the path Rules section of the path edit form
        '========================================================================
        '
        Private Function GetForm_Edit_PathRules(adminContent As cdefModel, editRecord As editRecordClass) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_PathRules")
            '
            Dim FastString As stringBuilderLegacyController
            Dim Adminui As New adminUIController(cpCore)
            '
            FastString = New stringBuilderLegacyController
            Call FastString.Add("<tr>")
            Call FastString.Add("<td valign=""top"" align=""right"">" & SpanClassAdminSmall & "Groups</td>")
            Call FastString.Add("<td colspan=""2"" class=""ccAdminEditField"" align=""left"">" & SpanClassAdminNormal & cpCore.htmlDoc.main_GetFormInputCheckList("PathRules", "Paths", editRecord.id, "Groups", "Path Rules", "PathID", "GroupID", , "Caption") & "</span></td>")
            Call FastString.Add("</tr>")
            'Call FastString.Add(adminui.EditTableClose)
            GetForm_Edit_PathRules = Adminui.GetEditPanel((Not allowAdminTabs), "Path Permissions", "Groups that have access to this path", Adminui.EditTableOpen & FastString.Text & Adminui.EditTableClose)
            EditSectionPanelCount = EditSectionPanelCount + 1
            FastString = Nothing
            Exit Function
            '
ErrorTrap:
            FastString = Nothing
            Call handleLegacyClassError3("GetForm_Edit_PathRules")
        End Function
        '
        '========================================================================
        '   Print the path Rules section of the path edit form
        '========================================================================
        '
        Private Function GetForm_Edit_PageContentBlockRules(adminContent As cdefModel, editRecord As editRecordClass) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_PageContentBlockRules")
            '
            Dim f As New stringBuilderLegacyController
            Dim GroupList As String
            Dim GroupSplit() As String
            Dim Ptr As Integer
            Dim IDPtr As Integer
            Dim IDEndPtr As Integer
            Dim GroupID As Integer
            Dim ReportLink As String
            Dim Adminui As New adminUIController(cpCore)
            '
            GroupList = cpCore.htmlDoc.main_GetFormInputCheckList("PageContentBlockRules", adminContent.Name, editRecord.id, "Groups", "Page Content Block Rules", "RecordID", "GroupID", , "Caption", False)
            GroupSplit = Split(GroupList, "<br >", , vbTextCompare)
            For Ptr = 0 To UBound(GroupSplit)
                GroupID = 0
                IDPtr = genericController.vbInstr(1, GroupSplit(Ptr), "value=", vbTextCompare)
                If IDPtr > 0 Then
                    IDEndPtr = genericController.vbInstr(IDPtr, GroupSplit(Ptr), ">")
                    If IDEndPtr > 0 Then
                        GroupID = genericController.EncodeInteger(Mid(GroupSplit(Ptr), IDPtr + 6, IDEndPtr - IDPtr - 6))
                    End If
                End If
                If GroupID > 0 Then
                    ReportLink = "[<a href=""?" & RequestNameAdminForm & "=12&rid=35&recordid=" & GroupID & """ target=_blank>Group&nbsp;Report</a>]"
                Else
                    ReportLink = "&nbsp;"
                End If
                f.Add("<tr>" _
                    & "<td>&nbsp;</td>" _
                    & "<td class=""ccAdminEditField"" align=left>" & SpanClassAdminNormal & GroupSplit(Ptr) & "</span></td>" _
                    & "<td class=""ccAdminEditField"" align=center>" & ReportLink & "</td>" _
                    & "</tr>")
            Next
            GetForm_Edit_PageContentBlockRules = Adminui.GetEditPanel((Not allowAdminTabs), "Content Blocking", "If content is blocked, select groups that have access to this content", Adminui.EditTableOpen & f.Text & Adminui.EditTableClose)
            EditSectionPanelCount = EditSectionPanelCount + 1
            Exit Function
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Edit_PageContentBlockRules")
        End Function
        '
        '========================================================================
        '   Print the path Rules section of the path edit form
        '========================================================================
        '
        Private Function GetForm_Edit_LibraryFolderRules(adminContent As cdefModel, editRecord As editRecordClass) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_LibraryFolderRules")
            '
            Dim Copy As String
            Dim f As New stringBuilderLegacyController
            Dim GroupList As String
            Dim GroupSplit() As String
            Dim Ptr As Integer
            Dim IDPtr As Integer
            Dim IDEndPtr As Integer
            Dim GroupID As Integer
            Dim ReportLink As String
            Dim Adminui As New adminUIController(cpCore)
            '
            GroupList = cpCore.htmlDoc.main_GetFormInputCheckList("LibraryFolderRules", adminContent.Name, editRecord.id, "Groups", "Library Folder Rules", "FolderID", "GroupID", , "Caption")
            GroupSplit = Split(GroupList, "<br >", , vbTextCompare)
            For Ptr = 0 To UBound(GroupSplit)
                GroupID = 0
                IDPtr = genericController.vbInstr(1, GroupSplit(Ptr), "value=", vbTextCompare)
                If IDPtr > 0 Then
                    IDEndPtr = genericController.vbInstr(IDPtr, GroupSplit(Ptr), ">")
                    If IDEndPtr > 0 Then
                        GroupID = genericController.EncodeInteger(Mid(GroupSplit(Ptr), IDPtr + 6, IDEndPtr - IDPtr - 6))
                    End If
                End If
                If GroupID > 0 Then
                    ReportLink = "[<a href=""?" & RequestNameAdminForm & "=12&rid=35&recordid=" & GroupID & """ target=_blank>Group&nbsp;Report</a>]"
                Else
                    ReportLink = "&nbsp;"
                End If
                f.Add("<tr>" _
                    & "<td>&nbsp;</td>" _
                    & "<td class=""ccAdminEditField"" align=left>" & SpanClassAdminNormal & GroupSplit(Ptr) & "</span></td>" _
                    & "<td class=""ccAdminEditField"" align=center>" & ReportLink & "</td>" _
                    & "</tr>")
            Next
            Copy = "Select groups who have authoring access within this folder. This means if you are in this group you can upload files, delete files, create folders and delete folders within this folder and any subfolders."
            GetForm_Edit_LibraryFolderRules = Adminui.GetEditPanel((Not allowAdminTabs), "Folder Permissions", Copy, Adminui.EditTableOpen & f.Text & Adminui.EditTableClose)
            EditSectionPanelCount = EditSectionPanelCount + 1
            Exit Function
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Edit_LibraryFolderRules")
        End Function
        '        '
        '        '========================================================================
        '        '
        '        '========================================================================
        '        '
        '        Private Function GetForm_Edit_SectionDynamicMenuRules(adminContent As cdefModel, editRecord As editRecordClass) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_SectionDynamicMenuRules")
        '            '
        '            Dim f As New stringBuilderLegacyController
        '            Dim DynamicMenuList As String
        '            Dim DynamicMenuSplit() As String
        '            Dim Ptr As Integer
        '            Dim IDPtr As Integer
        '            Dim IDEndPtr As Integer
        '            Dim DynamicMenuID As Integer
        '            Dim ReportLink As String
        '            Dim WCPtr As Integer
        '            Dim Adminui As New adminUIController(cpCore)
        '            Dim ForcedMenuID As Integer
        '            '
        '            ' Determine the forced Menu ID (in the URL as MenuID=99)
        '            '
        '            If WherePairCount > 0 Then
        '                For WCPtr = 0 To WherePairCount - 1
        '                    If genericController.vbUCase(WherePair(0, WCPtr)) = "MENUID" Then
        '                        ForcedMenuID = genericController.EncodeInteger(WherePair(1, WCPtr))
        '                        Exit For
        '                    End If
        '                Next
        '            End If
        '            '
        '            ' If ForceMenuID=0 then force the default menu
        '            '
        '            ' this is causing more problems then it solves
        '            '
        '            '    If ForcedMenuID = 0 Then
        '            '        ForcedMenuID = cpCore.main_GetRecordID("Dynamic Menus", "Default")
        '            '    End If
        '            'Call cpCore.main_VerifyDynamicMenu("Default")
        '            DynamicMenuList = cpCore.htmlDoc.main_GetFormInputCheckList("SectionDynamicMenuRules", "Site Sections", editRecord.id, "Dynamic Menus", "Dynamic Menu Section Rules", "SectionID", "DynamicMenuID", , , False)
        '            DynamicMenuSplit = Split(DynamicMenuList, "<br >", , vbTextCompare)
        '            For Ptr = 0 To UBound(DynamicMenuSplit)
        '                DynamicMenuID = -1
        '                IDPtr = genericController.vbInstr(1, DynamicMenuSplit(Ptr), "value=", vbTextCompare)
        '                If IDPtr > 0 Then
        '                    IDEndPtr = genericController.vbInstr(IDPtr, DynamicMenuSplit(Ptr), ">")
        '                    If IDEndPtr > 0 Then
        '                        DynamicMenuID = genericController.EncodeInteger(Mid(DynamicMenuSplit(Ptr), IDPtr + 6, IDEndPtr - IDPtr - 6))
        '                    End If
        '                End If
        '                If ForcedMenuID = DynamicMenuID Then
        '                    DynamicMenuSplit(Ptr) = genericController.vbReplace(DynamicMenuSplit(Ptr), "type=checkbox ", "type=checkbox checked ", 1, 99, vbTextCompare)
        '                End If
        '                'If WherePairCount > 0 Then
        '                '    For WCPtr = 0 To WherePairCount - 1
        '                '        If genericController.vbUCase(WherePair(0, WCPtr)) = "MENUID" Then
        '                '            If WherePair(1, WCPtr) = CStr(DynamicMenuID) Then
        '                '                DynamicMenuSplit(Ptr) = genericController.vbReplace(DynamicMenuSplit(Ptr), "<input ", "<input checked ", 1, 1, vbTextCompare)
        '                '            End If
        '                '            Exit For
        '                '        End If
        '                '    Next
        '                'End If
        '                'If DynamicMenuID > 0 Then
        '                '    ReportLink = "<a href=""?" & RequestNameAdminForm & "=12&rid=35&recordid=" & DynamicMenuID & """ target=_blank>DynamicMenu&nbsp;Report</a>"
        '                'Else
        '                ReportLink = "&nbsp;"
        '                'End If
        '                f.Add("<tr>" _
        '                    & "<td>&nbsp;</td>" _
        '                    & "<td class=""ccAdminEditField"" align=left>" & SpanClassAdminNormal & DynamicMenuSplit(Ptr) & "</span></td>" _
        '                    & "<td class=""ccAdminEditField"" align=center>" & ReportLink & "</td>" _
        '                    & "</tr>")
        '            Next
        '            GetForm_Edit_SectionDynamicMenuRules = Adminui.GetEditPanel((Not allowAdminTabs), "Dynamic Sections", "Select Dynamic Menus that include this Site Section", Adminui.EditTableOpen & f.Text & Adminui.EditTableClose)
        '            EditSectionPanelCount = EditSectionPanelCount + 1
        '            Exit Function
        '            '
        'ErrorTrap:
        '            Call handleLegacyClassError3("GetForm_Edit_SectionDynamicMenuRules")
        '        End Function
        '        '
        '        '========================================================================
        '        '
        '        '========================================================================
        '        '
        '        Private Function GetForm_Edit_DynamicMenuSectionRules(adminContent As cdefModel, editRecord As editRecordClass) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_DynamicMenuSectionRules")
        '            '
        '            Dim f As New stringBuilderLegacyController
        '            Dim SectionList As String
        '            Dim SectionSplit() As String
        '            Dim Ptr As Integer
        '            Dim IDPtr As Integer
        '            Dim IDEndPtr As Integer
        '            Dim SectionID As Integer
        '            Dim ReportLink As String
        '            Dim Adminui As New adminUIController(cpCore)
        '            '
        '            'Call cpCore.main_VerifyDynamicMenu("Default")
        '            SectionList = cpCore.htmlDoc.main_GetFormInputCheckList("DynamicMenuSectionRules", "Dynamic Menus", editRecord.id, "Site Sections", "Dynamic Menu Section Rules", "DynamicMenuID", "SectionID", , , False)
        '            SectionSplit = Split(SectionList, "<br >", , vbTextCompare)
        '            For Ptr = 0 To UBound(SectionSplit)
        '                SectionID = 0
        '                IDPtr = genericController.vbInstr(1, SectionSplit(Ptr), "value=", vbTextCompare)
        '                If IDPtr > 0 Then
        '                    IDEndPtr = genericController.vbInstr(IDPtr, SectionSplit(Ptr), ">")
        '                    If IDEndPtr > 0 Then
        '                        SectionID = genericController.EncodeInteger(Mid(SectionSplit(Ptr), IDPtr + 6, IDEndPtr - IDPtr - 6))
        '                    End If
        '                End If
        '                'If SectionID > 0 Then
        '                '    ReportLink = "<a href=""?" & RequestNameAdminForm & "=12&rid=35&recordid=" & SectionID & """ target=_blank>DynamicMenu&nbsp;Report</a>"
        '                'Else
        '                ReportLink = "&nbsp;"
        '                'End If
        '                f.Add("<tr>" _
        '                    & "<td>&nbsp;</td>" _
        '                    & "<td class=""ccAdminEditField"" align=left>" & SpanClassAdminNormal & SectionSplit(Ptr) & "</span></td>" _
        '                    & "<td class=""ccAdminEditField"" align=center>" & ReportLink & "</td>" _
        '                    & "</tr>")
        '            Next
        '            GetForm_Edit_DynamicMenuSectionRules = Adminui.GetEditPanel((Not allowAdminTabs), "Site Sections", "Select Site Sections to be included in this Dynamic Menu.", Adminui.EditTableOpen & f.Text & Adminui.EditTableClose)
        '            EditSectionPanelCount = EditSectionPanelCount + 1
        '            Exit Function
        '            '
        'ErrorTrap:
        '            Call handleLegacyClassError3("GetForm_Edit_DynamicMenuSectionRules")
        '        End Function
        '        '
        '        '========================================================================
        '        '   Print the path Rules section of the path edit form
        '        '========================================================================
        '        '
        '        Private Function GetForm_Edit_SectionBlockRules(adminContent As cdefModel, editRecord As editRecordClass) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_SectionBlockRules")
        '            '
        '            Dim f As New stringBuilderLegacyController
        '            Dim GroupList As String
        '            Dim GroupSplit() As String
        '            Dim Ptr As Integer
        '            Dim IDPtr As Integer
        '            Dim IDEndPtr As Integer
        '            Dim GroupID As Integer
        '            Dim ReportLink As String
        '            Dim Adminui As New adminUIController(cpCore)
        '            '
        '            GroupList = cpCore.htmlDoc.main_GetFormInputCheckList("SectionBlockRules", adminContent.Name, editRecord.id, "Groups", "Section Block Rules", "SectionID", "GroupID", , "Caption", False)
        '            GroupSplit = Split(GroupList, "<br >", , vbTextCompare)
        '            For Ptr = 0 To UBound(GroupSplit)
        '                GroupID = 0
        '                IDPtr = genericController.vbInstr(1, GroupSplit(Ptr), "value=", vbTextCompare)
        '                If IDPtr > 0 Then
        '                    IDEndPtr = genericController.vbInstr(IDPtr, GroupSplit(Ptr), ">")
        '                    If IDEndPtr > 0 Then
        '                        GroupID = genericController.EncodeInteger(Mid(GroupSplit(Ptr), IDPtr + 6, IDEndPtr - IDPtr - 6))
        '                    End If
        '                End If
        '                If GroupID > 0 Then
        '                    ReportLink = "[<a href=""?" & RequestNameAdminForm & "=12&rid=35&recordid=" & GroupID & """ target=_blank>Group&nbsp;Report</a>]"
        '                Else
        '                    ReportLink = "&nbsp;"
        '                End If
        '                f.Add("<tr>" _
        '                    & "<td>&nbsp;</td>" _
        '                    & "<td class=""ccAdminEditField"" align=left>" & SpanClassAdminNormal & GroupSplit(Ptr) & "</span></td>" _
        '                    & "<td class=""ccAdminEditField"" align=center>" & ReportLink & "</td>" _
        '                    & "</tr>")
        '            Next
        '            GetForm_Edit_SectionBlockRules = Adminui.GetEditPanel((Not allowAdminTabs), "Group Permissions", "If this section is marked 'Blocked from Users' on the details tab, select groups that have access to this section and its navigation", Adminui.EditTableOpen & f.Text & Adminui.EditTableClose)
        '            EditSectionPanelCount = EditSectionPanelCount + 1
        '            Exit Function
        '            '
        'ErrorTrap:
        '            Call handleLegacyClassError3("GetForm_Edit_SectionBlockRules")
        '        End Function
        '
        '========================================================================
        ' Print the Group Rules section for Content Edit form
        '   Group rules show which groups have authoring rights to a content
        '
        '   adminContent.id is the ContentID of the Content Definition being edited
        '   EditRecord.ContentID is the ContentControlID of the Edit Record
        '========================================================================
        '
        Private Function GetForm_Edit_GroupRules(adminContent As cdefModel, editRecord As editRecordClass) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_GroupRules")
            '
            Dim SQL As String
            Dim CS As Integer
            Dim GroupRulesCount As Integer
            Dim GroupRulesSize As Integer
            Dim GroupRulesPointer As Integer
            Dim SectionName As String
            Dim GroupName As String
            Dim GroupCount As Integer
            Dim GroupFound As Boolean
            Dim GroupRules() As GroupRuleType = {}
            Dim FastString As stringBuilderLegacyController
            Dim Adminui As New adminUIController(cpCore)
            '
            ' ----- Open the panel
            '
            FastString = New stringBuilderLegacyController
            '
            'Call cpCore.main_PrintPanelTop("ccPanel", "ccPanelShadow", "ccPanelHilite", "100%", 5)
            'Call call FastString.Add(adminui.EditTableOpen)
            '
            ' ----- Gather all the groups which have authoring rights to the content
            '
            GroupRulesCount = 0
            GroupRulesSize = 0
            If editRecord.id <> 0 Then
                SQL = "SELECT ccGroups.ID AS ID, ccGroupRules.AllowAdd as allowadd, ccGroupRules.AllowDelete as allowdelete" _
                    & " FROM ccGroups LEFT JOIN ccGroupRules ON ccGroups.ID = ccGroupRules.GroupID" _
                    & " WHERE (((ccGroupRules.ContentID)=" & editRecord.id & ") AND ((ccGroupRules.Active)<>0) AND ((ccGroups.Active)<>0))"
                CS = cpCore.db.cs_openCsSql_rev("Default", SQL)
                If cpCore.db.cs_ok(CS) Then
                    If True Then
                        GroupRulesSize = 100
                        ReDim GroupRules(GroupRulesSize)
                        Do While cpCore.db.cs_ok(CS)
                            If GroupRulesCount >= GroupRulesSize Then
                                GroupRulesSize = GroupRulesSize + 100
                                ReDim Preserve GroupRules(GroupRulesSize)
                            End If
                            GroupRules(GroupRulesCount).GroupID = cpCore.db.cs_getInteger(CS, "ID")
                            GroupRules(GroupRulesCount).AllowAdd = cpCore.db.cs_getBoolean(CS, "AllowAdd")
                            GroupRules(GroupRulesCount).AllowDelete = cpCore.db.cs_getBoolean(CS, "AllowDelete")
                            GroupRulesCount = GroupRulesCount + 1
                            Call cpCore.db.cs_goNext(CS)
                        Loop
                    End If
                End If
            End If
            cpCore.db.cs_Close(CS)
            '
            ' ----- Gather all the groups, sorted by ContentName
            '
            SQL = "SELECT ccGroups.ID AS ID, ccContent.Name AS SectionName, ccGroups.Name AS GroupName, ccGroups.Caption AS GroupCaption, ccGroups.SortOrder" _
                & " FROM ccGroups LEFT JOIN ccContent ON ccGroups.ContentControlID = ccContent.ID" _
                & " Where (((ccGroups.Active) <> " & SQLFalse & ") And ((ccContent.Active) <> " & SQLFalse & "))" _
                & " GROUP BY ccGroups.ID, ccContent.Name, ccGroups.Name, ccGroups.Caption, ccGroups.SortOrder" _
                & " ORDER BY ccContent.Name, ccGroups.Caption, ccGroups.SortOrder"
            CS = cpCore.db.cs_openCsSql_rev("Default", SQL)
            If Not cpCore.db.cs_ok(CS) Then
                Call FastString.Add(vbCrLf & "<tr><td colspan=""3"">" & SpanClassAdminSmall & "There are no active groups</span></td></tr>")
            Else
                If True Then
                    'Call FastString.Add(vbCrLf & "<tr><td colspan=""3"" class=""ccAdminEditSubHeader"">Groups with authoring access</td></tr>")
                    SectionName = ""
                    GroupCount = 0
                    Do While cpCore.db.cs_ok(CS)
                        GroupName = cpCore.db.cs_get(CS, "GroupCaption")
                        If GroupName = "" Then
                            GroupName = cpCore.db.cs_get(CS, "GroupName")
                        End If
                        Call FastString.Add("<tr>")
                        If SectionName <> cpCore.db.cs_get(CS, "SectionName") Then
                            '
                            ' ----- create the next section
                            '
                            SectionName = cpCore.db.cs_get(CS, "SectionName")
                            Call FastString.Add("<td valign=""top"" align=""right"">" & SpanClassAdminSmall & SectionName & "</td>")
                        Else
                            Call FastString.Add("<td valign=""top"" align=""right"">&nbsp;</td>")
                        End If
                        Call FastString.Add("<td class=""ccAdminEditField"" align=""left"" colspan=""2"">" & SpanClassAdminSmall)
                        GroupFound = False
                        If GroupRulesCount <> 0 Then
                            For GroupRulesPointer = 0 To GroupRulesCount - 1
                                If GroupRules(GroupRulesPointer).GroupID = cpCore.db.cs_getInteger(CS, "ID") Then
                                    GroupFound = True
                                    Exit For
                                End If
                            Next
                        End If
                        Call FastString.Add("<input type=""hidden"" name=""GroupID" & GroupCount & """ value=""" & cpCore.db.cs_get(CS, "ID") & """>")
                        Call FastString.Add("<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""400""><tr>")
                        If GroupFound Then
                            Call FastString.Add("<td width=""200"">" & SpanClassAdminSmall & cpCore.htmlDoc.html_GetFormInputCheckBox2("Group" & GroupCount, True) & GroupName & "</span></td>")
                            Call FastString.Add("<td width=""100"">" & SpanClassAdminSmall & cpCore.htmlDoc.html_GetFormInputCheckBox2("GroupRuleAllowAdd" & GroupCount, GroupRules(GroupRulesPointer).AllowAdd) & " Allow Add</span></td>")
                            Call FastString.Add("<td width=""100"">" & SpanClassAdminSmall & cpCore.htmlDoc.html_GetFormInputCheckBox2("GroupRuleAllowDelete" & GroupCount, GroupRules(GroupRulesPointer).AllowDelete) & " Allow Delete</span></td>")
                        Else
                            Call FastString.Add("<td width=""200"">" & SpanClassAdminSmall & cpCore.htmlDoc.html_GetFormInputCheckBox2("Group" & GroupCount, False) & GroupName & "</span></td>")
                            Call FastString.Add("<td width=""100"">" & SpanClassAdminSmall & cpCore.htmlDoc.html_GetFormInputCheckBox2("GroupRuleAllowAdd" & GroupCount, False) & " Allow Add</span></td>")
                            Call FastString.Add("<td width=""100"">" & SpanClassAdminSmall & cpCore.htmlDoc.html_GetFormInputCheckBox2("GroupRuleAllowDelete" & GroupCount, False) & " Allow Delete</span></td>")
                        End If
                        Call FastString.Add("</tr></table>")
                        Call FastString.Add("</span></td>")
                        Call FastString.Add("</tr>")
                        GroupCount = GroupCount + 1
                        Call cpCore.db.cs_goNext(CS)
                    Loop
                    Call FastString.Add(vbCrLf & "<input type=""hidden"" name=""GroupCount"" value=""" & GroupCount & """>")
                End If
            End If
            cpCore.db.cs_Close(CS)
            '
            ' ----- close the panel
            '
            'Call FastString.Add(adminui.EditTableClose)
            'Call cpCore.main_PrintPanelBottom("ccPanel", "ccPanelShadow", "ccPanelHilite", "100%", 5)
            '
            GetForm_Edit_GroupRules = Adminui.GetEditPanel((Not allowAdminTabs), "Authoring Permissions", "The following groups can edit this content.", Adminui.EditTableOpen & FastString.Text & Adminui.EditTableClose)
            EditSectionPanelCount = EditSectionPanelCount + 1
            FastString = Nothing
            Exit Function
            '
ErrorTrap:
            FastString = Nothing
            Call handleLegacyClassError3("GetForm_Edit_GroupRules")
        End Function
        '
        '========================================================================
        '   Get all content authorable by the current group
        '========================================================================
        '
        Private Function GetForm_Edit_ContentGroupRules(adminContent As cdefModel, editRecord As editRecordClass) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_ContentGroupRules")
            '
            Dim SQL As String
            Dim CS As Integer
            Dim ContentGroupRulesCount As Integer
            Dim ContentGroupRulesSize As Integer
            Dim ContentGroupRulesPointer As Integer
            Dim ContentName As String
            Dim ContentCount As Integer
            Dim ContentFound As Boolean
            Dim ContentGroupRules() As ContentGroupRuleType = {}
            Dim FastString As stringBuilderLegacyController
            Dim Adminui As New adminUIController(cpCore)
            '
            If cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                '
                ' ----- Open the panel
                '
                FastString = New stringBuilderLegacyController
                '
                'Call cpCore.main_PrintPanelTop("ccPanel", "ccPanelShadow", "ccPanelHilite", "100%", 5)
                'Call call FastString.Add(adminui.EditTableOpen)
                '
                ' ----- Gather all the groups which have authoring rights to the content
                '
                ContentGroupRulesCount = 0
                ContentGroupRulesSize = 0
                If editRecord.id <> 0 Then
                    SQL = "SELECT ccContent.ID AS ID, ccGroupRules.AllowAdd as allowadd, ccGroupRules.AllowDelete as allowdelete" _
                        & " FROM ccContent LEFT JOIN ccGroupRules ON ccContent.ID = ccGroupRules.ContentID" _
                        & " WHERE (((ccGroupRules.GroupID)=" & editRecord.id & ") AND ((ccGroupRules.Active)<>0) AND ((ccContent.Active)<>0))"
                    CS = cpCore.db.cs_openCsSql_rev("Default", SQL)
                    If cpCore.db.cs_ok(CS) Then
                        ContentGroupRulesSize = 100
                        ReDim ContentGroupRules(ContentGroupRulesSize)
                        Do While cpCore.db.cs_ok(CS)
                            If ContentGroupRulesCount >= ContentGroupRulesSize Then
                                ContentGroupRulesSize = ContentGroupRulesSize + 100
                                ReDim Preserve ContentGroupRules(ContentGroupRulesSize)
                            End If
                            ContentGroupRules(ContentGroupRulesCount).ContentID = cpCore.db.cs_getInteger(CS, "ID")
                            ContentGroupRules(ContentGroupRulesCount).AllowAdd = cpCore.db.cs_getBoolean(CS, "AllowAdd")
                            ContentGroupRules(ContentGroupRulesCount).AllowDelete = cpCore.db.cs_getBoolean(CS, "AllowDelete")
                            ContentGroupRulesCount = ContentGroupRulesCount + 1
                            Call cpCore.db.cs_goNext(CS)
                        Loop
                    End If
                End If
                cpCore.db.cs_Close(CS)
                '
                ' ----- Gather all the content, sorted by ContentName
                '
                SQL = "SELECT ccContent.ID AS ID, ccContent.Name AS ContentName, ccContent.SortOrder" _
                    & " FROM ccContent" _
                    & " Where ccContent.Active<>0" _
                    & " ORDER BY ccContent.Name"
                CS = cpCore.db.cs_openCsSql_rev("Default", SQL)
                If Not cpCore.db.cs_ok(CS) Then
                    Call FastString.Add(vbCrLf & "<tr><td colspan=""3"">" & SpanClassAdminSmall & "There are no active groups</span></td></tr>")
                Else
                    ContentCount = 0
                    Do While cpCore.db.cs_ok(CS)
                        ContentName = cpCore.db.cs_get(CS, "ContentName")
                        Call FastString.Add("<tr>")
                        Call FastString.Add("<td valign=""top"" align=""right"">&nbsp;</td>")
                        Call FastString.Add("<td class=""ccAdminEditField"" align=""left"" colspan=""2"">" & SpanClassAdminSmall)
                        ContentFound = False
                        If ContentGroupRulesCount <> 0 Then
                            For ContentGroupRulesPointer = 0 To ContentGroupRulesCount - 1
                                If ContentGroupRules(ContentGroupRulesPointer).ContentID = cpCore.db.cs_getInteger(CS, "ID") Then
                                    ContentFound = True
                                    Exit For
                                End If
                            Next
                        End If
                        Call FastString.Add("<input type=""hidden"" name=""ContentID" & ContentCount & """ value=""" & cpCore.db.cs_get(CS, "ID") & """>")
                        Call FastString.Add("<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""400""><tr>")
                        If ContentFound Then
                            Call FastString.Add("<td width=""200"">" & SpanClassAdminSmall & cpCore.htmlDoc.html_GetFormInputCheckBox2("Content" & ContentCount, True) & ContentName & "</span></td>")
                            Call FastString.Add("<td width=""100"">" & SpanClassAdminSmall & cpCore.htmlDoc.html_GetFormInputCheckBox2("ContentGroupRuleAllowAdd" & ContentCount, ContentGroupRules(ContentGroupRulesPointer).AllowAdd) & " Allow Add</span></td>")
                            Call FastString.Add("<td width=""100"">" & SpanClassAdminSmall & cpCore.htmlDoc.html_GetFormInputCheckBox2("ContentGroupRuleAllowDelete" & ContentCount, ContentGroupRules(ContentGroupRulesPointer).AllowDelete) & " Allow Delete</span></td>")
                        Else
                            Call FastString.Add("<td width=""200"">" & SpanClassAdminSmall & cpCore.htmlDoc.html_GetFormInputCheckBox2("Content" & ContentCount, False) & ContentName & "</span></td>")
                            Call FastString.Add("<td width=""100"">" & SpanClassAdminSmall & cpCore.htmlDoc.html_GetFormInputCheckBox2("ContentGroupRuleAllowAdd" & ContentCount, False) & " Allow Add</span></td>")
                            Call FastString.Add("<td width=""100"">" & SpanClassAdminSmall & cpCore.htmlDoc.html_GetFormInputCheckBox2("ContentGroupRuleAllowDelete" & ContentCount, False) & " Allow Delete</span></td>")
                        End If
                        Call FastString.Add("</tr></table>")
                        Call FastString.Add("</span></td>")
                        Call FastString.Add("</tr>")
                        ContentCount = ContentCount + 1
                        Call cpCore.db.cs_goNext(CS)
                    Loop
                    Call FastString.Add(vbCrLf & "<input type=""hidden"" name=""ContentCount"" value=""" & ContentCount & """>")
                End If
                cpCore.db.cs_Close(CS)
                '
                ' ----- close the panel
                '
                'Call FastString.Add(adminui.EditTableClose)
                'Call cpCore.main_PrintPanelBottom("ccPanel", "ccPanelShadow", "ccPanelHilite", "100%", 5)
                '
                GetForm_Edit_ContentGroupRules = Adminui.GetEditPanel((Not allowAdminTabs), "Authoring Permissions", "This group can edit the following content.", Adminui.EditTableOpen & FastString.Text & Adminui.EditTableClose)
                EditSectionPanelCount = EditSectionPanelCount + 1
                FastString = Nothing
            End If
            Exit Function
            '
ErrorTrap:
            FastString = Nothing
            Call handleLegacyClassError3("GetForm_Edit_ContentGroupRules")
        End Function
        '        '
        '        '========================================================================
        '        '   Gets the fields pointer if it exists, otherwise -1
        '        '
        '        '   Does not report an error
        '        '========================================================================
        '        '
        '        Private Function GetFieldPtrNoError(adminContent As appServices_metaDataClass.CDefClass, editRecord As editRecordClass, ByVal TargetField As String) As Integer

        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetFieldPtrNoError")
        '            '
        '            Dim UcaseTargetField As String
        '            ''Dim arrayOfFields() As appServices_metaDataClass.CDefFieldClass
        '            '
        '            GetFieldPtrNoError = -1
        '            UcaseTargetField = genericController.vbUCase(TargetField)
        '            If adminContent.fields.Count > 0 Then
        '                arrayOfFields = adminContent.fields
        '                For GetFieldPtrNoError = 0 To adminContent.fields.Count - 1

        '                    If genericController.vbUCase(arrayOfFields(GetFieldPtrNoError).Name) = UcaseTargetField Then
        '                        Exit For
        '                    End If
        '                Next
        '                If GetFieldPtrNoError >= adminContent.fields.Count Then
        '                    GetFieldPtrNoError = -1
        '                End If
        '            End If
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyClassError3("GetFieldPtrNoError")
        '            '
        '        End Function
        '        '
        '        '========================================================================
        '        ' Get FieldPointer from its FieldName
        '        '   Returns -1 if not found
        '        '========================================================================
        '        '
        '        Private Function GetFieldPtr(adminContent As appServices_metaDataClass.CDefClass, editRecord As editRecordClass, ByVal TargetField As String) As Integer
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetFieldPtr")
        '            '
        '            GetFieldPtr = GetFieldPtrNoError(TargetField)
        '            If GetFieldPtr = -1 Then
        '                Call handleLegacyClassError("AdminClass.GetFieldPtr", "Could not find content field [" & adminContent.Name & "].[" & TargetField & "]")
        '            End If
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyClassError3("GetFieldPtr")
        '            '
        '        End Function
        '
        '========================================================================
        ' MakeButton
        '   Prints the currently selected Button Type
        '   ButtonName is the ID field name given to the button object
        '   ButtonLabel is the words that appear on the button
        '   ButtonHref is the Link for the button
        '   ButtonWidth, if provided, is the width of a trans spacer.gif put under the ButtonLabel
        '   ButtonColors, colors used for the button, duh.
        '========================================================================
        '
        Private Function MakeButton(ByVal ButtonName As String, ByVal ButtonLabel As String, ByVal ButtonHref As String, ByVal ButtonWidth As String, ByVal ButtonColorBase As String, ByVal ButtonColorHilite As String, ByVal ButtonColorShadow As String, ByVal NewWindow As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("MakeButton")
            '
            MakeButton = ""
            MakeButton = MakeButton & MakeButtonFlat(ButtonName, ButtonLabel, ButtonHref, ButtonWidth, ButtonColorBase, ButtonColorHilite, ButtonColorShadow, NewWindow)
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("MakeButton")
            '
        End Function
        '
        '========================================================================
        ' MakeButtonFlat
        '   Returns a Flat button string
        '   Button is a normal color, rollover changes background color only
        '========================================================================
        '
        Private Function MakeButtonFlat(ByVal ButtonName As String, ByVal ButtonLabel As String, ByVal ButtonHref As String, ByVal ButtonWidth As String, ByVal ButtonColorBase As String, ByVal ButtonColorHilite As String, ByVal ButtonColorShadow As String, ByVal NewWindow As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("MakeButtonFlat")
            '
            Dim IncludeWidth As Boolean
            '
            MakeButtonFlat = ""
            MakeButtonFlat = MakeButtonFlat & "<div" _
                & " ID=""" & ButtonName & """" _
                & " class=""ccAdminButton""" _
                & ">"
            '
            ' --- the IncludeWidth test
            '
            IncludeWidth = False
            If ButtonWidth <> "" Then
                If genericController.vbIsNumeric(ButtonWidth) Then
                    IncludeWidth = True
                End If
            End If
            '
            ' --- put guts in layer so Netscape can change colors (with mouseover and mouseout)
            '
            MakeButtonFlat = MakeButtonFlat & "<a" _
                & " href=""" & ButtonHref & """" _
                & " class=""ccAdminButton""" _
                & ""
            If NewWindow Then
                MakeButtonFlat = MakeButtonFlat & " target=""_blank"""
            End If
            MakeButtonFlat = MakeButtonFlat & ">"
            MakeButtonFlat = MakeButtonFlat & ButtonLabel & "</A>"
            If IncludeWidth Then
                MakeButtonFlat = MakeButtonFlat & "<br ><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""" & ButtonWidth & """ height=""1"" >"
            End If
            '
            ' --- close table
            '
            MakeButtonFlat = MakeButtonFlat & "</div>"
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("MakeButtonFlat")
            '
        End Function
        ''
        ''========================================================================
        '' GetMenuLeftMode()
        ''   Prints the menu section of the admin page
        ''========================================================================
        ''
        'Private Function deprecate_menu_getLeftMode() As String
        '    Dim returnString As String = ""
        '    Try
        '        '
        '        Const MenuEntryContentName = "Menu Entries"
        '        '
        '        Dim HeaderNameCurrent As String
        '        Dim MenuName As String
        '        Dim MenuID As Integer
        '        Dim MenuPage As String
        '        Dim MenuContentID As Integer
        '        Dim MenuNewWindow As Boolean
        '        Dim MenuItemCount As Integer
        '        Dim CS As Integer
        '        Dim Panel As String
        '        Dim ContentManagementList As New List(Of Integer)
        '        Dim IsAdminLocal As Boolean
        '        '
        '        ' Start the menu panel
        '        '
        '        Panel = "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"">"
        '        Panel = Panel & "<tr><td width=""10""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""10"" height=""1"" ></td><td width=""100%""></td></tr>"
        '        '
        '        ' --- Load CCMenu
        '        '
        '        CS = GetMenuCSPointer("(ccMenuEntries.ParentID is null)or(ccMenuEntries.ParentID=0)", MenuEntryContentName)
        '        If cpCore.db.csOk(CS) Then
        '            IsAdminLocal = cpcore.authContext.user.user_isAdmin
        '            If Not IsAdminLocal Then
        '                ContentManagementList.AddRange(cpCore.metaData.getEditableCdefIdList())
        '            End If
        '            HeaderNameCurrent = ""
        '            MenuItemCount = 0
        '            Do While cpCore.db.csOk(CS)
        '                MenuName = cpCore.db.cs_get(CS, "Name")
        '                MenuPage = cpCore.db.cs_get(CS, "LinkPage")
        '                MenuContentID = cpCore.db.cs_getInteger(CS, "ContentID")
        '                MenuNewWindow = cpCore.db.cs_getBoolean(CS, "NewWindow")
        '                MenuID = cpCore.db.cs_getInteger(CS, "ID")
        '                HeaderNameCurrent = MenuName
        '                '
        '                ' --- new header
        '                '
        '                If MenuItemCount <> 0 Then
        '                    Panel = Panel & "<tr><td colspan=""2""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""4"" ></td></tr>"
        '                    Panel = Panel & "<tr><td colspan=""2"" class=""ccPanelShadow""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""1"" ></td></tr>"
        '                    Panel = Panel & "<tr><td colspan=""2"" class=""ccPanelHilite""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""1"" ></td></tr>"
        '                    Panel = Panel & "<tr><td colspan=""2""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""4"" ></td></tr>"
        '                End If
        '                Panel = Panel & "<tr><td colspan=""2"">" & SpanClassAdminNormal & "<b>" & MenuName & "</b></span></td></tr>"
        '                MenuItemCount = MenuItemCount + 1
        '                Panel = Panel & deprecate_menu_getLeftModeBranch(MenuID, "", ContentManagementList, IsAdminLocal, MenuEntryContentName)
        '                Call cpCore.db.csGoNext(CS)
        '            Loop
        '        End If
        '        Call cpCore.db.csClose(CS)
        '        '
        '        ' Close the menu panel
        '        '
        '        Panel = Panel & "<tr><td width=""10""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""10"" height=""1"" ></td><td width=""1""></td><td width=""100%""></td><td width=""1""></td></tr>"
        '        Panel = Panel & "</table>"
        '        deprecate_menu_getLeftMode = cpCore.main_GetPanel(Panel, "ccPanel", "ccPanelHilite", "ccPanelShadow", "150", 10)
        '    Catch ex As Exception
        '        cpCore.handleExceptionAndContinue(ex) : Throw
        '    End Try
        '    Return returnString
        'End Function
        '        '
        '        '========================================================================
        '        ' GetMenuLeftModeBranch()
        '        '   Prints the menu section of the admin page
        '        '========================================================================
        '        '
        '        Private Function deprecate_menu_getLeftModeBranch(ByVal ParentID As Integer, ByVal ParentHeaderName As String, ByVal ContentManagementList As List(Of Integer), ByVal IsAdminLocal As Boolean, ByVal MenuEntryContentName As String) As String

        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetMenuLeftModeBranch")
        '            '
        '            Dim HeaderName As String
        '            Dim HeaderNameCurrent As String
        '            Dim MenuName As String
        '            Dim MenuID As Integer
        '            Dim MenuPage As String
        '            Dim MenuContentID As Integer
        '            Dim MenuNewWindow As Boolean
        '            Dim ButtonObject As String
        '            Dim MenuItemCount As Integer
        '            Dim SQL As String
        '            Dim CS As Integer
        '            Dim ImageID As Integer
        '            Dim ButtonGuts As String = ""
        '            Dim ButtonHref As String
        '            Dim ParentIDCurrent As Integer
        '            Dim MenuNameDisplay As String
        '            '
        '            ' --- Load CCMenu
        '            '
        '            CS = GetMenuCSPointer("(ccMenuEntries.ParentID=" & ParentID & ")", MenuEntryContentName)
        '            'SQL = GetMenuSQLNew("(ccMenuEntries.ParentID=" & parentid & ")")
        '            'CS = cpCore.app_openCsSql_Rev_Internal("Default", SQL)
        '            If cpCore.db.csOk(CS) Then
        '                HeaderNameCurrent = ""
        '                MenuItemCount = 0
        '                Do While cpCore.db.csOk(CS)
        '                    MenuName = cpCore.db.cs_get(CS, "Name")
        '                    MenuPage = cpCore.db.cs_get(CS, "LinkPage")
        '                    MenuContentID = cpCore.db.cs_getInteger(CS, "ContentID")
        '                    MenuNewWindow = cpCore.db.cs_getBoolean(CS, "NewWindow")
        '                    MenuID = cpCore.db.cs_getInteger(CS, "ID")
        '                    If ParentHeaderName = "" Then
        '                        MenuNameDisplay = MenuName
        '                    Else
        '                        MenuNameDisplay = ParentHeaderName & ":" & MenuName
        '                    End If
        '                    If (IsAdminLocal) Or ((MenuPage <> "") Or ((MenuContentID > 0) And (ContentManagementList.Contains(MenuContentID)))) Then
        '                        'If ((MenuPage <> "") Or (MenuContentID > 0)) Then
        '                        '
        '                        ' output the button
        '                        '
        '                        If MenuName = "" Then
        '                            MenuName = "[Link]"
        '                        End If
        '                        If MenuPage = "" Then
        '                            MenuPage = cpCore.siteProperties.serverPageDefault
        '                        End If
        '                        If MenuContentID > 0 Then
        '                            MenuPage = modifyLinkQuery(MenuPage, "cid", CStr(MenuContentID), True)
        '                            'MenuPage = MenuPage & "&cid=" & MenuContentID
        '                        End If
        '                        ButtonHref = MenuPage
        '                        If MenuNewWindow Then
        '                            ButtonGuts = ButtonGuts & " target=""_blank"""
        '                        End If
        '                        ButtonGuts = SpanClassAdminNormal & MenuNameDisplay & "</span>"
        '                        ' 9-28-02 ButtonGuts = SpanClassAdminNormal & "<nobr>" & MenuNameDisplay & "</nobr></span>"
        '                        ButtonObject = "Button" & ButtonObjectCount
        '                        ButtonObjectCount = ButtonObjectCount + 1
        '                        deprecate_menu_getLeftModeBranch = deprecate_menu_getLeftModeBranch & "<tr><td></td><td>" & MakeButton(ButtonObject, ButtonGuts, ButtonHref, "150", "ccPanel", "ccPanelHilite", "ccPanelShadow", MenuNewWindow) & "</td></tr>"
        '                    End If
        '                    MenuItemCount = MenuItemCount + 1
        '                    deprecate_menu_getLeftModeBranch = deprecate_menu_getLeftModeBranch & deprecate_menu_getLeftModeBranch(MenuID, MenuNameDisplay, ContentManagementList, IsAdminLocal, MenuEntryContentName)
        '                    Call cpCore.db.csGoNext(CS)
        '                Loop
        '            End If
        '            Call cpCore.db.csClose(CS)
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyClassError3("GetMenuLeftModeBranch")
        '            '
        '        End Function
        '        '
        '        '========================================================================
        '        ' GetMenuLeftMode()
        '        '   Prints the menu section of the admin page
        '        '========================================================================
        '        '
        '        Private Function menu_getLeftModeOld(ByVal MenuEntryContentName As String) As String
        '            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetMenuLeftModeOld")
        '            '
        '            Dim HeaderName As String
        '            Dim HeaderNameCurrent As String
        '            Dim MenuName As String
        '            Dim MenuID As Integer
        '            Dim MenuPage As String
        '            Dim MenuContentID As Integer
        '            Dim MenuNewWindow As Boolean
        '            Dim ButtonObject As String
        '            Dim MenuItemCount As Integer
        '            Dim SQL As String
        '            Dim CS As Integer
        '            Dim ImageID As Integer
        '            Dim Panel As String
        '            Dim ButtonGuts As String
        '            Dim ButtonHref As String
        '            Dim ParentID As Integer
        '            Dim ParentIDCurrent As Integer
        '            '
        '            ' --- Left Menu Mode
        '            '
        '            If AdminMenuModeID = AdminMenuModeLeft Then
        '                CS = GetMenuCSPointer("", MenuEntryContentName)
        '                'SQL = GetMenuSQLNew()
        '                ''
        '                '' --- Load CCMenu
        '                ''
        '                'CS = cpCore.app_openCsSql_Rev_Internal("Default", SQL)
        '                If cpCore.db.csOk(CS) Then
        '                    HeaderNameCurrent = ""
        '                    MenuItemCount = 0
        '                    Panel = "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"">"
        '                    Panel = Panel & "<tr><td width=""10""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""10"" height=""1"" ></td><td width=""100%""></td></tr>"
        '                    Do While cpCore.db.csOk(CS)
        '                        ParentID = cpCore.db.cs_getInteger(CS, "ParentID")
        '                        'HeaderName = cpCore.app.cs_get(CS, "HeaderName")
        '                        MenuName = cpCore.db.cs_get(CS, "Name")
        '                        MenuPage = cpCore.db.cs_get(CS, "LinkPage")
        '                        MenuContentID = cpCore.db.cs_getInteger(CS, "ContentID")
        '                        MenuNewWindow = cpCore.db.cs_getBoolean(CS, "NewWindow")
        '                        MenuID = cpCore.db.cs_getInteger(CS, "ID")
        '                        '
        '                        ' --- draw menu line
        '                        '
        '                        If ParentID = 0 Then
        '                            HeaderNameCurrent = MenuName
        '                            '
        '                            ' --- new header
        '                            '
        '                            'cpCore.writeAltBufferComment ("Menu new header")
        '                            If MenuItemCount <> 0 Then
        '                                Panel = Panel & "<tr><td colspan=""2""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""4"" ></td></tr>"
        '                                Panel = Panel & "<tr><td colspan=""2"" class=""ccPanelShadow""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""1"" ></td></tr>"
        '                                Panel = Panel & "<tr><td colspan=""2"" class=""ccPanelHilite""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""1"" ></td></tr>"
        '                                Panel = Panel & "<tr><td colspan=""2""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""4"" ></td></tr>"
        '                            End If
        '                            Panel = Panel & "<tr><td colspan=""2"">" & SpanClassAdminNormal & "<b>" & MenuName & "</b></span></td></tr>"
        '                        End If
        '                        If ((MenuPage <> "") Or (MenuContentID > 0)) Then
        '                            '
        '                            ' output the button
        '                            '
        '                            If MenuName = "" Then
        '                                MenuName = "[Link]"
        '                            End If
        '                            If MenuPage = "" Then
        '                                MenuPage = cpCore.siteProperties.serverPageDefault
        '                            End If
        '                            If genericController.vbInstr(MenuPage, "?") = 0 Then
        '                                MenuPage = MenuPage & "?s=0"
        '                                'Else
        '                                '    MenuPage = MenuPage
        '                            End If
        '                            If MenuContentID > 0 Then
        '                                MenuPage = MenuPage & "&cid=" & MenuContentID
        '                            End If
        '                            ButtonHref = MenuPage
        '                            If MenuNewWindow Then
        '                                ' ButtonGuts = ButtonGuts & " target=""_blank"""
        '                            End If
        '                            ButtonGuts = SpanClassAdminNormal & MenuName & "</span>"
        '                            ButtonObject = "Button" & ButtonObjectCount
        '                            ButtonObjectCount = ButtonObjectCount + 1
        '                            Panel = Panel & "<tr><td></td><td>" & MakeButton(ButtonObject, ButtonGuts, ButtonHref, "150", "ccPanel", "ccPanelHilite", "ccPanelShadow", MenuNewWindow) & "</td></tr>"
        '                        End If
        '                        MenuItemCount = MenuItemCount + 1
        '                        Call cpCore.db.csGoNext(CS)
        '                    Loop
        '                    Panel = Panel & "<tr><td width=""10""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""10"" height=""1"" ></td><td width=""1""></td><td width=""100%""></td><td width=""1""></td></tr>"
        '                    Panel = Panel & "</table>"
        '                    menu_getLeftModeOld = cpCore.main_GetPanel(Panel, "ccPanel", "ccPanelHilite", "ccPanelShadow", "150", 10)
        '                End If
        '            End If
        '            Exit Function
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyClassError3("GetMenuLeftMode")
        '            '
        '        End Function
        '
        '========================================================================
        ' GetForm_Top
        '   Prints the admin page before the content form window.
        '   After this, print the content window, then PrintFormBottom()
        '========================================================================
        '
        Private Function GetForm_Top(ByVal MenuEntryContentName As String, Optional ByVal BackgroundColor As String = "") As String
            Dim return_formTop As String = ""
            Try
                Const AdminNavigatorGuid = "{5168964F-B6D2-4E9F-A5A8-BB1CF908A2C9}"
                Dim AdminNavFull As String
                Dim Stream As New stringBuilderLegacyController
                Dim LeftSide As String
                Dim RightSide As String
                Dim QS As String
                Dim Adminui As New adminUIController(cpCore)
                '
                ' create the with-menu version
                '
                LeftSide = cpCore.siteProperties.getText("AdminHeaderHTML", "Contensive Administration Site")
                RightSide = cpCore.app_startTime & "&nbsp;"
                '
                ' AdminTabs
                '
                QS = cpCore.htmlDoc.refreshQueryString
                If allowAdminTabs Then
                    QS = genericController.ModifyQueryString(QS, "tabs", "0", True)
                    RightSide = RightSide & GetActiveImage(cpCore.serverConfig.appConfig.adminRoute & "?" & QS, "Disable Tabs", "LibButtonNoTabs.GIF", "LibButtonNoTabsRev.GIF", "Disable Tabs", "16", "16", "", "", "")
                Else
                    QS = genericController.ModifyQueryString(QS, "tabs", "1", True)
                    RightSide = RightSide & GetActiveImage(cpCore.serverConfig.appConfig.adminRoute & "?" & QS, "Enable Tabs", "LibButtonTabs.GIF", "LibButtonTabsRev.GIF", "Enable Tabs", "16", "16", "", "", "")
                End If
                '
                ' Menu Mode
                '
                QS = cpCore.htmlDoc.refreshQueryString
                If MenuDepth = 0 Then
                    RightSide = RightSide & "<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""16"" >"
                    If AdminMenuModeID = AdminMenuModeTop Then
                        QS = genericController.ModifyQueryString(QS, "mm", "1", True)
                        RightSide = RightSide & GetActiveImage(cpCore.serverConfig.appConfig.adminRoute & "?" & QS, "Use Navigator", "LibButtonMenuTop.GIF", "LibButtonMenuTopOver.GIF", "Use Navigator", "16", "16", "", "", "")
                    Else
                        QS = genericController.ModifyQueryString(QS, "mm", "2", True)
                        RightSide = RightSide & GetActiveImage(cpCore.serverConfig.appConfig.adminRoute & "?" & QS, "Use Dropdown Menus", "LibButtonMenuLeft.GIF", "LibButtonMenuLeftOver.GIF", "Use Dropdown Menus", "16", "16", "", "", "")
                    End If
                End If
                '
                ' Refresh Button
                '
                RightSide = RightSide & "<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""16"" >"
                RightSide = RightSide & GetActiveImage(cpCore.serverConfig.appConfig.adminRoute & "?" & cpCore.htmlDoc.refreshQueryString, "Refresh", "LibButtonRefresh.GIF", "LibButtonRefreshOver.GIF", "Refresh", "16", "16", "", "", "")
                '
                ' Assemble header
                '
                Call Stream.Add(Adminui.GetHeader(LeftSide, RightSide))
                '
                ' Menuing
                '
                If ((MenuDepth = 0) And (AdminMenuModeID = AdminMenuModeTop)) Then
                    Call Stream.Add(GetMenuTopMode())
                End If
                '
                ' --- Rule to separate content
                '
                Stream.Add(cr & "<div style=""border-top:1px solid white;border-bottom:1px solid black;height:2px""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=1 height=1></div>")
                '
                ' --- Content Definition
                '
                AdminFormBottom = ""
                If Not ((MenuDepth = 0) And (AdminMenuModeID = AdminMenuModeLeft)) Then
                    '
                    ' #Content is full width, no Navigator
                    '
                    Stream.Add(cr & "<div id=""desktop"" class=""ccContentCon"">")
                    'Stream.Add( "<div id=""ccContentCon"">")
                    AdminFormBottom = AdminFormBottom & cr & "</div>"
                Else
                    '
                    ' #Navigator is to the right, #Content is to the left
                    '
                    '
                    ' --- Menu Mode Left
                    '
                    '        Stream.Add( "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"">")
                    '        Stream.Add( "<tr><td width=""10"" valign=""top"" align=""left"">")
                    '        Stream.Add( GetMenuLeftMode())
                    '        Stream.Add( "</td>")
                    '        Stream.Add( "<td width=""100%"" valign=""top"" align=""left"">")
                    '        AdminFormBottom = AdminFormBottom & "</td></tr></table>"
                    '
                    ' Admin Navigator
                    '
                    AdminNavFull = cpCore.addon.execute_legacy4(AdminNavigatorGuid)
                    Stream.Add("" _
                        & cr & "<table border=0 cellpadding=0 cellspacing=0><tr>" _
                        & cr & "<td class=""ccToolsCon"" valign=top>" _
                        & genericController.kmaIndent(AdminNavFull) _
                        & cr & "</td>" _
                        & cr & "<td id=""desktop"" class=""ccContentCon"" valign=top>")
                    AdminFormBottom = AdminFormBottom & "</td></tr></table>"
                End If
                '
                return_formTop = Stream.Text
            Catch ex As Exception
                Call cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return return_formTop
        End Function
        '
        '========================================================================
        ' Create a string with an admin style button
        '========================================================================
        '
        Private Function GetActiveImage(ByVal HRef As String, ByVal StatusText As String, ByVal Image As String, ByVal ImageOver As String, ByVal AltText As String, ByVal Width As String, ByVal Height As String, ByVal BGColor As String, ByVal BGColorOver As String, ByVal OnClick As String) As String
            Dim return_ActiveImage As String = ""
            Try
                Dim Panel As String
                Dim ButtonObject As String
                '
                ' ----- Set Object Names and preload
                '
                ButtonObject = "Button" & ButtonObjectCount
                ButtonObjectCount = ButtonObjectCount + 1
                '
                ' ----- Output the button image
                '
                Panel = ""
                'If BGColor <> "" Then
                '    Panel = Panel & "<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""" & Width & """ BGColor=""" & BGColor & """ align=""left""><tr><td>"
                '    End If
                If HRef <> "" Then
                    Panel = Panel & "<a href=""" & HRef & """ "
                    If OnClick <> "" Then
                        Panel = Panel & " onclick=""" & OnClick & """"
                    End If
                    Panel = Panel & " onmouseOver=""" _
                        & " document['" & ButtonObject & "'].imgRolln=document['" & ButtonObject & "'].src;" _
                        & " document['" & ButtonObject & "'].src=document['" & ButtonObject & "'].lowsrc;" _
                        & " window.status='" & StatusText & "';" _
                        & " return true;"""
                    Panel = Panel & " onmouseOut=""" _
                        & " document['" & ButtonObject & "'].src=document['" & ButtonObject & "'].imgRolln;" _
                        & " window.status='';" _
                        & " return true;"">"
                End If
                Panel = Panel & "<img" _
                    & " src=""/ccLib/images/" & Image & """" _
                    & " alt=""" & AltText & """" _
                    & " title=""" & AltText & """" _
                    & " id=""" & ButtonObject & """" _
                    & " name=""" & ButtonObject & """" _
                    & " lowsrc=""/ccLib/images/" & ImageOver & """" _
                    & " border=0" _
                    & " width=""" & Width & """" _
                    & " height=""" & Height & """ >"

                '        & " align=absmiddle" _


                If HRef <> "" Then
                    Panel = Panel & "</A>"
                End If
                'If BGColor <> "" Then
                '    Panel = Panel & "</td></tr></table>"
                '    End If
                GetActiveImage = Panel
            Catch ex As Exception
                Call cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return return_ActiveImage
        End Function
        ''
        ''========================================================================
        ''   Preload an image, returns object
        ''========================================================================
        ''
        'Private Function PreloadImage(Image As String) As String
        '    On Error GoTo ErrorTrap: 'Dim th as integer: th = profileLogAdminMethodEnter("AdminClass.PreloadImage")
        '    '
        '    Dim ImageFound As Boolean
        '    Dim ImagePreloadPointer as integer
        '    '
        '    ImageFound = False
        '    If ImagePreloadCount > 0 Then
        '        For ImagePreloadPointer = 0 To ImagePreloadCount
        '            If ImagePreloads(0, ImagePreloadPointer) = Image Then
        '                ImageFound = True
        '                PreloadImage = ImagePreloads(0, ImagePreloadPointer)
        '                Exit For
        '                End If
        '            Next
        '        End If
        '    If Not ImageFound Then
        '        If ImagePreloadCount = 0 Then
        '            JavaScriptString = JavaScriptString & vbCrLf & "PreloadImages = new Array(); "
        '            End If
        '        '
        '        PreloadImage = "Image" & ImagePreloadCount
        '        ImagePreloads(0, ImagePreloadCount) = Image
        '        ImagePreloads(1, ImagePreloadCount) = PreloadImage
        '        ImagePreloadCount = ImagePreloadCount + 1
        '        '
        '        JavaScriptString = JavaScriptString & vbCrLf & "PreloadImages['" & PreloadImage & "'] = new Image(); "
        '        JavaScriptString = JavaScriptString & vbCrLf & "PreloadImages['" & PreloadImage & "'].src = '/ccLib/images/" & Image & "'; "
        '        End If
        '    '''Dim th as integer: Exit Function
        '    '
        '    ' ----- Error Trap
        '    '
        'ErrorTrap:
        '    Call HandleClassTrapErrorBubble("PreloadImage")
        '    '
        'End Function
        '
        '========================================================================
        ' Get sql for menu
        '   if MenuContentName is blank, it will select values from either cdef
        '========================================================================
        '
        Private Function GetMenuSQL(ByVal ParentCriteria As String, ByVal MenuContentName As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetMenuSQL")
            '
            Dim iParentCriteria As String
            Dim Criteria As String
            Dim SQL As String
            Dim ContentControlCriteria As String
            Dim SelectList As String
            Dim editableCdefIdList As List(Of Integer)
            '
            Criteria = "(Active<>0)"
            If MenuContentName <> "" Then
                'ContentControlCriteria = cpCore.csv_GetContentControlCriteria(MenuContentName)
                Criteria = Criteria & "AND" & cpCore.metaData.content_getContentControlCriteria(MenuContentName)
            End If
            iParentCriteria = genericController.encodeEmptyText(ParentCriteria, "")
            If cpCore.authContext.isAuthenticatedDeveloper(cpCore) Then
                '
                ' ----- Developer
                '
            ElseIf cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                '
                ' ----- Administrator
                '
                Criteria = Criteria _
                    & "AND((DeveloperOnly is null)or(DeveloperOnly=0))" _
                    & "AND(ID in (" _
                    & " SELECT AllowedEntries.ID" _
                    & " FROM CCMenuEntries AllowedEntries LEFT JOIN ccContent ON AllowedEntries.ContentID = ccContent.ID" _
                    & " Where ((ccContent.Active<>0)And((ccContent.DeveloperOnly is null)or(ccContent.DeveloperOnly=0)))" _
                        & "OR(ccContent.ID Is Null)" _
                    & "))"
            Else
                '
                ' ----- Content Manager
                '
                Dim CMCriteria As String

                editableCdefIdList = cpCore.metaData.getEditableCdefIdList
                If editableCdefIdList.Count = 0 Then
                    CMCriteria = "(1=0)"
                ElseIf editableCdefIdList.Count = 1 Then
                    CMCriteria = "(ccContent.ID=" & editableCdefIdList(0) & ")"
                Else
                    CMCriteria = "(ccContent.ID in (" & String.Join(",", editableCdefIdList) & "))"
                End If

                Criteria = Criteria _
                    & "AND((DeveloperOnly is null)or(DeveloperOnly=0))" _
                    & "AND((AdminOnly is null)or(AdminOnly=0))" _
                    & "AND(ID in (" _
                    & " SELECT AllowedEntries.ID" _
                    & " FROM CCMenuEntries AllowedEntries LEFT JOIN ccContent ON AllowedEntries.ContentID = ccContent.ID" _
                    & " Where (" & CMCriteria & "and(ccContent.Active<>0)And((ccContent.DeveloperOnly is null)or(ccContent.DeveloperOnly=0))And((ccContent.AdminOnly is null)or(ccContent.AdminOnly=0)))" _
                        & "OR(ccContent.ID Is Null)" _
                    & "))"
            End If
            If iParentCriteria <> "" Then
                Criteria = "(" & iParentCriteria & ")AND" & Criteria
            End If
            If True Then ' 3.4.044" Then
                SelectList = "ccMenuEntries.contentcontrolid, ccMenuEntries.Name, ccMenuEntries.ID, ccMenuEntries.LinkPage, ccMenuEntries.ContentID, ccMenuEntries.NewWindow, ccMenuEntries.ParentID, ccMenuEntries.AddonID, ccMenuEntries.NavIconType, ccMenuEntries.NavIconTitle, HelpAddonID,HelpCollectionID,0 as collectionid"
            ElseIf True Then ' 3.3.982" Then
                SelectList = "ccMenuEntries.contentcontrolid, ccMenuEntries.Name, ccMenuEntries.ID, ccMenuEntries.LinkPage, ccMenuEntries.ContentID, ccMenuEntries.NewWindow, ccMenuEntries.ParentID, ccMenuEntries.AddonID, ccMenuEntries.NavIconType, ccMenuEntries.NavIconTitle,0 as HelpAddonID,0 as HelpCollectionID,0 as collectionid"
            ElseIf True Then ' 3.3.865" Then
                SelectList = "ccMenuEntries.contentcontrolid, ccMenuEntries.Name, ccMenuEntries.ID, ccMenuEntries.LinkPage, ccMenuEntries.ContentID, ccMenuEntries.NewWindow, ccMenuEntries.ParentID, ccMenuEntries.AddonID, ccMenuEntries.NavIconType, ccMenuEntries.NavIconTitle,0 as HelpAddonID,0 as HelpCollectionID,0 as collectionid"
            ElseIf True Then ' 3.3.686" Then
                SelectList = "ccMenuEntries.contentcontrolid, ccMenuEntries.Name, ccMenuEntries.ID, ccMenuEntries.LinkPage, ccMenuEntries.ContentID, ccMenuEntries.NewWindow, ccMenuEntries.ParentID, ccMenuEntries.AddonID, 'folder' as NavIconType, ccMenuEntries.Name as NavIconTitle,0 as HelpAddonID,0 as HelpCollectionID,0 as collectionid"
            Else
                SelectList = "ccMenuEntries.contentcontrolid, ccMenuEntries.Name, ccMenuEntries.ID, ccMenuEntries.LinkPage, ccMenuEntries.ContentID, ccMenuEntries.NewWindow, ccMenuEntries.ParentID, 0 as AddonID, 'folder' as NavIconType, ccMenuEntries.Name as NavIconTitle,0 as HelpAddonID,0 as HelpCollectionID,0 as collectionid"
            End If
            GetMenuSQL = "select " & SelectList & " from ccMenuEntries where " & Criteria & " order by ccMenuEntries.Name"
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetMenuSQL")
            '
        End Function
        '
        '========================================================================
        ' Get sql for menu
        '========================================================================
        '
        Private Function GetMenuCSPointer(ByVal ParentCriteria As String, ByVal MenuEntryContentName As String) As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetMenuCSPointer")
            '
            Dim iParentCriteria As String
            iParentCriteria = genericController.encodeEmptyText(ParentCriteria, "")
            If iParentCriteria <> "" Then
                iParentCriteria = "(" & iParentCriteria & ")"
            End If
            GetMenuCSPointer = cpCore.db.cs_openCsSql_rev("default", GetMenuSQL(iParentCriteria, MenuEntryContentName))
            '
            '    Dim iParentCriteria As String
            '    Dim Criteria As String
            '    Dim SQL As String
            '    '
            '    iParentCriteria = encodeMissingText(ParentCriteria, "")
            '    'If iParentCriteria <> "" Then
            '    '    iParentCriteria = "(" & iParentCriteria & ")"
            '    '    End If
            '    If cpCore.main_IsDeveloper Then
            '        '
            '        ' ----- Developer
            '        '
            '        Criteria = "(Active<>0)"
            '        'Criteria = "(CCMenuEntries.Active<>0)"
            '        'SQL = "SELECT ccMenuEntries.Name, ccMenuEntries.ID, ccMenuEntries.LinkPage, ccMenuEntries.ContentID, ccMenuEntries.NewWindow, ccMenuEntries.ParentID" _
            '        '    & " FROM CCMenuEntries" _
            '        '    & " WHERE (" & iParentCriteria & "(CCMenuEntries.Active<>0))" _
            '        '    & " ORDER BY ccMenuEntries.ParentID, CCMenuEntries.SortOrder, CCMenuEntries.Name;"
            '    ElseIf cpCore.main_IsAdmin Then
            '        '
            '        ' ----- Administrator
            '        '
            '        Criteria = "(Active<>0)" _
            '            & "AND((DeveloperOnly is null)or(DeveloperOnly=0))" _
            '            & "AND(ID in (" _
            '            & " SELECT AllowedEntries.ID" _
            '            & " FROM CCMenuEntries AllowedEntries LEFT JOIN ccContent ON AllowedEntries.ContentID = ccContent.ID" _
            '            & " Where ((ccContent.Active<>0)And((ccContent.DeveloperOnly is null)or(ccContent.DeveloperOnly=0)))" _
            '                & "OR(ccContent.ID Is Null)" _
            '            & "))"
            ''        '
            ''        Criteria = "(CCMenuEntries.Active<>0)" _
            ''            & "AND((CCMenuEntries.DeveloperOnly is null)or(CCMenuEntries.DeveloperOnly=0))" _
            ''            & "AND(ID in (" _
            ''            & " SELECT ccMenuEntries.ID" _
            ''            & " FROM CCMenuEntries LEFT JOIN ccContent ON CCMenuEntries.ContentID = ccContent.ID" _
            ''            & " Where (ccContent.Active<>0)And((ccContent.DeveloperOnly is null)or(ccContent.DeveloperOnly=0))" _
            ''                & "OR(ccContent.ID Is Null)" _
            ''            & "))"
            '    Else
            '        '
            '        ' ----- Content Manager
            '        '
            '        Criteria = "(Active<>0)" _
            '            & "AND((DeveloperOnly is null)or(DeveloperOnly=0))" _
            '            & "AND(ID in (" _
            '            & " SELECT AllowedEntries.ID" _
            '            & " FROM CCMenuEntries AllowedEntries LEFT JOIN ccContent ON AllowedEntries.ContentID = ccContent.ID" _
            '            & " Where ((ccContent.Active<>0)And((ccContent.DeveloperOnly is null)or(ccContent.DeveloperOnly=0))And((ccContent.AdminOnly is null)or(ccContent.AdminOnly=0)))" _
            '                & "OR(ccContent.ID Is Null)" _
            '            & "))"
            ''        '
            ''        Criteria = "(CCMenuEntries.Active<>0)" _
            ''            & "AND((CCMenuEntries.DeveloperOnly is null)or(CCMenuEntries.DeveloperOnly=0))" _
            ''            & "AND((CCMenuEntries.AdminOnly is null)or(CCMenuEntries.AdminOnly=0))" _
            ''            & "AND(ID in (" _
            ''            & " SELECT ccMenuEntries.ID" _
            ''            & " FROM CCMenuEntries LEFT JOIN ccContent ON CCMenuEntries.ContentID = ccContent.ID" _
            ''            & " Where (ccContent.ID Is Null)" _
            ''                & "OR((ccContent.Active<>0)And((ccContent.DeveloperOnly is null)or(ccContent.DeveloperOnly=0))And((ccContent.AdminOnly is null)or(ccContent.AdminOnly=0)))" _
            ''            & "))"
            '        End If
            '    If iParentCriteria <> "" Then
            '        Criteria = "(" & iParentCriteria & ")AND" & Criteria
            '    End If
            '    GetMenuCSPointer = cpCore.app.csOpen("Menu Entries", Criteria, , , , , "ccMenuEntries.Name, ccMenuEntries.ID, ccMenuEntries.LinkPage, ccMenuEntries.ContentID, ccMenuEntries.NewWindow, ccMenuEntries.ParentID")
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetMenuCSPointer")
            '
        End Function
        '
        '========================================================================
        ' Get Menu Link
        '========================================================================
        '
        Private Function GetMenuLink(ByVal LinkPage As String, ByVal LinkCID As Integer) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetMenuLink")
            '
            Dim ContentID As Integer
            '
            If LinkPage <> "" Or LinkCID <> 0 Then
                GetMenuLink = LinkPage
                If GetMenuLink <> "" Then
                    If Mid(GetMenuLink, 1, 1) = "?" Or Mid(GetMenuLink, 1, 1) = "#" Then
                        GetMenuLink = cpCore.siteProperties.adminURL & GetMenuLink
                    End If
                Else
                    GetMenuLink = cpCore.siteProperties.adminURL
                End If
                ContentID = genericController.EncodeInteger(LinkCID)
                If ContentID <> 0 Then
                    GetMenuLink = genericController.modifyLinkQuery(GetMenuLink, "cid", CStr(ContentID), True)
                End If
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetMenuLink")
            '
        End Function
        '
        '
        '
        Private Sub ProcessForms(adminContent As cdefModel, editRecord As editRecordClass)
            On Error GoTo ErrorTrap
            'Dim th as integer
            'th = profileLogAdminMethodEnter("ProcessForms")
            '
            'Dim innovaEditor As innovaEditorAddonClassFPO
            Dim StyleSN As Integer
            Dim ContentID As Integer
            Dim IndexConfig As indexConfigClass
            Dim CS As Integer
            Dim EditorStyleRulesFilename As String
            '
            If AdminSourceForm <> 0 Then
                Select Case AdminSourceForm
                    Case AdminFormReports
                        '
                        ' Reports form cancel button
                        '
                        Select Case AdminButton
                            Case ButtonCancel
                                AdminAction = AdminActionNop
                                AdminForm = AdminFormRoot
                        End Select
                    Case AdminFormQuickStats
                        Select Case AdminButton
                            Case ButtonCancel
                                AdminAction = AdminActionNop
                                AdminForm = AdminFormRoot
                        End Select
                    Case AdminFormPublishing
                        '
                        ' Publish Form
                        '
                        Select Case AdminButton
                            Case ButtonWorkflowPublishApproved
                                AdminAction = AdminActionWorkflowPublishApproved
                                AdminForm = AdminSourceForm
                            Case ButtonWorkflowPublishSelected
                                AdminAction = AdminActionWorkflowPublishSelected
                                AdminForm = AdminSourceForm
                            Case ButtonCancel
                                AdminAction = AdminActionNop
                                AdminForm = AdminFormRoot
                        End Select
                    Case AdminFormIndex
                        Select Case AdminButton
                            Case ButtonCancel
                                AdminAction = AdminActionNop
                                AdminForm = AdminFormRoot
                                adminContent.Id = 0
                            Case ButtonClose
                                AdminAction = AdminActionNop
                                AdminForm = AdminFormRoot
                                adminContent.Id = 0
                            Case ButtonAdd
                                AdminAction = AdminActionNop
                                AdminForm = AdminFormEdit
                            Case ButtonFind
                                AdminAction = AdminActionFind
                                AdminForm = AdminSourceForm
                            Case ButtonFirst
                                RecordTop = 0
                                AdminForm = AdminSourceForm
                            Case ButtonPrevious
                                RecordTop = RecordTop - RecordsPerPage
                                If RecordTop < 0 Then
                                    RecordTop = 0
                                End If
                                AdminAction = AdminActionNop
                                AdminForm = AdminSourceForm
                            Case ButtonNext
                                AdminAction = AdminActionNext
                                AdminForm = AdminSourceForm
                            Case ButtonDelete
                                AdminAction = AdminActionDeleteRows
                                AdminForm = AdminSourceForm
                        End Select
                        ' end case
                    Case AdminFormEdit
                        '
                        ' Edit Form
                        '
                        Select Case AdminButton
                            Case ButtonRefresh
                                '
                                ' this is a test operation. need this so the user can set editor preferences without saving the record
                                '   during refresh, the edit page is redrawn just was it was, but no save
                                '
                                AdminAction = AdminActionEditRefresh
                                AdminForm = AdminFormEdit
                            Case ButtonMarkReviewed
                                AdminAction = AdminActionMarkReviewed
                                AdminForm = GetForm_Close(MenuDepth, adminContent.Name, editRecord.id)
                            Case ButtonSaveandInvalidateCache
                                AdminAction = AdminActionReloadCDef
                                AdminForm = AdminFormEdit
                            Case ButtonDelete, ButtonDeletePage, ButtonDeletePerson, ButtonDeleteRecord, ButtonDeleteEmail
                                AdminAction = AdminActionDelete
                                AdminForm = GetForm_Close(MenuDepth, adminContent.Name, editRecord.id)
                                '                Case ButtonSetHTMLEdit
                                '                    AdminAction = AdminActionSetHTMLEdit
                                '                Case ButtonSetTextEdit
                                '                    AdminAction = AdminActionSetTextEdit
                            Case ButtonPublishApprove
                                AdminAction = AdminActionPublishApprove
                                AdminForm = GetForm_Close(MenuDepth, adminContent.Name, editRecord.id)
                            Case ButtonPublishSubmit
                                AdminAction = AdminActionPublishSubmit
                                AdminForm = GetForm_Close(MenuDepth, adminContent.Name, editRecord.id)
                            Case ButtonPublish
                                AdminAction = AdminActionPublish
                                AdminForm = GetForm_Close(MenuDepth, adminContent.Name, editRecord.id)
                            Case ButtonAbortEdit
                                AdminAction = AdminActionAbortEdit
                                AdminForm = AdminFormEdit
                                '                Case ButtonOpenActiveEditor
                                '                    AdminAction = AdminActionSave
                                '                    AdminForm = AdminFormDHTMLEdit
                            Case ButtonSave
                                AdminAction = AdminActionSave
                                AdminForm = AdminFormEdit
                            Case ButtonSaveAddNew
                                AdminAction = AdminActionSaveAddNew
                                AdminForm = AdminFormEdit
                            Case ButtonOK
                                AdminAction = AdminActionSave
                                AdminForm = GetForm_Close(MenuDepth, adminContent.Name, editRecord.id)
                            Case ButtonCancel
                                AdminAction = AdminActionNop
                                AdminForm = GetForm_Close(MenuDepth, adminContent.Name, editRecord.id)
                            Case ButtonSend
                                '
                                ' Send a Group Email
                                '
                                AdminAction = AdminActionSendEmail
                                AdminForm = AdminFormEdit
                            Case ButtonActivate
                                '
                                ' Activate (submit) a conditional Email
                                '
                                AdminAction = AdminActionActivateEmail
                                AdminForm = AdminFormEdit
                            Case ButtonDeactivate
                                '
                                ' Deactivate (clear submit) a conditional Email
                                '
                                AdminAction = AdminActionDeactivateEmail
                                AdminForm = AdminFormEdit
                            Case ButtonSendTest
                                '
                                ' Test an Email (Group, System, or Conditional)
                                '
                                AdminAction = AdminActionSendEmailTest
                                AdminForm = AdminFormEdit
                                '                Case ButtonSpellCheck
                                '                    SpellCheckRequest = True
                                '                    AdminAction = AdminActionSave
                                '                    AdminForm = AdminFormEdit
                            Case ButtonCreateDuplicate
                                '
                                ' Create a Duplicate record (for email)
                                '
                                AdminAction = AdminActionDuplicate
                                AdminForm = AdminFormEdit
                        End Select
                    Case AdminFormStyleEditor
                        '
                        ' Process actions
                        '
                        Select Case AdminButton
                            Case ButtonSave, ButtonOK
                                '
                                Call cpCore.siteProperties.setProperty("Allow CSS Reset", cpCore.docProperties.getBoolean(RequestNameAllowCSSReset))
                                Call cpCore.cdnFiles.saveFile(DynamicStylesFilename, cpCore.docProperties.getText("StyleEditor"))
                                If cpCore.docProperties.getBoolean(RequestNameInlineStyles) Then
                                    '
                                    ' Inline Styles
                                    '
                                    Call cpCore.siteProperties.setProperty("StylesheetSerialNumber", "0")
                                Else
                                    ' mark to rebuild next fetch
                                    Call cpCore.siteProperties.setProperty("StylesheetSerialNumber", "-1")
                                    ''
                                    '' Linked Styles
                                    '' Bump the Style Serial Number so next fetch is not cached
                                    ''
                                    'StyleSN = genericController.EncodeInteger(cpCore.main_GetSiteProperty2("StylesheetSerialNumber", "0"))
                                    'StyleSN = StyleSN + 1
                                    'Call cpCore.app.setSiteProperty("StylesheetSerialNumber", genericController.encodeText(StyleSN))
                                    ''
                                    '' Save new public stylesheet
                                    ''
                                    '' 11/24/3009 - style sheet processing deprecated
                                    'Call cpCore.app.virtualFiles.SaveFile("templates\Public" & StyleSN & ".css", cpCore.main_GetStyleSheet)
                                    ''Call cpCore.app.virtualFiles.SaveFile("templates\Public" & StyleSN & ".css", cpCore.main_GetStyleSheetProcessed)
                                    'Call cpCore.app.virtualFiles.SaveFile("templates\Admin" & StyleSN & ".css", cpCore.main_GetStyleSheetDefault)
                                End If
                                '
                                ' delete all templateid based editorstylerule files, build on-demand
                                '
                                EditorStyleRulesFilename = genericController.vbReplace(EditorStyleRulesFilenamePattern, "$templateid$", "0", 1, 99, vbTextCompare)
                                Call cpCore.cdnFiles.deleteFile(EditorStyleRulesFilename)
                                '
                                CS = cpCore.db.cs_openCsSql_rev("default", "select id from cctemplates")
                                Do While cpCore.db.cs_ok(CS)
                                    EditorStyleRulesFilename = genericController.vbReplace(EditorStyleRulesFilenamePattern, "$templateid$", cpCore.main_cs_get2Text(CS, "ID"), 1, 99, vbTextCompare)
                                    Call cpCore.cdnFiles.deleteFile(EditorStyleRulesFilename)
                                    Call cpCore.db.cs_goNext(CS)
                                Loop
                                Call cpCore.db.cs_Close(CS)
                        End Select
                        '
                        ' Process redirects
                        '
                        Select Case AdminButton
                            Case ButtonCancel, ButtonOK
                                AdminForm = AdminFormRoot
                        End Select
                    Case Else
                        ' end case
                End Select
            End If
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("ProcessForms")
            '
        End Sub
        '
        '========================================================================
        '
        '========================================================================
        '
        Private Function GetForm_EditTitle(adminContent As cdefModel, editRecord As editRecordClass) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_EditTitle")
            '
            If (editRecord.id = 0) Then
                GetForm_EditTitle = "Add an entry to " & editRecord.contentControlId_Name & TitleExtension
            Else
                GetForm_EditTitle = "Editing Record " & editRecord.id & " in " & editRecord.contentControlId_Name & " " & TitleExtension
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_EditTitle")
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Private Function GetForm_EditTitleBar(adminContent As cdefModel, editRecord As editRecordClass) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_EditTitleBar")
            '
            Dim Adminui As New adminUIController(cpCore)
            '
            GetForm_EditTitleBar = Adminui.GetTitleBar(GetForm_EditTitle(adminContent, editRecord), "")
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_EditTitleBar")
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Private Function GetForm_EditFormStart(AdminFormID As Integer) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_EditFormStart")
            '
            Dim WhereCount As Integer
            Dim s As String
            Dim saveEmptyFieldListScript As String
            '
            ' --- output required hidden fields to preserve values through form submission
            '
            '
            'saveEmptyFieldListScript = "" _
            '    & "function adminEditSaveEmptyFields(){" _
            '        & "var e=document.getElementById('" &  "FormEmptyFieldList');" _
            '        & "var c=document.getElementsByTagName('input');" _
            '        & "for (i=0;i<c.length;i++){" _
            '            & "if(c[i].type=='checkbox'){" _
            '                & "if(c[i].checked==false){e.value+=c[i].name+','}" _
            '            & "} else if(c[i].type=='radio'){" _
            '                & "if(c[i].checked==false){e.value+=c[i].name+','}" _
            '            & "} else if(c[i].value==''){" _
            '                & "e.value+=c[i].name+','" _
            '            & "}" _
            '        & "}" _
            '        & "c=document.getElementsByTagName('select');" _
            '        & "for (i=0;i<c.length;i++){" _
            '            & "if(c[i].value==''){e.value+=c[i].name+','}" _
            '        & "}" _
            '    & "}" _
            '    & ""
            'Call cpCore.htmldoc.main_AddHeadScriptCode(saveEmptyFieldListScript, "Edit Page")
            '
            'saveEmptyFieldListScript = "" _
            '    & "cj.admin.saveEmptyFieldList('" &  "FormEmptyFieldList');" _
            '    & ""
            '    saveEmptyFieldListScript = "" _
            '        & "if(!docLoaded){" _
            '            & "alert('This page has not loaded completed. Please wait for the page to load before submitting the form. If the page has loaded, there may have been an error. Please refresh the page.')" _
            '            & ";return false" _
            '        & "}else{" _
            '            & "adminEditSaveEmptyFields();" _
            '        & "}" _
            '        & ""
            '
            Call cpCore.htmlDoc.main_AddHeadScriptCode("var docLoaded=false", "Form loader")
            Call cpCore.htmlDoc.main_AddOnLoadJavascript2("docLoaded=true;", "Form loader")
            s = cpCore.htmlDoc.html_GetUploadFormStart()
            s = genericController.vbReplace(s, ">", " onSubmit=""cj.admin.saveEmptyFieldList('" & "FormEmptyFieldList');"">")
            s = genericController.vbReplace(s, ">", " autocomplete=""off"">")
            s = genericController.vbReplace(s, ">", " id=""adminEditForm"">")
            s = s & vbCrLf & "<input TYPE=""hidden"" NAME=""" & RequestNameAdminSourceForm & """ VALUE=""" & AdminFormID.ToString & """>"
            s = s & vbCrLf & "<input TYPE=""hidden"" NAME=""" & RequestNameTitleExtension & """ VALUE=""" & TitleExtension & """>"
            s = s & vbCrLf & "<input TYPE=""hidden"" NAME=""" & RequestNameAdminDepth & """ VALUE=""" & MenuDepth & """>"
            s = s & vbCrLf & "<input TYPE=""hidden"" NAME=""" & "FormEmptyFieldList"" ID=""" & "FormEmptyFieldList"" VALUE="","">"
            If False Then
                '
                ' already added to refresh query string
                '
                If WherePairCount > 0 Then
                    For WhereCount = 0 To WherePairCount - 1
                        s = s & vbCrLf & "<input TYPE=""hidden"" NAME=""wl" & WhereCount & """ VALUE=""" & WherePair(0, WhereCount) & """><input TYPE=""hidden"" NAME=""wr" & WhereCount & """ VALUE=""" & WherePair(1, WhereCount) & """>"
                    Next
                End If
            End If
            '
            GetForm_EditFormStart = s
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_EditFormStart")
            '
        End Function
        '
        ' true if the field is a visible user field (can display on edit form)
        '
        Private Function IsVisibleUserField(AdminOnly As Boolean, DeveloperOnly As Boolean, Active As Boolean, Authorable As Boolean, Name As String, TableName As String) As Boolean
            'Private Function IsVisibleUserField( Field as CDefFieldClass, AdminOnly As Boolean, DeveloperOnly As Boolean, Active As Boolean, Authorable As Boolean) As Boolean
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("IsVisibleUserField")
            '
            Dim HasEditRights As Boolean
            '
            IsVisibleUserField = False
            If (LCase(TableName) = "ccpagecontent") And (LCase(Name) = "linkalias") Then
                '
                ' ccpagecontent.linkalias is a control field that is not in control tab
                '
            Else
                Select Case genericController.vbUCase(Name)
                    Case "ID", "CONTENTCONTROLID", "CREATEDBY", "DATEADDED", "MODIFIEDBY", "MODIFIEDDATE", "CREATEKEY", "EDITSOURCEID", "EDITBLANK", "EDITARCHIVE", "CONTENTCATEGORYID", "CCGUID"
                        '
                        ' ----- control fields are not editable user fields
                        '
                    Case Else
                        '
                        ' ----- test access
                        '
                        HasEditRights = True
                        If AdminOnly Or DeveloperOnly Then
                            '
                            ' field has some kind of restriction
                            '
                            If Not cpCore.authContext.user.Developer Then
                                If Not cpCore.authContext.user.Admin Then
                                    '
                                    ' you are not admin
                                    '
                                    HasEditRights = False
                                ElseIf DeveloperOnly Then
                                    '
                                    ' you are admin, and the record is developer
                                    '
                                    HasEditRights = False
                                End If
                            End If
                        End If
                        If (HasEditRights) And (Active) And (Authorable) Then
                            IsVisibleUserField = True
                        End If
                End Select
            End If
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("IsVisibleUserField")
            '
        End Function
        '
        '=============================================================================================
        ' true if the field is an editable user field (can edit on edit form and save to database)
        '=============================================================================================
        '
        Private Function IsFieldEditable(adminContent As cdefModel, editRecord As editRecordClass, Field As CDefFieldModel) As Boolean
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("IsFieldEditable")
            '
            With Field
                IsFieldEditable = IsVisibleUserField(.adminOnly, .developerOnly, .active, .authorable, .nameLc, adminContent.ContentTableName) And (Not .ReadOnly) And (Not .NotEditable)
            End With
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("IsFieldEditable")
            '
        End Function
        '
        '=============================================================================================
        '   Get
        '=============================================================================================
        '
        Private Function GetForm_Close(MenuDepth As Integer, ContentName As String, RecordID As Integer) As Integer
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Close")
            '
            If MenuDepth > 0 Then
                GetForm_Close = AdminFormClose
            Else
                GetForm_Close = AdminFormIndex
            End If
            'Call cpCore.main_ClearAuthoringEditLock(ContentName, RecordID)
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Close")
            '
        End Function
        '
        '=============================================================================================
        '
        '=============================================================================================
        '
        Private Sub ProcessActionSave(adminContent As cdefModel, editRecord As editRecordClass, UseContentWatchLink As Boolean)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("ProcessActionSave")
            '
            'Dim CS As Integer
            Dim EditorStyleRulesFilename As String
            Dim ParentID As Integer
            Dim UpdateRecordID As Integer
            Dim linkAlias As String
            Dim Link As String
            Dim SQL As String
            Dim CS As Integer
            Dim Ptr As Integer
            '
            If (True) Then
                '
                '
                '
                If Not cpCore.error_IsUserError Then
                    Select Case genericController.vbUCase(adminContent.ContentTableName)
                        Case genericController.vbUCase("ccMembers")
                            '
                            '
                            '

                            Call SaveEditRecord(adminContent, editRecord)
                            Call SaveMemberRules(editRecord.id)
                            'Call SaveTopicRules
                        Case "CCPATHS"
                            '
                            '
                            '
                            Call SaveEditRecord(adminContent, editRecord)
                            Call cpCore.main_ProcessCheckList("PathRules", "Paths", genericController.encodeText(editRecord.id), "Groups", "Path Rules", "PathID", "GroupID")
                        Case "CCEMAIL"
                            '
                            '
                            '
                            Call SaveEditRecord(adminContent, editRecord)
                            ' NO - ignore wwwroot styles, and create it on the fly during send
                            'If cpCore.main_GetSiteProperty2("BuildVersion") >= "3.3.291" Then
                            '    Call cpCore.app.executeSql( "update ccEmail set InlineStyles=" & encodeSQLText(cpCore.main_GetStyleSheetProcessed) & " where ID=" & EditRecord.ID)
                            'End If
                            Call cpCore.main_ProcessCheckList("EmailGroups", "Group Email", genericController.encodeText(editRecord.id), "Groups", "Email Groups", "EmailID", "GroupID")
                            Call cpCore.main_ProcessCheckList("EmailTopics", "Group Email", genericController.encodeText(editRecord.id), "Topics", "Email Topics", "EmailID", "TopicID")
                        Case "CCCONTENT"
                            '
                            '
                            '
                            Call SaveEditRecord(adminContent, editRecord)
                            Call LoadAndSaveGroupRules(editRecord)
                        Case "CCPAGECONTENT"
                            '
                            '
                            '
                            Call SaveEditRecord(adminContent, editRecord)
                            Call LoadContentTrackingDataBase(adminContent, editRecord)
                            Call LoadContentTrackingResponse(adminContent, editRecord)
                            Call LoadAndSaveMetaContent()
                            Call SaveLinkAlias(adminContent, editRecord)
                            'Call SaveTopicRules
                            Call SaveContentTracking(adminContent, editRecord)
                        'Case "CCSECTIONS"
                        '    '
                        '    '
                        '    '
                        '    Call SaveEditRecord(adminContent, editRecord)
                        '    Call LoadContentTrackingDataBase(adminContent, editRecord)
                        '    Call LoadContentTrackingResponse(adminContent, editRecord)
                        '    'Call LoadAndSaveCalendarEvents
                        '    Call LoadAndSaveMetaContent()
                        '    Call cpCore.main_ProcessCheckList("SectionBlockRules", adminContent.Name, genericController.encodeText(editRecord.id), "Groups", "Section Block Rules", "SectionID", "GroupID")
                        '    Call cpCore.main_ProcessCheckList("SectionDynamicMenuRules", adminContent.Name, genericController.encodeText(editRecord.id), "Dynamic Menus", "Dynamic Menu Section Rules", "SectionID", "DynamicMenuID")
                        '    'call SaveTopicRules
                        '    Call SaveContentTracking(adminContent, editRecord)
                        'Case "CCDYNAMICMENUS"
                        '    '
                        '    '
                        '    '
                        '    Call SaveEditRecord(adminContent, editRecord)
                        '    Call cpCore.main_ProcessCheckList("DynamicMenuSectionRules", adminContent.Name, genericController.encodeText(editRecord.id), "Site Sections", "Dynamic Menu Section Rules", "DynamicMenuID", "SectionID")
                        '    'call SaveTopicRules
                        '    Call SaveContentTracking(adminContent, editRecord)
                        '    '
                        '    ' Verify the stylesheetPrefix exists in the Dynamic Styles
                        '    '
                        '    'Call VerifyDynamicMenuStyleSheet(EditRecord.ID)
                        '    'Call cpCore.main_VerifyDynamicMenu("Default")
                        Case "CCLIBRARYFOLDERS"
                            '
                            '
                            '
                            Call SaveEditRecord(adminContent, editRecord)
                            Call LoadContentTrackingDataBase(adminContent, editRecord)
                            Call LoadContentTrackingResponse(adminContent, editRecord)
                            'Call LoadAndSaveCalendarEvents
                            Call LoadAndSaveMetaContent()
                            Call cpCore.main_ProcessCheckList("LibraryFolderRules", adminContent.Name, genericController.encodeText(editRecord.id), "Groups", "Library Folder Rules", "FolderID", "GroupID")
                            'call SaveTopicRules
                            Call SaveContentTracking(adminContent, editRecord)
                        Case "CCSETUP"
                            '
                            ' Site Properties
                            '
                            Call SaveEditRecord(adminContent, editRecord)
                            If (LCase(editRecord.nameLc) = "allowlinkalias") Then
                                If (cpCore.siteProperties.getBoolean("AllowLinkAlias")) Then
                                    If False Then
                                        '
                                        ' Must upgrade
                                        '
                                        Call cpCore.siteProperties.setProperty("AllowLinkAlias", "0")
                                        Call cpCore.error_AddUserError("Link Alias entries for your pages can not be created because your site database needs to be upgraded.")
                                    Else
                                        '
                                        ' Verify all page content records have a link alias
                                        '
                                        Call TurnOnLinkAlias(UseContentWatchLink)
                                    End If
                                End If
                            End If
                        Case genericController.vbUCase("ccGroups")
                            'Case "CCGROUPS"
                            '
                            '
                            '
                            Call SaveEditRecord(adminContent, editRecord)
                            Call LoadContentTrackingDataBase(adminContent, editRecord)
                            Call LoadContentTrackingResponse(adminContent, editRecord)
                            Call LoadAndSaveContentGroupRules(editRecord.id)
                            'Call LoadAndSaveCalendarEvents
                            Call LoadAndSaveMetaContent()
                            'call SaveTopicRules
                            Call SaveContentTracking(adminContent, editRecord)
                            'Dim EditorStyleRulesFilename As String
                        Case "CCTEMPLATES"
                            '
                            ' save and clear editorstylerules for this template
                            '
                            Call SaveEditRecord(adminContent, editRecord)
                            Call LoadContentTrackingDataBase(adminContent, editRecord)
                            Call LoadContentTrackingResponse(adminContent, editRecord)
                            'Call LoadAndSaveCalendarEvents
                            Call LoadAndSaveMetaContent()
                            'call SaveTopicRules
                            Call SaveContentTracking(adminContent, editRecord)
                            '
                            EditorStyleRulesFilename = genericController.vbReplace(EditorStyleRulesFilenamePattern, "$templateid$", editRecord.id.ToString, 1, 99, vbTextCompare)
                            Call cpCore.privateFiles.deleteFile(EditorStyleRulesFilename)
                        Case "CCSHAREDSTYLES"
                            '
                            ' save and clear editorstylerules for any template
                            '
                            Call SaveEditRecord(adminContent, editRecord)
                            Call LoadContentTrackingDataBase(adminContent, editRecord)
                            Call LoadContentTrackingResponse(adminContent, editRecord)
                            'Call LoadAndSaveCalendarEvents
                            Call LoadAndSaveMetaContent()
                            'call SaveTopicRules
                            Call SaveContentTracking(adminContent, editRecord)
                            '
                            EditorStyleRulesFilename = genericController.vbReplace(EditorStyleRulesFilenamePattern, "$templateid$", "0", 1, 99, vbTextCompare)
                            Call cpCore.cdnFiles.deleteFile(EditorStyleRulesFilename)
                            '
                            CS = cpCore.db.cs_openCsSql_rev("default", "select id from cctemplates")
                            Do While cpCore.db.cs_ok(CS)
                                EditorStyleRulesFilename = genericController.vbReplace(EditorStyleRulesFilenamePattern, "$templateid$", cpCore.main_cs_get2Text(CS, "ID"), 1, 99, vbTextCompare)
                                Call cpCore.cdnFiles.deleteFile(EditorStyleRulesFilename)
                                Call cpCore.db.cs_goNext(CS)
                            Loop
                            Call cpCore.db.cs_Close(CS)


                        Case Else
                            '
                            '
                            '
                            Call SaveEditRecord(adminContent, editRecord)
                            Call LoadContentTrackingDataBase(adminContent, editRecord)
                            Call LoadContentTrackingResponse(adminContent, editRecord)
                            'Call LoadAndSaveCalendarEvents
                            Call LoadAndSaveMetaContent()
                            'call SaveTopicRules
                            Call SaveContentTracking(adminContent, editRecord)
                    End Select
                End If
            End If
            '
            ' If the content supports datereviewed, mark it
            '
            If cpCore.error_IsUserError Then
                AdminForm = AdminSourceForm
            End If
            AdminAction = AdminActionNop ' convert so action can be used in as a refresh
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError2("ProcessActionSave")
            Call cpCore.error_AddUserError("There was an unknown error saving the record at " & cpCore.app_startTime & ". Please try again, or report this error to the site administrator.")
            '
        End Sub
        '
        '=============================================================================================
        '   Create a duplicate record
        '=============================================================================================
        '
        Private Sub ProcessActionDuplicate(adminContent As cdefModel, editRecord As editRecordClass)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("ProcessActionDuplicate")
            ' converted array to dictionary - Dim FieldPointer As Integer
            '
            If Not cpCore.error_IsUserError Then
                Select Case genericController.vbUCase(adminContent.ContentTableName)
                    Case "CCEMAIL"
                        '
                        ' --- preload array with values that may not come back in response
                        '
                        Call LoadEditRecord(adminContent, editRecord)
                        Call LoadEditResponse(adminContent, editRecord)
                        '
                        If Not cpCore.error_IsUserError Then
                            '
                            ' ----- Convert this to the Duplicate
                            '
                            If adminContent.fields.ContainsKey("submitted") Then
                                editRecord.fieldsLc("submitted").value = False
                            End If
                            If adminContent.fields.ContainsKey("sent") Then
                                editRecord.fieldsLc("sent").value = False
                            End If
                            '
                            editRecord.id = 0
                            Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("id", genericController.encodeText(editRecord.id))
                        End If
                    Case Else
                        '
                        '
                        '
                        '
                        ' --- preload array with values that may not come back in response
                        '
                        Call LoadEditRecord(adminContent, editRecord)
                        Call LoadEditResponse(adminContent, editRecord)
                        '
                        If Not cpCore.error_IsUserError Then
                            '
                            ' ----- Convert this to the Duplicate
                            '
                            editRecord.id = 0
                            '
                            ' block fields that should not duplicate
                            '
                            If editRecord.fieldsLc.ContainsKey("ccguid") Then
                                editRecord.fieldsLc("ccguid").value = ""
                            End If
                            '
                            If editRecord.fieldsLc.ContainsKey("dateadded") Then
                                editRecord.fieldsLc("dateadded").value = Date.MinValue
                            End If
                            '
                            If editRecord.fieldsLc.ContainsKey("modifieddate") Then
                                editRecord.fieldsLc("modifieddate").value = Date.MinValue
                            End If
                            '
                            If editRecord.fieldsLc.ContainsKey("modifiedby") Then
                                editRecord.fieldsLc("modifiedby").value = 0
                            End If
                            '
                            ' block fields that must be unique
                            '
                            For Each keyValuePair As KeyValuePair(Of String, CDefFieldModel) In adminContent.fields
                                Dim field As CDefFieldModel = keyValuePair.Value
                                With field
                                    If genericController.vbLCase(.nameLc) = "email" Then
                                        If (LCase(adminContent.ContentTableName) = "ccmembers") And (genericController.EncodeBoolean(cpCore.siteProperties.getBoolean("allowemaillogin", False))) Then
                                            editRecord.fieldsLc(.nameLc).value = ""
                                        End If
                                    End If
                                    If .UniqueName Then
                                        editRecord.fieldsLc(.nameLc).value = ""
                                    End If
                                End With
                            Next
                            '
                            Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("id", genericController.encodeText(editRecord.id))
                        End If
                        'Call cpCore.htmldoc.main_AddUserError("The create duplicate action is not supported for this content.")
                End Select
                AdminForm = AdminSourceForm
                AdminAction = AdminActionNop ' convert so action can be used in as a refresh
            End If
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("ProcessActionDuplicate")
            '
        End Sub
        '
        '========================================================================
        ' PrintMenuTop()
        '   Prints the menu section of the admin page
        '========================================================================
        '
        Private Function GetMenuTopMode() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetMenuTopMode")
            '
            Const MenuEntryContentName = "Menu Entries"
            '
            Dim CSMenus As Integer
            Dim Name As String
            Dim Id As Integer
            Dim ParentID As Integer
            Dim NewWindow As Boolean
            Dim Link As String
            Dim LinkLabel As String
            Dim LinkCID As Integer
            Dim MenuPointer As Integer
            Dim StyleSheet As String = ""
            Dim StyleSheetHover As String = ""
            Dim ImageLink As String
            Dim ImageOverLink As String
            Dim MenuDate As Date
            Dim BakeDate As Date
            Dim BakeName As String
            Dim MenuHeader As String
            Dim editableCdefIdList As List(Of Integer)
            Dim ContentID As Integer
            Dim IsAdminLocal As Boolean
            Dim MenuClose As String
            Dim MenuDelimiterPosition As Integer
            Dim AccessOK As Boolean
            '
            Const MenuDelimiter = vbCrLf & "<!-- Menus -->" & vbCrLf
            '
            ' Create the menu
            '
            If AdminMenuModeID = AdminMenuModeTop Then
                '
                ' ----- Get the baked version
                '
                BakeName = "AdminMenu" & Format(cpCore.authContext.user.ID, "00000000")
                GetMenuTopMode = genericController.encodeText(cpCore.cache.getObject(Of String)(BakeName))
                MenuDelimiterPosition = genericController.vbInstr(1, GetMenuTopMode, MenuDelimiter, vbTextCompare)
                If MenuDelimiterPosition > 1 Then
                    MenuClose = Mid(GetMenuTopMode, MenuDelimiterPosition + Len(MenuDelimiter))
                    GetMenuTopMode = Mid(GetMenuTopMode, 1, MenuDelimiterPosition - 1)
                Else
                    'If GetMenuTopMode = "" Then
                    '
                    ' ----- Bake the menu
                    '
                    CSMenus = GetMenuCSPointer("", MenuEntryContentName)
                    'CSMenus = cpCore.app_openCsSql_Rev_Internal("default", GetMenuSQLNew())
                    If cpCore.db.cs_ok(CSMenus) Then
                        '
                        ' There are menu items to bake
                        '
                        IsAdminLocal = cpCore.authContext.isAuthenticatedAdmin(cpCore)
                        If Not IsAdminLocal Then
                            '
                            ' content managers, need the ContentManagementList
                            '
                            editableCdefIdList = cpCore.metaData.getEditableCdefIdList()
                        Else
                            editableCdefIdList = New List(Of Integer)
                        End If
                        ImageLink = ""
                        ImageOverLink = ""
                        Do While cpCore.db.cs_ok(CSMenus)
                            ContentID = cpCore.db.cs_getInteger(CSMenus, "ContentID")
                            If IsAdminLocal Or ContentID = 0 Then
                                AccessOK = True
                            ElseIf editableCdefIdList.Contains(ContentID) Then
                                AccessOK = True
                            Else
                                AccessOK = False
                            End If
                            Id = cpCore.db.cs_getInteger(CSMenus, "ID")
                            ParentID = cpCore.db.cs_getInteger(CSMenus, "ParentID")
                            If AccessOK Then
                                Link = GetMenuLink(cpCore.db.cs_get(CSMenus, "LinkPage"), ContentID)
                                If genericController.vbInstr(1, Link, "?") = 1 Then
                                    Link = cpCore.serverConfig.appConfig.adminRoute & Link
                                End If
                            Else
                                Link = ""
                            End If
                            LinkLabel = cpCore.db.cs_get(CSMenus, "Name")
                            'If LinkLabel = "Calendar" Then
                            '    Link = Link
                            '    End If
                            NewWindow = cpCore.db.cs_getBoolean(CSMenus, "NewWindow")
                            Call cpCore.htmlDoc.menu_AddEntry(genericController.encodeText(Id), ParentID.ToString, ImageLink, ImageOverLink, Link, LinkLabel, StyleSheet, StyleSheetHover, NewWindow)

                            Call cpCore.db.cs_goNext(CSMenus)
                        Loop
                    End If
                    cpCore.db.cs_Close(CSMenus)
                    '            '
                    '            ' Add in top level node for "switch to navigator"
                    '            '
                    '            Call cpCore.htmldoc.main_AddMenuEntry("GoToNav", 0, "?" & cpCore.main_RefreshQueryString & "&mm=1", "", "", "Switch To Navigator", StyleSheet, StyleSheetHover, False)
                    '
                    ' Create menus
                    '
                    Dim ButtonCnt As Integer
                    CSMenus = GetMenuCSPointer("(ParentID is null)or(ParentID=0)", MenuEntryContentName)
                    'CSMenus = GetMenuCSPointer("(ccMenuEntries.ParentID is null)or(ccMenuEntries.ParentID=0)")
                    'CSMenus = cpCore.app_openCsSql_Rev_Internal("default", GetMenuSQLNew("CCMenuEntries.ParentID=" & encodeSQLNumber(nothing)))
                    If cpCore.db.cs_ok(CSMenus) Then
                        GetMenuTopMode = "<table border=""0"" cellpadding=""0"" cellspacing=""0""><tr>"
                        ButtonCnt = 0
                        Do While cpCore.db.cs_ok(CSMenus)
                            Name = cpCore.db.cs_get(CSMenus, "Name")
                            Id = cpCore.db.cs_getInteger(CSMenus, "ID")
                            NewWindow = cpCore.db.cs_getBoolean(CSMenus, "NewWindow")
                            MenuHeader = cpCore.menuFlyout.getMenu(genericController.encodeText(Id), 0)
                            If MenuHeader <> "" Then
                                If ButtonCnt > 0 Then
                                    GetMenuTopMode = GetMenuTopMode & "<td class=""ccFlyoutDelimiter"">|</td>"
                                End If
                                'GetMenuTopMode = GetMenuTopMode & "<td width=""1"" class=""ccPanelShadow""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""1"" ></td>"
                                'GetMenuTopMode = GetMenuTopMode & "<td width=""1"" class=""ccPanelHilite""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""1"" ></td>"
                                '
                                ' --- Add New GetMenuTopMode Button and leave the column open
                                '
                                Link = ""
                                GetMenuTopMode = GetMenuTopMode & "<td class=""ccFlyoutButton"">" & MenuHeader & "</td>"
                                ' GetMenuTopMode = GetMenuTopMode & "<td><nobr>&nbsp;" & MenuHeader & "&nbsp;</nobr></td>"
                            End If
                            ButtonCnt = ButtonCnt + 1
                            Call cpCore.db.cs_goNext(CSMenus)
                        Loop
                        GetMenuTopMode = GetMenuTopMode & "</tr></table>"
                        GetMenuTopMode = cpCore.main_GetPanel(GetMenuTopMode, "ccPanel", "ccPanelHilite", "ccPanelShadow", "100%", 1)
                    End If
                    cpCore.db.cs_Close(CSMenus)
                    '
                    ' Save the Baked Menu
                    '
                    MenuClose = cpCore.htmlDoc.menu_GetClose()
                    'GetMenuTopMode = GetMenuTopMode & cpCore.main_GetMenuClose
                    Call cpCore.cache.setObject(BakeName, GetMenuTopMode & MenuDelimiter & MenuClose, "Menu Entries,People,Content,Groups,Group Rules")
                End If
                cpCore.htmlDoc.htmlForEndOfBody = cpCore.htmlDoc.htmlForEndOfBody & MenuClose
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetMenuTopMode")
            '
        End Function
        '
        '========================================================================
        ' Read and save a GetForm_InputCheckList
        '   see GetForm_InputCheckList for an explaination of the input
        '========================================================================
        '
        Private Sub SaveMemberRules(PeopleID As Integer)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("SaveMemberRules")
            '
            Dim GroupCount As Integer
            Dim GroupPointer As Integer
            Dim CSPointer As Integer
            Dim MethodName As String
            Dim GroupID As Integer
            Dim RuleNeeded As Boolean
            Dim CSRule As Integer
            Dim DateExpires As Date
            Dim DateExpiresVariant As Object
            Dim RuleActive As Boolean
            Dim RuleDateExpires As Date
            Dim MemberRuleID As Integer
            '
            MethodName = "SaveMemberRules"
            '
            ' --- create MemberRule records for all selected
            '
            GroupCount = cpCore.docProperties.getInteger("MemberRules.RowCount")
            If GroupCount > 0 Then
                For GroupPointer = 0 To GroupCount - 1
                    '
                    ' ----- Read Response
                    '
                    GroupID = cpCore.docProperties.getInteger("MemberRules." & GroupPointer & ".ID")
                    RuleNeeded = cpCore.docProperties.getBoolean("MemberRules." & GroupPointer)
                    DateExpires = cpCore.docProperties.getDate("MemberRules." & GroupPointer & ".DateExpires")
                    If DateExpires = Date.MinValue Then
                        DateExpiresVariant = DBNull.Value
                    Else
                        DateExpiresVariant = DateExpires
                    End If
                    '
                    ' ----- Update Record
                    '
                    CSRule = cpCore.db.cs_open("Member Rules", "(MemberID=" & PeopleID & ")and(GroupID=" & GroupID & ")", , False, , , , "Active,MemberID,GroupID,DateExpires")
                    If Not cpCore.db.cs_ok(CSRule) Then
                        '
                        ' No record exists
                        '
                        If RuleNeeded Then
                            '
                            ' No record, Rule needed, add it
                            '
                            Call cpCore.db.cs_Close(CSRule)
                            CSRule = cpCore.db.cs_insertRecord("Member Rules")
                            If cpCore.db.cs_ok(CSRule) Then
                                Call cpCore.db.cs_set(CSRule, "Active", True)
                                Call cpCore.db.cs_set(CSRule, "MemberID", PeopleID)
                                Call cpCore.db.cs_set(CSRule, "GroupID", GroupID)
                                Call cpCore.db.cs_set(CSRule, "DateExpires", DateExpires)
                            End If
                            Call cpCore.db.cs_Close(CSRule)
                        Else
                            '
                            ' No record, no Rule needed, ignore it
                            '
                            Call cpCore.db.cs_Close(CSRule)
                        End If
                    Else
                        '
                        ' Record exists
                        '
                        If RuleNeeded Then
                            '
                            ' record exists, and it is needed, update the DateExpires if changed
                            '
                            RuleActive = cpCore.db.cs_getBoolean(CSRule, "active")
                            RuleDateExpires = cpCore.db.cs_getDate(CSRule, "DateExpires")
                            If (Not RuleActive) Or (RuleDateExpires <> DateExpires) Then
                                Call cpCore.db.cs_set(CSRule, "Active", True)
                                Call cpCore.db.cs_set(CSRule, "DateExpires", DateExpires)
                            End If
                            Call cpCore.db.cs_Close(CSRule)
                        Else
                            '
                            ' record exists and it is not needed, delete it
                            '
                            MemberRuleID = cpCore.db.cs_getInteger(CSRule, "ID")
                            Call cpCore.db.cs_Close(CSRule)
                            Call cpCore.db.deleteTableRecord("ccMemberRules", MemberRuleID, "Default")
                        End If
                    End If
                Next
            End If
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("SaveMemberRules")
        End Sub
        '
        '===========================================================================
        '
        '===========================================================================
        '
        Private Function GetForm_Error(UserError As String, DeveloperError As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Error")
            '
            If DeveloperError <> "" Then
                Throw (New Exception("error [" & DeveloperError & "], user error [" & UserError & "]"))
            End If
            If UserError <> "" Then
                Call cpCore.error_AddUserError(UserError)
                GetForm_Error = AdminFormErrorOpen & cpCore.error_GetUserError & AdminFormErrorClose
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Error")
        End Function
        '
        '=============================================================================
        ' Create a child content
        '=============================================================================
        '
        Private Function GetContentChildTool() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetContentChildTool")
            '
            Dim IsEmptyList As Boolean
            'Dim cmc As cpCoreClass
            'Dim GUIDGenerator As guidClass
            Dim ccGuid As String
            Dim SupportAddonID As Boolean
            Dim SupportGuid As Boolean
            Dim MenuContentName As String
            Dim ParentID As Integer
            Dim ParentName As String
            Dim CSEntry As Integer
            Dim ParentContentID As Integer
            Dim ParentContentName As String
            Dim ChildContentName As String = ""
            Dim ChildContentID As Integer
            Dim AddAdminMenuEntry As Boolean
            Dim CS As Integer
            Dim MenuName As String
            Dim AdminOnly As Boolean
            Dim DeveloperOnly As Boolean
            Dim Content As New stringBuilderLegacyController
            Dim FieldValue As String
            Dim NewGroup As Boolean
            Dim GroupID As Integer
            Dim NewGroupName As String = ""
            Dim ButtonBar As String
            Dim Button As String
            Dim Adminui As New adminUIController(cpCore)
            Dim Caption As String
            Dim Description As String = ""
            Dim ButtonList As String = ""
            Dim BlockForm As Boolean
            '
            Button = cpCore.docProperties.getText(RequestNameButton)
            If Button = ButtonCancel Then
                '
                '
                '
                Call cpCore.webServer.redirect(cpCore.siteProperties.adminURL, "GetContentChildTool, Cancel Button Pressed", False)
            ElseIf Not cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                '
                '
                '
                ButtonList = ButtonCancel
                Content.Add(Adminui.GetFormBodyAdminOnly())
            Else
                '
                If (Button <> ButtonOK) Then
                    '
                    ' Load defaults
                    '
                    ParentContentID = cpCore.docProperties.getInteger("ParentContentID")
                    If ParentContentID = 0 Then
                        ParentContentID = cpCore.metaData.getContentId("Page Content")
                    End If
                    AddAdminMenuEntry = True
                    GroupID = 0
                Else
                    '
                    ' Process input
                    '
                    ParentContentID = cpCore.docProperties.getInteger("ParentContentID")
                    ParentContentName = cpCore.metaData.getContentNameByID(ParentContentID)
                    ChildContentName = cpCore.docProperties.getText("ChildContentName")
                    AddAdminMenuEntry = cpCore.docProperties.getBoolean("AddAdminMenuEntry")
                    GroupID = cpCore.docProperties.getInteger("GroupID")
                    NewGroup = cpCore.docProperties.getBoolean("NewGroup")
                    NewGroupName = cpCore.docProperties.getText("NewGroupName")
                    '
                    If (ParentContentName = "") Or (ChildContentName = "") Then
                        cpCore.error_AddUserError("You must select a parent and provide a child name.")
                    Else
                        '
                        ' Create Definition
                        '
                        Description = Description _
                            & "<div>&nbsp;</div>" _
                            & "<div>Creating content [" & ChildContentName & "] from [" & ParentContentName & "]</div>"
                        Call cpCore.metaData_CreateContentChild(ChildContentName, ParentContentName)
                        ChildContentID = cpCore.metaData.getContentId(ChildContentName)
                        '
                        ' Create Group and Rule
                        '
                        If NewGroup And (NewGroupName <> "") Then
                            CS = cpCore.db.cs_open("Groups", "name=" & cpCore.db.encodeSQLText(NewGroupName))
                            If cpCore.db.cs_ok(CS) Then
                                Description = Description _
                                    & "<div>Group [" & NewGroupName & "] already exists, using existing group.</div>"
                                GroupID = cpCore.db.cs_getInteger(CS, "ID")
                            Else
                                Description = Description _
                                    & "<div>Creating new group [" & NewGroupName & "]</div>"
                                Call cpCore.db.cs_Close(CS)
                                CS = cpCore.db.cs_insertRecord("Groups")
                                If cpCore.db.cs_ok(CS) Then
                                    GroupID = cpCore.db.cs_getInteger(CS, "ID")
                                    Call cpCore.db.cs_set(CS, "Name", NewGroupName)
                                    Call cpCore.db.cs_set(CS, "Caption", NewGroupName)
                                End If
                            End If
                            Call cpCore.db.cs_Close(CS)
                        End If
                        If GroupID <> 0 Then
                            CS = cpCore.db.cs_insertRecord("Group Rules")
                            If cpCore.db.cs_ok(CS) Then
                                Description = Description _
                                    & "<div>Assigning group [" & cpCore.content_GetRecordName("Groups", GroupID) & "] to edit content [" & ChildContentName & "].</div>"
                                Call cpCore.db.cs_set(CS, "GroupID", GroupID)
                                Call cpCore.db.cs_set(CS, "ContentID", ChildContentID)
                            End If
                            Call cpCore.db.cs_Close(CS)
                        End If
                        '
                        ' Add Admin Menu Entry
                        '
                        If AddAdminMenuEntry Then
                            '
                            ' Add Navigator entries
                            '
                            '                    cmc = cpCore.main_cs_getv()
                            '                    MenuContentName = "Navigator Entries"
                            '                    SupportAddonID = cpCore.csv_IsContentFieldSupported(MenuContentName, "AddonID")
                            '                    SupportGuid = cpCore.csv_IsContentFieldSupported(MenuContentName, "ccGuid")
                            '                    CS = cpCore.app.csOpen("Navigator Entries", "ContentID=" & ParentContentID)
                            '                    Do While cpCore.app.csv_IsCSOK(CS)
                            '                        ParentID = cpCore.app.csv_cs_getText(CS, "ID")
                            '                        ParentName = cpCore.app.csv_cs_getText(CS, "name")
                            '                        AdminOnly = cpCore.db.cs_getBoolean(CS, "AdminOnly")
                            '                        DeveloperOnly = cpCore.db.cs_getBoolean(CS, "DeveloperOnly")
                            '                        CSEntry = cpCore.app.csv_InsertCSRecord(MenuContentName, SystemMemberID)
                            '                        If cpCore.app.csv_IsCSOK(CSEntry) Then
                            '                            If ParentID = 0 Then
                            '                                Call cpCore.app.csv_SetCS(CSEntry, "ParentID", Null)
                            '                            Else
                            '                                Call cpCore.app.csv_SetCS(CSEntry, "ParentID", ParentID)
                            '                            End If
                            '                            Call cpCore.app.csv_SetCS(CSEntry, "ContentID", ChildContentID)
                            '                            Call cpCore.app.csv_SetCS(CSEntry, "name", ChildContentName)
                            '                            Call cpCore.app.csv_SetCS(CSEntry, "LinkPage", "")
                            '                            Call cpCore.app.csv_SetCS(CSEntry, "SortOrder", "")
                            '                            Call cpCore.app.csv_SetCS(CSEntry, "AdminOnly", AdminOnly)
                            '                            Call cpCore.app.csv_SetCS(CSEntry, "DeveloperOnly", DeveloperOnly)
                            '                            Call cpCore.app.csv_SetCS(CSEntry, "NewWindow", False)
                            '                            Call cpCore.app.csv_SetCS(CSEntry, "Active", True)
                            '                            If SupportAddonID Then
                            '                                Call cpCore.app.csv_SetCS(CSEntry, "AddonID", "")
                            '                            End If
                            '                            If SupportGuid Then
                            '                                GuidGenerator = New guidClass
                            '                                ccGuid = Guid.NewGuid.ToString()
                            '                                GuidGenerator = Nothing
                            '                                Call cpCore.app.csv_SetCS(CSEntry, "ccGuid", ccGuid)
                            '                            End If
                            '                        End If
                            '                        Call cpCore.app.csv_CloseCS(CSEntry)
                            '                        'Call cpCore.csv_VerifyNavigatorEntry2(ccGuid, menuNameSpace, MenuName, ChildContenName, "", "", AdminOnly, DeveloperOnly, False, True, "Navigator Entries", "")
                            '                        'Call cpCore.main_CreateAdminMenu(MenuName, ChildContentName, ChildContentName, "", ChildContentName, AdminOnly, DeveloperOnly, False)
                            '                        Description = Description _
                            '                            & "<div>Creating navigator entry for [" & ChildContentName & "] under entry [" & ParentName & "].</div>"
                            '                        cpCore.main_NextCSRecord (CS)
                            '                    Loop
                            '                    Call cpCore.app.closeCS(CS)
                            '
                            ' Add Legacy menu entries
                            '
                            CS = cpCore.db.cs_open("Menu Entries", "ContentID=" & ParentContentID)
                            Do While cpCore.db.cs_ok(CS)
                                MenuName = cpCore.db.cs_get(CS, "name")
                                AdminOnly = cpCore.db.cs_getBoolean(CS, "AdminOnly")
                                DeveloperOnly = cpCore.db.cs_getBoolean(CS, "DeveloperOnly")
                                If MenuName = "" Then
                                    MenuName = "Site Content"
                                End If
                                Call Controllers.appBuilderController.admin_VerifyAdminMenu(cpCore, MenuName, ChildContentName, ChildContentName, "", ChildContentName, AdminOnly, DeveloperOnly, False)
                                Description = Description _
                                    & "<div>Creating Legacy site menu for [" & ChildContentName & "] under entry [" & MenuName & "].</div>"
                                cpCore.db.cs_goNext(CS)
                            Loop
                            Call cpCore.db.cs_Close(CS)
                        End If
                        '
                        Description = Description _
                            & "<div>&nbsp;</div>" _
                            & "<div>Your new content is ready. <a href=""?" & RequestNameAdminForm & "=22"">Click here</a> to create another Content Definition, or hit [Cancel] to return to the main menu.</div>"
                        ButtonList = ButtonCancel
                        BlockForm = True
                    End If
                    cpCore.metaData.clear()
                    cpCore.cache.invalidateAll()
                End If
                '
                ' Get the form
                '
                If Not BlockForm Then
                    Call Content.Add(Adminui.EditTableOpen)
                    '
                    FieldValue = "<select size=""1"" name=""ParentContentID"" ID=""""><option value="""">Select One</option>"
                    FieldValue = FieldValue & GetContentChildTool_Options(0, ParentContentID)
                    FieldValue = FieldValue & "</select>"
                    'FieldValue = cpCore.htmldoc.main_GetFormInputSelect2("ParentContentID", CStr(ParentContentID), "Content", "(AllowContentChildTool<>0)")

                    Call Content.Add(Adminui.GetEditRow(FieldValue, "Parent Content Name", "", False, False, ""))
                    '
                    FieldValue = cpCore.htmlDoc.html_GetFormInputText2("ChildContentName", ChildContentName, 1, 40)
                    Call Content.Add(Adminui.GetEditRow(FieldValue, "New Child Content Name", "", False, False, ""))
                    '
                    FieldValue = cpCore.htmlDoc.html_GetFormInputRadioBox("NewGroup", False.ToString, NewGroup.ToString) & cpCore.htmlDoc.main_GetFormInputSelect2("GroupID", GroupID, "Groups", "", "", "", IsEmptyList) & "(Select a current group)" _
                        & "<br>" & cpCore.htmlDoc.html_GetFormInputRadioBox("NewGroup", True.ToString, NewGroup.ToString) & cpCore.htmlDoc.html_GetFormInputText2("NewGroupName", NewGroupName) & "(Create a new group)"
                    Call Content.Add(Adminui.GetEditRow(FieldValue, "Content Manager Group", "", False, False, ""))
                    '            '
                    '            FieldValue = cpCore.main_GetFormInputCheckBox2("AddAdminMenuEntry", AddAdminMenuEntry) & "(Add Navigator Entry under Manager Site Content &gt; Advanced)"
                    '            Call Content.Add(AdminUI.GetEditRow( FieldValue, "Add Menu Entry", "", False, False, ""))
                    '
                    Call Content.Add(Adminui.EditTableClose)
                    Call Content.Add("</td></tr>" & kmaEndTable)
                    '
                    ButtonList = ButtonOK & "," & ButtonCancel
                End If
                Content.Add(cpCore.htmlDoc.html_GetFormInputHidden(RequestNameAdminSourceForm, AdminFormContentChildTool))
            End If
            '
            Caption = "Create Content Definition"
            Description = "<div>This tool is used to create content definitions that help segregate your content into authorable segments.</div>" & Description
            GetContentChildTool = Adminui.GetBody(Caption, ButtonList, "", False, False, Description, "", 0, Content.Text)
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetContentChildTool")
        End Function
        '
        '=============================================================================
        ' Create a child content
        '=============================================================================
        '
        Private Function GetContentChildTool_Options(ParentID As Integer, DefaultValue As Integer) As String
            Dim returnOptions As String = ""
            Try
                '
                Dim SQL As String
                Dim CS As Integer
                Dim RecordID As Integer
                Dim RecordName As String
                '
                If ParentID = 0 Then
                    SQL = "select Name, ID from ccContent where ((ParentID<1)or(Parentid is null)) and (AllowContentChildTool<>0);"
                Else
                    SQL = "select Name, ID from ccContent where ParentID=" & ParentID & " and (AllowContentChildTool<>0) and not (allowcontentchildtool is null);"
                End If
                CS = cpCore.db.cs_openCsSql_rev("Default", SQL)
                Do While cpCore.db.cs_ok(CS)
                    RecordName = cpCore.db.cs_get(CS, "Name")
                    RecordID = cpCore.db.cs_getInteger(CS, "ID")
                    If RecordID = DefaultValue Then
                        returnOptions = returnOptions & "<option value=""" & RecordID & """ selected>" & cpCore.db.cs_get(CS, "name") & "</option>"
                    Else
                        returnOptions = returnOptions & "<option value=""" & RecordID & """ >" & cpCore.db.cs_get(CS, "name") & "</option>"
                    End If
                    returnOptions = returnOptions & GetContentChildTool_Options(RecordID, DefaultValue)
                    cpCore.db.cs_goNext(CS)
                Loop
                Call cpCore.db.cs_Close(CS)
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return returnOptions
        End Function
        ''
        ''=============================================================================
        '' Create a child content
        ''=============================================================================
        ''
        'Private Function GetForm_PageContentMap_OpenNodeList(Criteria As String) As String
        '    On Error GoTo ErrorTrap: 'Dim th as integer: th = profileLogAdminMethodEnter("AdminClass.GetForm_PageContentMap_OpenNodeList")
        '    '
        '    Dim CS as integer
        '    Dim ParentID as integer
        '    '
        '    CS = cpCore.app.csOpen("Page Content", Criteria, , False, , , "ID,ParentID")
        '    If cpCore.app.csv_IsCSOK(CS) Then
        '        Do While cpCore.app.csv_IsCSOK(CS)
        '            ParentID = cpCore.app.cs_getInteger(CS, "ParentID")
        '            If ParentID <> 0 Then
        '                GetForm_PageContentMap_OpenNodeList = GetForm_PageContentMap_OpenNodeList("ID=" & ParentID)
        '                End If
        '            GetForm_PageContentMap_OpenNodeList = GetForm_PageContentMap_OpenNodeList & "," & cpCore.app.cs_getInteger(CS, "ID")
        '            cpCore.main_NextCSRecord (CS)
        '            Loop
        '        End If
        '    Call cpCore.app.closeCS(CS)
        '    If GetForm_PageContentMap_OpenNodeList <> "" Then
        '        GetForm_PageContentMap_OpenNodeList = Mid(GetForm_PageContentMap_OpenNodeList, 2)
        '        End If
        '    '''Dim th as integer: Exit Function
        '    '
        '    ' ----- Error Trap
        '    '
        'ErrorTrap:
        '    Call HandleClassTrapErrorBubble("GetForm_PageContentMap_OpenNodeList")
        'End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Private Function GetForm_HouseKeepingControl() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_HouseKeepingControl")
            '
            Dim WhereCount As Integer
            Dim Content As New stringBuilderLegacyController
            Dim AllowContentSpider As Boolean
            Dim status As String
            Dim TargetDomain As String
            Dim EDGPublishToProduction As Boolean
            Dim CSServers As Integer
            Dim Copy As String
            Dim StagingServer As String
            Dim PagesFound As Integer
            Dim PagesComplete As Integer
            Dim SQL As String
            Dim Button As String
            Dim SpiderAuthUsername As String
            Dim SpiderAuthPassword As String
            Dim SpiderAppRootPath As String
            Dim SpiderPassword As String
            Dim SpiderUsername As String
            Dim SPIDERQUERYSTRINGEXCLUDELIST As String
            Dim SPIDERQUERYSTRINGIGNORELIST As String
            'Dim SPIDERREADTIME as integer
            'Dim SpiderURLIgnoreList As String
            Dim QueryString As String
            Dim Result As Integer
            Dim PagesTotal As Integer
            Dim LastCheckDate As Date
            Dim FirstCheckDate As Date
            Dim Caption As String
            Dim SpiderFontsAllowed As String
            Dim SpiderPDFBodyText As String
            Dim ProgressMessage As String
            Dim DateValue As Date
            Dim AgeInDays As String
            Dim ArchiveRecordAgeDays As Integer
            Dim ArchiveTimeOfDay As String
            Dim ArchiveAllowFileClean As Boolean
            Dim Adminui As New adminUIController(cpCore)
            Dim ButtonList As String = ""
            Dim Description As String
            '
            '
            Button = cpCore.docProperties.getText(RequestNameButton)
            If Button = ButtonCancel Then
                '
                '
                '
                Call cpCore.webServer.redirect(cpCore.siteProperties.adminURL, "HouseKeepingControl, Cancel Button Pressed", False)
            ElseIf Not cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                '
                '
                '
                ButtonList = ButtonCancel
                Content.Add(Adminui.GetFormBodyAdminOnly())
            Else
                '
                Content.Add(Adminui.EditTableOpen)
                '
                ' Set defaults
                '
                ArchiveRecordAgeDays = (cpCore.siteProperties.getinteger("ArchiveRecordAgeDays", 0))
                ArchiveTimeOfDay = cpCore.siteProperties.getText("ArchiveTimeOfDay", "12:00:00 AM")
                ArchiveAllowFileClean = (cpCore.siteProperties.getBoolean("ArchiveAllowFileClean", False))
                'ArchiveAllowLogClean = genericController.EncodeBoolean(cpCore.main_GetSiteProperty2("ArchiveAllowLogClean", False))

                '
                ' Process Requests
                '
                Select Case Button
                    Case ButtonOK, ButtonSave
                        '
                        ArchiveRecordAgeDays = cpCore.docProperties.getInteger("ArchiveRecordAgeDays")
                        Call cpCore.siteProperties.setProperty("ArchiveRecordAgeDays", genericController.encodeText(ArchiveRecordAgeDays))
                        '
                        ArchiveTimeOfDay = cpCore.docProperties.getText("ArchiveTimeOfDay")
                        Call cpCore.siteProperties.setProperty("ArchiveTimeOfDay", ArchiveTimeOfDay)
                        '
                        ArchiveAllowFileClean = cpCore.docProperties.getBoolean("ArchiveAllowFileClean")
                        Call cpCore.siteProperties.setProperty("ArchiveAllowFileClean", genericController.encodeText(ArchiveAllowFileClean))
                End Select
                '
                If Button = ButtonOK Then
                    Call cpCore.webServer.redirect(cpCore.siteProperties.adminURL, "StaticPublishControl, OK Button Pressed", False)
                End If
                '
                ' ----- Status
                '
                Call Content.Add(genericController.StartTableRow() & "<td colspan=""3"" class=""ccPanel3D ccAdminEditSubHeader""><b>Status</b>" & kmaEndTableCell & kmaEndTableRow)
                '
                ' ----- Visits Found
                '
                PagesTotal = 0
                SQL = "SELECT Count(ID) as Result FROM ccVisits;"
                CSServers = cpCore.db.cs_openCsSql_rev("Default", SQL)
                If cpCore.db.cs_ok(CSServers) Then
                    PagesTotal = cpCore.db.cs_getInteger(CSServers, "Result")
                End If
                Call cpCore.db.cs_Close(CSServers)
                Call Content.Add(Adminui.GetEditRow(SpanClassAdminNormal & PagesTotal, "Visits Found", "", False, False, ""))
                '
                ' ----- Oldest Visit
                '
                Copy = "unknown"
                AgeInDays = "unknown"
                SQL = cpCore.db.GetSQLSelect("default", "ccVisits", "DateAdded", , "ID", , 1)
                CSServers = cpCore.db.cs_openCsSql_rev("Default", SQL)
                'SQL = "SELECT Top 1 DateAdded FROM ccVisits order by ID;"
                'CSServers = cpCore.app_openCsSql_Rev_Internal("Default", SQL)
                If cpCore.db.cs_ok(CSServers) Then
                    DateValue = cpCore.db.cs_getDate(CSServers, "DateAdded")
                    If DateValue <> Date.MinValue Then
                        Copy = genericController.encodeText(DateValue)
                        AgeInDays = genericController.encodeText(Int(cpCore.app_startTime - DateValue))
                    End If
                End If
                Call cpCore.db.cs_Close(CSServers)
                Call Content.Add(Adminui.GetEditRow(SpanClassAdminNormal & Copy & " (" & AgeInDays & " days)", "Oldest Visit", "", False, False, ""))
                '
                ' ----- Viewings Found
                '
                PagesTotal = 0
                SQL = "SELECT Count(ID) as result  FROM ccViewings;"
                CSServers = cpCore.db.cs_openCsSql_rev("Default", SQL)
                If cpCore.db.cs_ok(CSServers) Then
                    PagesTotal = cpCore.db.cs_getInteger(CSServers, "Result")
                End If
                Call cpCore.db.cs_Close(CSServers)
                Call Content.Add(Adminui.GetEditRow(SpanClassAdminNormal & PagesTotal, "Viewings Found", "", False, False, ""))
                '
                Call Content.Add(genericController.StartTableRow() & "<td colspan=""3"" class=""ccPanel3D ccAdminEditSubHeader""><b>Options</b>" & kmaEndTableCell & kmaEndTableRow)
                '
                Caption = "Archive Age"
                Copy = cpCore.htmlDoc.html_GetFormInputText2("ArchiveRecordAgeDays", CStr(ArchiveRecordAgeDays), , 20) & "&nbsp;Number of days to keep visit records. 0 disables housekeeping."
                Call Content.Add(Adminui.GetEditRow(Copy, Caption))
                '
                Caption = "Housekeeping Time"
                Copy = cpCore.htmlDoc.html_GetFormInputText2("ArchiveTimeOfDay", ArchiveTimeOfDay, , 20) & "&nbsp;The time of day when record deleting should start."
                Call Content.Add(Adminui.GetEditRow(Copy, Caption))
                '
                Caption = "Purge Content Files"
                Copy = cpCore.htmlDoc.html_GetFormInputCheckBox2("ArchiveAllowFileClean", ArchiveAllowFileClean) & "&nbsp;Delete Contensive content files with no associated database record."
                Call Content.Add(Adminui.GetEditRow(Copy, Caption))
                '
                Content.Add(Adminui.EditTableClose)
                Content.Add(cpCore.htmlDoc.html_GetFormInputHidden(RequestNameAdminSourceForm, AdminformHousekeepingControl))
                ButtonList = ButtonCancel & ",Refresh," & ButtonSave & "," & ButtonOK
            End If
            '
            Caption = "Data Housekeeping Control"
            Description = "This tool is used to control the database record housekeeping process. This process deletes visit history records, so care should be taken before making any changes."
            GetForm_HouseKeepingControl = Adminui.GetBody(Caption, ButtonList, "", False, False, Description, "", 0, Content.Text)
            '
            Call cpCore.htmlDoc.main_AddPagetitle(Caption)
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_HouseKeepingControl")
            '
        End Function
        ''
        ''
        ''
        'Private Function GetPropertyControl(Name As String, FieldType as integer, ProcessRequest As Boolean, DefaultValue As String) As String
        '    On Error GoTo ErrorTrap: 'Dim th as integer: th = profileLogAdminMethodEnter("AdminClass.GetPropertyControl")
        '    '
        '    Dim CurrentValue As String
        '    '
        '    If ProcessRequest Then
        '        CurrentValue = cpCore.main_GetStreamText2(Name)
        '        Call cpCore.app.setSiteProperty(Name, CurrentValue)
        '    Else
        '        CurrentValue = cpCore.main_GetSiteProperty2(Name, DefaultValue)
        '    End If
        '    Select Case FieldType
        '        Case FieldTypeBoolean
        '            GetPropertyControl = cpCore.main_GetFormInputCheckBox2(Name, genericController.EncodeBoolean(CurrentValue))
        '        Case Else
        '            GetPropertyControl = cpCore.main_GetFormInputText2(Name, CurrentValue)
        '    End Select
        '    '''Dim th as integer: Exit Function
        '    '
        '    ' ----- Error Trap
        '    '
        'ErrorTrap:
        '    Call HandleClassTrapErrorBubble("GetPropertyControl")
        'End Function
        '
        '
        '
        Private Function GetPropertyHTMLControl(ByVal Name As String, ByVal ProcessRequest As Boolean, ByVal DefaultValue As String, ByVal readOnlyField As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetPropertyHTMLControl")
            '
            Dim CurrentValue As String
            '
            If readOnlyField Then
                GetPropertyHTMLControl = "<div style=""border:1px solid #808080; padding:20px;"">" & genericController.decodeHtml(cpCore.siteProperties.getText(Name, DefaultValue)) & "</div>"
            ElseIf ProcessRequest Then
                CurrentValue = cpCore.docProperties.getText(Name)
                Call cpCore.siteProperties.setProperty(Name, CurrentValue)
                GetPropertyHTMLControl = cpCore.htmlDoc.html_GetFormInputHTML(Name, CurrentValue)
            Else
                CurrentValue = cpCore.siteProperties.getText(Name, DefaultValue)
                GetPropertyHTMLControl = cpCore.htmlDoc.html_GetFormInputHTML(Name, CurrentValue)
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetPropertyControl")
        End Function
        '
        '=============================================================================
        '
        '=============================================================================
        '
        Private Function contactManager_GetForm_ContactManager() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_ContactManager")
            '
            Dim CM As Object
            '
            contactManager_GetForm_ContactManager = cpCore.contactManager_GetContactManager("source=admin")
            Call cpCore.htmlDoc.main_AddPagetitle("Contact Manager")
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_ContactManager")
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Private Function admin_GetForm_StyleEditor() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_StyleEditor")
            '
            Dim Content As New stringBuilderLegacyController
            Dim Button As String
            Dim Copy As String
            Dim ButtonList As String = ""
            Dim Adminui As New adminUIController(cpCore)
            Dim Caption As String
            Dim Description As String
            'Dim StyleSN as integer
            Dim AllowCSSReset As Boolean
            '
            Button = cpCore.docProperties.getText(RequestNameButton)
            If Button = ButtonCancel Then
                '
                '
                '
                Call cpCore.webServer.redirect(cpCore.siteProperties.adminURL, "StyleEditor, Cancel Button Pressed", False)
            ElseIf Not cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                '
                '
                '
                ButtonList = ButtonCancel
                Content.Add(Adminui.GetFormBodyAdminOnly())
            Else
                'StyleSN = genericController.EncodeInteger(cpCore.main_GetSiteProperty2("StylesheetSerialNumber", false ))
                AllowCSSReset = False
                If True Then ' 4.1.101" Then
                    AllowCSSReset = (cpCore.siteProperties.getBoolean("Allow CSS Reset", False))
                End If
                '
                Copy = cpCore.htmlDoc.html_GetFormInputTextExpandable("StyleEditor", cpCore.cdnFiles.readFile(DynamicStylesFilename), 20)
                Copy = genericController.vbReplace(Copy, " cols=""100""", " style=""width:100%;""", 1, 99, vbTextCompare)
                Copy = "" _
                    & "<div style=""padding:10px;"">" & cpCore.htmlDoc.html_GetFormInputCheckBox2(RequestNameAllowCSSReset, AllowCSSReset) & "&nbsp;Include Contensive reset styles</div>" _
                    & "<div style=""padding:10px;"">" & Copy & "</div>"

                '& "<div style=""padding:10px;"">" & cpCore.main_GetFormInputCheckBox2(RequestNameInlineStyles, (StyleSN = 0)) & "&nbsp;Force site styles inline</div>"

                Content.Add(Copy)
                ButtonList = ButtonCancel & "," & ButtonRefresh & "," & ButtonSave & "," & ButtonOK
                Content.Add(cpCore.htmlDoc.html_GetFormInputHidden(RequestNameAdminSourceForm, AdminFormStyleEditor))
            End If
            '
            Description = "" _
                & "<p>This tool is used to edit the site styles. When a public page is rendered, the head tag includes styles in this order:" _
                & "<ol>" _
                & "<li>Contensive reset styles (optional)</li>" _
                & "<li>Contensive styles</li>" _
                & "<li>These site styles (optionally inline)</li>" _
                & "<li>Shared styles from the template in use</li>" _
                & "<li>Exclusive styles from the template in use</li>" _
                & "<li>Add-on styles, first the default styles, then any custom styles included.</li>" _
                & "</ul>" _
                & ""
            admin_GetForm_StyleEditor = Adminui.GetBody("Site Styles", ButtonList, "", True, True, Description, "", 0, Content.Text)
            '
            Call cpCore.htmlDoc.main_AddPagetitle("Style Editor")
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_StyleEditor")
            '
        End Function
        '
        '
        '
        Private Function GetForm_ControlPage_CopyContent(ByVal Caption As String, ByVal CopyName As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_ControlPage_CopyContent")
            '
            Dim CS As Integer
            Dim RecordID As Integer
            Dim EditIcon As String
            Dim Copy As String = ""
            '
            Const ContentName = "Copy Content"
            '
            CS = cpCore.db.cs_open(ContentName, "Name=" & cpCore.db.encodeSQLText(CopyName))
            If cpCore.db.cs_ok(CS) Then
                RecordID = cpCore.db.cs_getInteger(CS, "ID")
                Copy = cpCore.db.cs_getText(CS, "copy")
            End If
            Call cpCore.db.cs_Close(CS)
            '
            If RecordID <> 0 Then
                EditIcon = "<a href=""?cid=" & cpCore.metaData.getContentId(ContentName) & "&id=" & RecordID & "&" & RequestNameAdminForm & "=4"" target=_blank><img src=""/ccLib/images/IconContentEdit.gif"" border=0 alt=""Edit content"" valign=absmiddle></a>"
            Else
                EditIcon = "<a href=""?cid=" & cpCore.metaData.getContentId(ContentName) & "&" & RequestNameAdminForm & "=4&" & RequestNameAdminAction & "=2&ad=1&wc=" & genericController.EncodeURL("name=" & CopyName) & """ target=_blank><img src=""/ccLib/images/IconContentEdit.gif"" border=0 alt=""Edit content"" valign=absmiddle></a>"
            End If
            If Copy = "" Then
                Copy = "&nbsp;"
            End If
            '
            GetForm_ControlPage_CopyContent = "" _
                & genericController.StartTable(4, 0, 1) & "<tr>" _
                & "<td width=150 align=right>" & Caption & "<br><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=150 height=1></td>" _
                & "<td width=20 align=center>" & EditIcon & "</td>" _
                & "<td>" & Copy & "&nbsp;</td>" _
                & "</tr></table>"
            '
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_ControlPage_CopyContent")
            '
        End Function
        ''
        ''========================================================================
        ''
        ''========================================================================
        ''
        'Private Function GetForm_EmailControl() As String
        '    On Error GoTo ErrorTrap: 'Dim th as integer: th = profileLogAdminMethodEnter("AdminClass.GetForm_EmailControl")
        '    '
        '    Dim Content As New fastStringClass
        '    Dim Copy As String
        '    Dim Button As String
        '    Dim ButtonList As String
        '    Dim SaveAction As Boolean
        '    Dim HelpCopy As String
        '    Dim FieldValue As String
        '    Dim PaymentProcessMethod as integer
        '    Dim Adminui As New adminUIclass(cpcore)
        '    Dim Description As String
        '    '
        '    if true then ' 3.3.009" Then
        '        SettingPageID = cpCore.main_GetRecordID("Setting Pages", "Email Settings")
        '    End If
        '    If SettingPageID <> 0 Then
        '        Call cpCore.htmldoc.main_AddRefreshQueryString(RequestNameOpenSettingPage, SettingPageID)
        '        GetForm_EmailControl = GetSettingPage(SettingPageID)
        '    Else
        '        Button = cpCore.main_GetStreamText2(RequestNameButton)
        '        If Button = ButtonCancel Then
        '            '
        '            '
        '            '
        '            Call cpCore.main_Redirect2(cpCore.app.SiteProperty_AdminURL, "Email Control, Cancel Button Pressed", False)
        '        ElseIf Not cpCore.main_IsAdmin Then
        '            '
        '            '
        '            '
        '            ButtonList = ButtonCancel
        '            Content.Add( AdminUI.GetFormBodyAdminOnly()
        '        Else
        '            '
        '            ' Process Requests
        '            '
        '            SaveAction = (Button = ButtonSave) Or (Button = ButtonOK)
        '            '
        '            ButtonList = ButtonCancel & "," & ButtonSave & "," & ButtonOK
        '            Content.Add( AdminUI.EditTableOpen)
        '            '
        '            ' Common email addresses
        '            '
        '            Call Content.Add(startTableRow & "<td colspan=""3"" class=""ccPanel3D ccAdminEditSubHeader""><b>General Email Addresses</b>" & kmaEndTableCell & kmaEndTableRow)
        '            '
        '            HelpCopy = "This is the Email address displayed throughout the site when a visitor is prompted to contact the site administrator."
        '            Copy = (GetPropertyControl("EmailAdmin", FieldTypeText, SaveAction, ""))
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "Admin Email Address", HelpCopy, False, False))
        '            '
        '            HelpCopy = "This is the Email address displayed throughout the site when a visitor is prompted to send site comments."
        '            Copy = (GetPropertyControl("EmailComments", FieldTypeText, SaveAction, ""))
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "Comment Email Address", HelpCopy, False, False))
        '            '
        '            HelpCopy = "This is the Email address used on out-going Emails when no other address is available. For your Email to get to its destination, this Email address must be a valid Email account on a mail server."
        '            Copy = (GetPropertyControl("EmailFromAddress", FieldTypeText, SaveAction, ""))
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "General Email From Address", HelpCopy, False, False))
        '            '
        '            Call Content.Add(startTableRow & "<td colspan=""3"" class=""ccPanel3D ccAdminEditSubHeader""><b>Trap Email Handling</b>" & kmaEndTableCell & kmaEndTableRow)
        '            '
        '            HelpCopy = "When checked, all system errors (called traps errors) generate an Email to the Trap Email address."
        '            Copy = (GetPropertyControl("AllowTrapemail", FieldTypeBoolean, SaveAction, ""))
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "Allow Trap Error Email", HelpCopy, False, False))
        '            '
        '            HelpCopy = "This is the Email address to which all systems errors (called trap errors) are sent when Allow Trap Error Email is checked."
        '            Copy = (GetPropertyControl("TrapEmail", FieldTypeText, SaveAction, ""))
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "Trap Error Email Address", HelpCopy, False, False))
        '            '
        '            ' Email Sending
        '            '
        '            Call Content.Add(startTableRow & "<td colspan=""3"" class=""ccPanel3D ccAdminEditSubHeader""><b>Sending Email</b>" & kmaEndTableCell & kmaEndTableRow)
        '            '
        '            HelpCopy = "This is the domain name or IP address of the SMTP mail server you will use to send. If you are using the MS SMTP in IIS on this machine, use 127.0.0.1."
        '            Copy = (GetPropertyControl("SMTPServer", FieldTypeText, SaveAction, "127.0.0.1"))
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "SMTP Email Server", HelpCopy, False, False))
        '            '
        '            HelpCopy = "When checked, the login box includes a section for users to enter their Email addresses. When submitted, all username and password matches for that Email address are sent to the Email address."
        '            Copy = (GetPropertyControl("AllowPasswordEmail", FieldTypeBoolean, SaveAction, ""))
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "Allow Password Email", HelpCopy, False, False))
        '    '
        '    ' read-only - no longer user configurable
        '    '
        '    '        '
        '            HelpCopy = "This text is included at the bottom of each group, system, and conditional email. It contains a link that the Email recipient can click to block them from future emails from this site. Only site developers can modify this text."
        '            If cpCore.main_IsDeveloper Then
        '                HelpCopy = "<br><br>Developer: This text should conform to standards set by both local and federal law, as well as those required by your email server administrator. To create the clickable link, include link tags around your text (&lt%link&gt;click here&lt%/link&gt;). If you omit the link tag, a (click here) will be added to the end."
        '            End If
        '            Copy = (GetPropertyHTMLControl("EmailSpamFooter", SaveAction, DefaultSpamFooter, (Not cpCore.main_IsDeveloper)))
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "Email SpamFooter", HelpCopy, False, True))
        '            '
        '            HelpCopy = "Group and Conditional Email are delivered from another program that checks in about every minute. This is the time and date of the last check."
        '            Copy = cpCore.main_GetSiteProperty2("EmailServiceLastCheck")
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "Last Send Email Status", HelpCopy, False, False))
        '            '
        '            ' Bounce Email Handling
        '            '
        '            Call Content.Add(startTableRow & "<td colspan=""3"" class=""ccPanel3D ccAdminEditSubHeader""><b>Bounce Email Handling</b>" & kmaEndTableCell & kmaEndTableRow)
        '            '
        '            HelpCopy = "If present, all outbound Emails that can not be delivered will be returned to this address. This should be a valid Email address on an Email server."
        '            Copy = (GetPropertyControl("EmailBounceAddress", FieldTypeText, SaveAction, ""))
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "Bounce Email Address", HelpCopy, False, False))
        '            '
        '            HelpCopy = "When checked, the system will attempt to retrieve bounced Emails from the following Email account and mark the members according to the processing rules included here."
        '            Copy = (GetPropertyControl("AllowEmailBounceProcessing", FieldTypeBoolean, SaveAction, ""))
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "Process Bounced Emails", HelpCopy, False, False))
        '            '
        '            HelpCopy = "The POP Email server where Emails will be retrieved and processed."
        '            Copy = (GetPropertyControl("POPServer", FieldTypeText, SaveAction, ""))
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "POP Email Server", HelpCopy, False, False))
        '            '
        '            HelpCopy = "The account username to retrieve Emails for processing."
        '            Copy = (GetPropertyControl("POPServerUsername", FieldTypeText, SaveAction, ""))
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "POP Email Username", HelpCopy, False, False))
        '            '
        '            HelpCopy = "The account password to retrieve Emails for processing."
        '            Copy = (GetPropertyControl("POPServerPassword", FieldTypeText, SaveAction, ""))
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "POP Email Password", HelpCopy, False, False))
        '            '
        '            HelpCopy = "Set the action to be performed when an Email address is identified as invalid by the bounce process."
        '            If Not SaveAction Then
        '                FieldValue = genericController.EncodeInteger(cpCore.main_GetSiteProperty2("EMAILBOUNCEPROCESSACTION"))
        '            Else
        '                FieldValue = genericController.EncodeInteger(cpCore.main_GetStreamText2("EMAILBOUNCEPROCESSACTION"))
        '                Call cpCore.app.setSiteProperty("EMAILBOUNCEPROCESSACTION", FieldValue)
        '            End If
        '            Copy = "<select size=1 name=EMAILBOUNCEPROCESSACTION>" _
        '                & "<option value=0>Do Nothing</option>" _
        '                & "<option value=1>Clear the Allow Group Email field for all members with a matching Email address</option>" _
        '                & "<option value=2>Clear all member Email addresses that match the Email address</option>" _
        '                & "<option value=3>Delete all Members with a matching Email address</option>" _
        '                & "</select>"
        '            Copy = genericController.vbReplace(Copy, "value=" & FieldValue, "selected value=" & FieldValue)
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "Bounce Email Action", HelpCopy, False, False))
        '            '
        '            HelpCopy = "Bounce emails are retrieved about every minute. This is the status of the last check."
        '            Copy = cpCore.main_GetSiteProperty2("POPServerStatus")
        '            Call Content.Add(AdminUI.GetEditRow( Copy, "Last Receive Email Status", HelpCopy, False, False))
        '            '
        '            Content.Add( AdminUI.EditTableClose)
        '            '
        '            ' Close form
        '            '
        '            If Button = ButtonOK Then
        '                Call cpCore.main_Redirect2(cpCore.app.SiteProperty_AdminURL, "EmailControl, OK Button Pressed", False)
        '                'Call cpCore.main_Redirect2(encodeAppRootPath(cpCore.main_GetSiteProperty2("AdminURL"), cpCore.main_ServerVirtualPath, cpCore.app.RootPath, cpCore.main_ServerHost))
        '            End If
        '            Content.Add( cpCore.main_GetFormInputHidden(RequestNameAdminSourceForm, AdminFormEmailControl))
        '        End If
        '        '
        '        Description = "This tool is used to control the Contensive Email processes."
        '        GetForm_EmailControl = AdminUI.GetBody( "Email Control", ButtonList, "", True, True, Description, "", 0, Content.Text)
        '    End If
        '    '
        '    '''Dim th as integer: Exit Function
        '    '
        '    ' ----- Error Trap
        '    '
        'ErrorTrap:
        '    Call HandleClassTrapErrorBubble("GetForm_EmailControl")
        'End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Private Function GetForm_Downloads() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Downloads")
            '
            Dim IsEmptyList As Boolean
            Dim ResultMessage As String
            Dim LinkPrefix As String
            Dim LinkSuffix As String
            Dim RemoteKey As String
            Dim Copy As String
            Dim Button As String
            Dim ButtonPanel As String
            Dim SaveAction As Boolean
            Dim helpCopy As String
            Dim FieldValue As String
            Dim PaymentProcessMethod As Integer
            Dim Argument1 As String
            Dim CS As Integer
            Dim ContactGroupCriteria As String
            Dim GroupCount As Integer
            Dim GroupPointer As Integer
            Dim GroupChecked As Boolean
            Dim RecordName As String
            Dim ContentName As String
            Dim RecordID As Integer
            Dim RowEven As Boolean
            Dim SQL As String
            Dim RQS As String
            Dim SubTab As Integer
            Dim FormSave As Boolean
            Dim FormClear As Boolean
            Dim ContactContentID As Integer
            Dim Criteria As String
            Dim ContentGorupCriteria As String
            Dim ContactSearchCriteria As String
            Dim FieldParms() As String
            Dim CriteriaValues As Object
            Dim CriteriaCount As Integer
            Dim CriteriaPointer As Integer
            Dim PageSize As Integer
            Dim PageNumber As Integer
            Dim TopCount As Integer
            Dim RowPointer As Integer
            Dim DataRowCount As Integer
            Dim PreTableCopy As String = ""
            Dim PostTableCopy As String = ""
            Dim ColumnPtr As Integer
            Dim ColCaption() As String
            Dim ColAlign() As String
            Dim ColWidth() As String
            Dim Cells As String(,)
            Dim GroupID As Integer
            Dim GroupToolAction As Integer
            Dim ActionPanel As String
            Dim RowCount As Integer
            Dim GroupName As String
            Dim MemberID As Integer
            Dim QS As String
            Dim VisitsCell As String
            Dim VisitCount As Integer
            Dim AdminURL As String
            Dim CCID As Integer
            Dim SQLValue As String
            Dim DefaultName As String
            Dim SearchCaption As String
            Dim BlankPanel As String
            Dim RowPageSize As String
            Dim RowGroups As String
            Dim GroupIDs() As String
            Dim GroupPtr As Integer
            Dim GroupDelimiter As String
            Dim DateCompleted As Date
            Dim RowCnt As Integer
            Dim RowPtr As Integer
            Dim ContentID As Integer
            Dim Format As String
            Dim TableName As String
            Dim Filename As String
            Dim Name As String
            Dim Caption As String
            Dim Description As String = ""
            Dim ButtonListLeft As String
            Dim ButtonListRight As String
            Dim ContentPadding As Integer
            Dim ContentSummary As String = ""
            Dim Tab0 As New stringBuilderLegacyController
            Dim Tab1 As New stringBuilderLegacyController
            Dim Content As String = ""
            Dim Cell As String
            Dim Adminui As New adminUIController(cpCore)
            Dim SQLFieldName As String
            '
            Const ColumnCnt = 5
            '
            Button = cpCore.docProperties.getText(RequestNameButton)
            If Button = ButtonCancel Then
                Call cpCore.webServer.redirect(cpCore.siteProperties.adminURL, "Downloads, Cancel Button Pressed", False)
            End If
            '
            If Not cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                '
                ' Must be a developer
                '
                ButtonListLeft = ButtonCancel
                ButtonListRight = ""
                Content = Content & Adminui.GetFormBodyAdminOnly()
            Else
                ContentID = cpCore.docProperties.getInteger("ContentID")
                Format = cpCore.docProperties.getText("Format")
                If False Then
                    SQLFieldName = "SQL"
                Else
                    SQLFieldName = "SQLQuery"
                End If
                '
                ' Process Requests
                '
                If Button <> "" Then
                    Select Case Button
                        Case ButtonDelete
                            RowCnt = cpCore.docProperties.getInteger("RowCnt")
                            If RowCnt > 0 Then
                                For RowPtr = 0 To RowCnt - 1
                                    If cpCore.docProperties.getBoolean("Row" & RowPtr) Then
                                        Call cpCore.DeleteContentRecord("Tasks", cpCore.docProperties.getInteger("RowID" & RowPtr))
                                    End If
                                Next
                            End If
                        Case ButtonRequestDownload
                            '
                            ' Request the download again
                            '
                            RowCnt = cpCore.docProperties.getInteger("RowCnt")
                            If RowCnt > 0 Then
                                For RowPtr = 0 To RowCnt - 1
                                    If cpCore.docProperties.getBoolean("Row" & RowPtr) Then
                                        Dim CSSrc As Integer
                                        Dim CSDst As Integer

                                        CSSrc = cpCore.csOpen("Tasks", cpCore.docProperties.getInteger("RowID" & RowPtr))
                                        If cpCore.db.cs_ok(CSSrc) Then
                                            CSDst = cpCore.InsertCSContent("Tasks")
                                            If cpCore.db.cs_ok(CSDst) Then
                                                Call cpCore.db.cs_set(CSDst, "Name", cpCore.db.cs_getText(CSSrc, "name"))
                                                Call cpCore.db.cs_set(CSDst, SQLFieldName, cpCore.db.cs_getText(CSSrc, SQLFieldName))
                                                If genericController.vbLCase(cpCore.db.cs_getText(CSSrc, "command")) = "xml" Then
                                                    Call cpCore.db.cs_set(CSDst, "Filename", "DupDownload_" & CStr(genericController.dateToSeconds(cpCore.app_startTime)) & CStr(genericController.GetRandomInteger()) & ".xml")
                                                    Call cpCore.db.cs_set(CSDst, "Command", "BUILDXML")
                                                Else
                                                    Call cpCore.db.cs_set(CSDst, "Filename", "DupDownload_" & CStr(genericController.dateToSeconds(cpCore.app_startTime)) & CStr(genericController.GetRandomInteger()) & ".csv")
                                                    Call cpCore.db.cs_set(CSDst, "Command", "BUILDCSV")
                                                End If
                                            End If
                                            Call cpCore.db.cs_Close(CSDst)
                                        End If
                                        Call cpCore.db.cs_Close(CSSrc)
                                    End If
                                Next
                            End If
                            '
                            '
                            '
                            If (Format <> "") And (ContentID = 0) Then
                                Description = Description & "<p>Please select a Content before requesting a download</p>"
                            ElseIf (Format = "") And (ContentID <> 0) Then
                                Description = Description & "<p>Please select a Format before requesting a download</p>"
                            ElseIf Format = "CSV" Then
                                CS = cpCore.InsertCSContent("Tasks")
                                If cpCore.db.cs_ok(CS) Then
                                    ContentName = cpCore.metaData.getContentNameByID(ContentID)
                                    TableName = cpCore.GetContentTablename(ContentName)
                                    Criteria = cpCore.metaData.content_getContentControlCriteria(ContentName)
                                    Name = "CSV Download, " & ContentName
                                    Filename = genericController.vbReplace(ContentName, " ", "") & "_" & CStr(genericController.dateToSeconds(cpCore.app_startTime)) & CStr(genericController.GetRandomInteger()) & ".csv"
                                    Call cpCore.db.cs_set(CS, "Name", Name)
                                    Call cpCore.db.cs_set(CS, "Filename", Filename)
                                    Call cpCore.db.cs_set(CS, "Command", "BUILDCSV")
                                    Call cpCore.db.cs_set(CS, SQLFieldName, "SELECT * from " & TableName & " where " & Criteria)
                                    Description = Description & "<p>Your CSV Download has been requested.</p>"
                                End If
                                Call cpCore.db.cs_Close(CS)
                                Format = ""
                                ContentID = 0
                            ElseIf Format = "XML" Then
                                CS = cpCore.InsertCSContent("Tasks")
                                If cpCore.db.cs_ok(CS) Then
                                    ContentName = cpCore.metaData.getContentNameByID(ContentID)
                                    TableName = cpCore.GetContentTablename(ContentName)
                                    Criteria = cpCore.metaData.content_getContentControlCriteria(ContentName)
                                    Name = "XML Download, " & ContentName
                                    Filename = genericController.vbReplace(ContentName, " ", "") & "_" & CStr(genericController.dateToSeconds(cpCore.app_startTime)) & CStr(genericController.GetRandomInteger()) & ".xml"
                                    Call cpCore.db.cs_set(CS, "Name", Name)
                                    Call cpCore.db.cs_set(CS, "Filename", Filename)
                                    Call cpCore.db.cs_set(CS, "Command", "BUILDXML")
                                    Call cpCore.db.cs_set(CS, SQLFieldName, "SELECT * from " & TableName & " where " & Criteria)
                                    Description = Description & "<p>Your XML Download has been requested.</p>"
                                End If
                                Call cpCore.db.cs_Close(CS)
                                Format = ""
                                ContentID = 0
                            End If
                    End Select
                End If
                '
                ' Build Tab0
                '
                'Tab0.Add( "<p>The following is a list of available downloads</p>")
                ''
                RQS = cpCore.htmlDoc.refreshQueryString
                PageSize = cpCore.docProperties.getInteger(RequestNamePageSize)
                If PageSize = 0 Then
                    PageSize = 50
                End If
                PageNumber = cpCore.docProperties.getInteger(RequestNamePageNumber)
                If PageNumber = 0 Then
                    PageNumber = 1
                End If
                AdminURL = cpCore.siteProperties.adminURL
                TopCount = PageNumber * PageSize
                '
                ' Setup Headings
                '
                ReDim ColCaption(ColumnCnt)
                ReDim ColAlign(ColumnCnt)
                ReDim ColWidth(ColumnCnt)
                ReDim Cells(PageSize, ColumnCnt)
                '
                ColCaption(ColumnPtr) = "Select<br><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=10 height=1>"
                ColAlign(ColumnPtr) = "center"
                ColWidth(ColumnPtr) = "10"
                ColumnPtr = ColumnPtr + 1
                '
                ColCaption(ColumnPtr) = "Name"
                ColAlign(ColumnPtr) = "left"
                ColWidth(ColumnPtr) = "100%"
                ColumnPtr = ColumnPtr + 1
                '
                ColCaption(ColumnPtr) = "For<br><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=100 height=1>"
                ColAlign(ColumnPtr) = "left"
                ColWidth(ColumnPtr) = "100"
                ColumnPtr = ColumnPtr + 1
                '
                ColCaption(ColumnPtr) = "Requested<br><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=150 height=1>"
                ColAlign(ColumnPtr) = "left"
                ColWidth(ColumnPtr) = "150"
                ColumnPtr = ColumnPtr + 1
                '
                ColCaption(ColumnPtr) = "File<br><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=100 height=1>"
                ColAlign(ColumnPtr) = "Left"
                ColWidth(ColumnPtr) = "100"
                ColumnPtr = ColumnPtr + 1
                '
                '   Get Data
                '
                SQL = "select M.Name as CreatedByName, T.* from ccTasks T left join ccMembers M on M.ID=T.CreatedBy where (T.Command='BuildCSV')or(T.Command='BuildXML') order by T.DateAdded Desc"
                'Call cpCore.main_TestPoint("Selection SQL=" & SQL)
                CS = cpCore.db.cs_openCsSql_rev("default", SQL, PageSize, PageNumber)
                RowPointer = 0
                If Not cpCore.db.cs_ok(CS) Then
                    Cells(0, 1) = "There are no download requests"
                    RowPointer = 1
                Else
                    DataRowCount = cpCore.db.cs_getRowCount(CS)
                    LinkPrefix = "<a href=""" & cpCore.serverConfig.appConfig.cdnFilesNetprefix
                    LinkSuffix = """ target=_blank>Available</a>"
                    Do While cpCore.db.cs_ok(CS) And (RowPointer < PageSize)
                        RecordID = cpCore.db.cs_getInteger(CS, "ID")
                        DateCompleted = cpCore.db.cs_getDate(CS, "DateCompleted")
                        ResultMessage = cpCore.db.cs_getText(CS, "ResultMessage")
                        Cells(RowPointer, 0) = cpCore.htmlDoc.html_GetFormInputCheckBox2("Row" & RowPointer) & cpCore.htmlDoc.html_GetFormInputHidden("RowID" & RowPointer, RecordID)
                        Cells(RowPointer, 1) = cpCore.db.cs_getText(CS, "name")
                        Cells(RowPointer, 2) = cpCore.db.cs_getText(CS, "CreatedByName")
                        Cells(RowPointer, 3) = cpCore.db.cs_getDate(CS, "DateAdded").ToShortDateString
                        If DateCompleted = Date.MinValue Then
                            RemoteKey = remoteQueryController.main_GetRemoteQueryKey(cpCore, "select DateCompleted,filename,resultMessage from cctasks where id=" & RecordID, "default", 1)
                            Cell = ""
                            Cell = Cell & vbCrLf & "<div id=""pending" & RowPointer & """>Pending <img src=""/ccLib/images/ajax-loader-small.gif"" width=16 height=16></div>"
                            '
                            Cell = Cell & vbCrLf & "<script>"
                            Cell = Cell & vbCrLf & "function statusHandler" & RowPointer & "(results) {"
                            Cell = Cell & vbCrLf & " var jo,isDone=false;"
                            Cell = Cell & vbCrLf & " eval('jo='+results);"
                            Cell = Cell & vbCrLf & " if (jo){"
                            Cell = Cell & vbCrLf & "  if(jo.DateCompleted) {"
                            Cell = Cell & vbCrLf & "    var dst=document.getElementById('pending" & RowPointer & "');"
                            Cell = Cell & vbCrLf & "    isDone=true;"
                            Cell = Cell & vbCrLf & "    if(jo.resultMessage=='OK') {"
                            Cell = Cell & vbCrLf & "      dst.innerHTML='" & LinkPrefix & "'+jo.filename+'" & LinkSuffix & "';"
                            Cell = Cell & vbCrLf & "    }else{"
                            Cell = Cell & vbCrLf & "      dst.innerHTML='error';"
                            Cell = Cell & vbCrLf & "    }"
                            Cell = Cell & vbCrLf & "  }"
                            Cell = Cell & vbCrLf & " }"
                            Cell = Cell & vbCrLf & " if(!isDone) setTimeout(""requestStatus" & RowPointer & "()"",5000)"
                            Cell = Cell & vbCrLf & "}"
                            '
                            Cell = Cell & vbCrLf & "function requestStatus" & RowPointer & "() {"
                            Cell = Cell & vbCrLf & "  cj.ajax.getNameValue(statusHandler" & RowPointer & ",'" & RemoteKey & "');"
                            Cell = Cell & vbCrLf & "}"
                            Cell = Cell & vbCrLf & "requestStatus" & RowPointer & "();"
                            Cell = Cell & vbCrLf & "</script>"
                            '
                            Cells(RowPointer, 4) = Cell
                        ElseIf ResultMessage = "ok" Then
                            Cells(RowPointer, 4) = "<div id=""pending" & RowPointer & """>" & LinkPrefix & cpCore.db.cs_getText(CS, "filename") & LinkSuffix & "</div>"
                        Else
                            Cells(RowPointer, 4) = "<div id=""pending" & RowPointer & """><a href=""javascript:alert('" & genericController.EncodeJavascript(ResultMessage) & ";return false');"">error</a></div>"
                        End If
                        RowPointer = RowPointer + 1
                        Call cpCore.db.cs_goNext(CS)
                    Loop
                End If
                Call cpCore.db.cs_Close(CS)
                Tab0.Add(cpCore.htmlDoc.html_GetFormInputHidden("RowCnt", RowPointer))
                Cell = cpCore.main_GetReport(RowPointer, ColCaption, ColAlign, ColWidth, Cells, PageSize, PageNumber, PreTableCopy, PostTableCopy, DataRowCount, "ccPanel")
                Tab0.Add(Cell)
                'Tab0.Add( "<div style=""height:200px;"">" & Cell & "</div>"
                '        '
                '        ' Build RequestContent Form
                '        '
                '        Tab1.Add( "<p>Use this form to request a download. Select the criteria for the download and click the [Request Download] button. The request should then appear on the requested download list in the other tab. When the download has been created, it will be become available.</p>")
                '        '
                '        Tab1.Add( "<table border=""0"" cellpadding=""3"" cellspacing=""0"" width=""100%"">")
                '        '
                '        Call Tab1.Add("<tr>")
                '        Call Tab1.Add("<td align=right>Content</td>")
                '        Call Tab1.Add("<td>" & cpCore.htmldoc.main_GetFormInputSelect2("ContentID", ContentID, "Content", "", "", "", IsEmptyList) & "</td>")
                '        Call Tab1.Add("</tr>")
                '        '
                '        Call Tab1.Add("<tr>")
                '        Call Tab1.Add("<td align=right>Format</td>")
                '        Call Tab1.Add("<td><select name=Format value=""" & Format & """><option value=CSV>CSV</option><option name=XML value=XML>XML</option></select></td>")
                '        Call Tab1.Add("</tr>")
                '        '
                '        Call Tab1.Add("" _
                '            & "<tr>" _
                '            & "<td width=""120""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""120"" height=""1""></td>" _
                '            & "<td width=""100%"">&nbsp;</td>" _
                '            & "</tr>" _
                '            & "</table>")
                '        '
                '        ' Build and add tabs
                '        '
                '        Call cpCore.htmldoc.main_AddLiveTabEntry("Current&nbsp;Downloads", Tab0.Text, "ccAdminTab")
                '        Call cpCore.htmldoc.main_AddLiveTabEntry("Request&nbsp;New&nbsp;Download", Tab1.Text, "ccAdminTab")
                '        Content = cpCore.htmldoc.main_GetLiveTabs()
                Content = Tab0.Text
                '
                ButtonListLeft = ButtonCancel & "," & ButtonRefresh & "," & ButtonDelete
                'ButtonListLeft = ButtonCancel & "," & ButtonRefresh & "," & ButtonDelete & "," & ButtonRequestDownload
                ButtonListRight = ""
                Content = Content & cpCore.htmlDoc.html_GetFormInputHidden(RequestNameAdminSourceForm, AdminFormDownloads)
            End If
            '
            Caption = "Download Manager"
            Description = "" _
                & "<p>The Download Manager holds all downloads requested from anywhere on the website. It also provides tools to request downloads from any Content.</p>" _
                & "<p>To add a new download of any content in Contensive, click Export on the filter tab of the content listing page. To add a new download from a SQL statement, use Custom Reports under Reports on the Navigator.</p>"
            ContentPadding = 0
            GetForm_Downloads = Adminui.GetBody(Caption, ButtonListLeft, ButtonListRight, True, True, Description, ContentSummary, ContentPadding, Content)
            '
            Call cpCore.htmlDoc.main_AddPagetitle(Caption)
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Downloads")
        End Function
        '
        '========================================================================
        '   Display field in the admin/edit
        '========================================================================
        '
        Private Function GetForm_Edit_AddTab(ByVal Caption As String, ByVal Content As String, ByVal AllowAdminTabs As Boolean) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_AddTab")
            '
            If Content <> "" Then
                If Not AllowAdminTabs Then
                    GetForm_Edit_AddTab = Content
                Else
                    Call cpCore.htmlDoc.menu_AddComboTabEntry(Replace(Caption, " ", "&nbsp;"), "", "", Content, False, "ccAdminTab")
                    'Call cpCore.htmldoc.main_AddLiveTabEntry(Replace(Caption, " ", "&nbsp;"), Content, "ccAdminTab")
                End If
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Edit_AddTab")
        End Function
        '
        '========================================================================
        '   Creates Tabbed content that is either Live (all content on page) or Ajax (click and ajax in the content)
        '========================================================================
        '
        Private Function GetForm_Edit_AddTab2(ByVal Caption As String, ByVal Content As String, ByVal AllowAdminTabs As Boolean, ByVal AjaxLink As String) As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_Edit_AddTab2")
            '
            If Not AllowAdminTabs Then
                '
                ' non-tab mode
                '
                GetForm_Edit_AddTab2 = Content
            ElseIf AjaxLink <> "" Then
                '
                ' Ajax Tab
                '
                Call cpCore.htmlDoc.menu_AddComboTabEntry(Replace(Caption, " ", "&nbsp;"), "", AjaxLink, "", False, "ccAdminTab")
            Else
                '
                ' Live Tab
                '
                Call cpCore.htmlDoc.menu_AddComboTabEntry(Replace(Caption, " ", "&nbsp;"), "", "", Content, False, "ccAdminTab")
            End If
            '
            Exit Function
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Edit_AddTab2")
        End Function
        '
        '=============================================================================
        ' Create a child content
        '=============================================================================
        '
        Private Function GetForm_PageContentMap() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_PageContentMap")
            '
            GetForm_PageContentMap = "<p>The Page Content Map has been replaced with the Site Explorer, available as an Add-on through the Add-on Manager.</p>"
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_PageContentMap")
        End Function
        '
        '
        '
        Private Function GetForm_Edit_Tabs(adminContent As cdefModel, editRecord As editRecordClass, ByVal readOnlyField As Boolean, ByVal IsLandingPage As Boolean, ByVal IsRootPage As Boolean, ByVal EditorContext As csv_contentTypeEnum, ByVal allowAjaxTabs As Boolean, ByVal TemplateIDForStyles As Integer, ByVal fieldTypeDefaultEditors As String(), ByVal fieldEditorPreferenceList As String, ByVal styleList As String, ByVal styleOptionList As String, ByVal emailIdForStyles As Integer, ByVal IsTemplateTable As Boolean, ByVal editorAddonListJSON As String) As String
            Dim returnHtml As String = ""
            Try
                '
                Dim tabContent As String
                Dim AjaxLink As String
                Dim TabsFound As New List(Of String)
                Dim editTabCaption As String
                Dim NewFormFieldList As String
                Dim FormFieldList As String
                Dim AllowHelpMsgCustom As Boolean
                Dim IDList As String
                Dim dt As DataTable
                Dim TempVar As String(,)
                Dim HelpCnt As Integer
                Dim fieldId As Integer
                Dim LastFieldID As Integer
                Dim HelpPtr As Integer
                Dim HelpIDCache() As Integer = {}
                Dim helpDefaultCache() As String = {}
                Dim HelpCustomCache() As String = {}
                Dim helpIdIndex As New keyPtrController
                Dim fieldNameLc As String
                '
                ' ----- read in help
                '
                IDList = ""
                For Each keyValuePair As KeyValuePair(Of String, CDefFieldModel) In adminContent.fields
                    Dim field As CDefFieldModel = keyValuePair.Value
                    IDList = IDList & "," & field.id
                Next
                If IDList <> "" Then
                    IDList = Mid(IDList, 2)
                End If
                '
                dt = cpCore.db.executeSql("select fieldid,helpdefault,helpcustom from ccfieldhelp where fieldid in (" & IDList & ") order by fieldid,id")
                TempVar = cpCore.db.convertDataTabletoArray(dt)
                If TempVar.GetLength(0) > 0 Then
                    HelpCnt = UBound(TempVar, 2) + 1
                    ReDim HelpIDCache(HelpCnt)
                    ReDim helpDefaultCache(HelpCnt)
                    ReDim HelpCustomCache(HelpCnt)
                    fieldId = -1
                    For HelpPtr = 0 To HelpCnt - 1
                        fieldId = genericController.EncodeInteger(TempVar(0, HelpPtr))
                        If fieldId <> LastFieldID Then
                            LastFieldID = fieldId
                            HelpIDCache(HelpPtr) = fieldId
                            Call helpIdIndex.setPtr(CStr(fieldId), HelpPtr)
                            helpDefaultCache(HelpPtr) = genericController.encodeText(TempVar(1, HelpPtr))
                            HelpCustomCache(HelpPtr) = genericController.encodeText(TempVar(2, HelpPtr))
                        End If
                    Next
                    AllowHelpMsgCustom = True
                End If
                '
                FormFieldList = ","
                For Each keyValuePair As KeyValuePair(Of String, CDefFieldModel) In adminContent.fields
                    Dim field As CDefFieldModel = keyValuePair.Value
                    If (field.authorable) And (field.active) And (Not TabsFound.Contains(field.editTabName.ToLower())) Then
                        TabsFound.Add(field.editTabName.ToLower())
                        fieldNameLc = field.nameLc
                        editTabCaption = field.editTabName
                        If editTabCaption = "" Then
                            editTabCaption = "Details"
                        End If
                        NewFormFieldList = ""
                        If (Not allowAdminTabs) Or (Not allowAjaxTabs) Or (editTabCaption.ToLower() = "details") Then
                            '
                            ' Live Tab (non-tab mode, non-ajax mode, or details tab
                            '
                            tabContent = GetForm_Edit_Tab(adminContent, editRecord, editRecord.id, adminContent.Id, readOnlyField, IsLandingPage, IsRootPage, field.editTabName, EditorContext, NewFormFieldList, TemplateIDForStyles, HelpCnt, HelpIDCache, helpDefaultCache, HelpCustomCache, AllowHelpMsgCustom, helpIdIndex, fieldTypeDefaultEditors, fieldEditorPreferenceList, styleList, styleOptionList, emailIdForStyles, IsTemplateTable, editorAddonListJSON)
                            If tabContent <> "" Then
                                returnHtml &= GetForm_Edit_AddTab2(editTabCaption, tabContent, allowAdminTabs, "")
                            End If
                        Else
                            '
                            ' Ajax Tab
                            '
                            'AjaxLink = "/admin/index.asp?"
                            AjaxLink = cpCore.siteProperties.adminURL & "?" _
                            & RequestNameAjaxFunction & "=" & AjaxGetFormEditTabContent _
                            & "&ID=" & editRecord.id _
                            & "&CID=" & adminContent.Id _
                            & "&ReadOnly=" & readOnlyField _
                            & "&IsLandingPage=" & IsLandingPage _
                            & "&IsRootPage=" & IsRootPage _
                            & "&EditTab=" & genericController.EncodeRequestVariable(field.editTabName) _
                            & "&EditorContext=" & EditorContext _
                            & "&NewFormFieldList=" & genericController.EncodeRequestVariable(NewFormFieldList)
                            returnHtml &= GetForm_Edit_AddTab2(editTabCaption, "", True, AjaxLink)
                        End If
                        If NewFormFieldList <> "" Then
                            FormFieldList = NewFormFieldList & FormFieldList
                        End If
                    End If
                Next
                '
                ' ----- add the FormFieldList hidden - used on read to make sure all fields are returned
                '       this may not be needed, but we are having a problem with forms coming back without values
                '
                '
                ' moved this to GetEditTabContent - so one is added for each tab.
                '
                returnHtml &= cpCore.htmlDoc.html_GetFormInputHidden("FormFieldList", FormFieldList)
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return returnHtml
        End Function
        '        '
        '        ' Delete this when I can verify the Csvr patch to the instream process works
        '        '
        '        Private Sub VerifyDynamicMenuStyleSheet(ByVal MenuID As Integer)
        '            On Error GoTo ErrorTrap : ''Dim th as integer : th = profileLogAdminMethodEnter("VerifyDynamicMenuStyleSheet")
        '            '
        '            Dim StyleSN As String
        '            Dim EditTabCaption As String
        '            Dim ACTags() As String
        '            Dim TagPtr As Integer
        '            Dim QSPos As Integer
        '            Dim QSPosEnd As Integer
        '            Dim QS As String
        '            Dim MenuName As String
        '            Dim StylePrefix As String
        '            Dim CS As Integer
        '            Dim IsFound As Boolean
        '            Dim StyleSheet As String
        '            Dim DefaultStyles As String
        '            Dim DynamicStyles As String
        '            Dim AddStyles As String
        '            Dim StyleSplit() As String
        '            Dim StylePtr As Integer
        '            Dim StyleLine As String
        '            Dim Filename As String
        '            Dim NewStyleLine As String
        '            Dim TestSTyles As String

        '            '
        '            CS = cpCore.main_OpenCSContentRecord("Dynamic Menus", MenuID)
        '            If cpCore.app.IsCSOK(CS) Then
        '                StylePrefix = cpCore.db.cs_getText(CS, "StylePrefix")
        '                If StylePrefix <> "" And genericController.vbUCase(StylePrefix) <> "CCFLYOUT" Then
        '                    if true then ' 3.3.951" Then
        '                        TestSTyles = cpCore.app.cs_get(CS, "StylesFilename")
        '                    Else
        '                        TestSTyles = cpCore.main_GetStyleSheet
        '                    End If
        '                    If genericController.vbInstr(1, TestSTyles, "." & StylePrefix, vbTextCompare) = 0 Then
        '                        '
        '                        ' style not found, get the default ccFlyout styles
        '                        '
        '                        DefaultStyles = RemoveStyleTags(cpCore.cluster.programDataFiles.ReadFile("ccLib\" & "Styles\" & defaultStyleFilename))
        '                        'DefaultStyles = genericController.vbReplace(DefaultStyles, vbCrLf, " ")
        '                        Do While genericController.vbInstr(1, DefaultStyles, "  ") <> 0
        '                            DefaultStyles = genericController.vbReplace(DefaultStyles, "  ", " ")
        '                        Loop
        '                        StyleSplit = Split(DefaultStyles, "}")
        '                        For StylePtr = 0 To UBound(StyleSplit)
        '                            StyleLine = StyleSplit(StylePtr)
        '                            If StyleLine <> "" Then
        '                                If genericController.vbInstr(1, StyleLine, ".ccflyout", vbTextCompare) <> 0 Then
        '                                    StyleLine = genericController.vbReplace(StyleLine, vbCrLf, " ")
        '                                    StyleLine = genericController.vbReplace(StyleLine, ".ccflyout", "." & StylePrefix, vbTextCompare)
        '                                    Do While Left(StyleLine, 1) = " "
        '                                        StyleLine = Mid(StyleLine, 2)
        '                                    Loop
        '                                    AddStyles = AddStyles & StyleLine & "}" & vbCrLf
        '                                End If
        '                            End If
        '                        Next
        '                        If AddStyles <> "" Then
        '                            '
        '                            '
        '                            '
        '                            if true then ' 3.3.951" Then
        '                                '
        '                                ' Add new styles to the StylesFilename field
        '                                '
        '                                DynamicStyles = "" _
        '                                    & cpCore.app.cs_get(CS, "StylesFilename") _
        '                                    & vbCrLf & "" _
        '                                    & vbCrLf & "/* Menu Styles for Style Prefix [" & StylePrefix & "] created " & nt(cpCore.main_PageStartTime.toshortdateString & " */" _
        '                                    & vbCrLf & "" _
        '                                    & vbCrLf & AddStyles _
        '                                    & ""
        '                                Call cpCore.app.SetCS(CS, "StylesFilename", DynamicStyles)
        '                            Else
        '                                '
        '                                ' Legacy - add styles to the site stylesheet
        '                                '
        '                                Filename = cpCore.app.confxxxig.physicalFilePath & DynamicStylesFilename
        '                                DynamicStyles = RemoveStyleTags(cpCore.app.publicFiles.ReadFile(Filename)) & vbCrLf & AddStyles
        '                                Call cpCore.app.publicFiles.SaveFile(Filename, DynamicStyles)
        '                                '
        '                                ' Now create admin and public stylesheets from the styles.css styles
        '                                '
        '                                StyleSN = (cpCore.app.siteProperty_getInteger("StylesheetSerialNumber", "0"))
        '                                If StyleSN <> 0 Then
        '                                    ' mark to rebuild next fetch
        '                                    Call cpCore.app.siteProperty_set("StylesheetSerialNumber", "-1")
        '                                    '' Linked Styles
        '                                    '' Bump the Style Serial Number so next fetch is not cached
        '                                    ''
        '                                    'StyleSN = StyleSN + 1
        '                                    'Call cpCore.app.setSiteProperty("StylesheetSerialNumber", StyleSN)
        '                                    ''
        '                                    '' Save new public stylesheet
        '                                    ''
        '                                    '' 11/24/2009 - style sheet processing deprecated
        '                                    'Call cpCore.app.publicFiles.SaveFile("templates\Public" & StyleSN & ".css", cpCore.main_GetStyleSheet)
        '                                    ''Call cpCore.app.publicFiles.SaveFile("templates\Public" & StyleSN & ".css", cpCore.main_GetStyleSheetProcessed)
        '                                    'Call cpCore.app.publicFiles.SaveFile("templates\Admin" & StyleSN & ".css", cpCore.main_GetStyleSheetDefault)
        '                                End If
        '                            End If
        '                        End If
        '                    End If
        '                End If
        '            End If
        '            Call cpCore.app.closeCS(CS)
        '            '
        '            Exit Sub
        '            '
        '            ' ----- Error Trap
        '            '
        'ErrorTrap:
        '            Call handleLegacyClassError3("GetForm_Edit_UserFieldTabs")
        '        End Sub
        '
        '========================================================================
        '
        '========================================================================
        '
        Private Function GetForm_CustomReports() As String
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_CustomReports")
            '
            Dim Copy As String
            Dim Button As String
            Dim ButtonPanel As String
            Dim SaveAction As Boolean
            Dim helpCopy As String
            Dim FieldValue As String
            Dim PaymentProcessMethod As Integer
            Dim Argument1 As String
            Dim CS As Integer
            Dim ContactGroupCriteria As String
            Dim GroupCount As Integer
            Dim GroupPointer As Integer
            Dim GroupChecked As Boolean
            Dim RecordName As String
            Dim ContentName As String
            Dim RecordID As Integer
            Dim RowEven As Boolean
            Dim SQL As String
            Dim RQS As String
            Dim SubTab As Integer
            Dim FormSave As Boolean
            Dim FormClear As Boolean
            Dim ContactContentID As Integer
            Dim Criteria As String
            Dim ContentGorupCriteria As String
            Dim ContactSearchCriteria As String
            Dim FieldParms() As String
            Dim CriteriaValues As Object
            Dim CriteriaCount As Integer
            Dim CriteriaPointer As Integer
            Dim PageSize As Integer
            Dim PageNumber As Integer
            Dim TopCount As Integer
            Dim RowPointer As Integer
            Dim DataRowCount As Integer
            Dim PreTableCopy As String = ""
            Dim PostTableCopy As String = ""
            Dim ColumnPtr As Integer
            Dim ColCaption() As String
            Dim ColAlign() As String
            Dim ColWidth() As String
            Dim Cells As String(,)
            Dim GroupID As Integer
            Dim GroupToolAction As Integer
            Dim ActionPanel As String
            Dim RowCount As Integer
            Dim GroupName As String
            Dim MemberID As Integer
            Dim QS As String
            Dim VisitsCell As String
            Dim VisitCount As Integer
            Dim AdminURL As String
            Dim CCID As Integer
            Dim SQLValue As String
            Dim DefaultName As String
            Dim SearchCaption As String
            Dim BlankPanel As String
            Dim RowPageSize As String
            Dim RowGroups As String
            Dim GroupIDs() As String
            Dim GroupPtr As Integer
            Dim GroupDelimiter As String
            Dim DateCompleted As Date
            Dim RowCnt As Integer
            Dim RowPtr As Integer
            Dim ContentID As Integer
            Dim Format As String
            Dim TableName As String
            Dim Filename As String
            Dim Name As String
            Dim Caption As String
            Dim Description As String
            Dim ButtonListLeft As String
            Dim ButtonListRight As String
            Dim ContentPadding As Integer
            Dim ContentSummary As String = ""
            Dim Tab0 As New stringBuilderLegacyController
            Dim Tab1 As New stringBuilderLegacyController
            Dim Content As String = ""
            Dim SQLFieldName As String
            '
            Const ColumnCnt = 4
            '
            Button = cpCore.docProperties.getText(RequestNameButton)
            ContentID = cpCore.docProperties.getInteger("ContentID")
            Format = cpCore.docProperties.getText("Format")
            '
            Caption = "Custom Report Manager"
            Description = "Custom Reports are a way for you to create a snapshot of data to view or download. To request a report, select the Custom Reports tab, check the report(s) you want, and click the [Request Download] Button. When your report is ready, it will be available in the <a href=""?" & RequestNameAdminForm & "=30"">Download Manager</a>. To create a new custom report, select the Request New Report tab, enter a name and SQL statement, and click the Apply button."
            ContentPadding = 0
            ButtonListLeft = ButtonCancel & "," & ButtonDelete & "," & ButtonRequestDownload
            'ButtonListLeft = ButtonCancel & "," & ButtonDelete & "," & ButtonRequestDownload & "," & ButtonApply
            ButtonListRight = ""
            If False Then
                SQLFieldName = "SQL"
            Else
                SQLFieldName = "SQLQuery"
            End If
            '
            If Not cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                '
                ' Must be a developer
                '
                Description = Description & "You can not access the Custom Report Manager because your account is not configured as an administrator."
            Else
                '
                ' Process Requests
                '
                If Button <> "" Then
                    Select Case Button
                        Case ButtonCancel
                            Call cpCore.webServer.redirect(cpCore.siteProperties.adminURL, "CustomReports, Cancel Button Pressed", False)
                            'Call cpCore.main_Redirect2(encodeAppRootPath(cpCore.main_GetSiteProperty2("AdminURL"), cpCore.main_ServerVirtualPath, cpCore.app.RootPath, cpCore.main_ServerHost))
                        Case ButtonDelete
                            RowCnt = cpCore.docProperties.getInteger("RowCnt")
                            If RowCnt > 0 Then
                                For RowPtr = 0 To RowCnt - 1
                                    If cpCore.docProperties.getBoolean("Row" & RowPtr) Then
                                        Call cpCore.DeleteContentRecord("Custom Reports", cpCore.docProperties.getInteger("RowID" & RowPtr))
                                    End If
                                Next
                            End If
                        Case ButtonRequestDownload, ButtonApply
                            '
                            Name = cpCore.docProperties.getText("name")
                            SQL = cpCore.docProperties.getText(SQLFieldName)
                            If Name <> "" Or SQL <> "" Then
                                If (Name = "") Or (SQL = "") Then
                                    cpCore.error_AddUserError("A name and SQL Query are required to save a new custom report.")
                                Else
                                    CS = cpCore.db.cs_insertRecord("Custom Reports")
                                    If cpCore.db.cs_ok(CS) Then
                                        Call cpCore.db.cs_set(CS, "Name", Name)
                                        Call cpCore.db.cs_set(CS, SQLFieldName, SQL)
                                    End If
                                    Call cpCore.db.cs_Close(CS)
                                End If
                            End If
                            '
                            RowCnt = cpCore.docProperties.getInteger("RowCnt")
                            If RowCnt > 0 Then
                                For RowPtr = 0 To RowCnt - 1
                                    If cpCore.docProperties.getBoolean("Row" & RowPtr) Then
                                        RecordID = cpCore.docProperties.getInteger("RowID" & RowPtr)
                                        CS = cpCore.csOpen("Custom Reports", RecordID)
                                        If cpCore.db.cs_ok(CS) Then
                                            SQL = cpCore.db.cs_getText(CS, SQLFieldName)
                                            Name = cpCore.db.cs_getText(CS, "Name")
                                        End If
                                        Call cpCore.db.cs_Close(CS)
                                        '
                                        CS = cpCore.InsertCSContent("Tasks")
                                        If cpCore.db.cs_ok(CS) Then
                                            RecordName = "CSV Download, Custom Report [" & Name & "]"
                                            Filename = "CustomReport_" & CStr(genericController.dateToSeconds(cpCore.app_startTime)) & CStr(genericController.GetRandomInteger()) & ".csv"
                                            Call cpCore.db.cs_set(CS, "Name", RecordName)
                                            Call cpCore.db.cs_set(CS, "Filename", Filename)
                                            If Format = "XML" Then
                                                Call cpCore.db.cs_set(CS, "Command", "BUILDXML")
                                            Else
                                                Call cpCore.db.cs_set(CS, "Command", "BUILDCSV")
                                            End If
                                            Call cpCore.db.cs_set(CS, SQLFieldName, SQL)
                                            Description = Description & "<p>Your Download [" & Name & "] has been requested, and will be available in the <a href=""?" & RequestNameAdminForm & "=30"">Download Manager</a> when it is complete. This may take a few minutes depending on the size of the report.</p>"
                                        End If
                                        Call cpCore.db.cs_Close(CS)
                                    End If
                                Next
                            End If
                    End Select
                End If
                '
                ' Build Tab0
                '
                Tab0.Add("<p>The following is a list of available custom reports.</p>")
                '
                RQS = cpCore.htmlDoc.refreshQueryString
                PageSize = cpCore.docProperties.getInteger(RequestNamePageSize)
                If PageSize = 0 Then
                    PageSize = 50
                End If
                PageNumber = cpCore.docProperties.getInteger(RequestNamePageNumber)
                If PageNumber = 0 Then
                    PageNumber = 1
                End If
                AdminURL = cpCore.siteProperties.adminURL
                TopCount = PageNumber * PageSize
                '
                ' Setup Headings
                '
                ReDim ColCaption(ColumnCnt)
                ReDim ColAlign(ColumnCnt)
                ReDim ColWidth(ColumnCnt)
                ReDim Cells(PageSize, ColumnCnt)
                '
                ColCaption(ColumnPtr) = "Select<br><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=10 height=1>"
                ColAlign(ColumnPtr) = "center"
                ColWidth(ColumnPtr) = "10"
                ColumnPtr = ColumnPtr + 1
                '
                ColCaption(ColumnPtr) = "Name"
                ColAlign(ColumnPtr) = "left"
                ColWidth(ColumnPtr) = "100%"
                ColumnPtr = ColumnPtr + 1
                '
                ColCaption(ColumnPtr) = "Created By<br><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=100 height=1>"
                ColAlign(ColumnPtr) = "left"
                ColWidth(ColumnPtr) = "100"
                ColumnPtr = ColumnPtr + 1
                '
                ColCaption(ColumnPtr) = "Date Created<br><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=150 height=1>"
                ColAlign(ColumnPtr) = "left"
                ColWidth(ColumnPtr) = "150"
                ColumnPtr = ColumnPtr + 1
                ''
                'ColCaption(ColumnPtr) = "?<br><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=100 height=1>"
                'ColAlign(ColumnPtr) = "Left"
                'ColWidth(ColumnPtr) = "100"
                'ColumnPtr = ColumnPtr + 1
                '
                '   Get Data
                '
                CS = cpCore.db.cs_open("Custom Reports")
                RowPointer = 0
                If Not cpCore.db.cs_ok(CS) Then
                    Cells(0, 1) = "There are no custom reports defined"
                    RowPointer = 1
                Else
                    DataRowCount = cpCore.db.cs_getRowCount(CS)
                    Do While cpCore.db.cs_ok(CS) And (RowPointer < PageSize)
                        RecordID = cpCore.db.cs_getInteger(CS, "ID")
                        'DateCompleted = cpCore.db.cs_getDate(CS, "DateCompleted")
                        Cells(RowPointer, 0) = cpCore.htmlDoc.html_GetFormInputCheckBox2("Row" & RowPointer) & cpCore.htmlDoc.html_GetFormInputHidden("RowID" & RowPointer, RecordID)
                        Cells(RowPointer, 1) = cpCore.db.cs_getText(CS, "name")
                        Cells(RowPointer, 2) = cpCore.db.cs_get(CS, "CreatedBy")
                        Cells(RowPointer, 3) = cpCore.db.cs_getDate(CS, "DateAdded").ToShortDateString
                        'Cells(RowPointer, 4) = "&nbsp;"
                        RowPointer = RowPointer + 1
                        Call cpCore.db.cs_goNext(CS)
                    Loop
                End If
                Call cpCore.db.cs_Close(CS)
                Dim Cell As String
                Tab0.Add(cpCore.htmlDoc.html_GetFormInputHidden("RowCnt", RowPointer))
                Cell = cpCore.main_GetReport(RowPointer, ColCaption, ColAlign, ColWidth, Cells, PageSize, PageNumber, PreTableCopy, PostTableCopy, DataRowCount, "ccPanel")
                Tab0.Add("<div>" & Cell & "</div>")
                '
                ' Build RequestContent Form
                '
                Tab1.Add("<p>Use this form to create a new custom report. Enter the SQL Query for the report, and a name that will be used as a caption.</p>")
                '
                Tab1.Add("<table border=""0"" cellpadding=""3"" cellspacing=""0"" width=""100%"">")
                '
                Call Tab1.Add("<tr>")
                Call Tab1.Add("<td align=right>Name</td>")
                Call Tab1.Add("<td>" & cpCore.htmlDoc.html_GetFormInputText2("Name", "", 1, 40) & "</td>")
                Call Tab1.Add("</tr>")
                '
                Call Tab1.Add("<tr>")
                Call Tab1.Add("<td align=right>SQL Query</td>")
                Call Tab1.Add("<td>" & cpCore.htmlDoc.html_GetFormInputText2(SQLFieldName, "", 8, 40) & "</td>")
                Call Tab1.Add("</tr>")
                '
                Call Tab1.Add("" _
                    & "<tr>" _
                    & "<td width=""120""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""120"" height=""1""></td>" _
                    & "<td width=""100%"">&nbsp;</td>" _
                    & "</tr>" _
                    & "</table>")
                '
                ' Build and add tabs
                '
                Call cpCore.htmlDoc.main_AddLiveTabEntry("Custom&nbsp;Reports", Tab0.Text, "ccAdminTab")
                Call cpCore.htmlDoc.main_AddLiveTabEntry("Request&nbsp;New&nbsp;Report", Tab1.Text, "ccAdminTab")
                Content = cpCore.htmlDoc.main_GetLiveTabs()
                '
            End If
            '
            GetForm_CustomReports = admin_GetAdminFormBody(Caption, ButtonListLeft, ButtonListRight, True, True, Description, ContentSummary, ContentPadding, Content)
            '
            Call cpCore.htmlDoc.main_AddPagetitle("Custom Reports")
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_CustomReports")
        End Function
        '
        '========================================================================
        '   Print the index form, values and all
        '       creates a sql with leftjoins, and renames lookups as TableLookupxName
        '       where x is the TarGetFieldPtr of the field that is FieldTypeLookup
        '
        '   Input:
        '       AdminContent.contenttablename is required
        '       OrderByFieldPtr
        '       OrderByDirection
        '       RecordTop
        '       RecordsPerPage
        '       Findstring( ColumnPointer )
        '========================================================================
        '
        Private Function GetForm_Index(adminContent As cdefModel, editRecord As editRecordClass, ByVal IsEmailContent As Boolean) As String
            Dim returnForm As String = ""
            Try
                Const FilterClosedLabel = "<div style=""font-size:9px;text-align:center;"">&nbsp;<br>F<br>i<br>l<br>t<br>e<br>r<br>s</div>"
                '
                Dim Copy As String = ""
                Dim RightCopy As String
                Dim TitleRows As Integer
                ' refactor -- is was using pagemanager code, and it only detected if the page is the current domain's 
                'Dim LandingPageID As Integer
                'Dim IsPageContent As Boolean
                'Dim IsLandingPage As Boolean
                Dim PageCount As Integer
                Dim AllowAdd As Boolean
                Dim AllowDelete As Boolean
                Dim recordCnt As Integer
                Dim AllowAccessToContent As Boolean
                Dim ContentName As String
                Dim ContentAccessLimitMessage As String = ""
                Dim IsLimitedToSubContent As Boolean
                Dim GroupList As String = ""
                Dim Groups() As String
                Dim FieldCaption As String
                Dim SubTitle As String
                Dim SubTitlePart As String
                Dim Title As String
                Dim AjaxQS As String
                Dim FilterColumn As String = ""
                Dim DataColumn As String
                Dim DataTable_DataRows As String = ""
                Dim FilterDataTable As String = ""
                Dim DataTable_FindRow As String = ""
                Dim DataTable As String
                Dim DataTable_HdrRow As String = ""
                Dim IndexFilterContent As String = ""
                Dim IndexFilterHead As String = ""
                Dim IndexFilterJS As String = ""
                Dim IndexFilterOpen As Boolean
                Dim IndexConfig As indexConfigClass
                Dim Ptr As Integer
                Dim SortTitle As String
                Dim HeaderDescription As String = ""
                Dim AllowFilterNav As Boolean
                Dim ColumnPointer As Integer
                Dim WhereCount As Integer
                Dim sqlWhere As String = ""
                Dim sqlOrderBy As String = ""
                Dim sqlFieldList As String = ""
                Dim sqlFrom As String = ""
                Dim CS As Integer
                Dim SQL As String
                Dim RowColor As String = ""
                Dim RecordPointer As Integer
                Dim RecordLast As Integer
                Dim RecordTop_NextPage As Integer
                Dim RecordTop_PreviousPage As Integer
                Dim ColumnWidth As Integer
                Dim ButtonBar As String
                Dim TitleBar As String
                Dim FindWordValue As String
                Dim ButtonObject As String
                Dim ButtonFace As String
                Dim ButtonHref As String
                Dim URI As String
                'Dim DataSourceName As String
                'Dim DataSourceType As Integer
                Dim FieldName As String
                Dim FieldUsedInColumns As New Dictionary(Of String, Boolean)                 ' used to prevent select SQL from being sorted by a field that does not appear
                Dim ColumnWidthTotal As Integer
                Dim SubForm As Integer
                Dim Stream As New stringBuilderLegacyController
                Dim RecordID As Integer
                Dim RecordName As String
                Dim LeftButtons As String = ""
                Dim RightButtons As String = ""
                Dim Adminui As New adminUIController(cpCore)
                Dim IsLookupFieldValid As New Dictionary(Of String, Boolean)
                Dim allowCMEdit As Boolean
                Dim allowCMAdd As Boolean
                Dim allowCMDelete As Boolean
                '
                ' --- make sure required fields are present
                '
                If adminContent.Id = 0 Then
                    '
                    ' Bad content id
                    '
                    Stream.Add(GetForm_Error(
                        "This form requires a valid content definition, and one was not found for content ID [" & adminContent.Id & "]." _
                        , "No content definition was specified [ContentID=0]. Please contact your application developer for more assistance."
                        ))
                ElseIf adminContent.Name = "" Then
                    '
                    ' Bad content name
                    '
                    Stream.Add(GetForm_Error(
                        "No content definition could be found for ContentID [" & adminContent.Id & "]. This could be a menu error. Please contact your application developer for more assistance." _
                        , "No content definition for ContentID [" & adminContent.Id & "] could be found."
                        ))
                ElseIf adminContent.ContentTableName = "" Then
                    '
                    ' No tablename
                    '
                    Stream.Add(GetForm_Error(
                        "The content definition [" & adminContent.Name & "] is not associated with a valid database table. Please contact your application developer for more assistance." _
                        , "Content [" & adminContent.Name & "] ContentTablename is empty."
                        ))
                ElseIf adminContent.fields.Count = 0 Then
                    '
                    ' No Fields
                    '
                    Stream.Add(GetForm_Error(
                        "This content [" & adminContent.Name & "] cannot be accessed because it has no fields. Please contact your application developer for more assistance." _
                        , "Content [" & adminContent.Name & "] has no field records."
                        ))
                ElseIf (adminContent.DeveloperOnly And (Not cpCore.authContext.isAuthenticatedDeveloper(cpCore))) Then
                    '
                    ' Developer Content and not developer
                    '
                    Stream.Add(GetForm_Error(
                        "Access to this content [" & adminContent.Name & "] requires developer permissions. Please contact your application developer for more assistance." _
                        , "Content [" & adminContent.Name & "] has no field records."
                        ))
                Else
                    Dim datasource As Models.Entity.dataSourceModel = Models.Entity.dataSourceModel.create(cpCore, adminContent.dataSourceId, New List(Of String))
                    '
                    ' get access rights
                    '
                    Call cpCore.authContext.getContentAccessRights(cpCore, adminContent.Name, allowCMEdit, allowCMAdd, allowCMDelete)
                    '
                    ' detemine which subform to disaply
                    '
                    SubForm = cpCore.docProperties.getInteger(RequestNameAdminSubForm)
                    If SubForm <> 0 Then
                        Select Case SubForm
                            Case AdminFormIndex_SubFormExport
                                Copy = GetForm_Index_Export(adminContent, editRecord)
                            Case AdminFormIndex_SubFormSetColumns
                                Copy = GetForm_Index_SetColumns(adminContent, editRecord)
                            Case AdminFormIndex_SubFormAdvancedSearch
                                Copy = GetForm_Index_AdvancedSearch(adminContent, editRecord)
                        End Select
                    End If
                    Call Stream.Add(Copy)
                    If Copy = "" Then
                        '
                        ' If subforms return empty, go to parent form
                        '
                        AllowFilterNav = True
                        '
                        ' values needed for both SetINdexSQL and after
                        '
                        'DataSourceName = cpCore.db.getDataSourceNameByID(adminContent.dataSourceId)
                        'DataSourceType = cpCore.db.getDataSourceType(DataSourceName)
                        IndexConfig = LoadIndexConfig(adminContent)
                        '
                        ' Get the SQL parts
                        '
                        Call SetIndexSQL(adminContent, editRecord, AllowAccessToContent, sqlFieldList, sqlFrom, sqlWhere, sqlOrderBy, IsLimitedToSubContent, ContentAccessLimitMessage, FieldUsedInColumns, IsLookupFieldValid, IndexConfig, datasource.Name, datasource.type, IndexConfig.RecordTop, IndexConfig.RecordsPerPage)
                        If (Not allowCMEdit) Or (Not AllowAccessToContent) Then
                            '
                            ' two conditions should be the same -- but not time to check - This user does not have access to this content
                            '
                            Call cpCore.error_AddUserError("Your account does not have access to any records in '" & adminContent.Name & "'.")
                        Else
                            '
                            ' Get the total record count
                            '
                            SQL = "select count(" & adminContent.ContentTableName & ".ID) as cnt from " & sqlFrom
                            If sqlWhere <> "" Then
                                SQL &= " where " & sqlWhere
                            End If
                            CS = cpCore.db.cs_openCsSql_rev(datasource.Name, SQL)
                            If cpCore.db.cs_ok(CS) Then
                                recordCnt = cpCore.db.cs_getInteger(CS, "cnt")
                            End If
                            Call cpCore.db.cs_Close(CS)
                            '
                            ' Assumble the SQL
                            '
                            SQL = "select"
                            If datasource.type <> DataSourceTypeODBCMySQL Then
                                SQL &= " Top " & (IndexConfig.RecordTop + IndexConfig.RecordsPerPage)
                            End If
                            SQL &= " " & sqlFieldList & " From " & sqlFrom
                            If sqlWhere <> "" Then
                                SQL &= " WHERE " & sqlWhere
                            End If
                            If sqlOrderBy <> "" Then
                                SQL &= " Order By" & sqlOrderBy
                            End If
                            If datasource.type = DataSourceTypeODBCMySQL Then
                                SQL &= " Limit " & (IndexConfig.RecordTop + IndexConfig.RecordsPerPage)
                            End If
                            '
                            ' Refresh Query String
                            '
                            Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("tr", IndexConfig.RecordTop.ToString())
                            Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("asf", AdminForm.ToString())
                            Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("cid", adminContent.Id.ToString())
                            Call cpCore.htmlDoc.webServerIO_addRefreshQueryString(RequestNameTitleExtension, cpCore.htmlDoc.main_EncodeRequestVariable(TitleExtension))
                            If WherePairCount > 0 Then
                                For WhereCount = 0 To WherePairCount - 1
                                    Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("wl" & WhereCount, WherePair(0, WhereCount))
                                    Call cpCore.htmlDoc.webServerIO_addRefreshQueryString("wr" & WhereCount, WherePair(1, WhereCount))
                                Next
                            End If
                            '
                            ' ----- ButtonBar
                            '
                            AllowAdd = adminContent.AllowAdd And (Not IsLimitedToSubContent) And (allowCMAdd)
                            If MenuDepth > 0 Then
                                LeftButtons = LeftButtons & cpCore.htmlDoc.html_GetFormButton(ButtonClose, , , "window.close();")
                            Else
                                LeftButtons = LeftButtons & cpCore.htmlDoc.html_GetFormButton(ButtonCancel)
                                'LeftButtons = LeftButtons & cpCore.main_GetFormButton(ButtonCancel, , , "return processSubmit(this)")
                            End If
                            If AllowAdd Then
                                LeftButtons = LeftButtons & "<input TYPE=SUBMIT NAME=BUTTON VALUE=""" & ButtonAdd & """>"
                                'LeftButtons = LeftButtons & "<input TYPE=SUBMIT NAME=BUTTON VALUE=""" & ButtonAdd & """ onClick=""return processSubmit(this);"">"
                            Else
                                LeftButtons = LeftButtons & "<input TYPE=SUBMIT NAME=BUTTON DISABLED VALUE=""" & ButtonAdd & """>"
                                'LeftButtons = LeftButtons & "<input TYPE=SUBMIT NAME=BUTTON DISABLED VALUE=""" & ButtonAdd & """ onClick=""return processSubmit(this);"">"
                            End If
                            AllowDelete = (adminContent.AllowDelete) And (allowCMDelete)
                            If AllowDelete Then
                                LeftButtons = LeftButtons & "<input TYPE=SUBMIT NAME=BUTTON VALUE=""" & ButtonDelete & """ onClick=""if(!DeleteCheck())return false;"">"
                            Else
                                LeftButtons = LeftButtons & "<input TYPE=SUBMIT NAME=BUTTON DISABLED VALUE=""" & ButtonDelete & """ onClick=""if(!DeleteCheck())return false;"">"
                            End If
                            If IndexConfig.PageNumber = 1 Then
                                RightButtons = RightButtons & "<input TYPE=SUBMIT NAME=BUTTON VALUE=""" & ButtonFirst & """ DISABLED>"
                                RightButtons = RightButtons & "<input TYPE=SUBMIT NAME=BUTTON VALUE=""" & ButtonPrevious & """ DISABLED>"
                            Else
                                RightButtons = RightButtons & "<input TYPE=SUBMIT NAME=BUTTON VALUE=""" & ButtonFirst & """>"
                                'RightButtons = RightButtons & "<input TYPE=SUBMIT NAME=BUTTON VALUE=""" & ButtonFirst & """ onClick=""return processSubmit(this);"">"
                                RightButtons = RightButtons & "<input TYPE=SUBMIT NAME=BUTTON VALUE=""" & ButtonPrevious & """>"
                                'RightButtons = RightButtons & "<input TYPE=SUBMIT NAME=BUTTON VALUE=""" & ButtonPrevious & """ onClick=""return processSubmit(this);"">"
                            End If
                            'RightButtons = RightButtons & cpCore.main_GetFormButton(ButtonFirst)
                            'RightButtons = RightButtons & cpCore.main_GetFormButton(ButtonPrevious)
                            If recordCnt > (IndexConfig.PageNumber * IndexConfig.RecordsPerPage) Then
                                RightButtons = RightButtons & "<input TYPE=SUBMIT NAME=BUTTON VALUE=""" & ButtonNext & """>"
                                'RightButtons = RightButtons & "<input TYPE=SUBMIT NAME=BUTTON VALUE=""" & ButtonNext & """ onClick=""return processSubmit(this);"">"
                            Else
                                RightButtons = RightButtons & "<input TYPE=SUBMIT NAME=BUTTON VALUE=""" & ButtonNext & """ DISABLED>"
                            End If
                            RightButtons = RightButtons & "<input TYPE=SUBMIT NAME=BUTTON VALUE=""" & ButtonRefresh & """>"
                            If recordCnt <= 1 Then
                                PageCount = 1
                            Else
                                PageCount = CInt(1 + Int((recordCnt - 1) / IndexConfig.RecordsPerPage))
                            End If
                            ButtonBar = Adminui.GetButtonBarForIndex(LeftButtons, RightButtons, IndexConfig.PageNumber, IndexConfig.RecordsPerPage, PageCount)
                            'ButtonBar = AdminUI.GetButtonBar(LeftButtons, RightButtons)
                            '
                            ' ----- TitleBar
                            '
                            Title = ""
                            SubTitle = ""
                            SubTitlePart = ""
                            With IndexConfig
                                If .ActiveOnly Then
                                    SubTitle = SubTitle & ", active records"
                                End If
                                If (.ContentCategoryID > 0) Then
                                    SubTitle = SubTitle & ", in content category '" & cpCore.content_GetRecordName("Content Categories", .ContentCategoryID) & "'"
                                End If
                                SubTitlePart = ""
                                If .LastEditedByMe Then
                                    SubTitlePart = SubTitlePart & " by " & cpCore.authContext.user.Name
                                End If
                                If .LastEditedPast30Days Then
                                    SubTitlePart = SubTitlePart & " in the past 30 days"
                                End If
                                If .LastEditedPast7Days Then
                                    SubTitlePart = SubTitlePart & " in the week"
                                End If
                                If .LastEditedToday Then
                                    SubTitlePart = SubTitlePart & " today"
                                End If
                                If SubTitlePart <> "" Then
                                    SubTitle = SubTitle & ", last edited" & SubTitlePart
                                End If
                                For Each kvp In .FindWords
                                    Dim findWord As indexConfigFindWordClass = kvp.Value
                                    If Not String.IsNullOrEmpty(findWord.Name) Then
                                        FieldCaption = genericController.encodeText(cpCore.GetContentFieldProperty(adminContent.Name, findWord.Name, "caption"))
                                        Select Case findWord.MatchOption
                                            Case FindWordMatchEnum.MatchEmpty
                                                SubTitle = SubTitle & ", " & FieldCaption & " is empty"
                                            Case FindWordMatchEnum.MatchEquals
                                                SubTitle = SubTitle & ", " & FieldCaption & " = '" & findWord.Value & "'"
                                            Case FindWordMatchEnum.MatchFalse
                                                SubTitle = SubTitle & ", " & FieldCaption & " is false"
                                            Case FindWordMatchEnum.MatchGreaterThan
                                                SubTitle = SubTitle & ", " & FieldCaption & " &gt; '" & findWord.Value & "'"
                                            Case FindWordMatchEnum.matchincludes
                                                SubTitle = SubTitle & ", " & FieldCaption & " includes '" & findWord.Value & "'"
                                            Case FindWordMatchEnum.MatchLessThan
                                                SubTitle = SubTitle & ", " & FieldCaption & " &lt; '" & findWord.Value & "'"
                                            Case FindWordMatchEnum.MatchNotEmpty
                                                SubTitle = SubTitle & ", " & FieldCaption & " is not empty"
                                            Case FindWordMatchEnum.MatchTrue
                                                SubTitle = SubTitle & ", " & FieldCaption & " is true"
                                        End Select

                                    End If
                                Next
                                If .SubCDefID > 0 Then
                                    ContentName = cpCore.metaData.getContentNameByID(.SubCDefID)
                                    If ContentName <> "" Then
                                        SubTitle = SubTitle & ", in Sub-content '" & ContentName & "'"
                                    End If
                                End If
                                '
                                ' add groups to caption
                                '
                                If (LCase(adminContent.ContentTableName) = "ccmembers") And (.GroupListCnt > 0) Then
                                    'If (LCase(AdminContent.ContentTableName) = "ccmembers") And (.GroupListCnt > 0) Then
                                    SubTitlePart = ""
                                    For Ptr = 0 To .GroupListCnt - 1
                                        If .GroupList(Ptr) <> "" Then
                                            GroupList = GroupList & vbTab & .GroupList(Ptr)
                                        End If
                                    Next
                                    If GroupList <> "" Then
                                        Groups = Split(Mid(GroupList, 2), vbTab)
                                        If UBound(Groups) = 0 Then
                                            SubTitle = SubTitle & ", in group '" & Groups(0) & "'"
                                        ElseIf UBound(Groups) = 1 Then
                                            SubTitle = SubTitle & ", in groups '" & Groups(0) & "' and '" & Groups(1) & "'"
                                        Else
                                            For Ptr = 0 To UBound(Groups) - 1
                                                SubTitlePart = SubTitlePart & ", '" & Groups(Ptr) & "'"
                                            Next
                                            SubTitle = SubTitle & ", in groups" & Mid(SubTitlePart, 2) & " and '" & Groups(Ptr) & "'"
                                        End If

                                    End If
                                End If
                                '
                                ' add sort details to caption
                                '
                                SubTitlePart = ""
                                For Each kvp In .Sorts
                                    Dim sort As indexConfigSortClass = kvp.Value
                                    FieldName = sort.fieldName
                                    If FieldName <> "" Then
                                        SubTitlePart = SubTitlePart & " and " & adminContent.fields(FieldName).caption
                                    End If
                                    If Not sort.Forward Then
                                        SubTitlePart = SubTitlePart & " reverse"
                                    End If
                                Next
                                If SubTitlePart <> "" Then
                                    SubTitle = SubTitle & ", sorted by" & Mid(SubTitlePart, 5)
                                End If
                            End With
                            '
                            Title = adminContent.Name
                            If TitleExtension <> "" Then
                                Title = Title & " " & TitleExtension
                            End If
                            Select Case recordCnt
                                Case 0
                                    RightCopy = "no records found"
                                Case 1
                                    RightCopy = "1 record found"
                                Case Else
                                    RightCopy = recordCnt & " records found"
                            End Select
                            RightCopy = RightCopy & ", page " & IndexConfig.PageNumber
                            Title = "<div>" _
                                & "<span style=""float:left;""><strong>" & Title & "</strong></span>" _
                                & "<span style=""float:right;"">" & RightCopy & "</span>" _
                                & "</div>"
                            TitleRows = 0
                            If SubTitle <> "" Then
                                Title = Title & "<div style=""clear:both"">Filter: " & cpCore.htmlDoc.html_EncodeHTML(Mid(SubTitle, 3)) & "</div>"
                                TitleRows = TitleRows + 1
                            End If
                            If ContentAccessLimitMessage <> "" Then
                                Title = Title & "<div style=""clear:both"">" & ContentAccessLimitMessage & "</div>"
                                TitleRows = TitleRows + 1
                            End If
                            If TitleRows = 0 Then
                                Title = Title & "<div style=""clear:both"">&nbsp;</div>"
                            End If
                            '
                            TitleBar = SpanClassAdminNormal & Title & "</span>"
                            'TitleBar = TitleBar & cpCore.main_GetHelpLink(46, "Using the Admin Index Page", BubbleCopy_AdminIndexPage)
                            '
                            ' ----- Filter Data Table
                            '
                            If AllowFilterNav Then
                                '
                                ' Filter Nav - if enabled, just add another cell to the row
                                '
                                IndexFilterOpen = cpCore.visitProperty.getBoolean("IndexFilterOpen", False)
                                If IndexFilterOpen Then
                                    '
                                    ' Ajax Filter Open
                                    '
                                    IndexFilterHead = "" _
                                        & vbCrLf & "<div class=""ccHeaderCon"">" _
                                        & vbCrLf & "<div id=""IndexFilterHeCursorTypeEnum.ADOPENed"" class=""opened"">" _
                                        & cr & "<table border=0 cellpadding=0 cellspacing=0 width=""100%""><tr>" _
                                        & cr & "<td valign=Middle class=""left"">Filters</td>" _
                                        & cr & "<td valign=Middle class=""right""><a href=""#"" onClick=""CloseIndexFilter();return false""><img alt=""Close Filters"" title=""Close Filters"" src=""/ccLib/images/ClosexRev1313.gif"" width=13 height=13 border=0></a></td>" _
                                        & cr & "</tr></table>" _
                                        & vbCrLf & "</div>" _
                                        & vbCrLf & "<div id=""IndexFilterHeadClosed"" class=""closed"" style=""display:none;"">" _
                                        & cr & "<a href=""#"" onClick=""OpenIndexFilter();return false""><img title=""Open Navigator"" alt=""Open Filter"" src=""/ccLib/images/OpenRightRev1313.gif"" width=13 height=13 border=0 style=""text-align:right;""></a>" _
                                        & vbCrLf & "</div>" _
                                        & vbCrLf & "</div>" _
                                        & ""
                                    IndexFilterContent = "" _
                                        & vbCrLf & "<div class=""ccContentCon"">" _
                                        & vbCrLf & "<div id=""IndexFilterContentOpened"" class=""opened"">" & GetForm_IndexFilterContent(adminContent) & "<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""200"" height=""1"" style=""clear:both""></div>" _
                                        & vbCrLf & "<div id=""IndexFilterContentClosed"" class=""closed"" style=""display:none;"">" & FilterClosedLabel & "</div>" _
                                        & vbCrLf & "</div>"
                                    IndexFilterJS = "" _
                                        & vbCrLf & "<script Language=""JavaScript"" type=""text/javascript"">" _
                                        & vbCrLf & "function CloseIndexFilter() {SetDisplay('IndexFilterHeCursorTypeEnum.ADOPENed','none');SetDisplay('IndexFilterContentOpened','none');SetDisplay('IndexFilterHeadClosed','block');SetDisplay('IndexFilterContentClosed','block');cj.ajax.qs('" & RequestNameAjaxFunction & "=" & AjaxCloseIndexFilter & "','','')}" _
                                        & vbCrLf & "function OpenIndexFilter() {SetDisplay('IndexFilterHeCursorTypeEnum.ADOPENed','block');SetDisplay('IndexFilterContentOpened','block');SetDisplay('IndexFilterHeadClosed','none');SetDisplay('IndexFilterContentClosed','none');cj.ajax.qs('" & RequestNameAjaxFunction & "=" & AjaxOpenIndexFilter & "','','')}" _
                                        & vbCrLf & "</script>"
                                Else
                                    '
                                    ' Ajax Filter Closed
                                    '
                                    IndexFilterHead = "" _
                                        & vbCrLf & "<div class=""ccHeaderCon"">" _
                                        & vbCrLf & "<div id=""IndexFilterHeCursorTypeEnum.ADOPENed"" class=""opened"" style=""display:none;"">" _
                                        & cr & "<table border=0 cellpadding=0 cellspacing=0 width=""100%""><tr>" _
                                        & cr & "<td valign=Middle class=""left"">Filter</td>" _
                                        & cr & "<td valign=Middle class=""right""><a href=""#"" onClick=""CloseIndexFilter();return false""><img alt=""Close Filter"" title=""Close Navigator"" src=""/ccLib/images/ClosexRev1313.gif"" width=13 height=13 border=0></a></td>" _
                                        & cr & "</tr></table>" _
                                        & vbCrLf & "</div>" _
                                        & vbCrLf & "<div id=""IndexFilterHeadClosed"" class=""closed"">" _
                                        & cr & "<a href=""#"" onClick=""OpenIndexFilter();return false""><img title=""Open Navigator"" alt=""Open Navigator"" src=""/ccLib/images/OpenRightRev1313.gif"" width=13 height=13 border=0 style=""text-align:right;""></a>" _
                                        & vbCrLf & "</div>" _
                                        & vbCrLf & "</div>" _
                                        & ""
                                    IndexFilterContent = "" _
                                        & vbCrLf & "<div class=""ccContentCon"">" _
                                        & vbCrLf & "<div id=""IndexFilterContentOpened"" class=""opened"" style=""display:none;""><div style=""text-align:center;""><img src=""/ccLib/images/ajax-loader-small.gif"" width=16 height=16></div></div>" _
                                        & vbCrLf & "<div id=""IndexFilterContentClosed"" class=""closed"">" & FilterClosedLabel & "</div>" _
                                        & vbCrLf & "<div id=""IndexFilterContentMinWidth"" style=""display:none;""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""200"" height=""1"" style=""clear:both""></div>" _
                                        & vbCrLf & "</div>"
                                    AjaxQS = cpCore.htmlDoc.refreshQueryString
                                    AjaxQS = genericController.ModifyQueryString(AjaxQS, RequestNameAjaxFunction, AjaxOpenIndexFilterGetContent)
                                    IndexFilterJS = "" _
                                        & vbCrLf & "<script Language=""JavaScript"" type=""text/javascript"">" _
                                        & vbCrLf & "var IndexFilterPop=false;" _
                                        & vbCrLf & "function CloseIndexFilter() {SetDisplay('IndexFilterHeCursorTypeEnum.ADOPENed','none');SetDisplay('IndexFilterHeadClosed','block');SetDisplay('IndexFilterContentOpened','none');SetDisplay('IndexFilterContentMinWidth','none');SetDisplay('IndexFilterContentClosed','block');cj.ajax.qs('" & RequestNameAjaxFunction & "=" & AjaxCloseIndexFilter & "','','')}" _
                                        & vbCrLf & "function OpenIndexFilter() {SetDisplay('IndexFilterHeCursorTypeEnum.ADOPENed','block');SetDisplay('IndexFilterHeadClosed','none');SetDisplay('IndexFilterContentOpened','block');SetDisplay('IndexFilterContentMinWidth','block');SetDisplay('IndexFilterContentClosed','none');if(!IndexFilterPop){cj.ajax.qs('" & AjaxQS & "','','IndexFilterContentOpened');IndexFilterPop=true;}else{cj.ajax.qs('" & RequestNameAjaxFunction & "=" & AjaxOpenIndexFilter & "','','');}}" _
                                        & vbCrLf & "</script>"
                                End If
                            End If
                            '
                            ' Dual Window Right - Data
                            '
                            FilterDataTable &= "<td valign=top class=""ccPanel"">"
                            '
                            DataTable_HdrRow &= "<tr>"
                            '
                            ' Row Number Column
                            '
                            DataTable_HdrRow &= ("<td width=20 align=center valign=bottom class=""ccAdminListCaption""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=18 height=1 ><br>Row</td>")
                            '
                            ' Delete Select Box Columns
                            '
                            If Not AllowDelete Then
                                DataTable_HdrRow &= ("<td width=20 align=center valign=bottom class=""ccAdminListCaption""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=18 height=1 ><br><input TYPE=CheckBox disabled=""disabled""></td>")
                            Else
                                DataTable_HdrRow &= ("<td width=20 align=center valign=bottom class=""ccAdminListCaption""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=18 height=1 ><br><input TYPE=CheckBox OnClick=""CheckInputs('DelCheck',this.checked);""></td>")
                            End If
                            '
                            ' Calculate total width
                            '
                            ColumnWidthTotal = 0
                            For Each kvp In IndexConfig.Columns
                                Dim column As indexConfigColumnClass = kvp.Value
                                If column.Width < 1 Then
                                    column.Width = 1
                                End If
                                ColumnWidthTotal = ColumnWidthTotal + column.Width
                            Next
                            '
                            ' Edit Column
                            '
                            DataTable_HdrRow &= ("<td width=20 align=center valign=bottom class=""ccAdminListCaption""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=18 height=1><br>Edit</td>")
                            For Each kvp In IndexConfig.Columns
                                Dim column As indexConfigColumnClass = kvp.Value
                                '
                                ' ----- print column headers - anchored so they sort columns
                                '
                                ColumnWidth = CInt((100 * column.Width) / ColumnWidthTotal)
                                'fieldId = column.FieldId
                                FieldName = column.Name
                                '
                                'if this is a current sort ,add the reverse flag
                                '
                                ButtonHref = cpCore.serverConfig.appConfig.adminRoute & "?" & RequestNameAdminForm & "=" & AdminFormIndex & "&SetSortField=" & FieldName & "&RT=0&" & RequestNameTitleExtension & "=" & cpCore.htmlDoc.main_EncodeRequestVariable(TitleExtension) & "&cid=" & adminContent.Id & "&ad=" & MenuDepth
                                For Each sortKvp In IndexConfig.Sorts
                                    Dim sort As indexConfigSortClass = sortKvp.Value

                                Next
                                If IndexConfig.Sorts.ContainsKey(FieldName) Then
                                    If IndexConfig.Sorts.Item(FieldName).Forward Then
                                        ButtonHref &= "&SetSortReverse=1"
                                    End If
                                End If
                                '
                                '----- column header includes WherePairCount
                                '
                                If WherePairCount > 0 Then
                                    For WhereCount = 0 To WherePairCount - 1
                                        If WherePair(0, WhereCount) <> "" Then
                                            ButtonHref &= "&wl" & WhereCount & "=" & cpCore.htmlDoc.main_EncodeRequestVariable(WherePair(0, WhereCount))
                                            ButtonHref &= "&wr" & WhereCount & "=" & cpCore.htmlDoc.main_EncodeRequestVariable(WherePair(1, WhereCount))
                                        End If
                                    Next
                                End If
                                ButtonFace = adminContent.fields(FieldName.ToLower()).caption
                                ButtonFace = genericController.vbReplace(ButtonFace, " ", "&nbsp;")
                                SortTitle = "Sort A-Z"
                                '
                                If IndexConfig.Sorts.ContainsKey(FieldName) Then
                                    If Not IndexConfig.Sorts(FieldName).Forward Then
                                        ButtonFace = ButtonFace & "<img src=""/ccLib/images/arrowup.gif"" width=8 height=8 border=0>"
                                    Else
                                        ButtonFace = ButtonFace & "<img src=""/ccLib/images/arrowdown.gif"" width=8 height=8 border=0>"
                                        SortTitle = "Sort Z-A"
                                    End If
                                End If
                                ButtonObject = "Button" & ButtonObjectCount
                                ButtonObjectCount = ButtonObjectCount + 1
                                DataTable_HdrRow &= "<td width=""" & ColumnWidth & "%"" valign=bottom align=left class=""ccAdminListCaption"">"
                                DataTable_HdrRow &= ("<a title=""" & SortTitle & """ href=""" & cpCore.htmlDoc.html_EncodeHTML(ButtonHref) & """ class=""ccAdminListCaption"">" & ButtonFace & "</A>")
                                DataTable_HdrRow &= ("</td>")
                            Next
                            DataTable_HdrRow &= ("</tr>")
                            '
                            '   select and print Records
                            '
                            'DataSourceName = cpCore.db.getDataSourceNameByID(adminContent.dataSourceId)
                            CS = cpCore.db.cs_openSql(SQL, datasource.Name, IndexConfig.RecordsPerPage, IndexConfig.PageNumber)
                            If cpCore.db.cs_ok(CS) Then
                                RowColor = ""
                                RecordPointer = IndexConfig.RecordTop
                                RecordLast = IndexConfig.RecordTop + IndexConfig.RecordsPerPage
                                '
                                ' --- Print out the records
                                '
                                'IsPageContent = (LCase(adminContent.ContentTableName) = "ccpagecontent")
                                'If IsPageContent Then
                                '    LandingPageID = cpCore.main_GetLandingPageID
                                'End If
                                Do While ((cpCore.db.cs_ok(CS)) And (RecordPointer < RecordLast))
                                    RecordID = cpCore.db.cs_getInteger(CS, "ID")
                                    RecordName = cpCore.db.cs_getText(CS, "name")
                                    'IsLandingPage = IsPageContent And (RecordID = LandingPageID)
                                    If RowColor = "class=""ccAdminListRowOdd""" Then
                                        RowColor = "class=""ccAdminListRowEven"""
                                    Else
                                        RowColor = "class=""ccAdminListRowOdd"""
                                    End If
                                    DataTable_DataRows &= vbCrLf & "<tr>"
                                    '
                                    ' --- Record Number column
                                    '
                                    DataTable_DataRows &= "<td align=right " & RowColor & ">" & SpanClassAdminSmall & "[" & RecordPointer + 1 & "]</span></td>"
                                    '
                                    ' --- Delete Checkbox Columns
                                    '
                                    If AllowDelete Then
                                        'If AllowDelete And Not IsLandingPage Then
                                        'If AdminContent.AllowDelete And Not IsLandingPage Then
                                        DataTable_DataRows &= "<td align=center " & RowColor & "><input TYPE=CheckBox NAME=row" & RecordPointer & " VALUE=1 ID=""DelCheck""><input type=hidden name=rowid" & RecordPointer & " VALUE=" & RecordID & "></span></td>"
                                    Else
                                        DataTable_DataRows &= "<td align=center " & RowColor & "><input TYPE=CheckBox disabled=""disabled"" NAME=row" & RecordPointer & " VALUE=1><input type=hidden name=rowid" & RecordPointer & " VALUE=" & RecordID & "></span></td>"
                                    End If
                                    '
                                    ' --- Edit button column
                                    '
                                    DataTable_DataRows &= "<td align=center " & RowColor & ">"
                                    URI = cpCore.serverConfig.appConfig.adminRoute _
                                        & "?" & RequestNameAdminAction & "=" & AdminActionNop _
                                        & "&id=" & RecordID _
                                        & "&" & RequestNameTitleExtension & "=" & cpCore.htmlDoc.main_EncodeRequestVariable(TitleExtension) _
                                        & "&ad=" & MenuDepth _
                                        & "&cid=" & adminContent.Id _
                                        & "&" & RequestNameAdminSourceForm & "=" & AdminForm _
                                        & "&" & RequestNameAdminForm & "=" & AdminFormEdit
                                    If WherePairCount > 0 Then
                                        For WhereCount = 0 To WherePairCount - 1
                                            URI = URI & "&wl" & WhereCount & "=" & cpCore.htmlDoc.main_EncodeRequestVariable(WherePair(0, WhereCount)) & "&wr" & WhereCount & "=" & cpCore.htmlDoc.main_EncodeRequestVariable(WherePair(1, WhereCount))
                                        Next
                                    End If
                                    DataTable_DataRows &= ("<a href=""" & cpCore.htmlDoc.html_EncodeHTML(URI) & """><img src=""/ccLib/images/IconContentEdit.gif"" border=""0""></a>")
                                    DataTable_DataRows &= ("</td>")
                                    '
                                    ' --- field columns
                                    '
                                    For Each columnKvp In IndexConfig.Columns
                                        Dim column As indexConfigColumnClass = columnKvp.Value
                                        Dim columnNameLc As String = column.Name.ToLower()
                                        If FieldUsedInColumns.ContainsKey(columnNameLc) Then
                                            If FieldUsedInColumns.Item(columnNameLc) Then
                                                DataTable_DataRows &= (vbCrLf & "<td valign=""middle"" " & RowColor & " align=""left"">" & SpanClassAdminNormal)
                                                DataTable_DataRows &= GetForm_Index_GetCell(adminContent, editRecord, column.Name, CS, IsLookupFieldValid(columnNameLc), genericController.vbLCase(adminContent.ContentTableName) = "ccemail")
                                                DataTable_DataRows &= ("&nbsp;</span></td>")
                                            End If
                                        End If
                                    Next
                                    DataTable_DataRows &= (vbLf & "    </tr>")
                                    Call cpCore.db.cs_goNext(CS)
                                    RecordPointer = RecordPointer + 1
                                Loop
                                DataTable_DataRows &= "<input type=hidden name=rowcnt value=" & RecordPointer & ">"
                                '
                                ' --- print out the stuff at the bottom
                                '
                                RecordTop_NextPage = IndexConfig.RecordTop
                                If cpCore.db.cs_ok(CS) Then
                                    RecordTop_NextPage = RecordPointer
                                End If
                                RecordTop_PreviousPage = IndexConfig.RecordTop - IndexConfig.RecordsPerPage
                                If RecordTop_PreviousPage < 0 Then
                                    RecordTop_PreviousPage = 0
                                End If
                            End If
                            Call cpCore.db.cs_Close(CS)
                            '
                            ' Header at bottom
                            '
                            If RowColor = "class=""ccAdminListRowOdd""" Then
                                RowColor = "class=""ccAdminListRowEven"""
                            Else
                                RowColor = "class=""ccAdminListRowOdd"""
                            End If
                            If (RecordPointer = 0) Then
                                '
                                ' No records found
                                '
                                DataTable_DataRows &= ("<tr>" _
                                    & "<td " & RowColor & " align=center>-</td>" _
                                    & "<td " & RowColor & " align=center>-</td>" _
                                    & "<td " & RowColor & " align=center>-</td>" _
                                    & "<td colspan=" & IndexConfig.Columns.Count & " " & RowColor & " style=""text-align:left ! important;"">no records were found</td>" _
                                    & "</tr>")
                            Else
                                If (RecordPointer < RecordLast) Then
                                    '
                                    ' End of list
                                    '
                                    DataTable_DataRows &= ("<tr>" _
                                        & "<td " & RowColor & " align=center>-</td>" _
                                        & "<td " & RowColor & " align=center>-</td>" _
                                        & "<td " & RowColor & " align=center>-</td>" _
                                        & "<td colspan=" & IndexConfig.Columns.Count & " " & RowColor & " style=""text-align:left ! important;"">----- end of list</td>" _
                                        & "</tr>")
                                End If
                                '
                                ' Add another header to the data rows
                                '
                                DataTable_DataRows &= DataTable_HdrRow
                            End If
                            ''
                            '' ----- DataTable_FindRow
                            ''
                            'ReDim Findstring(IndexConfig.Columns.Count)
                            'For ColumnPointer = 0 To IndexConfig.Columns.Count - 1
                            '    FieldName = IndexConfig.Columns(ColumnPointer).Name
                            '    If genericController.vbLCase(FieldName) = FindWordName Then
                            '        Findstring(ColumnPointer) = FindWordValue
                            '    End If
                            'Next
                            '        ReDim Findstring(CustomAdminColumnCount)
                            '        For ColumnPointer = 0 To CustomAdminColumnCount - 1
                            '            FieldPtr = CustomAdminColumn(ColumnPointer).FieldPointer
                            '            With AdminContent.fields(FieldPtr)
                            '                If genericController.vbLCase(.Name) = FindWordName Then
                            '                    Findstring(ColumnPointer) = FindWordValue
                            '                End If
                            '            End With
                            '        Next
                            '
                            DataTable_FindRow = DataTable_FindRow & "<tr><td colspan=" & (3 + IndexConfig.Columns.Count) & " style=""background-color:black;height:1;""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""1"" ></td></tr>"
                            'DataTable_FindRow = DataTable_FindRow & "<tr><td colspan=" & (3 + CustomAdminColumnCount) & " style=""background-color:black;height:1;""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"" height=""1"" ></td></tr>"
                            DataTable_FindRow = DataTable_FindRow & "<tr>"
                            DataTable_FindRow = DataTable_FindRow & "<td colspan=3 width=""60"" class=""ccPanel"" align=center style=""text-align:center ! important;"">"
                            DataTable_FindRow = DataTable_FindRow _
                                & vbCrLf & "<script language=""javascript"" type=""text/javascript"">" _
                                & vbCrLf & "function KeyCheck(e){" _
                                & vbCrLf & "  var code = e.keyCode;" _
                                & vbCrLf & "  if(code==13){" _
                                & vbCrLf & "    document.getElementById('FindButton').focus();" _
                                & vbCrLf & "    document.getElementById('FindButton').click();" _
                                & vbCrLf & "    return false;" _
                                & vbCrLf & "  }" _
                                & vbCrLf & "} " _
                                & vbCrLf & "</script>"
                            DataTable_FindRow = DataTable_FindRow & "<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""60"" height=""1"" ><br >" & cpCore.htmlDoc.html_GetFormButton(ButtonFind, , "FindButton") & "</td>"
                            ColumnPointer = 0
                            For Each kvp In IndexConfig.Columns
                                Dim column As indexConfigColumnClass = kvp.Value
                                'For ColumnPointer = 0 To CustomAdminColumnCount - 1
                                With column
                                    ColumnWidth = .Width
                                    'fieldId = .FieldId
                                    FieldName = genericController.vbLCase(.Name)
                                End With
                                FindWordValue = ""
                                If IndexConfig.FindWords.ContainsKey(FieldName) Then
                                    With IndexConfig.FindWords(FieldName)
                                        If (.MatchOption = FindWordMatchEnum.matchincludes) Or (.MatchOption = FindWordMatchEnum.MatchEquals) Then
                                            FindWordValue = .Value
                                        End If
                                    End With
                                End If
                                DataTable_FindRow = DataTable_FindRow _
                                    & vbCrLf _
                                    & "<td valign=""top"" align=""center"" class=""ccPanel3DReverse"" style=""padding-top:2px;padding-bottom:2px;"">" _
                                    & "<input type=hidden name=""FindName" & ColumnPointer & """ value=""" & FieldName & """>" _
                                    & "<input onkeypress=""KeyCheck(event);""  type=text id=""F" & ColumnPointer & """ name=""FindValue" & ColumnPointer & """ value=""" & FindWordValue & """ style=""width:98%"">" _
                                    & "</td>"
                                ColumnPointer += 1
                            Next
                            DataTable_FindRow = DataTable_FindRow & "</tr>"
                            '
                            ' Assemble DataTable
                            '
                            DataTable = "" _
                                & "<table ID=""DataTable"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" style=""Background-Color:white;"">" _
                                & DataTable_HdrRow _
                                & DataTable_DataRows _
                                & DataTable_FindRow _
                                & "</table>"
                            'DataTable = GetForm_Index_AdvancedSearch()
                            '
                            ' Assemble DataFilterTable
                            '
                            If IndexFilterContent <> "" Then
                                FilterColumn = "<td valign=top style=""border-right:1px solid black;"" class=""ccToolsCon"">" & IndexFilterJS & IndexFilterHead & IndexFilterContent & "</td>"
                                'FilterColumn = "<td valign=top class=""ccPanel3DReverse ccAdminEditBody"" style=""border-right:1px solid black;"">" & IndexFilterJS & IndexFilterHead & IndexFilterContent & "</td>"
                            End If
                            DataColumn = "<td width=""99%"" valign=top>" & DataTable & "</td>"
                            FilterDataTable = "" _
                                & "<table ID=""DataFilterTable"" border=""0"" cellpadding=""0"" cellspacing=""0"" width=""100%"" style=""Background-Color:white;"">" _
                                & "<tr>" _
                                & FilterColumn _
                                & DataColumn _
                                & "</tr>" _
                                & "</table>"
                            '
                            ' Assemble LiveWindowTable
                            '
                            ' Stream.Add( OpenLiveWindowTable)
                            Stream.Add(vbCrLf & cpCore.htmlDoc.html_GetFormStart(, "adminForm"))
                            Stream.Add("<input type=""hidden"" name=""indexGoToPage"" value="""">")
                            Stream.Add(ButtonBar)
                            Stream.Add(Adminui.GetTitleBar(TitleBar, HeaderDescription))
                            Stream.Add(FilterDataTable)
                            Stream.Add(ButtonBar)
                            Stream.Add(cpCore.main_GetPanel("<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""1"", height=""10"" >"))
                            Stream.Add("<input type=hidden name=Columncnt VALUE=" & IndexConfig.Columns.Count & ">")
                            Stream.Add("</form>")
                            '  Stream.Add( CloseLiveWindowTable)
                            Call cpCore.htmlDoc.main_AddPagetitle(adminContent.Name)
                        End If
                    End If
                    'End If
                    '
                End If
                returnForm = Stream.Text
                '
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return returnForm
        End Function
        '
        '========================================================================
        ' ----- Get an XML nodes attribute based on its name
        '========================================================================
        '
        Private Function GetXMLAttribute(ByVal Found As Boolean, ByVal Node As XmlNode, ByVal Name As String, ByVal DefaultIfNotFound As String) As String
            On Error GoTo ErrorTrap
            '
            Dim NodeAttribute As XmlAttribute
            Dim ResultNode As XmlNode
            Dim UcaseName As String
            '
            Found = False
            ResultNode = Node.Attributes.GetNamedItem(Name)
            If (ResultNode Is Nothing) Then
                UcaseName = genericController.vbUCase(Name)
                For Each NodeAttribute In Node.Attributes
                    If genericController.vbUCase(NodeAttribute.Name) = UcaseName Then
                        GetXMLAttribute = NodeAttribute.Value
                        Found = True
                        Exit For
                    End If
                Next
            Else
                GetXMLAttribute = ResultNode.Value
                Found = True
            End If
            If Not Found Then
                GetXMLAttribute = DefaultIfNotFound
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetXMLAttribute")
        End Function
        '
        ' REFACTOR -- THIS SHOULD BE A REMOTE METHOD AND NOT CALLED FROM CPCORE.
        '==========================================================================================================================================
        ''' <summary>
        ''' Get index view filter content - remote method
        ''' </summary>
        ''' <param name="adminContent"></param>
        ''' <returns></returns>
        Public Function GetForm_IndexFilterContent(adminContent As cdefModel) As String
            Dim returnContent As String = ""
            Try
                Dim RecordID As Integer
                Dim Name As String
                Dim TableName As String
                Dim FieldCaption As String
                Dim ContentName As String
                Dim CS As Integer
                Dim SQL As String
                Dim Caption As String
                Dim Id As Integer
                Dim CurrentFolderID As Integer
                Dim Link As String
                Dim IsAuthoringMode As Boolean
                Dim OpenMenuName As String
                Dim JSCaption As String
                Dim FirstCaption As String = ""
                Dim EmptyDivID As String
                Dim TagName As String
                Dim RQS As String
                Dim QS As String
                Dim Copy As String
                Dim ContentCategoryName As String
                Dim Ptr As Integer
                Dim SubFilterList As String
                Dim IndexConfig As indexConfigClass
                Dim list As String
                Dim ListSplit() As String
                Dim Cnt As Integer
                Dim Pos As Integer
                Dim subContentID As Integer
                '
                IndexConfig = LoadIndexConfig(adminContent)
                With IndexConfig
                    '
                    ContentName = cpCore.metaData.getContentNameByID(adminContent.Id)
                    IsAuthoringMode = True
                    RQS = "cid=" & adminContent.Id & "&af=1"
                    '
                    '-------------------------------------------------------------------------------------
                    ' Remove filters
                    '-------------------------------------------------------------------------------------
                    '
                    If (.SubCDefID > 0) Or (.GroupListCnt <> 0) Or (.ContentCategoryID <> 0) Or (.FindWords.Count <> 0) Or .ActiveOnly Or .LastEditedByMe Or .LastEditedToday Or .LastEditedPast7Days Or .LastEditedPast30Days Then
                        '
                        ' Remove Filters
                        '
                        returnContent &= "<div class=""ccFilterHead"">Remove&nbsp;Filters</div>"
                        QS = RQS
                        QS = genericController.ModifyQueryString(QS, "IndexFilterRemoveAll", "1")
                        Link = cpCore.siteProperties.adminURL & "?" & QS
                        returnContent &= "<div class=""ccFilterSubHead""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">&nbsp;Remove All</a></div>"
                        '
                        ' Last Edited Edited by me
                        '
                        SubFilterList = ""
                        If .LastEditedByMe Then
                            QS = RQS
                            QS = genericController.ModifyQueryString(QS, "IndexFilterLastEditedByMe", CStr(0), True)
                            Link = cpCore.siteProperties.adminURL & "?" & QS
                            SubFilterList = SubFilterList & "<div class=""ccFilterIndent ccFilterList""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">By&nbsp;Me</a></div>"
                        End If
                        If .LastEditedToday Then
                            QS = RQS
                            QS = genericController.ModifyQueryString(QS, "IndexFilterLastEditedToday", CStr(0), True)
                            Link = cpCore.siteProperties.adminURL & "?" & QS
                            SubFilterList = SubFilterList & "<div class=""ccFilterIndent ccFilterList""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">Today</a></div>"
                        End If
                        If .LastEditedPast7Days Then
                            QS = RQS
                            QS = genericController.ModifyQueryString(QS, "IndexFilterLastEditedPast7Days", CStr(0), True)
                            Link = cpCore.siteProperties.adminURL & "?" & QS
                            SubFilterList = SubFilterList & "<div class=""ccFilterIndent ccFilterList""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">Past Week</a></div>"
                        End If
                        If .LastEditedPast30Days Then
                            QS = RQS
                            QS = genericController.ModifyQueryString(QS, "IndexFilterLastEditedPast30Days", CStr(0), True)
                            Link = cpCore.siteProperties.adminURL & "?" & QS
                            SubFilterList = SubFilterList & "<div class=""ccFilterIndent ccFilterList""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">Past 30 Days</a></div>"
                        End If
                        If SubFilterList <> "" Then
                            returnContent &= "<div class=""ccFilterSubHead"">Last&nbsp;Edited</div>" & SubFilterList
                        End If
                        '
                        ' Sub Content definitions
                        '
                        Dim SubContentName As String
                        SubFilterList = ""
                        If .SubCDefID > 0 Then
                            SubContentName = cpCore.metaData.getContentNameByID(.SubCDefID)
                            QS = RQS
                            QS = genericController.ModifyQueryString(QS, "IndexFilterRemoveCDef", CStr(.SubCDefID))
                            Link = cpCore.siteProperties.adminURL & "?" & QS
                            SubFilterList = SubFilterList & "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">" & SubContentName & "</a></div>"
                        End If
                        If SubFilterList <> "" Then
                            returnContent &= "<div class=""ccFilterSubHead"">In Sub-content</div>" & SubFilterList
                        End If
                        '
                        ' Group Filter List
                        '
                        Dim GroupName As String
                        SubFilterList = ""
                        If .GroupListCnt > 0 Then
                            For Ptr = 0 To .GroupListCnt - 1
                                GroupName = .GroupList(Ptr)
                                If .GroupList(Ptr) <> "" Then
                                    If Len(GroupName) > 30 Then
                                        GroupName = Left(GroupName, 15) & "..." & Right(GroupName, 15)
                                    End If
                                    QS = RQS
                                    QS = genericController.ModifyQueryString(QS, "IndexFilterRemoveGroup", .GroupList(Ptr))
                                    Link = cpCore.siteProperties.adminURL & "?" & QS
                                    SubFilterList = SubFilterList & "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">" & GroupName & "</a></div>"
                                End If
                            Next
                        End If
                        If SubFilterList <> "" Then
                            returnContent &= "<div class=""ccFilterSubHead"">In Group(s)</div>" & SubFilterList
                        End If
                        '
                        ' Other Filter List
                        '
                        SubFilterList = ""
                        If .ActiveOnly Then
                            QS = RQS
                            QS = genericController.ModifyQueryString(QS, "IndexFilterActiveOnly", CStr(0), True)
                            Link = cpCore.siteProperties.adminURL & "?" & QS
                            SubFilterList = SubFilterList & "<div class=""ccFilterIndent ccFilterList""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">Active&nbsp;Only</a></div>"
                        End If
                        If SubFilterList <> "" Then
                            returnContent &= "<div class=""ccFilterSubHead"">Other</div>" & SubFilterList
                        End If
                        '
                        ' Content Categories
                        '
                        If .ContentCategoryID <> 0 Then
                            ContentCategoryName = cpCore.content_GetRecordName("Content Categories", .ContentCategoryID)
                            Copy = genericController.vbReplace(ContentCategoryName, " ", "&nbsp;")
                            returnContent &= "<div class=""ccFilterSubHead"">Content&nbsp;Category</div>"
                            QS = RQS
                            QS = genericController.ModifyQueryString(QS, "IndexFilterCategoryID", CStr(0), True)
                            Link = cpCore.siteProperties.adminURL & "?" & QS
                            returnContent &= "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">&nbsp;" & Copy & "</a></div>"
                        End If
                        '
                        ' FindWords
                        '
                        For Each findWordKvp In .FindWords
                            Dim findWord As indexConfigFindWordClass = findWordKvp.Value
                            FieldCaption = genericController.encodeText(cpCore.GetContentFieldProperty(ContentName, findWord.Name, "caption"))
                            QS = RQS
                            QS = genericController.ModifyQueryString(QS, "IndexFilterRemoveFind", findWord.Name)
                            Link = cpCore.siteProperties.adminURL & "?" & QS
                            Select Case findWord.MatchOption
                                Case FindWordMatchEnum.matchincludes
                                    returnContent &= "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">&nbsp;" & FieldCaption & "&nbsp;includes&nbsp;'" & findWord.Value & "'</a></div>"
                                Case FindWordMatchEnum.MatchEmpty
                                    returnContent &= "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">&nbsp;" & FieldCaption & "&nbsp;is&nbsp;empty</a></div>"
                                Case FindWordMatchEnum.MatchEquals
                                    returnContent &= "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">&nbsp;" & FieldCaption & "&nbsp;=&nbsp;'" & findWord.Value & "'</a></div>"
                                Case FindWordMatchEnum.MatchFalse
                                    returnContent &= "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">&nbsp;" & FieldCaption & "&nbsp;is&nbsp;false</a></div>"
                                Case FindWordMatchEnum.MatchGreaterThan
                                    returnContent &= "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">&nbsp;" & FieldCaption & "&nbsp;&gt;&nbsp;'" & findWord.Value & "'</a></div>"
                                Case FindWordMatchEnum.MatchLessThan
                                    returnContent &= "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">&nbsp;" & FieldCaption & "&nbsp;&lt;&nbsp;'" & findWord.Value & "'</a></div>"
                                Case FindWordMatchEnum.MatchNotEmpty
                                    returnContent &= "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">&nbsp;" & FieldCaption & "&nbsp;is&nbsp;not&nbsp;empty</a></div>"
                                Case FindWordMatchEnum.MatchTrue
                                    returnContent &= "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """><img src=""/ccLib/images/delete1313.gif"" width=13 height=13 border=0 style=""vertical-align:middle;"">&nbsp;" & FieldCaption & "&nbsp;is&nbsp;true</a></div>"
                            End Select
                        Next
                        '
                        returnContent &= "<div style=""border-bottom:1px dotted #808080;"">&nbsp;</div>"
                    End If
                    '
                    '-------------------------------------------------------------------------------------
                    ' Add filters
                    '-------------------------------------------------------------------------------------
                    '
                    returnContent &= "<div class=""ccFilterHead"">Add&nbsp;Filters</div>"
                    '
                    ' Content Categories
                    '
                    SubFilterList = ""
                    TagName = "AdminList"
                    EmptyDivID = TagName & ".empty"
                    SQL = cpCore.db.GetSQLSelect("default", "ccContentCategories", "ID,ContentCategoryID,Name", , "Name")
                    CS = cpCore.db.cs_openCsSql_rev("default", SQL)
                    Dim lis As String
                    lis = ""
                    Do While cpCore.db.cs_ok(CS)
                        Caption = cpCore.db.cs_getText(CS, "name")
                        If Caption <> "" Then
                            Id = cpCore.db.cs_getInteger(CS, "ID")
                            CurrentFolderID = cpCore.db.cs_getInteger(CS, "ContentCategoryID")
                            '
                            Caption = genericController.vbReplace(Caption, " ", "&nbsp;")
                            If FirstCaption = "" Then
                                FirstCaption = Caption
                            End If
                            JSCaption = genericController.EncodeJavascript(Caption)
                            QS = RQS
                            QS = genericController.ModifyQueryString(QS, "SetIndexFilterCategoryID", CStr(Id), True)
                            Link = cpCore.siteProperties.adminURL & "?" & QS
                            lis = lis & cr & "<li class=""ccAdminSmall ccPanel""><a href=""" & Link & """>" & Caption & "</a></li>"
                            'Call Tree.AddEntry(CStr(Id), CStr(CurrentFolderID), , , Link, Caption)
                        End If
                        Call cpCore.db.cs_goNext(CS)
                    Loop
                    Call cpCore.db.cs_Close(CS)
                    If .ContentCategoryID <> 0 Then
                        OpenMenuName = CStr(.ContentCategoryID)
                    End If
                    returnContent &= "<div class=""ccFilterSubHead"">Content&nbsp;Categories</div>"
                    If FirstCaption <> "" Then
                        returnContent &= cr & "<ul class=""ccFilterList"">" & genericController.kmaIndent(lis) & cr & "</ul>"
                        'S &="<div class=""ccFilterIndent"">" & Tree.GetTree(CStr(0), OpenMenuName) & "</div>"
                    Else
                        returnContent &= "<div class=""ccFilterIndent ccFilterList"">not defined</div>"
                    End If
                    '
                    ' Last Edited
                    '
                    SubFilterList = ""
                    If Not .LastEditedByMe Then
                        QS = RQS
                        QS = genericController.ModifyQueryString(QS, "IndexFilterLastEditedByMe", "1", True)
                        Link = cpCore.siteProperties.adminURL & "?" & QS
                        SubFilterList = SubFilterList & "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """>By&nbsp;Me</a></div>"
                    End If
                    If Not .LastEditedToday Then
                        QS = RQS
                        QS = genericController.ModifyQueryString(QS, "IndexFilterLastEditedToday", "1", True)
                        Link = cpCore.siteProperties.adminURL & "?" & QS
                        SubFilterList = SubFilterList & "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """>Today</a></div>"
                    End If
                    If Not .LastEditedPast7Days Then
                        QS = RQS
                        QS = genericController.ModifyQueryString(QS, "IndexFilterLastEditedPast7Days", "1", True)
                        Link = cpCore.siteProperties.adminURL & "?" & QS
                        SubFilterList = SubFilterList & "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """>Past Week</a></div>"
                    End If
                    If Not .LastEditedPast30Days Then
                        QS = RQS
                        QS = genericController.ModifyQueryString(QS, "IndexFilterLastEditedPast30Days", "1", True)
                        Link = cpCore.siteProperties.adminURL & "?" & QS
                        SubFilterList = SubFilterList & "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """>Past 30 Days</a></div>"
                    End If
                    If SubFilterList <> "" Then
                        returnContent &= "<div class=""ccFilterSubHead"">Last&nbsp;Edited</div>" & SubFilterList
                    End If
                    '
                    ' Sub Content Definitions
                    '
                    SubFilterList = ""
                    list = cpCore.metaData.content_getContentControlCriteria(ContentName)
                    If list <> "" Then
                        ListSplit = Split(list, "=")
                        Cnt = UBound(ListSplit) + 1
                        If Cnt > 0 Then
                            For Ptr = 0 To Cnt - 1
                                Pos = genericController.vbInstr(1, ListSplit(Ptr), ")")
                                If Pos > 0 Then
                                    subContentID = genericController.EncodeInteger(Mid(ListSplit(Ptr), 1, Pos - 1))
                                    If subContentID > 0 And (subContentID <> adminContent.Id) And (subContentID <> .SubCDefID) Then
                                        Caption = "<span style=""white-space:nowrap;"">" & cpCore.metaData.getContentNameByID(subContentID) & "</span>"
                                        QS = RQS
                                        QS = genericController.ModifyQueryString(QS, "IndexFilterAddCDef", CStr(subContentID), True)
                                        Link = cpCore.siteProperties.adminURL & "?" & QS
                                        SubFilterList = SubFilterList & "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """>" & Caption & "</a></div>"
                                    End If
                                End If
                            Next
                        End If
                    End If
                    If SubFilterList <> "" Then
                        returnContent &= "<div class=""ccFilterSubHead"">In Sub-content</div>" & SubFilterList
                    End If
                    '
                    ' people filters
                    '
                    TableName = cpCore.GetContentTablename(ContentName)
                    SubFilterList = ""
                    If genericController.vbLCase(TableName) = genericController.vbLCase("ccMembers") Then
                        SQL = cpCore.db.GetSQLSelect("default", "ccGroups", "ID,Caption,Name", "(active<>0)", "Caption,Name")
                        CS = cpCore.db.cs_openCsSql_rev("default", SQL)
                        Do While cpCore.db.cs_ok(CS)
                            Name = cpCore.db.cs_getText(CS, "Name")
                            Ptr = 0
                            If .GroupListCnt > 0 Then
                                For Ptr = 0 To .GroupListCnt - 1
                                    If Name = .GroupList(Ptr) Then
                                        Exit For
                                    End If
                                Next
                            End If
                            If Ptr = .GroupListCnt Then
                                RecordID = cpCore.db.cs_getInteger(CS, "ID")
                                Caption = cpCore.db.cs_getText(CS, "Caption")
                                If Caption = "" Then
                                    Caption = Name
                                    If Caption = "" Then
                                        Caption = "Group " & RecordID
                                    End If
                                End If
                                If Len(Caption) > 30 Then
                                    Caption = Left(Caption, 15) & "..." & Right(Caption, 15)
                                End If
                                Caption = "<span style=""white-space:nowrap;"">" & Caption & "</span>"
                                QS = RQS
                                If Trim(Name) <> "" Then
                                    QS = genericController.ModifyQueryString(QS, "IndexFilterAddGroup", Name, True)
                                Else
                                    QS = genericController.ModifyQueryString(QS, "IndexFilterAddGroup", CStr(RecordID), True)
                                End If
                                Link = cpCore.siteProperties.adminURL & "?" & QS
                                SubFilterList = SubFilterList & "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """>" & Caption & "</a></div>"
                            End If
                            cpCore.db.cs_goNext(CS)
                        Loop
                    End If
                    If SubFilterList <> "" Then
                        returnContent &= "<div class=""ccFilterSubHead"">In Group(s)</div>" & SubFilterList
                    End If
                    '
                    ' Active Only
                    '
                    SubFilterList = ""
                    If Not .ActiveOnly Then
                        QS = RQS
                        QS = genericController.ModifyQueryString(QS, "IndexFilterActiveOnly", "1", True)
                        Link = cpCore.siteProperties.adminURL & "?" & QS
                        SubFilterList = SubFilterList & "<div class=""ccFilterIndent""><a class=""ccFilterLink"" href=""" & Link & """>Active&nbsp;Only</a></div>"
                    End If
                    If SubFilterList <> "" Then
                        returnContent &= "<div class=""ccFilterSubHead"">Other</div>" & SubFilterList
                    End If
                    '
                    returnContent &= "<div style=""border-bottom:1px dotted #808080;"">&nbsp;</div>"
                    '
                    ' Advanced Search Link
                    '
                    QS = RQS
                    QS = genericController.ModifyQueryString(QS, RequestNameAdminSubForm, AdminFormIndex_SubFormAdvancedSearch, True)
                    Link = cpCore.siteProperties.adminURL & "?" & QS
                    returnContent &= "<div class=""ccFilterHead""><a class=""ccFilterLink"" href=""" & Link & """>Advanced&nbsp;Search</a></div>"
                    '
                    returnContent &= "<div style=""border-bottom:1px dotted #808080;"">&nbsp;</div>"
                    '
                    ' Set Column Link
                    '
                    QS = RQS
                    QS = genericController.ModifyQueryString(QS, RequestNameAdminSubForm, AdminFormIndex_SubFormSetColumns, True)
                    Link = cpCore.siteProperties.adminURL & "?" & QS
                    returnContent &= "<div class=""ccFilterHead""><a class=""ccFilterLink"" href=""" & Link & """>Set&nbsp;Columns</a></div>"
                    '
                    returnContent &= "<div style=""border-bottom:1px dotted #808080;"">&nbsp;</div>"
                    '
                    ' Import Link
                    '
                    QS = RQS
                    QS = genericController.ModifyQueryString(QS, RequestNameAdminForm, AdminFormImportWizard, True)
                    Link = cpCore.siteProperties.adminURL & "?" & QS
                    returnContent &= "<div class=""ccFilterHead""><a class=""ccFilterLink"" href=""" & Link & """>Import</a></div>"
                    '
                    returnContent &= "<div style=""border-bottom:1px dotted #808080;"">&nbsp;</div>"
                    '
                    ' Export Link
                    '
                    QS = RQS
                    QS = genericController.ModifyQueryString(QS, RequestNameAdminSubForm, AdminFormIndex_SubFormExport, True)
                    Link = cpCore.siteProperties.adminURL & "?" & QS
                    returnContent &= "<div class=""ccFilterHead""><a class=""ccFilterLink"" href=""" & Link & """>Export</a></div>"
                    '
                    returnContent &= "<div style=""border-bottom:1px dotted #808080;"">&nbsp;</div>"
                    '
                    returnContent = "<div style=""padding-left:10px;padding-right:10px;"">" & returnContent & "</div>"
                End With
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return returnContent
        End Function
        '
        '=================================================================================
        '   Load the index configig
        '       if it is empty, setup defaults
        '=================================================================================
        '
        Private Function LoadIndexConfig(adminContent As cdefModel) As indexConfigClass
            Dim returnIndexConfig As New indexConfigClass
            Try
                '
                Dim ConfigListLine As String
                Dim Line As String
                Dim Ptr As Integer
                Dim ConfigList As String
                Dim ConfigListLines() As String
                Dim LineSplit() As String
                '
                With returnIndexConfig
                    '
                    ' Setup defaults
                    '
                    .ContentID = adminContent.Id
                    .ActiveOnly = False
                    .ContentCategoryID = 0
                    .LastEditedByMe = False
                    .LastEditedToday = False
                    .LastEditedPast7Days = False
                    .LastEditedPast30Days = False
                    '.FindWords.Count = 0
                    '.FindWordList = ""
                    .Loaded = True
                    .Open = False
                    .PageNumber = 1
                    .RecordsPerPage = RecordsPerPageDefault
                    .RecordTop = 0
                    '.SortCnt = 0
                    '.columns.count = 0
                    '
                    ' Setup Member Properties
                    '
                    ConfigList = cpCore.userProperty.getText(IndexConfigPrefix & CStr(adminContent.Id), "")
                    If ConfigList <> "" Then
                        '
                        ' load values
                        '
                        ConfigList = ConfigList & vbCrLf
                        ConfigListLines = genericController.SplitCRLF(ConfigList)
                        Ptr = 0
                        Do While Ptr < UBound(ConfigListLines)
                            '
                            ' check next line
                            '
                            ConfigListLine = genericController.vbLCase(ConfigListLines(Ptr))
                            If ConfigListLine <> "" Then
                                Select Case ConfigListLine
                                    Case "columns"
                                        Ptr = Ptr + 1
                                        Do While ConfigListLines(Ptr) <> ""
                                            Line = ConfigListLines(Ptr)
                                            LineSplit = Split(Line, vbTab, 2)
                                            If UBound(LineSplit) > 0 Then
                                                Dim column As New indexConfigColumnClass
                                                column.Name = LineSplit(0).Trim()
                                                column.Width = genericController.EncodeInteger(LineSplit(1))
                                                .Columns.Add(column.Name.ToLower(), column)
                                            End If
                                            Ptr = Ptr + 1
                                        Loop
                                    Case "sorts"
                                        Ptr = Ptr + 1
                                        Do While ConfigListLines(Ptr) <> ""
                                            'ReDim Preserve .Sorts(.SortCnt)
                                            Line = ConfigListLines(Ptr)
                                            LineSplit = Split(Line, vbTab, 2)
                                            If UBound(LineSplit) = 1 Then
                                                Dim sort As New indexConfigSortClass
                                                sort.fieldName = LineSplit(0)
                                                If genericController.EncodeBoolean(LineSplit(1)) Then
                                                    sort.Forward = True
                                                End If
                                                .Sorts.Add(sort.fieldName.ToLower, sort)
                                            End If
                                            Ptr = Ptr + 1
                                        Loop
                                End Select
                            End If
                            Ptr = Ptr + 1
                        Loop
                        If .RecordsPerPage <= 0 Then
                            .RecordsPerPage = RecordsPerPageDefault
                        End If
                        '.PageNumber = 1 + Int(.RecordTop / .RecordsPerPage)
                    End If
                    '
                    ' Setup Visit Properties
                    '
                    ConfigList = cpCore.visitProperty.getText(IndexConfigPrefix & CStr(adminContent.Id), "")
                    If ConfigList <> "" Then
                        '
                        ' load values
                        '
                        ConfigList = ConfigList & vbCrLf
                        ConfigListLines = genericController.SplitCRLF(ConfigList)
                        Ptr = 0
                        Do While Ptr < UBound(ConfigListLines)
                            '
                            ' check next line
                            '
                            ConfigListLine = genericController.vbLCase(ConfigListLines(Ptr))
                            If ConfigListLine <> "" Then
                                Select Case ConfigListLine
                                    Case "findwordlist"
                                        Ptr = Ptr + 1
                                        Do While ConfigListLines(Ptr) <> ""
                                            'ReDim Preserve .FindWords(.FindWords.Count)
                                            Line = ConfigListLines(Ptr)
                                            LineSplit = Split(Line, vbTab)
                                            If UBound(LineSplit) > 1 Then
                                                Dim findWord As New indexConfigFindWordClass
                                                findWord.Name = LineSplit(0)
                                                findWord.Value = LineSplit(1)
                                                findWord.MatchOption = DirectCast(genericController.EncodeInteger(LineSplit(2)), FindWordMatchEnum)
                                                .FindWords.Add(findWord.Name, findWord)
                                            End If
                                            Ptr = Ptr + 1
                                        Loop
                                    Case "grouplist"
                                        Ptr = Ptr + 1
                                        Do While ConfigListLines(Ptr) <> ""
                                            ReDim Preserve .GroupList(.GroupListCnt)
                                            .GroupList(.GroupListCnt) = ConfigListLines(Ptr)
                                            .GroupListCnt = .GroupListCnt + 1
                                            Ptr = Ptr + 1
                                        Loop
                                    Case "cdeflist"
                                        Ptr = Ptr + 1
                                        .SubCDefID = genericController.EncodeInteger(ConfigListLines(Ptr))
                                    Case "indexfiltercategoryid"
                                        Ptr = Ptr + 1
                                        .ContentCategoryID = genericController.EncodeInteger(ConfigListLines(Ptr))
                                    Case "indexfilteractiveonly"
                                        .ActiveOnly = True
                                    Case "indexfilterlasteditedbyme"
                                        .LastEditedByMe = True
                                    Case "indexfilterlasteditedtoday"
                                        .LastEditedToday = True
                                    Case "indexfilterlasteditedpast7days"
                                        .LastEditedPast7Days = True
                                    Case "indexfilterlasteditedpast30days"
                                        .LastEditedPast30Days = True
                                    Case "indexfilteropen"
                                        .Open = True
                                    Case "recordsperpage"
                                        Ptr = Ptr + 1
                                        .RecordsPerPage = genericController.EncodeInteger(ConfigListLines(Ptr))
                                        If .RecordsPerPage <= 0 Then
                                            .RecordsPerPage = 50
                                        End If
                                        .RecordTop = ((.PageNumber - 1) * .RecordsPerPage)
                                    Case "pagenumber"
                                        Ptr = Ptr + 1
                                        .PageNumber = genericController.EncodeInteger(ConfigListLines(Ptr))
                                        If .PageNumber <= 0 Then
                                            .PageNumber = 1
                                        End If
                                        .RecordTop = ((.PageNumber - 1) * .RecordsPerPage)
                                End Select
                            End If
                            Ptr = Ptr + 1
                        Loop
                        If .RecordsPerPage <= 0 Then
                            .RecordsPerPage = RecordsPerPageDefault
                        End If
                        '.PageNumber = 1 + Int(.RecordTop / .RecordsPerPage)
                    End If
                    '
                    ' Setup defaults if not loaded
                    '
                    If (.Columns.Count = 0) And (adminContent.adminColumns.Count > 0) Then
                        '.Columns.Count = adminContent.adminColumns.Count
                        'ReDim .Columns(.Columns.Count - 1)
                        'Ptr = 0
                        For Each keyValuepair In adminContent.adminColumns
                            Dim cdefAdminColumn As cdefModel.CDefAdminColumnClass = keyValuepair.Value
                            Dim column As New indexConfigColumnClass
                            column.Name = cdefAdminColumn.Name
                            column.Width = cdefAdminColumn.Width
                            returnIndexConfig.Columns.Add(column.Name.ToLower(), column)
                        Next
                    End If
                    '
                    ' Set field pointers for columns and sorts
                    '
                    ' dont knwo what this does
                    'For Each keyValuePair As KeyValuePair(Of String, appServices_metaDataClass.CDefFieldClass) In adminContent.fields
                    '    Dim field As appServices_metaDataClass.CDefFieldClass = keyValuePair.Value
                    '    If .Columns.Count > 0 Then
                    '        For Ptr = 0 To .Columns.Count - 1
                    '            With .Columns(Ptr)
                    '                If genericController.vbLCase(.Name) = field.Name.ToLower Then
                    '                    .FieldId = SrcPtr
                    '                    Exit For
                    '                End If
                    '            End With
                    '        Next
                    '    End If
                    '    '
                    '    If .SortCnt > 0 Then
                    '        For Ptr = 0 To .SortCnt - 1
                    '            With .Sorts(Ptr)
                    '                If genericController.vbLCase(.FieldName) = field.Name Then
                    '                    .FieldPtr = SrcPtr
                    '                    Exit For
                    '                End If
                    '            End With
                    '        Next
                    '    End If
                    'Next
                    '        '
                    '        ' set Column Field Ptr for later
                    '        '
                    '        If .columns.count > 0 Then
                    '            For Ptr = 0 To .columns.count - 1
                    '                With .Columns(Ptr)
                    '                    For SrcPtr = 0 To AdminContent.fields.count - 1
                    '                        If .Name = AdminContent.fields(SrcPtr).Name Then
                    '                            .FieldPointer = SrcPtr
                    '                            Exit For
                    '                        End If
                    '                    Next
                    '                End With
                    '            Next
                    '        End If
                    '        '
                    '        ' set Sort Field Ptr for later
                    '        '
                    '        If .SortCnt > 0 Then
                    '            For Ptr = 0 To .SortCnt - 1
                    '                With .Sorts(Ptr)
                    '                    For SrcPtr = 0 To AdminContent.fields.count - 1
                    '                        If genericController.vbLCase(.FieldName) = genericController.vbLCase(AdminContent.fields(SrcPtr).Name) Then
                    '                            .FieldPtr = SrcPtr
                    '                            Exit For
                    '                        End If
                    '                    Next
                    '                End With
                    '            Next
                    '        End If
                End With
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return returnIndexConfig
        End Function
        '
        '========================================================================================
        '   Process request input on the IndexConfig
        '========================================================================================
        '
        Private Sub ProcessIndexConfigRequests(adminContent As cdefModel, editRecord As editRecordClass, ByRef IndexConfig As indexConfigClass)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter("ProcessIndexConfigRequests")
            '
            Dim TestInteger As Integer
            Dim MatchOption As Integer
            Dim FindWordPtr As Integer
            Dim FormFieldCnt As Integer
            Dim FormFieldPtr As Integer
            Dim ContentFields() As indexConfigFindWordClass
            Dim NumericOption As String
            Dim fieldType As Integer
            Dim FieldValue As String
            Dim FieldName As String

            Dim CS As Integer
            Dim Criteria As String
            Dim VarText As String
            Dim FindName As String
            Dim FindValue As String
            Dim Ptr As Integer
            Dim ColumnCnt As Integer
            Dim ColumnPtr As Integer
            Dim Button As String
            ''Dim arrayOfFields() As appServices_metaDataClass.CDefFieldClass
            '
            'arrayOfFields = adminContent.fields
            With IndexConfig
                If Not .Loaded Then
                    IndexConfig = LoadIndexConfig(adminContent)
                End If
                '
                ' ----- Page number
                '
                VarText = cpCore.docProperties.getText("rt")
                If VarText <> "" Then
                    .RecordTop = genericController.EncodeInteger(VarText)
                End If
                '
                VarText = cpCore.docProperties.getText("RS")
                If VarText <> "" Then
                    .RecordsPerPage = genericController.EncodeInteger(VarText)
                End If
                If .RecordsPerPage <= 0 Then
                    .RecordsPerPage = RecordsPerPageDefault
                End If
                .PageNumber = CInt(1 + Int(.RecordTop / .RecordsPerPage))
                '
                ' ----- Process indexGoToPage value
                '
                TestInteger = cpCore.docProperties.getInteger("indexGoToPage")
                If TestInteger > 0 Then
                    .PageNumber = TestInteger
                    .RecordTop = ((.PageNumber - 1) * .RecordsPerPage)
                Else
                    '
                    ' ----- Read filter changes and First/Next/Previous from form
                    '
                    Button = cpCore.docProperties.getText(RequestNameButton)
                    If Button <> "" Then
                        Select Case AdminButton
                            Case ButtonFirst
                                '
                                ' Force to first page
                                '
                                .PageNumber = 1
                                .RecordTop = ((.PageNumber - 1) * .RecordsPerPage)
                            Case ButtonNext
                                '
                                ' Go to next page
                                '
                                .PageNumber = .PageNumber + 1
                                .RecordTop = ((.PageNumber - 1) * .RecordsPerPage)
                            Case ButtonPrevious
                                '
                                ' Go to previous page
                                '
                                .PageNumber = .PageNumber - 1
                                If .PageNumber <= 0 Then
                                    .PageNumber = 1
                                End If
                                .RecordTop = ((.PageNumber - 1) * .RecordsPerPage)
                            Case ButtonFind
                                '
                                ' Find (change search criteria and go to first page)
                                '
                                .PageNumber = 1
                                .RecordTop = ((.PageNumber - 1) * .RecordsPerPage)
                                ColumnCnt = cpCore.docProperties.getInteger("ColumnCnt")
                                If (ColumnCnt > 0) Then
                                    For ColumnPtr = 0 To ColumnCnt - 1
                                        FindValue = Trim(cpCore.docProperties.getText("FindValue" & ColumnPtr))
                                        FindName = genericController.vbLCase(cpCore.docProperties.getText("FindName" & ColumnPtr))
                                        If (Not String.IsNullOrEmpty(FindValue)) And (Not String.IsNullOrEmpty(FindName)) Then
                                            If Not .FindWords.ContainsKey(FindName) Then
                                                Dim findWord As New indexConfigFindWordClass
                                                findWord.Name = FindName
                                                findWord.Value = FindValue
                                                findWord.MatchOption = FindWordMatchEnum.matchincludes
                                                .FindWords.Add(FindName, findWord)
                                            Else
                                                .FindWords.Item(FindName).Value = FindValue
                                                .FindWords.Item(FindName).MatchOption = FindWordMatchEnum.matchincludes
                                            End If
                                            'If .FindWords.Count > 0 Then
                                            '    For Ptr = 0 To .FindWords.Count - 1
                                            '        If .FindWords(Ptr).Name = FindName Then
                                            '            Exit For
                                            '        End If
                                            '    Next
                                            'End If
                                            'If Ptr = .FindWords.Count Then
                                            '    '
                                            '    ' Findword was not found in the list, add it if the value is not empty
                                            '    '
                                            '    If FindValue <> "" Then
                                            '        ReDim Preserve .FindWords(Ptr)
                                            '        .FindWords(Ptr).Name = FindName
                                            '        .FindWords(Ptr).Value = FindValue
                                            '        .FindWords(Ptr).MatchOption = FindWordMatchEnum.matchincludes
                                            '        .FindWords.Count = Ptr + 1
                                            '    End If
                                            'Else
                                            '    '
                                            '    ' Findword was found, set config to the result
                                            '    '
                                            '    If FindValue = "" Then
                                            '        .FindWords(Ptr).Name = ""
                                            '    Else
                                            '        .FindWords(Ptr).Value = FindValue
                                            '        If .FindWords(Ptr).Type = FieldTypeInteger Then
                                            '            '.FindWords(Ptr).MatchOption = FindWordMatchEnum.MatchEquals
                                            '        Else
                                            '            .FindWords(Ptr).MatchOption = FindWordMatchEnum.matchincludes
                                            '        End If
                                            '    End If
                                            'End If
                                        End If
                                    Next
                                End If
                        End Select
                    End If
                End If
                '
                ' Process Filter form
                '
                If cpCore.docProperties.getBoolean("IndexFilterRemoveAll") Then
                    '
                    ' Remove all filters
                    '
                    .ContentCategoryID = 0
                    .FindWords = New Dictionary(Of String, indexConfigFindWordClass)
                    .GroupListCnt = 0
                    .SubCDefID = 0
                    .ActiveOnly = False
                    .LastEditedByMe = False
                    .LastEditedToday = False
                    .LastEditedPast7Days = False
                    .LastEditedPast30Days = False
                Else
                    Dim VarInteger As Integer
                    '
                    ' Add CDef
                    '
                    VarInteger = cpCore.docProperties.getInteger("IndexFilterAddCDef")
                    If VarInteger <> 0 Then
                        .SubCDefID = VarInteger
                        .PageNumber = 1
                        '                If .SubCDefCnt > 0 Then
                        '                    For Ptr = 0 To .SubCDefCnt - 1
                        '                        If VarInteger = .SubCDefs(Ptr) Then
                        '                            Exit For
                        '                        End If
                        '                    Next
                        '                End If
                        '                If Ptr = .SubCDefCnt Then
                        '                    ReDim Preserve .SubCDefs(.SubCDefCnt)
                        '                    .SubCDefs(.SubCDefCnt) = VarInteger
                        '                    .SubCDefCnt = .SubCDefCnt + 1
                        '                    .PageNumber = 1
                        '                End If
                    End If
                    '
                    ' Remove CDef
                    '
                    VarInteger = cpCore.docProperties.getInteger("IndexFilterRemoveCDef")
                    If VarInteger <> 0 Then
                        .SubCDefID = 0
                        .PageNumber = 1
                        '                If .SubCDefCnt > 0 Then
                        '                    For Ptr = 0 To .SubCDefCnt - 1
                        '                        If .SubCDefs(Ptr) = VarInteger Then
                        '                            .SubCDefs(Ptr) = 0
                        '                            .PageNumber = 1
                        '                            Exit For
                        '                        End If
                        '                    Next
                        '                End If
                    End If
                    '
                    ' Add Groups
                    '
                    VarText = cpCore.docProperties.getText("IndexFilterAddGroup").ToLower()
                    If VarText <> "" Then
                        If .GroupListCnt > 0 Then
                            For Ptr = 0 To .GroupListCnt - 1
                                If VarText = .GroupList(Ptr) Then
                                    Exit For
                                End If
                            Next
                        End If
                        If Ptr = .GroupListCnt Then
                            ReDim Preserve .GroupList(.GroupListCnt)
                            .GroupList(.GroupListCnt) = VarText
                            .GroupListCnt = .GroupListCnt + 1
                            .PageNumber = 1
                        End If
                    End If
                    '
                    ' Remove Groups
                    '
                    VarText = cpCore.docProperties.getText("IndexFilterRemoveGroup").ToLower()
                    If VarText <> "" Then
                        If .GroupListCnt > 0 Then
                            For Ptr = 0 To .GroupListCnt - 1
                                If .GroupList(Ptr) = VarText Then
                                    .GroupList(Ptr) = ""
                                    .PageNumber = 1
                                    Exit For
                                End If
                            Next
                        End If
                    End If
                    '
                    ' Remove FindWords
                    '
                    VarText = cpCore.docProperties.getText("IndexFilterRemoveFind").ToLower()
                    If VarText <> "" Then
                        If .FindWords.ContainsKey(VarText) Then
                            .FindWords.Remove(VarText)
                        End If
                        'If .FindWords.Count > 0 Then
                        '    For Ptr = 0 To .FindWords.Count - 1
                        '        If .FindWords(Ptr).Name = VarText Then
                        '            .FindWords(Ptr).MatchOption = FindWordMatchEnum.MatchIgnore
                        '            .FindWords(Ptr).Value = ""
                        '            .PageNumber = 1
                        '            Exit For
                        '        End If
                        '    Next
                        'End If
                    End If
                    '
                    ' Read ContentCategoryID
                    '
                    VarText = cpCore.docProperties.getText("IndexFilterCategoryID")
                    If VarText <> "" Then
                        .ContentCategoryID = genericController.EncodeInteger(VarText)
                        .PageNumber = 1
                    End If
                    VarText = cpCore.docProperties.getText("SetIndexFilterCategoryID")
                    If VarText <> "" Then
                        .ContentCategoryID = genericController.EncodeInteger(VarText)
                        .PageNumber = 1
                    End If
                    '
                    ' Read ActiveOnly
                    '
                    VarText = cpCore.docProperties.getText("IndexFilterActiveOnly")
                    If VarText <> "" Then
                        .ActiveOnly = genericController.EncodeBoolean(VarText)
                        .PageNumber = 1
                    End If
                    '
                    ' Read LastEditedByMe
                    '
                    VarText = cpCore.docProperties.getText("IndexFilterLastEditedByMe")
                    If VarText <> "" Then
                        .LastEditedByMe = genericController.EncodeBoolean(VarText)
                        .PageNumber = 1
                    End If
                    '
                    ' Last Edited Past 30 Days
                    '
                    VarText = cpCore.docProperties.getText("IndexFilterLastEditedPast30Days")
                    If VarText <> "" Then
                        .LastEditedPast30Days = genericController.EncodeBoolean(VarText)
                        .LastEditedPast7Days = False
                        .LastEditedToday = False
                        .PageNumber = 1
                    Else
                        '
                        ' Past 7 Days
                        '
                        VarText = cpCore.docProperties.getText("IndexFilterLastEditedPast7Days")
                        If VarText <> "" Then
                            .LastEditedPast30Days = False
                            .LastEditedPast7Days = genericController.EncodeBoolean(VarText)
                            .LastEditedToday = False
                            .PageNumber = 1
                        Else
                            '
                            ' Read LastEditedToday
                            '
                            VarText = cpCore.docProperties.getText("IndexFilterLastEditedToday")
                            If VarText <> "" Then
                                .LastEditedPast30Days = False
                                .LastEditedPast7Days = False
                                .LastEditedToday = genericController.EncodeBoolean(VarText)
                                .PageNumber = 1
                            End If
                        End If
                    End If
                    '
                    ' Read IndexFilterOpen
                    '
                    VarText = cpCore.docProperties.getText("IndexFilterOpen")
                    If VarText <> "" Then
                        .Open = genericController.EncodeBoolean(VarText)
                        .PageNumber = 1
                    End If
                    '
                    ' SortField
                    '
                    VarText = cpCore.docProperties.getText("SetSortField").ToLower()
                    If VarText <> "" Then
                        Dim sortReverse As Boolean
                        sortReverse = cpCore.docProperties.getBoolean("SetSortReverse")
                        If .Sorts.ContainsKey(VarText) Then
                            .Sorts.Item(VarText).Forward = Not sortReverse
                        Else
                            Dim sort As New indexConfigSortClass
                            sort.fieldName = VarText
                            sort.Forward = Not sortReverse
                            .Sorts.Add(VarText, sort)
                        End If
                        'VarText = genericController.vbLCase(VarText)
                        'If .SortCnt > 0 Then
                        '    For Ptr = 0 To .SortCnt - 1
                        '        If .Sorts(Ptr).FieldName = VarText Then
                        '            '
                        '            ' if field is found, check for the sort direction flag
                        '            '
                        '            If cpCore.main_GetStreamBoolean2("SetSortReverse") Then
                        '                .Sorts(Ptr).Forward = False
                        '            Else
                        '                .Sorts(Ptr).Forward = True
                        '            End If
                        '            .PageNumber = 1
                        '            Exit For
                        '            '                            '
                        '            '                            ' if field is found, flip sort direction
                        '            '                            '
                        '            '                            .Sorts(Ptr).Forward = Not .Sorts(Ptr).Forward
                        '            '                            .PageNumber = 1
                        '            '                            Exit For
                        '        End If
                        '    Next
                        'End If
                        'If Ptr = .SortCnt Then
                        '    '
                        '    ' if field is not found, create the new sort field
                        '    '
                        '    .SortCnt = 1
                        '    ReDim .Sorts(0)
                        '    .Sorts(0).FieldName = genericController.vbLCase(VarText)
                        '    .Sorts(0).Forward = True
                        '    .PageNumber = 1
                        'End If
                    End If
                    '
                    ' Build FindWordList
                    '
                    '.FindWordList = ""
                    'If .findwords.count > 0 Then
                    '    For Ptr = 0 To .findwords.count - 1
                    '        If .FindWords(Ptr).Value <> "" Then
                    '            .FindWordList = .FindWordList & vbCrLf & .FindWords(Ptr).Name & "=" & .FindWords(Ptr).Value
                    '        End If
                    '    Next
                    'End If
                End If
                '            Criteria = "(active<>0)and(ContentID=" & cpCore.main_GetContentID("people") & ")and(authorable<>0)"
                '            CS = cpCore.app.csOpen("Content Fields", Criteria, "EditSortPriority")
                '            Do While cpCore.app.csv_IsCSOK(CS)
                '                FieldName = cpCore.db.cs_getText(CS, "name")
                '                FieldValue = cpCore.main_GetStreamText2(FieldName)
                '                FieldType = cpCore.app.cs_getInteger(CS, "Type")
                '                Select Case FieldType
                '                    Case FieldTypeCurrency, FieldTypeFloat, FieldTypeInteger
                '                        NumericOption = cpCore.main_GetStreamText2(FieldName & "_N")
                '                        If NumericOption <> "" Then
                '                            '.FindWords(0).MatchOption = 1
                '                            ContactSearchCriteria = ContactSearchCriteria _
                '                                & vbCrLf _
                '                                & FieldName & vbTab _
                '                                & FieldType & vbTab _
                '                                & FieldValue & vbTab _
                '                                & NumericOption
                '                        End If
                '                    Case FieldTypeBoolean
                '                        If FieldValue <> "" Then
                '                            ContactSearchCriteria = ContactSearchCriteria _
                '                                & vbCrLf _
                '                                & FieldName & vbTab _
                '                                & FieldType & vbTab _
                '                                & FieldValue & vbTab _
                '                                & ""
                '                        End If
                '                    Case FieldTypeText
                '                        TextOption = cpCore.main_GetStreamText2(FieldName & "_T")
                '                        If TextOption <> "" Then
                '                            ContactSearchCriteria = ContactSearchCriteria _
                '                                & vbCrLf _
                '                                & FieldName & vbTab _
                '                                & CStr(FieldType) & vbTab _
                '                                & FieldValue & vbTab _
                '                                & TextOption
                '                        End If
                '                    Case FieldTypeLookup
                '                        If FieldValue <> "" Then
                '                            ContactSearchCriteria = ContactSearchCriteria _
                '                                & vbCrLf _
                '                                & FieldName & vbTab _
                '                                & FieldType & vbTab _
                '                                & FieldValue & vbTab _
                '                                & ""
                '                        End If
                '                End Select
                '                Call cpCore.app.nextCSRecord(CS)
                '            Loop
                '            Call cpCore.app.closeCS(CS)
                '            Call cpCore.main_SetMemberProperty("ContactSearchCriteria", ContactSearchCriteria)
                '        End If


                '
                ' Set field pointers for columns and sorts
                '
                'Dim SrcPtr As Integer
                'If .Columns.Count > 0 Or .SortCnt > 0 Then
                '    For Each keyValuePair As KeyValuePair(Of String, appServices_metaDataClass.CDefFieldClass) In adminContent.fields
                '        Dim field As appServices_metaDataClass.CDefFieldClass = keyValuePair.Value
                '        If .Columns.Count > 0 Then
                '            For Ptr = 0 To .Columns.Count - 1
                '                With .Columns(Ptr)
                '                    If genericController.vbLCase(.Name) = field.Name Then
                '                        .FieldId = SrcPtr
                '                        Exit For
                '                    End If
                '                End With
                '            Next
                '        End If
                '        '
                '        If .SortCnt > 0 Then
                '            For Ptr = 0 To .SortCnt - 1
                '                With .Sorts(Ptr)
                '                    If genericController.vbLCase(.FieldName) = field.Name Then
                '                        .FieldPtr = SrcPtr
                '                        Exit For
                '                    End If
                '                End With
                '            Next
                '        End If
                '    Next
                'End If
            End With
            '
            Exit Sub
ErrorTrap:
            Call handleLegacyClassError3("ProcessIndexConfigRequests")
        End Sub
        '
        '=================================================================================
        '
        '=================================================================================
        '
        Private Sub SaveIndexConfig(ByVal IndexConfig As indexConfigClass)
            '
            Dim FilterText As String
            Dim SubList As String
            Dim Ptr As Integer
            '
            ' ----- Save filter state to the visit property
            '
            With IndexConfig
                '
                ' -----------------------------------------------------------------------------------------------
                '   Visit Properties (non-persistant)
                ' -----------------------------------------------------------------------------------------------
                '
                FilterText = ""
                '
                ' Find words
                '
                SubList = ""
                For Each kvp In .FindWords
                    Dim findWord As indexConfigFindWordClass = kvp.Value
                    If (findWord.Name <> "") And (findWord.MatchOption <> FindWordMatchEnum.MatchIgnore) Then
                        SubList = SubList & vbCrLf & findWord.Name & vbTab & findWord.Value & vbTab & findWord.MatchOption
                    End If
                Next
                If SubList <> "" Then
                    FilterText = FilterText & vbCrLf & "FindWordList" & SubList & vbCrLf
                End If
                '
                ' CDef List
                '
                If .SubCDefID > 0 Then
                    FilterText = FilterText & vbCrLf & "CDefList" & vbCrLf & .SubCDefID & vbCrLf
                End If
                '        SubList = ""
                '        If .SubCDefCnt > 0 Then
                '            For Ptr = 0 To .SubCDefCnt - 1
                '                If .SubCDefs(Ptr) <> 0 Then
                '                    SubList = SubList & vbCrLf & .SubCDefs(Ptr)
                '                End If
                '            Next
                '        End If
                '        If SubList <> "" Then
                '            FilterText = FilterText & vbCrLf & "CDefList" & SubList & vbCrLf
                '        End If
                '
                ' Group List
                '
                SubList = ""
                If .GroupListCnt > 0 Then
                    For Ptr = 0 To .GroupListCnt - 1
                        If .GroupList(Ptr) <> "" Then
                            SubList = SubList & vbCrLf & .GroupList(Ptr)
                        End If
                    Next
                End If
                If SubList <> "" Then
                    FilterText = FilterText & vbCrLf & "GroupList" & SubList & vbCrLf
                End If
                '
                ' PageNumber and Records Per Page
                '
                FilterText = FilterText _
                    & vbCrLf & "" _
                    & vbCrLf & "pagenumber" _
                    & vbCrLf & .PageNumber
                FilterText = FilterText _
                    & vbCrLf & "" _
                    & vbCrLf & "recordsperpage" _
                    & vbCrLf & .RecordsPerPage
                '
                ' misc filters
                '
                If .ContentCategoryID <> 0 Then
                    FilterText = FilterText _
                        & vbCrLf & "" _
                        & vbCrLf & "IndexFilterCategoryID" _
                        & vbCrLf & .ContentCategoryID
                End If
                If .ActiveOnly Then
                    FilterText = FilterText _
                        & vbCrLf & "" _
                        & vbCrLf & "IndexFilterActiveOnly"
                End If
                If .LastEditedByMe Then
                    FilterText = FilterText _
                        & vbCrLf & "" _
                        & vbCrLf & "IndexFilterLastEditedByMe"
                End If
                If .LastEditedToday Then
                    FilterText = FilterText _
                        & vbCrLf & "" _
                        & vbCrLf & "IndexFilterLastEditedToday"
                End If
                If .LastEditedPast7Days Then
                    FilterText = FilterText _
                        & vbCrLf & "" _
                        & vbCrLf & "IndexFilterLastEditedPast7Days"
                End If
                If .LastEditedPast30Days Then
                    FilterText = FilterText _
                        & vbCrLf & "" _
                        & vbCrLf & "IndexFilterLastEditedPast30Days"
                End If
                If .Open Then
                    FilterText = FilterText _
                        & vbCrLf & "" _
                        & vbCrLf & "IndexFilterOpen"
                End If
                '
                Call cpCore.visitProperty.setProperty(IndexConfigPrefix & CStr(.ContentID), FilterText)
                '
                ' -----------------------------------------------------------------------------------------------
                '   Member Properties (persistant)
                ' -----------------------------------------------------------------------------------------------
                '
                FilterText = ""
                '
                ' Save Admin Column
                '
                SubList = ""
                For Each kvp In .Columns
                    Dim column As indexConfigColumnClass = kvp.Value
                    If column.Name <> "" Then
                        SubList = SubList & vbCrLf & column.Name & vbTab & column.Width
                    End If
                Next
                If SubList <> "" Then
                    FilterText = FilterText & vbCrLf & "Columns" & SubList & vbCrLf
                End If
                '
                ' Sorts
                '
                SubList = ""
                For Each kvp In .Sorts
                    Dim sort As indexConfigSortClass = kvp.Value
                    If sort.fieldName <> "" Then
                        SubList = SubList & vbCrLf & sort.fieldName & vbTab & sort.Forward
                    End If
                Next
                If SubList <> "" Then
                    FilterText = FilterText & vbCrLf & "Sorts" & SubList & vbCrLf
                End If
                Call cpCore.userProperty.setProperty(IndexConfigPrefix & CStr(.ContentID), FilterText)
            End With
            '

        End Sub
        '
        '
        '
        Private Function GetFormInputWithFocus2(ByVal ElementName As String, Optional ByVal CurrentValue As String = "", Optional ByVal Height As Integer = -1, Optional ByVal Width As Integer = -1, Optional ByVal ElementID As String = "", Optional ByVal OnFocusJavascript As String = "", Optional ByVal HtmlClass As String = "") As String
            GetFormInputWithFocus2 = cpCore.htmlDoc.html_GetFormInputText2(ElementName, CurrentValue, Height, Width, ElementID)
            If OnFocusJavascript <> "" Then
                GetFormInputWithFocus2 = genericController.vbReplace(GetFormInputWithFocus2, ">", " onFocus=""" & OnFocusJavascript & """>")
            End If
            If HtmlClass <> "" Then
                GetFormInputWithFocus2 = genericController.vbReplace(GetFormInputWithFocus2, ">", " class=""" & HtmlClass & """>")
            End If
        End Function
        '
        '
        '
        Private Function GetFormInputWithFocus(ByVal ElementName As String, ByVal CurrentValue As String, ByVal Height As Integer, ByVal Width As Integer, ByVal ElementID As String, ByVal OnFocus As String) As String
            GetFormInputWithFocus = GetFormInputWithFocus2(ElementName, CurrentValue, Height, Width, ElementID, OnFocus)
        End Function
        '
        '
        '
        Private Function GetFormInputDateWithFocus2(ByVal ElementName As String, Optional ByVal CurrentValue As String = "", Optional ByVal Width As String = "", Optional ByVal ElementID As String = "", Optional ByVal OnFocusJavascript As String = "", Optional ByVal HtmlClass As String = "") As String
            GetFormInputDateWithFocus2 = cpCore.htmlDoc.html_GetFormInputDate(ElementName, CurrentValue, Width, ElementID)
            If OnFocusJavascript <> "" Then
                GetFormInputDateWithFocus2 = genericController.vbReplace(GetFormInputDateWithFocus2, ">", " onFocus=""" & OnFocusJavascript & """>")
            End If
            If HtmlClass <> "" Then
                GetFormInputDateWithFocus2 = genericController.vbReplace(GetFormInputDateWithFocus2, ">", " class=""" & HtmlClass & """>")
            End If
        End Function
        '
        '
        '
        Private Function GetFormInputDateWithFocus(ByVal ElementName As String, ByVal CurrentValue As String, ByVal Width As String, ByVal ElementID As String, ByVal OnFocus As String) As String
            GetFormInputDateWithFocus = GetFormInputDateWithFocus2(ElementName, CurrentValue, Width, ElementID, OnFocus)
        End Function
        '
        '=================================================================================
        '
        '=================================================================================
        '
        Private Function GetForm_Index_AdvancedSearch(adminContent As cdefModel, editRecord As editRecordClass) As String
            Dim returnForm As String = ""
            Try
                '
                Dim SearchValue As String
                Dim MatchOption As FindWordMatchEnum
                Dim FormFieldPtr As Integer
                Dim FormFieldCnt As Integer
                Dim CDef As cdefModel
                Dim FieldName As String
                Dim Stream As New stringBuilderLegacyController
                Dim FieldPtr As Integer
                Dim RowEven As Boolean
                Dim Button As String
                Dim RQS As String
                Dim FieldNames() As String
                Dim FieldCaption() As String
                Dim fieldId() As Integer
                Dim fieldTypeId() As Integer
                Dim FieldValue() As String
                Dim FieldMatchOptions() As Integer
                Dim FieldMatchOption As Integer
                Dim FieldLookupContentName() As String
                Dim FieldLookupList() As String
                Dim ContentID As Integer
                Dim FieldCnt As Integer
                Dim FieldSize As Integer
                Dim RowPointer As Integer
                Dim Adminui As New adminUIController(cpCore)
                Dim LeftButtons As String = ""
                Dim ButtonBar As String
                Dim Title As String
                Dim TitleBar As String
                Dim Content As String
                Dim TitleDescription As String
                Dim IndexConfig As indexConfigClass
                '
                If Not (False) Then
                    '
                    ' Process last form
                    '
                    Button = cpCore.docProperties.getText("button")
                    If Button <> "" Then
                        Select Case Button
                            Case ButtonSearch
                                IndexConfig = LoadIndexConfig(adminContent)
                                With IndexConfig
                                    FormFieldCnt = cpCore.docProperties.getInteger("fieldcnt")
                                    If FormFieldCnt > 0 Then
                                        For FormFieldPtr = 0 To FormFieldCnt - 1
                                            FieldName = genericController.vbLCase(cpCore.docProperties.getText("fieldname" & FormFieldPtr))
                                            MatchOption = DirectCast(cpCore.docProperties.getInteger("FieldMatch" & FormFieldPtr), FindWordMatchEnum)
                                            Select Case MatchOption
                                                Case FindWordMatchEnum.MatchEquals, FindWordMatchEnum.MatchGreaterThan, FindWordMatchEnum.matchincludes, FindWordMatchEnum.MatchLessThan
                                                    SearchValue = cpCore.docProperties.getText("FieldValue" & FormFieldPtr)
                                                Case Else
                                                    SearchValue = ""
                                            End Select
                                            If Not .FindWords.ContainsKey(FieldName) Then
                                                '
                                                ' fieldname not found, save if not FindWordMatchEnum.MatchIgnore
                                                '
                                                If MatchOption <> FindWordMatchEnum.MatchIgnore Then
                                                    Dim findWord As New indexConfigFindWordClass
                                                    findWord.Name = FieldName
                                                    findWord.MatchOption = MatchOption
                                                    findWord.Value = SearchValue
                                                    .FindWords.Add(FieldName, findWord)
                                                End If
                                            Else
                                                '
                                                ' fieldname was found
                                                '
                                                .FindWords.Item(FieldName).MatchOption = MatchOption
                                                .FindWords.Item(FieldName).Value = SearchValue
                                            End If
                                        Next
                                    End If
                                End With
                                Call SaveIndexConfig(IndexConfig)
                                Exit Function
                            Case ButtonCancel
                                Exit Function
                        End Select
                    End If
                    IndexConfig = LoadIndexConfig(adminContent)
                    Button = "CriteriaSelect"
                    RQS = cpCore.htmlDoc.refreshQueryString
                    '
                    ' ----- ButtonBar
                    '
                    If MenuDepth > 0 Then
                        LeftButtons &= cpCore.htmlDoc.html_GetFormButton(ButtonClose, , , "window.close();")
                    Else
                        LeftButtons &= cpCore.htmlDoc.html_GetFormButton(ButtonCancel)
                        'LeftButtons &= cpCore.main_GetFormButton(ButtonCancel, , , "return processSubmit(this)")
                    End If
                    LeftButtons &= cpCore.htmlDoc.html_GetFormButton(ButtonSearch)
                    'LeftButtons &= cpCore.main_GetFormButton(ButtonSearch, , , "return processSubmit(this)")
                    ButtonBar = Adminui.GetButtonBar(LeftButtons, "")
                    '
                    ' ----- TitleBar
                    '
                    Title = adminContent.Name
                    Title = Title & " Advanced Search"
                    Title = "<strong>" & Title & "</strong>"
                    Title = SpanClassAdminNormal & Title & "</span>"
                    'Title = Title & cpCore.main_GetHelpLink(46, "Using the Advanced Search Page", BubbleCopy_AdminIndexPage)
                    TitleDescription = "<div>Enter criteria for each field to identify and select your results. The results of a search will have to have all of the criteria you enter.</div>"
                    TitleBar = Adminui.GetTitleBar(Title, TitleDescription)
                    '
                    ' ----- List out all fields
                    '
                    CDef = cpCore.metaData.getCdef(adminContent.Name)
                    FieldSize = 100
                    ReDim Preserve FieldNames(FieldSize)
                    ReDim Preserve FieldCaption(FieldSize)
                    ReDim Preserve fieldId(FieldSize)
                    ReDim Preserve fieldTypeId(FieldSize)
                    ReDim Preserve FieldValue(FieldSize)
                    ReDim Preserve FieldMatchOptions(FieldSize)
                    ReDim Preserve FieldLookupContentName(FieldSize)
                    ReDim Preserve FieldLookupList(FieldSize)
                    For Each keyValuePair As KeyValuePair(Of String, CDefFieldModel) In adminContent.fields
                        Dim field As CDefFieldModel = keyValuePair.Value
                        If FieldPtr >= FieldSize Then
                            FieldSize = FieldSize + 100
                            ReDim Preserve FieldNames(FieldSize)
                            ReDim Preserve FieldCaption(FieldSize)
                            ReDim Preserve fieldId(FieldSize)
                            ReDim Preserve fieldTypeId(FieldSize)
                            ReDim Preserve FieldValue(FieldSize)
                            ReDim Preserve FieldMatchOptions(FieldSize)
                            ReDim Preserve FieldLookupContentName(FieldSize)
                            ReDim Preserve FieldLookupList(FieldSize)
                        End If
                        With field
                            FieldName = genericController.vbLCase(.nameLc)
                            FieldNames(FieldPtr) = FieldName
                            FieldCaption(FieldPtr) = .caption
                            fieldId(FieldPtr) = .id
                            fieldTypeId(FieldPtr) = .fieldTypeId
                            If fieldTypeId(FieldPtr) = FieldTypeIdLookup Then
                                ContentID = .lookupContentID
                                If ContentID > 0 Then
                                    FieldLookupContentName(FieldPtr) = cpCore.metaData.getContentNameByID(ContentID)
                                End If
                                FieldLookupList(FieldPtr) = .lookupList
                            End If
                        End With
                        '
                        ' set prepoplate value from indexconfig
                        '
                        With IndexConfig
                            If .FindWords.ContainsKey(FieldName) Then
                                FieldValue(FieldPtr) = .FindWords(FieldName).Value
                                FieldMatchOptions(FieldPtr) = .FindWords(FieldName).MatchOption
                            End If
                        End With
                        FieldPtr += 1
                    Next
                    '        Criteria = "(active<>0)and(ContentID=" & adminContent.id & ")and(authorable<>0)"
                    '        CS = cpCore.app.csOpen("Content Fields", Criteria, "EditSortPriority")
                    '        FieldPtr = 0
                    '        Do While cpCore.app.csv_IsCSOK(CS)
                    '            If FieldPtr >= FieldSize Then
                    '                FieldSize = FieldSize + 100
                    '                ReDim Preserve FieldNames(FieldSize)
                    '                ReDim Preserve FieldCaption(FieldSize)
                    '                ReDim Preserve FieldID(FieldSize)
                    '                ReDim Preserve FieldType(FieldSize)
                    '                ReDim Preserve FieldValue(FieldSize)
                    '                ReDim Preserve FieldMatchOptions(FieldSize)
                    '                ReDim Preserve FieldLookupContentName(FieldSize)
                    '                ReDim Preserve FieldLookupList(FieldSize)
                    '            End If
                    '            FieldName = genericController.vbLCase(cpCore.db.cs_getText(CS, "name"))
                    '            FieldNames(FieldPtr) = FieldName
                    '            FieldCaption(FieldPtr) = cpCore.db.cs_getText(CS, "Caption")
                    '            FieldID(FieldPtr) = cpCore.app.cs_getInteger(CS, "ID")
                    '            FieldType(FieldPtr) = cpCore.app.cs_getInteger(CS, "Type")
                    '            If FieldType(FieldPtr) = 7 Then
                    '                ContentID = cpCore.app.cs_getInteger(CS, "LookupContentID")
                    '                If ContentID > 0 Then
                    '                    FieldLookupContentName(FieldPtr) = cpCore.metaData.getContentNameByID(ContentID)
                    '                End If
                    '                FieldLookupList(FieldPtr) = cpCore.db.cs_getText(CS, "LookupList")
                    '            End If
                    '            '
                    '            ' set prepoplate value from indexconfig
                    '            '
                    '            With IndexConfig
                    '                If .findwords.count > 0 Then
                    '                    For Ptr = 0 To .findwords.count - 1
                    '                        If .FindWords(Ptr).Name = FieldName Then
                    '                            FieldValue(FieldPtr) = .FindWords(Ptr).Value
                    '                            FieldMatchOptions(FieldPtr) = .FindWords(Ptr).MatchOption
                    '                            Exit For
                    '                        End If
                    '                    Next
                    '                End If
                    '            End With
                    ''            If CriteriaCount > 0 Then
                    ''                For CriteriaPointer = 0 To CriteriaCount - 1
                    ''                    FieldMatchOptions(FieldPtr) = 0
                    ''                    If genericController.vbInstr(1, CriteriaValues(CriteriaPointer), FieldNames(FieldPtr) & "=", vbTextCompare) = 1 Then
                    ''                        NameValues = Split(CriteriaValues(CriteriaPointer), "=")
                    ''                        FieldValue(FieldPtr) = NameValues(1)
                    ''                        FieldMatchOptions(FieldPtr) = 1
                    ''                    ElseIf genericController.vbInstr(1, CriteriaValues(CriteriaPointer), FieldNames(FieldPtr) & ">", vbTextCompare) = 1 Then
                    ''                        NameValues = Split(CriteriaValues(CriteriaPointer), ">")
                    ''                        FieldValue(FieldPtr) = NameValues(1)
                    ''                        FieldMatchOptions(FieldPtr) = 2
                    ''                    ElseIf genericController.vbInstr(1, CriteriaValues(CriteriaPointer), FieldNames(FieldPtr) & "<", vbTextCompare) = 1 Then
                    ''                        NameValues = Split(CriteriaValues(CriteriaPointer), "<")
                    ''                        FieldValue(FieldPtr) = NameValues(1)
                    ''                        FieldMatchOptions(FieldPtr) = 3
                    ''                    End If
                    ''                Next
                    ''            End If
                    '            FieldPtr = FieldPtr + 1
                    '            Call cpCore.app.nextCSRecord(CS)
                    '        Loop
                    '        Call cpCore.app.closeCS(CS)
                    FieldCnt = FieldPtr
                    '
                    ' Add headers to stream
                    '
                    returnForm = returnForm & "<table border=0 width=100% cellspacing=0 cellpadding=4>"
                    '
                    RowPointer = 0
                    For FieldPtr = 0 To FieldCnt - 1
                        returnForm = returnForm & cpCore.htmlDoc.html_GetFormInputHidden("fieldname" & FieldPtr, FieldNames(FieldPtr))
                        RowEven = ((RowPointer Mod 2) = 0)
                        FieldMatchOption = FieldMatchOptions(FieldPtr)
                        Select Case fieldTypeId(FieldPtr)
                            Case FieldTypeIdDate
                                '
                                ' Date
                                '
                                returnForm = returnForm _
                                & "<tr>" _
                                & "<td class=""ccAdminEditCaption"">" & FieldCaption(FieldPtr) & "</td>" _
                                & "<td class=""ccAdminEditField"">" _
                                & "<div style=""display:block;float:left;width:800px;"">" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchIgnore).ToString, FieldMatchOption.ToString, "") & "ignore</div>" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchEmpty).ToString, FieldMatchOption.ToString, "") & "empty</div>" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchNotEmpty).ToString, FieldMatchOption.ToString, "") & "not&nbsp;empty</div>" _
                                & "<div style=""display:block;float:left;width:50px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchEquals).ToString, FieldMatchOption.ToString, "") & "=</div>" _
                                & "<div style=""display:block;float:left;width:50px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchGreaterThan).ToString, FieldMatchOption.ToString, "") & "&gt;</div>" _
                                & "<div style=""display:block;float:left;width:50px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchLessThan).ToString, FieldMatchOption.ToString, "") & "&lt;</div>" _
                                & "<div style=""display:block;float:left;width:300px;"">" & GetFormInputDateWithFocus2("fieldvalue" & FieldPtr, FieldValue(FieldPtr), "5", "", "", "ccAdvSearchText") & "</div>" _
                                & "</div>" _
                                & "</td>" _
                                & "</tr>"
                            Case FieldTypeIdCurrency, FieldTypeIdFloat, FieldTypeIdInteger, FieldTypeIdFloat, FieldTypeIdAutoIdIncrement
                                '
                                ' Numeric
                                '
                                ' changed FindWordMatchEnum.MatchEquals to MatchInclude to be compatible with Find Search
                                returnForm = returnForm _
                                & "<tr>" _
                                & "<td class=""ccAdminEditCaption"">" & FieldCaption(FieldPtr) & "</td>" _
                                & "<td class=""ccAdminEditField"">" _
                                & "<div style=""display:block;float:left;width:800px;"">" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchIgnore).ToString, FieldMatchOption.ToString, "") & "ignore</div>" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchEmpty).ToString, FieldMatchOption.ToString, "") & "empty</div>" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchNotEmpty).ToString, FieldMatchOption.ToString, "") & "not&nbsp;empty</div>" _
                                & "<div style=""display:block;float:left;width:50px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.matchincludes).ToString, FieldMatchOption.ToString, "n" & FieldPtr) & "=</div>" _
                                & "<div style=""display:block;float:left;width:50px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchGreaterThan).ToString, FieldMatchOption.ToString, "") & "&gt;</div>" _
                                & "<div style=""display:block;float:left;width:50px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchLessThan).ToString, FieldMatchOption.ToString, "") & "&lt;</div>" _
                                & "<div style=""display:block;float:left;width:300px;"">" & GetFormInputWithFocus2("fieldvalue" & FieldPtr, FieldValue(FieldPtr), 1, 5, "", "var e=getElementById('n" & FieldPtr & "');e.checked=1;", "ccAdvSearchText") & "</div>" _
                                & "</div>" _
                                & "</td>" _
                                & "</tr>"

                                '                    s = s _
                                '                        & "<tr>" _
                                '                        & "<td class=""ccAdminEditCaption"">" & FieldCaption(FieldPtr) & "</td>" _
                                '                        & "<td class=""ccAdminEditField"">" _
                                '                        & "<table border=0 width=100% cellspacing=0 cellpadding=0><tr>" _
                                '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchIgnore, FieldMatchOption, "") & "</td><td align=left width=100>ignore</td>" _
                                '                            & "<td width=10>&nbsp;&nbsp;</td>" _
                                '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchEmpty, FieldMatchOption, "") & "</td><td align=left width=100>empty</td>" _
                                '                            & "<td width=10>&nbsp;&nbsp;</td>" _
                                '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchNotEmpty, FieldMatchOption, "") & "</td><td align=left width=100>not&nbsp;empty</td>" _
                                '                            & "<td width=10>&nbsp;&nbsp;</td>" _
                                '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchEquals, FieldMatchOption, "") & "</td><td align=left width=100>=</td>" _
                                '                            & "<td width=10>&nbsp;&nbsp;</td>" _
                                '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchGreaterThan, FieldMatchOption, "") & "</td><td align=left width=100>&gt;</td>" _
                                '                            & "<td width=10>&nbsp;&nbsp;</td>" _
                                '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchLessThan, FieldMatchOption, "") & "</td><td align=left width=100>&lt;</td>" _
                                '                            & "<td width=10>&nbsp;&nbsp;</td>" _
                                '                            & "<td align=left width=99%>" & GetFormInputWithFocus("fieldvalue" & FieldPtr, FieldValue(FieldPtr), 1, 5, "", "") & "</td>" _
                                '                        & "</tr></table>" _
                                '                        & "</td>" _
                                '                        & "</tr>"

                                RowPointer = RowPointer + 1
                            Case FieldTypeIdFile, FieldTypeIdFileImage
                                '
                                ' File
                                '
                                returnForm = returnForm _
                                & "<tr>" _
                                & "<td class=""ccAdminEditCaption"">" & FieldCaption(FieldPtr) & "</td>" _
                                & "<td class=""ccAdminEditField"">" _
                                & "<div style=""display:block;float:left;width:800px;"">" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchIgnore).ToString, FieldMatchOption.ToString, "") & "ignore</div>" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchEmpty).ToString, FieldMatchOption.ToString, "") & "empty</div>" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchNotEmpty).ToString, FieldMatchOption.ToString, "") & "not&nbsp;empty</div>" _
                                & "</div>" _
                                & "</td>" _
                                & "</tr>"
                                's = s _
                                '    & "<tr>" _
                                '    & "<td class=""ccAdminEditCaption"">" & FieldCaption(FieldPtr) & "</td>" _
                                '    & "<td class=""ccAdminEditField"">" _
                                '    & "<table border=0 width=100% cellspacing=0 cellpadding=0><tr>" _
                                '        & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchIgnore, FieldMatchOption, "") & "</td><td align=left width=100>ignore</td>" _
                                '        & "<td width=10>&nbsp;&nbsp;</td>" _
                                '        & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchEmpty, FieldMatchOption, "") & "</td><td align=left width=100>empty</td>" _
                                '        & "<td width=10>&nbsp;&nbsp;</td>" _
                                '        & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchNotEmpty, FieldMatchOption, "") & "</td><td align=left width=100>not&nbsp;empty</td>" _
                                '        & "<td align=left width=99%>&nbsp;</td>" _
                                '    & "</tr></table>" _
                                '    & "</td>" _
                                '    & "</tr>"
                                RowPointer = RowPointer + 1
                            Case FieldTypeIdBoolean
                                '
                                ' Boolean
                                '
                                returnForm = returnForm _
                                & "<tr>" _
                                & "<td class=""ccAdminEditCaption"">" & FieldCaption(FieldPtr) & "</td>" _
                                & "<td class=""ccAdminEditField"">" _
                                & "<div style=""display:block;float:left;width:800px;"">" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchIgnore).ToString, FieldMatchOption.ToString, "") & "ignore</div>" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchTrue).ToString, FieldMatchOption.ToString, "") & "true</div>" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchFalse).ToString, FieldMatchOption.ToString, "") & "false</div>" _
                                & "</div>" _
                                & "</td>" _
                                & "</tr>"
                            '                    s = s _
                            '                        & "<tr>" _
                            '                        & "<td class=""ccAdminEditCaption"">" & FieldCaption(FieldPtr) & "</td>" _
                            '                        & "<td class=""ccAdminEditField"">" _
                            '                        & "<table border=0 width=100% cellspacing=0 cellpadding=0><tr>" _
                            '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchIgnore, FieldMatchOption, "") & "</td><td align=left width=100>  ignore</td>" _
                            '                            & "<td width=10>&nbsp;&nbsp;</td>" _
                            '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchTrue, FieldMatchOption, "") & "</td><td align=left width=100>true</td>" _
                            '                            & "<td width=10>&nbsp;&nbsp;</td>" _
                            '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchFalse, FieldMatchOption, "") & "</td><td align=left width=100>false</td>" _
                            '                            & "<td width=99%>&nbsp;</td>" _
                            '                        & "</tr></table>" _
                            '                        & "</td>" _
                            '                        & "</tr>"
                            Case FieldTypeIdText, FieldTypeIdLongText, FieldTypeIdHTML, FieldTypeIdFileHTMLPrivate, FieldTypeIdFileCSS, FieldTypeIdFileJavascript, FieldTypeIdFileXML
                                '
                                ' Text
                                '
                                returnForm = returnForm _
                                & "<tr>" _
                                & "<td class=""ccAdminEditCaption"">" & FieldCaption(FieldPtr) & "</td>" _
                                & "<td class=""ccAdminEditField"">" _
                                & "<div style=""display:block;float:left;width:800px;"">" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchIgnore).ToString, FieldMatchOption.ToString, "") & "ignore</div>" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchEmpty).ToString, FieldMatchOption.ToString, "") & "empty</div>" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchNotEmpty).ToString, FieldMatchOption.ToString, "") & "not&nbsp;empty</div>" _
                                & "<div style=""display:block;float:left;width:150px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.matchincludes).ToString, FieldMatchOption.ToString, "t" & FieldPtr) & "includes</div>" _
                                & "<div style=""display:block;float:left;width:300px;"">" & GetFormInputWithFocus2("fieldvalue" & FieldPtr, FieldValue(FieldPtr), 1, 5, "", "var e=getElementById('t" & FieldPtr & "');e.checked=1;", "ccAdvSearchText") & "</div>" _
                                & "</div>" _
                                & "</td>" _
                                & "</tr>"
                                '
                                '
                                '                    s = s _
                                '                        & "<tr>" _
                                '                        & "<td class=""ccAdminEditCaption"">" & FieldCaption(FieldPtr) & "</td>" _
                                '                        & "<td class=""ccAdminEditField"" valign=absmiddle>" _
                                '                        & "<table border=0 width=100% cellspacing=0 cellpadding=0><tr>" _
                                '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchIgnore, FieldMatchOption, "") & "</td><td align=left width=100>&nbsp;&nbsp;ignore</td>" _
                                '                            & "<td width=10>&nbsp;&nbsp;</td>" _
                                '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchEmpty, FieldMatchOption, "") & "</td><td align=left width=100>empty</td>" _
                                '                            & "<td width=10>&nbsp;&nbsp;</td>" _
                                '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchNotEmpty, FieldMatchOption, "") & "</td><td align=left width=100>not&nbsp;empty</td>" _
                                '                            & "<td width=10>&nbsp;&nbsp;</td>" _
                                '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.matchincludes, FieldMatchOption, "t" & FieldPtr) & "</td><td align=center width=100>includes&nbsp;</td>" _
                                '                            & "<td align=left width=99%>" & GetFormInputWithFocus("FieldValue" & FieldPtr, FieldValue(FieldPtr), 1, 20, "", "var e=getElementById('t" & FieldPtr & "');e.checked=1;") & "</td>" _
                                '                        & "</tr></table>" _
                                '                        & "</td>" _
                                '                        & "</tr>"
                                RowPointer = RowPointer + 1
                            Case FieldTypeIdLookup, FieldTypeIdMemberSelect
                                '
                                ' Lookup
                                '
                                'Dim SelectOption As String
                                'Dim CurrentValue As String
                                'If FieldLookupContentName(FieldPtr) <> "" Then
                                '    ContentName = FieldLookupContentName(FieldPtr)
                                '    DataSourceName = cpCore.metaData.GetContentDataSource(ContentName)
                                '    TableName = cpCore.main_GetContentTablename(ContentName)
                                '    SQL = "select distinct Name from " & TableName & " where (name is not null) order by name"
                                '    CS = cpCore.app.openCsSql_rev(DataSourceName, SQL)
                                '    If Not cpCore.app.csv_IsCSOK(CS) Then
                                '        selector = "no options"
                                '    Else
                                '        selector = vbCrLf & "<select name=""FieldValue" & FieldPtr & """ onFocus=""var e=getElementById('t" & FieldPtr & "');e.checked=1;"">"
                                '        CurrentValue = FieldValue(FieldPtr)
                                '        Do While cpCore.app.csv_IsCSOK(CS)
                                '            SelectOption = cpCore.db.cs_getText(CS, "name")
                                '            If CurrentValue = SelectOption Then
                                '                selector = selector & vbCrLf & "<option selected>" & SelectOption & "</option>"
                                '            Else
                                '                selector = selector & vbCrLf & "<option>" & SelectOption & "</option>"
                                '            End If
                                '            Call cpCore.app.nextCSRecord(CS)
                                '        Loop
                                '        selector = selector & vbCrLf & "</select>"
                                '    End If
                                '    Call cpCore.app.closeCS(CS)
                                '    'selector = cpCore.htmldoc.main_GetFormInputSelect2("FieldValue" & FieldPtr, FieldValue(FieldPtr), FieldLookupContentName(FieldPtr))
                                'Else
                                '    selector = cpCore.htmldoc.main_GetFormInputSelectList2("FieldValue" & FieldPtr, FieldValue(FieldPtr), FieldLookupList(FieldPtr))
                                'End If
                                'selector = genericController.vbReplace(selector, ">", "onFocus=""var e=getElementById('t" & FieldPtr & "');e.checked=1;"">")
                                returnForm = returnForm _
                                & "<tr>" _
                                & "<td class=""ccAdminEditCaption"">" & FieldCaption(FieldPtr) & "</td>" _
                                & "<td class=""ccAdminEditField"">" _
                                & "<div style=""display:block;float:left;width:800px;"">" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchIgnore).ToString, FieldMatchOption.ToString, "") & "ignore</div>" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchEmpty).ToString, FieldMatchOption.ToString, "") & "empty</div>" _
                                & "<div style=""display:block;float:left;width:100px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.MatchNotEmpty).ToString, FieldMatchOption.ToString, "") & "not&nbsp;empty</div>" _
                                & "<div style=""display:block;float:left;width:150px;"">" & cpCore.htmlDoc.html_GetFormInputRadioBox("FieldMatch" & FieldPtr, CInt(FindWordMatchEnum.matchincludes).ToString, FieldMatchOption.ToString, "t" & FieldPtr) & "includes</div>" _
                                & "<div style=""display:block;float:left;width:300px;"">" & GetFormInputWithFocus2("fieldvalue" & FieldPtr, FieldValue(FieldPtr), 1, 5, "", "var e=getElementById('t" & FieldPtr & "');e.checked=1;", "ccAdvSearchText") & "</div>" _
                                & "</div>" _
                                & "</td>" _
                                & "</tr>"

                                '& "<div style=""display:block;float:left;width:150px;"">" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchEquals, FieldMatchOption, "t" & FieldPtr) & "=&nbsp;</div>" _
                                '& "<div style=""display:block;float:left;width:300px;"">" & selector & "</div>" _

                                '                    s = s _
                                '                        & "<tr>" _
                                '                        & "<td class=""ccAdminEditCaption"">" & FieldCaption(FieldPtr) & "</td>" _
                                '                        & "<td class=""ccAdminEditField"" valign=absmiddle>" _
                                '                        & "<table border=0 width=100% cellspacing=0 cellpadding=0><tr>" _
                                '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchIgnore, FieldMatchOption, "") & "</td><td align=left width=100>&nbsp;&nbsp;ignore</td>" _
                                '                            & "<td width=10>&nbsp;&nbsp;</td>" _
                                '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchEmpty, FieldMatchOption, "") & "</td><td align=left width=100>empty</td>" _
                                '                            & "<td width=10>&nbsp;&nbsp;</td>" _
                                '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchNotEmpty, FieldMatchOption, "") & "</td><td align=left width=100>not&nbsp;empty</td>" _
                                '                            & "<td width=10>&nbsp;&nbsp;</td>" _
                                '                            & "<td width=10 align=right>" & cpCore.main_GetFormInputRadioBox("FieldMatch" & FieldPtr, FindWordMatchEnum.MatchEquals, FieldMatchOption, "t" & FieldPtr) & "</td><td align=center width=100>=&nbsp;</td>" _
                                '                            & "<td align=left width=99%>" & selector & "</td>" _
                                '                        & "</tr></table>" _
                                '                        & "</td>" _
                                '                        & "</tr>"



                                's = s & "<tr><td class=""ccAdminEditCaption"">" & FieldCaption(FieldPtr) & "</td>"
                                'If FieldLookupContentName(FieldPtr) <> "" Then
                                '    s = s _
                                '        & "<td class=""ccAdminEditField"">" _
                                '        & cpCore.htmldoc.main_GetFormInputSelect2(FieldNames(FieldPtr), FieldValue(FieldPtr), FieldLookupContentName(FieldPtr), , "Any") & "</td>"
                                'Else
                                '    s = s _
                                '        & "<td class=""ccAdminEditField"">" _
                                '        & cpCore.htmldoc.main_GetFormInputSelectList2(FieldNames(FieldPtr), FieldValue(FieldPtr), FieldLookupList(FieldPtr), , "Any") & "</td>"
                                'End If
                                's = s & "</tr>"
                                RowPointer = RowPointer + 1
                        End Select
                    Next
                    returnForm = returnForm & genericController.StartTableRow()
                    returnForm = returnForm & genericController.StartTableCell("120", 1, RowEven, "right") & "<img src=/ccLib/images/spacer.gif width=120 height=1></td>"
                    returnForm = returnForm & genericController.StartTableCell("99%", 1, RowEven, "left") & "<img src=/ccLib/images/spacer.gif width=1 height=1></td>"
                    returnForm = returnForm & kmaEndTableRow
                    returnForm = returnForm & "</table>"
                    Content = returnForm
                    '
                    ' Assemble LiveWindowTable
                    '
                    '        Stream.Add( OpenLiveWindowTable)
                    Stream.Add(vbCrLf & cpCore.htmlDoc.html_GetFormStart())
                    Stream.Add(ButtonBar)
                    Stream.Add(TitleBar)
                    Stream.Add(Content)
                    Stream.Add(ButtonBar)
                    Stream.Add("<input type=hidden name=fieldcnt VALUE=" & FieldCnt & ">")
                    'Stream.Add( "<input type=hidden name=af VALUE=" & AdminFormIndex & ">")
                    Stream.Add("<input type=hidden name=" & RequestNameAdminSubForm & " VALUE=" & AdminFormIndex_SubFormAdvancedSearch & ">")
                    Stream.Add("</form>")
                    '        Stream.Add( CloseLiveWindowTable)
                    '
                    returnForm = Stream.Text
                    Call cpCore.htmlDoc.main_AddPagetitle(adminContent.Name & " Advanced Search")
                End If
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return returnForm
        End Function
        '
        '=============================================================================
        '   Export the Admin List form results
        '=============================================================================
        '
        Private Function GetForm_Index_Export(adminContent As cdefModel, editRecord As editRecordClass) As String
            On Error GoTo ErrorTrap
            '
            Dim AllowContentAccess As Boolean
            Dim ButtonList As String = ""
            Dim ExportName As String
            Dim Adminui As New adminUIController(cpCore)
            Dim Description As String
            Dim Content As String = ""
            Dim ExportType As Integer
            Dim Button As String
            Dim RecordLimit As Integer
            Dim recordCnt As Integer
            'Dim DataSourceName As String
            'Dim DataSourceType As Integer
            Dim sqlFieldList As String = ""
            Dim SQLFrom As String = ""
            Dim SQLWhere As String = ""
            Dim SQLOrderBy As String = ""
            Dim IsLimitedToSubContent As Boolean
            Dim ContentAccessLimitMessage As String = ""
            Dim FieldUsedInColumns As New Dictionary(Of String, Boolean)
            Dim IsLookupFieldValid As New Dictionary(Of String, Boolean)
            Dim IndexConfig As indexConfigClass
            Dim SQL As String
            Dim CS As Integer
            Dim RecordTop As Integer
            Dim RecordsPerPage As Integer
            Dim IsRecordLimitSet As Boolean
            Dim RecordLimitText As String
            Dim allowContentEdit As Boolean
            Dim allowContentAdd As Boolean
            Dim allowContentDelete As Boolean
            Dim datasource As Models.Entity.dataSourceModel = Models.Entity.dataSourceModel.create(cpCore, adminContent.dataSourceId, New List(Of String))
            '
            ' ----- Process Input
            '
            Button = cpCore.docProperties.getText("Button")
            If Button = ButtonCancelAll Then
                '
                ' Cancel out to the main page
                '
                Call cpCore.webServer.redirect("?", "CancelAll button pressed on Index Export", False)
            ElseIf Button <> ButtonCancel Then
                '
                ' get content access rights
                '
                Call cpCore.authContext.getContentAccessRights(cpCore, adminContent.Name, allowContentEdit, allowContentAdd, allowContentDelete)
                If Not allowContentEdit Then
                    'If Not cpcore.authContext.user.main_IsContentManager2(AdminContent.Name) Then
                    '
                    ' You must be a content manager of this content to use this tool
                    '
                    Content = "" _
                        & "<p>You must be a content manager of " & adminContent.Name & " to use this tool. Hit Cancel to return to main admin page.</p>" _
                        & cpCore.htmlDoc.html_GetFormInputHidden(RequestNameAdminSubForm, AdminFormIndex_SubFormExport) _
                        & ""
                    ButtonList = ButtonCancelAll
                Else
                    IsRecordLimitSet = False
                    If Button = "" Then
                        '
                        ' Set Defaults
                        '
                        ExportName = ""
                        ExportType = 1
                        RecordLimit = 0
                        RecordLimitText = ""
                    Else
                        ExportName = cpCore.docProperties.getText("ExportName")
                        ExportType = cpCore.docProperties.getInteger("ExportType")
                        RecordLimitText = cpCore.docProperties.getText("RecordLimit")
                        If RecordLimitText <> "" Then
                            IsRecordLimitSet = True
                            RecordLimit = genericController.EncodeInteger(RecordLimitText)
                        End If
                    End If
                    If ExportName = "" Then
                        ExportName = adminContent.Name & " export for " & cpCore.authContext.user.Name
                    End If
                    '
                    ' Get the SQL parts
                    '
                    'DataSourceName = cpCore.db.getDataSourceNameByID(adminContent.dataSourceId)
                    'DataSourceType = cpCore.db.getDataSourceType(DataSourceName)
                    IndexConfig = LoadIndexConfig(adminContent)
                    RecordTop = IndexConfig.RecordTop
                    RecordsPerPage = IndexConfig.RecordsPerPage
                    Call SetIndexSQL(adminContent, editRecord, AllowContentAccess, sqlFieldList, SQLFrom, SQLWhere, SQLOrderBy, IsLimitedToSubContent, ContentAccessLimitMessage, FieldUsedInColumns, IsLookupFieldValid, IndexConfig, datasource.Name, datasource.type, RecordTop, RecordsPerPage)
                    If Not AllowContentAccess Then
                        '
                        ' This should be caught with check earlier, but since I added this, and I never make mistakes, I will leave this in case there is a mistake in the earlier code
                        '
                        Call cpCore.error_AddUserError("Your account does not have access to any records in '" & adminContent.Name & "'.")
                    Else
                        '
                        ' Get the total record count
                        '
                        SQL = "select count(" & adminContent.ContentTableName & ".ID) as cnt from " & SQLFrom & " where " & SQLWhere
                        CS = cpCore.db.cs_openCsSql_rev(datasource.Name, SQL)
                        If cpCore.db.cs_ok(CS) Then
                            recordCnt = cpCore.db.cs_getInteger(CS, "cnt")
                        End If
                        Call cpCore.db.cs_Close(CS)
                        '
                        ' Build the SQL
                        '
                        SQL = "select"
                        If IsRecordLimitSet And (datasource.type <> DataSourceTypeODBCMySQL) Then
                            SQL &= " Top " & RecordLimit
                        End If
                        SQL &= " " & adminContent.ContentTableName & ".* From " & SQLFrom & " WHERE " & SQLWhere
                        If SQLOrderBy <> "" Then
                            SQL &= " Order By" & SQLOrderBy
                        End If
                        If IsRecordLimitSet And (datasource.type = DataSourceTypeODBCMySQL) Then
                            SQL &= " Limit " & RecordLimit
                        End If
                        '
                        ' Assumble the SQL
                        '
                        If recordCnt = 0 Then
                            '
                            ' There are no records to request
                            '
                            Content = "" _
                                & "<p>This selection has no records.. Hit Cancel to return to the " & adminContent.Name & " list page.</p>" _
                                & cpCore.htmlDoc.html_GetFormInputHidden(RequestNameAdminSubForm, AdminFormIndex_SubFormExport) _
                                & ""
                            ButtonList = ButtonCancel
                        ElseIf Button = ButtonRequestDownload Then
                            '
                            ' Request the download
                            '
                            Select Case ExportType
                                Case 1
                                    Call taskSchedulerController.main_RequestTask(cpCore, "BuildCSV", SQL, ExportName, "Export-" & CStr(cpCore.common_GetRandomLong) & ".csv")
                                Case Else
                                    Call taskSchedulerController.main_RequestTask(cpCore, "BuildXML", SQL, ExportName, "Export-" & CStr(cpCore.common_GetRandomLong) & ".xml")
                            End Select
                            '
                            Content = "" _
                                & "<p>Your export has been requested and will be available shortly in the <a href=""?" & RequestNameAdminForm & "=" & AdminFormDownloads & """>Download Manager</a>. Hit Cancel to return to the " & adminContent.Name & " list page.</p>" _
                                & cpCore.htmlDoc.html_GetFormInputHidden(RequestNameAdminSubForm, AdminFormIndex_SubFormExport) _
                                & ""
                            '
                            ButtonList = ButtonCancel
                        Else
                            '
                            ' no button or refresh button, Ask are you sure
                            '
                            Content = Content _
                                & cr & "<tr>" _
                                & cr2 & "<td class=""exportTblCaption"">Export Name</td>" _
                                & cr2 & "<td class=""exportTblInput"">" & cpCore.htmlDoc.html_GetFormInputText2("ExportName", ExportName) & "</td>" _
                                & cr & "</tr>"
                            Content = Content _
                                & cr & "<tr>" _
                                & cr2 & "<td class=""exportTblCaption"">Export Format</td>" _
                                & cr2 & "<td class=""exportTblInput"">" & cpCore.htmlDoc.main_GetFormInputSelectList2("ExportType", ExportType, "Comma Delimited,XML", "", "") & "</td>" _
                                & cr & "</tr>"
                            Content = Content _
                                & cr & "<tr>" _
                                & cr2 & "<td class=""exportTblCaption"">Records Found</td>" _
                                & cr2 & "<td class=""exportTblInput"">" & cpCore.htmlDoc.html_GetFormInputText2("RecordCnt", CStr(recordCnt), , , , , True) & "</td>" _
                                & cr & "</tr>"
                            Content = Content _
                                & cr & "<tr>" _
                                & cr2 & "<td class=""exportTblCaption"">Record Limit</td>" _
                                & cr2 & "<td class=""exportTblInput"">" & cpCore.htmlDoc.html_GetFormInputText2("RecordLimit", RecordLimitText) & "</td>" _
                                & cr & "</tr>"
                            If cpCore.authContext.isAuthenticatedDeveloper(cpCore) Then
                                Content = Content _
                                    & cr & "<tr>" _
                                    & cr2 & "<td class=""exportTblCaption"">Results SQL</td>" _
                                    & cr2 & "<td class=""exportTblInput""><div style=""border:1px dashed #ccc;background-color:#fff;padding:10px;"">" & SQL & "</div></td>" _
                                    & cr & "</tr>" _
                                    & ""
                            End If
                            '
                            Content = "" _
                                & cr & "<table>" _
                                & genericController.kmaIndent(Content) _
                                & cr & "</table>" _
                                & ""
                            '
                            Content = "" _
                                & cr & "<style>" _
                                & cr2 & ".exportTblCaption {width:100px;}" _
                                & cr2 & ".exportTblInput {}" _
                                & cr & "</style>" _
                                & Content _
                                & cpCore.htmlDoc.html_GetFormInputHidden(RequestNameAdminSubForm, AdminFormIndex_SubFormExport) _
                                & ""
                            ButtonList = ButtonCancel & "," & ButtonRequestDownload
                            If cpCore.authContext.isAuthenticatedDeveloper(cpCore) Then
                                ButtonList = ButtonList & "," & ButtonRefresh
                            End If
                        End If
                    End If
                End If
                '
                Description = "<p>This tool creates an export of the current admin list page results. If you would like to download the current results, select a format and press OK. Your search results will be submitted for export. Your download will be ready shortly in the download manager. To exit without requesting an output, hit Cancel.</p>"
                GetForm_Index_Export = "" _
                    & Adminui.GetBody(adminContent.Name & " Export", ButtonList, "", False, False, Description, "", 10, Content)
            End If
            '
            Exit Function
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Index_Export")
        End Function
        '
        '=============================================================================
        '   Print the Configure Index Form
        '=============================================================================
        '
        Private Function GetForm_Index_SetColumns(adminContent As cdefModel, editRecord As editRecordClass) As String
            On Error GoTo ErrorTrap
            '
            Dim Button As String
            Dim Ptr As Integer
            Dim Description As String

            Dim NeedToReloadCDef As Boolean
            Dim Title As String
            Dim TitleBar As String
            Dim Content As String
            Dim ButtonBar As String
            Dim Adminui As New adminUIController(cpCore)
            Dim SQL As String
            Dim MenuHeader As String
            Dim ColumnPtr As Integer
            Dim ColumnWidth As Integer
            Dim FieldPtr As Integer
            Dim FieldName As String
            Dim FieldToAdd As Integer
            Dim AStart As String
            Dim CS As Integer
            Dim SetSort As Boolean
            Dim MenuEntryID As Integer
            Dim MenuHeaderID As Integer
            Dim MenuDirection As Integer
            Dim SourceID As Integer
            Dim PreviousID As Integer
            Dim SetID As Integer
            Dim NextSetID As Integer
            Dim SwapWithPrevious As Boolean
            Dim HitID As Integer
            Dim HitTable As String
            Dim SortPriorityLowest As Integer
            Dim TempColumn As String
            Dim Tempfield As String
            Dim TempWidth As String
            Dim TempSortPriority As Integer
            Dim TempSortDirection As Integer
            Dim CSPointer As Integer
            Dim RecordID As Integer
            Dim ContentID As Integer
            Dim CDef As cdefModel
            'Dim AdminColumn As appServices_metaDataClass.CDefAdminColumnType
            Dim RowFieldID() As Integer
            Dim RowFieldWidth() As Integer
            Dim RowFieldCaption() As String
            'Dim RowFieldCount as integer
            Dim NonRowFieldID() As Integer
            Dim NonRowFieldCaption() As String
            Dim NonRowFieldCount As Integer
            Dim ContentName As String
            '
            Dim dt As DataTable
            Dim IndexWidth As Integer
            Dim CS1 As Integer
            Dim CS2 As Integer
            Dim FieldPtr1 As Integer
            Dim FieldPtr2 As Integer
            Dim NewRowFieldWidth As Integer
            Dim TargetFieldID As Integer
            Dim TargetFieldName As String
            '
            Dim ColumnWidthTotal As Integer
            '
            Dim ColumnPointer As Integer
            Dim CDefFieldCount As Integer
            Dim fieldId As Integer
            Dim FieldWidth As Integer
            Dim AllowContentAutoLoad As Boolean
            Dim TargetFieldPtr As Integer
            Dim MoveNextColumn As Boolean
            Dim FieldNameToAdd As String
            Dim FieldIDToAdd As Integer
            Dim CSSource As Integer
            Dim CSTarget As Integer
            Dim SourceContentID As Integer
            Dim SourceName As String
            Dim NeedToReloadConfig As Boolean
            Dim InheritedFieldCount As Integer
            Dim Caption As String
            'Dim ContentNameValues() As NameValuePrivateType
            Dim ContentCount As Integer
            Dim ContentSize As Integer
            Dim Stream As New stringBuilderLegacyController
            Dim ButtonList As String
            Dim FormPanel As String
            Dim ColumnWidthIncrease As Integer
            Dim ColumnWidthBalance As Integer
            Dim ToolsAction As Integer
            Dim IndexConfig As indexConfigClass
            ''Dim arrayOfFields() As appServices_metaDataClass.CDefFieldClass
            Dim FieldPointerTemp As Integer
            Dim NameTemp As String
            Dim WidthTemp As Integer
            '
            Const RequestNameAddField = "addfield"
            Const RequestNameAddFieldID = "addfieldID"
            '
            '
            '--------------------------------------------------------------------------------
            '   Process Button
            '--------------------------------------------------------------------------------
            '
            Button = cpCore.docProperties.getText(RequestNameButton)
            If Button = ButtonOK Then
                Exit Function
            End If
            '
            '--------------------------------------------------------------------------------
            '   Load Request
            '--------------------------------------------------------------------------------
            '
            ContentID = adminContent.Id
            ContentName = cpCore.metaData.getContentNameByID(ContentID)
            If Button = ButtonReset Then
                Call cpCore.userProperty.setProperty(IndexConfigPrefix & CStr(ContentID), "")
            End If
            IndexConfig = LoadIndexConfig(adminContent)
            Title = adminContent.Name & " Columns"
            Description = "Use the icons to add, remove and modify your personal column prefernces for this content (" & ContentName & "). Hit OK when complete. Hit Reset to restore your column preferences for this content to the site's default column preferences."
            ToolsAction = cpCore.docProperties.getInteger("dta")
            TargetFieldID = cpCore.docProperties.getInteger("fi")
            TargetFieldName = cpCore.docProperties.getText("FieldName")
            ColumnPointer = cpCore.docProperties.getInteger("dtcn")
            FieldNameToAdd = genericController.vbUCase(cpCore.docProperties.getText(RequestNameAddField))
            FieldIDToAdd = cpCore.docProperties.getInteger(RequestNameAddFieldID)
            'ButtonList = ButtonCancel & "," & ButtonSelect
            NeedToReloadConfig = cpCore.docProperties.getBoolean("NeedToReloadConfig")
            '
            '--------------------------------------------------------------------------------
            ' Process actions
            '--------------------------------------------------------------------------------
            '
            If ContentID <> 0 Then
                CDef = cpCore.metaData.getCdef(ContentName)
                If ToolsAction <> 0 Then
                    '
                    ' Block contentautoload, then force a load at the end
                    '
                    AllowContentAutoLoad = (cpCore.siteProperties.getBoolean("AllowContentAutoLoad", True))
                    Call cpCore.siteProperties.setProperty("AllowContentAutoLoad", False)
                    '
                    ' Make sure the FieldNameToAdd is not-inherited, if not, create new field
                    '
                    If (FieldIDToAdd <> 0) Then
                        For Each keyValuePair As KeyValuePair(Of String, CDefFieldModel) In adminContent.fields
                            Dim field As CDefFieldModel = keyValuePair.Value
                            If field.id = FieldIDToAdd Then
                                'If CDef.fields(FieldPtr).Name = FieldNameToAdd Then
                                If field.inherited Then
                                    SourceContentID = field.contentId
                                    SourceName = field.nameLc
                                    CSSource = cpCore.db.cs_open("Content Fields", "(ContentID=" & SourceContentID & ")and(Name=" & cpCore.db.encodeSQLText(SourceName) & ")")
                                    If cpCore.db.cs_ok(CSSource) Then
                                        CSTarget = cpCore.db.cs_insertRecord("Content Fields")
                                        If cpCore.db.cs_ok(CSTarget) Then
                                            Call cpCore.cs_CopyRecord(CSSource, CSTarget)
                                            Call cpCore.db.cs_set(CSTarget, "ContentID", ContentID)
                                            NeedToReloadCDef = True
                                        End If
                                        Call cpCore.db.cs_Close(CSTarget)
                                    End If
                                    Call cpCore.db.cs_Close(CSSource)
                                End If
                                Exit For
                            End If
                        Next
                    End If
                    '
                    ' Make sure all fields are not-inherited, if not, create new fields
                    '
                    For Each kvp In IndexConfig.Columns
                        Dim column As indexConfigColumnClass = kvp.Value
                        Dim field As CDefFieldModel = adminContent.fields(column.Name.ToLower())
                        If field.inherited Then
                            SourceContentID = field.contentId
                            SourceName = field.nameLc
                            CSSource = cpCore.db.cs_open("Content Fields", "(ContentID=" & SourceContentID & ")and(Name=" & cpCore.db.encodeSQLText(SourceName) & ")")
                            If cpCore.db.cs_ok(CSSource) Then
                                CSTarget = cpCore.db.cs_insertRecord("Content Fields")
                                If cpCore.db.cs_ok(CSTarget) Then
                                    Call cpCore.cs_CopyRecord(CSSource, CSTarget)
                                    Call cpCore.db.cs_set(CSTarget, "ContentID", ContentID)
                                    NeedToReloadCDef = True
                                End If
                                Call cpCore.db.cs_Close(CSTarget)
                            End If
                            Call cpCore.db.cs_Close(CSSource)
                        End If
                    Next
                    '
                    ' get current values for Processing
                    '
                    For Each kvp In IndexConfig.Columns
                        Dim column As indexConfigColumnClass = kvp.Value
                        ColumnWidthTotal += column.Width
                    Next
                    '
                    ' ----- Perform any actions first
                    '
                    Select Case ToolsAction
                        Case ToolsActionAddField
                            '
                            ' Add a field to the index form
                            '
                            If FieldIDToAdd <> 0 Then
                                Dim column As indexConfigColumnClass
                                For Each kvp In IndexConfig.Columns
                                    column = kvp.Value
                                    column.Width = CInt((column.Width * 80) / ColumnWidthTotal)
                                Next
                                column = New indexConfigColumnClass
                                CSPointer = cpCore.csOpen("Content Fields", FieldIDToAdd, False, False)
                                If cpCore.db.cs_ok(CSPointer) Then
                                    column.Name = cpCore.main_cs_get2Text(CSPointer, "name")
                                    column.Width = 20
                                End If
                                Call cpCore.db.cs_Close(CSPointer)
                                IndexConfig.Columns.Add(column.Name.ToLower(), column)
                                NeedToReloadConfig = True
                            End If
                            '
                        Case ToolsActionRemoveField
                            '
                            ' Remove a field to the index form
                            '
                            Dim column As indexConfigColumnClass
                            If IndexConfig.Columns.ContainsKey(TargetFieldName.ToLower()) Then
                                column = IndexConfig.Columns(TargetFieldName.ToLower())
                                ColumnWidthTotal = ColumnWidthTotal + column.Width
                                IndexConfig.Columns.Remove(TargetFieldName.ToLower())
                                '
                                ' Normalize the widths of the remaining columns
                                '
                                For Each kvp In IndexConfig.Columns
                                    column = kvp.Value
                                    column.Width = CInt((1000 * column.Width) / ColumnWidthTotal)
                                Next
                                NeedToReloadConfig = True
                            End If
                        Case ToolsActionMoveFieldLeft
                            '
                            ' Move column field left
                            '
                            'If IndexConfig.Columns.Count > 1 Then
                            '    MoveNextColumn = False
                            '    For ColumnPointer = 1 To IndexConfig.Columns.Count - 1
                            '        If TargetFieldName = IndexConfig.Columns(ColumnPointer).Name Then
                            '            With IndexConfig.Columns(ColumnPointer)
                            '                FieldPointerTemp = .FieldId
                            '                NameTemp = .Name
                            '                WidthTemp = .Width
                            '                .FieldId = IndexConfig.Columns(ColumnPointer - 1).FieldId
                            '                .Name = IndexConfig.Columns(ColumnPointer - 1).Name
                            '                .Width = IndexConfig.Columns(ColumnPointer - 1).Width
                            '            End With
                            '            With IndexConfig.Columns(ColumnPointer - 1)
                            '                .FieldId = FieldPointerTemp
                            '                .Name = NameTemp
                            '                .Width = WidthTemp
                            '            End With
                            '        End If
                            '    Next
                            '    NeedToReloadConfig = True
                            'End If
                            ' end case
                        Case ToolsActionMoveFieldRight
                            '
                            ' Move Index column field right
                            '
                            'If IndexConfig.Columns.Count > 1 Then
                            '    MoveNextColumn = False
                            '    For ColumnPointer = 0 To IndexConfig.Columns.Count - 2
                            '        If TargetFieldName = IndexConfig.Columns(ColumnPointer).Name Then
                            '            With IndexConfig.Columns(ColumnPointer)
                            '                FieldPointerTemp = .FieldId
                            '                NameTemp = .Name
                            '                WidthTemp = .Width
                            '                .FieldId = IndexConfig.Columns(ColumnPointer + 1).FieldId
                            '                .Name = IndexConfig.Columns(ColumnPointer + 1).Name
                            '                .Width = IndexConfig.Columns(ColumnPointer + 1).Width
                            '            End With
                            '            With IndexConfig.Columns(ColumnPointer + 1)
                            '                .FieldId = FieldPointerTemp
                            '                .Name = NameTemp
                            '                .Width = WidthTemp
                            '            End With
                            '        End If
                            '    Next
                            '    NeedToReloadConfig = True
                            'End If
                            ' end case
                        Case ToolsActionExpand
                            '
                            ' Expand column
                            '
                            'ColumnWidthBalance = 0
                            'If IndexConfig.Columns.Count > 1 Then
                            '    '
                            '    ' Calculate the total width of the non-target columns
                            '    '
                            '    ColumnWidthIncrease = CInt(ColumnWidthTotal * 0.1)
                            '    For ColumnPointer = 0 To IndexConfig.Columns.Count - 1
                            '        If TargetFieldName <> IndexConfig.Columns(ColumnPointer).Name Then
                            '            ColumnWidthBalance = ColumnWidthBalance + IndexConfig.Columns(ColumnPointer).Width
                            '        End If
                            '    Next
                            '    '
                            '    ' Adjust all columns
                            '    '
                            '    If ColumnWidthBalance > 0 Then
                            '        For ColumnPointer = 0 To IndexConfig.Columns.Count - 1
                            '            With IndexConfig.Columns(ColumnPointer)
                            '                If TargetFieldName = .Name Then
                            '                    '
                            '                    ' Target gets 10% increase
                            '                    '
                            '                    .Width = Int(.Width + ColumnWidthIncrease)
                            '                Else
                            '                    '
                            '                    ' non-targets get their share of the shrinkage
                            '                    '
                            '                    .Width = CInt(.Width - ((ColumnWidthIncrease * .Width) / ColumnWidthBalance))
                            '                End If
                            '            End With
                            '        Next
                            '        NeedToReloadConfig = True
                            '    End If
                            'End If

                            ' end case
                        Case ToolsActionContract
                            '
                            ' Contract column
                            '
                            'ColumnWidthBalance = 0
                            'If IndexConfig.Columns.Count > 0 Then
                            '    '
                            '    ' Calculate the total width of the non-target columns
                            '    '
                            '    ColumnWidthIncrease = CInt(-(ColumnWidthTotal * 0.1))
                            '    For ColumnPointer = 0 To IndexConfig.Columns.Count - 1
                            '        With IndexConfig.Columns(ColumnPointer)
                            '            If TargetFieldName <> .Name Then
                            '                ColumnWidthBalance = ColumnWidthBalance + IndexConfig.Columns(ColumnPointer).Width
                            '            End If
                            '        End With
                            '    Next
                            '    '
                            '    ' Adjust all columns
                            '    '
                            '    If (ColumnWidthBalance > 0) And (ColumnWidthIncrease <> 0) Then
                            '        For ColumnPointer = 0 To IndexConfig.Columns.Count - 1
                            '            With IndexConfig.Columns(ColumnPointer)
                            '                If TargetFieldName = .Name Then
                            '                    '
                            '                    ' Target gets 10% increase
                            '                    '
                            '                    .Width = Int(.Width + ColumnWidthIncrease)
                            '                Else
                            '                    '
                            '                    ' non-targets get their share of the shrinkage
                            '                    '
                            '                    .Width = CInt(.Width - ((ColumnWidthIncrease * FieldWidth) / ColumnWidthBalance))
                            '                End If
                            '            End With
                            '        Next
                            '        NeedToReloadConfig = True
                            '    End If
                            'End If
                    End Select
                    '
                    ' Reload CDef if it changed
                    '
                    If NeedToReloadCDef Then
                        cpCore.metaData.clear()
                        cpCore.cache.invalidateAll()
                        CDef = cpCore.metaData.getCdef(ContentName)
                    End If
                    '
                    ' save indexconfig
                    '
                    If NeedToReloadConfig Then
                        Call SaveIndexConfig(IndexConfig)
                        IndexConfig = LoadIndexConfig(adminContent)
                    End If
                End If
                '
                '--------------------------------------------------------------------------------
                '   Display the form
                '--------------------------------------------------------------------------------
                '
                Stream.Add("<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""99%""><tr>")
                Stream.Add("<td width=""5%"">&nbsp;</td>")
                Stream.Add("<td width=""9%"" align=""center"" class=""ccAdminSmall""><nobr>10%</nobr></td>")
                Stream.Add("<td width=""9%"" align=""center"" class=""ccAdminSmall""><nobr>20%</nobr></td>")
                Stream.Add("<td width=""9%"" align=""center"" class=""ccAdminSmall""><nobr>30%</nobr></td>")
                Stream.Add("<td width=""9%"" align=""center"" class=""ccAdminSmall""><nobr>40%</nobr></td>")
                Stream.Add("<td width=""9%"" align=""center"" class=""ccAdminSmall""><nobr>50%</nobr></td>")
                Stream.Add("<td width=""9%"" align=""center"" class=""ccAdminSmall""><nobr>60%</nobr></td>")
                Stream.Add("<td width=""9%"" align=""center"" class=""ccAdminSmall""><nobr>70%</nobr></td>")
                Stream.Add("<td width=""9%"" align=""center"" class=""ccAdminSmall""><nobr>80%</nobr></td>")
                Stream.Add("<td width=""9%"" align=""center"" class=""ccAdminSmall""><nobr>90%</nobr></td>")
                Stream.Add("<td width=""9%"" align=""center"" class=""ccAdminSmall""><nobr>100%</nobr></td>")
                Stream.Add("<td width=""4%"" align=""center"">&nbsp;</td>")
                Stream.Add("</tr></table>")
                '
                Stream.Add("<table border=""0"" cellpadding=""0"" cellspacing=""0"" width=""99%""><tr>")
                Stream.Add("<td width=""9%""><nobr><img src=""/ccLib/images/black.gif"" width=""1"" height=""10"" ><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""10"" ></nobr></td>")
                Stream.Add("<td width=""9%""><nobr><img src=""/ccLib/images/black.gif"" width=""1"" height=""10"" ><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""10"" ></nobr></td>")
                Stream.Add("<td width=""9%""><nobr><img src=""/ccLib/images/black.gif"" width=""1"" height=""10"" ><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""10"" ></nobr></td>")
                Stream.Add("<td width=""9%""><nobr><img src=""/ccLib/images/black.gif"" width=""1"" height=""10"" ><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""10"" ></nobr></td>")
                Stream.Add("<td width=""9%""><nobr><img src=""/ccLib/images/black.gif"" width=""1"" height=""10"" ><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""10"" ></nobr></td>")
                Stream.Add("<td width=""9%""><nobr><img src=""/ccLib/images/black.gif"" width=""1"" height=""10"" ><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""10"" ></nobr></td>")
                Stream.Add("<td width=""9%""><nobr><img src=""/ccLib/images/black.gif"" width=""1"" height=""10"" ><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""10"" ></nobr></td>")
                Stream.Add("<td width=""9%""><nobr><img src=""/ccLib/images/black.gif"" width=""1"" height=""10"" ><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""10"" ></nobr></td>")
                Stream.Add("<td width=""9%""><nobr><img src=""/ccLib/images/black.gif"" width=""1"" height=""10"" ><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""10"" ></nobr></td>")
                Stream.Add("<td width=""9%""><nobr><img src=""/ccLib/images/black.gif"" width=""1"" height=""10"" ><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""10"" ></nobr></td>")
                Stream.Add("<td width=""9%""><nobr><img src=""/ccLib/images/black.gif"" width=""1"" height=""10"" ><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""10"" ></nobr></td>")
                Stream.Add("</tr></table>")
                '
                ' print the column headers
                '
                ColumnWidthTotal = 0
                If IndexConfig.Columns.Count > 0 Then
                    '
                    ' Calc total width
                    '
                    For Each kvp In IndexConfig.Columns
                        Dim column As indexConfigColumnClass = kvp.Value
                        ColumnWidthTotal += column.Width
                    Next
                    If ColumnWidthTotal > 0 Then
                        Stream.Add("<table border=""0"" cellpadding=""5"" cellspacing=""0"" width=""90%"">")
                        For Each kvp In IndexConfig.Columns
                            Dim column As indexConfigColumnClass
                            column = kvp.Value
                            '
                            ' print column headers - anchored so they sort columns
                            '
                            ColumnWidth = CInt(100 * (column.Width / ColumnWidthTotal))
                            Dim field As CDefFieldModel
                            field = adminContent.fields(column.Name.ToLower())
                            With field
                                fieldId = .id
                                Caption = .caption
                                If .inherited Then
                                    Caption = Caption & "*"
                                    InheritedFieldCount = InheritedFieldCount + 1
                                End If
                                AStart = "<a href=""?" & cpCore.htmlDoc.refreshQueryString & "&FieldName=" & cpCore.htmlDoc.html_EncodeHTML(.nameLc) & "&fi=" & fieldId & "&dtcn=" & ColumnPtr & "&" & RequestNameAdminSubForm & "=" & AdminFormIndex_SubFormSetColumns
                                Call Stream.Add("<td width=""" & ColumnWidth & "%"" valign=""top"" align=""left"">" & SpanClassAdminNormal & Caption & "<br >")
                                Call Stream.Add("<img src=""/ccLib/images/black.GIF"" width=""100%"" height=""1"" >")
                                Call Stream.Add(AStart & "&dta=" & ToolsActionRemoveField & """><img src=""/ccLib/images/LibButtonDeleteUp.gif"" width=""50"" height=""15"" border=""0"" ></A><BR >")
                                Call Stream.Add(AStart & "&dta=" & ToolsActionMoveFieldRight & """><img src=""/ccLib/images/LibButtonMoveRightUp.gif"" width=""50"" height=""15"" border=""0"" ></A><BR >")
                                Call Stream.Add(AStart & "&dta=" & ToolsActionMoveFieldLeft & """><img src=""/ccLib/images/LibButtonMoveLeftUp.gif"" width=""50"" height=""15"" border=""0"" ></A><BR >")
                                'Call Stream.Add(AStart & "&dta=" & ToolsActionSetAZ & """><img src=""/ccLib/images/LibButtonSortazUp.gif"" width=""50"" height=""15"" border=""0"" ></A><BR >")
                                'Call Stream.Add(AStart & "&dta=" & ToolsActionSetZA & """><img src=""/ccLib/images/LibButtonSortzaUp.gif"" width=""50"" height=""15"" border=""0"" ></A><BR >")
                                Call Stream.Add(AStart & "&dta=" & ToolsActionExpand & """><img src=""/ccLib/images/LibButtonOpenUp.gif"" width=""50"" height=""15"" border=""0"" ></A><BR >")
                                Call Stream.Add(AStart & "&dta=" & ToolsActionContract & """><img src=""/ccLib/images/LibButtonCloseUp.gif"" width=""50"" height=""15"" border=""0"" ></A>")
                                Call Stream.Add("</span></td>")
                            End With
                        Next
                        Stream.Add("</tr>")
                        Stream.Add("</table>")
                    End If
                End If
                '
                ' ----- If anything was inherited, put up the message
                '
                If InheritedFieldCount > 0 Then
                    Call Stream.Add("<p class=""ccNormal"">* This field was inherited from the Content Definition's Parent. Inherited fields will automatically change when the field in the parent is changed. If you alter these settings, this connection will be broken, and the field will no longer inherit it's properties.</P class=""ccNormal"">")
                End If
                '
                ' ----- now output a list of fields to add
                '
                If CDef.fields.Count = 0 Then
                    Stream.Add(SpanClassAdminNormal & "This Content Definition has no fields</span><br>")
                Else
                    Stream.Add(SpanClassAdminNormal & "<br>")
                    For Each keyValuePair As KeyValuePair(Of String, CDefFieldModel) In adminContent.fields
                        Dim field As CDefFieldModel = keyValuePair.Value
                        With field
                            '
                            ' display the column if it is not in use
                            '
                            If Not IndexConfig.Columns.ContainsKey(field.nameLc) Then
                                If False Then
                                    ' this causes more problems then it fixes
                                    'If Not .Authorable Then
                                    '
                                    ' not authorable
                                    '
                                    Stream.Add("<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""50"" height=""15"" border=""0"" > " & .caption & " (not authorable field)<br>")
                                ElseIf (.fieldTypeId = FieldTypeIdFile) Then
                                    '
                                    ' file can not be search
                                    '
                                    Stream.Add("<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""50"" height=""15"" border=""0"" > " & .caption & " (file field)<br>")
                                ElseIf (.fieldTypeId = FieldTypeIdFileTextPrivate) Then
                                    '
                                    ' filename can not be search
                                    '
                                    Stream.Add("<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""50"" height=""15"" border=""0"" > " & .caption & " (text file field)<br>")
                                ElseIf (.fieldTypeId = FieldTypeIdFileHTMLPrivate) Then
                                    '
                                    ' filename can not be search
                                    '
                                    Stream.Add("<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""50"" height=""15"" border=""0"" > " & .caption & " (html file field)<br>")
                                ElseIf (.fieldTypeId = FieldTypeIdFileCSS) Then
                                    '
                                    ' css filename can not be search
                                    '
                                    Stream.Add("<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""50"" height=""15"" border=""0"" > " & .caption & " (css file field)<br>")
                                ElseIf (.fieldTypeId = FieldTypeIdFileXML) Then
                                    '
                                    ' xml filename can not be search
                                    '
                                    Stream.Add("<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""50"" height=""15"" border=""0"" > " & .caption & " (xml file field)<br>")
                                ElseIf (.fieldTypeId = FieldTypeIdFileJavascript) Then
                                    '
                                    ' javascript filename can not be search
                                    '
                                    Stream.Add("<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""50"" height=""15"" border=""0"" > " & .caption & " (javascript file field)<br>")
                                ElseIf (.fieldTypeId = FieldTypeIdLongText) Then
                                    '
                                    ' long text can not be search
                                    '
                                    Stream.Add("<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""50"" height=""15"" border=""0"" > " & .caption & " (long text field)<br>")
                                ElseIf (.fieldTypeId = FieldTypeIdHTML) Then
                                    '
                                    ' long text can not be search
                                    '
                                    Stream.Add("<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""50"" height=""15"" border=""0"" > " & .caption & " (long text field)<br>")
                                ElseIf (.fieldTypeId = FieldTypeIdFileImage) Then
                                    '
                                    ' long text can not be search
                                    '
                                    Stream.Add("<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""50"" height=""15"" border=""0"" > " & .caption & " (image field)<br>")
                                ElseIf (.fieldTypeId = FieldTypeIdRedirect) Then
                                    '
                                    ' long text can not be search
                                    '
                                    Stream.Add("<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""50"" height=""15"" border=""0"" > " & .caption & " (redirect field)<br>")
                                ElseIf (.fieldTypeId = FieldTypeIdManyToMany) Then
                                    '
                                    ' many to many can not be search
                                    '
                                    Stream.Add("<img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""50"" height=""15"" border=""0"" > " & .caption & " (many-to-many field)<br>")
                                Else
                                    '
                                    ' can be used as column header
                                    '
                                    Stream.Add("<a href=""?" & cpCore.htmlDoc.refreshQueryString & "&fi=" & .id & "&dta=" & ToolsActionAddField & "&" & RequestNameAddFieldID & "=" & .id & "&" & RequestNameAdminSubForm & "=" & AdminFormIndex_SubFormSetColumns & """><img src=""/ccLib/images/LibButtonAddUp.gif"" width=""50"" height=""15"" border=""0"" ></A> " & .caption & "<br>")
                                End If
                            End If
                        End With
                    Next
                End If
            End If
            '
            '--------------------------------------------------------------------------------
            ' print the content tables that have index forms to Configure
            '--------------------------------------------------------------------------------
            '
            'FormPanel = FormPanel & SpanClassAdminNormal & "Select a Content Definition to Configure its index form<br >"
            ''FormPanel = FormPanel & cpCore.main_GetFormInputHidden("af", AdminFormToolConfigureIndex)
            'FormPanel = FormPanel & cpCore.htmldoc.main_GetFormInputSelect2("ContentID", ContentID, "Content")
            'Call Stream.Add(cpCore.main_GetPanel(FormPanel))
            ''
            Call cpCore.siteProperties.setProperty("AllowContentAutoLoad", genericController.encodeText(AllowContentAutoLoad))
            'Stream.Add( cpCore.main_GetFormInputHidden("NeedToReloadConfig", NeedToReloadConfig))

            Content = "" _
                & Stream.Text _
                & cpCore.htmlDoc.html_GetFormInputHidden(RequestNameAdminSubForm, AdminFormIndex_SubFormSetColumns) _
                & ""
            GetForm_Index_SetColumns = Adminui.GetBody(Title, ButtonOK & "," & ButtonReset, "", False, False, Description, "", 10, Content)
            '
            '
            '    ButtonBar = AdminUI.GetButtonsFromList( ButtonList, True, True, "button")
            '    ButtonBar = AdminUI.GetButtonBar(ButtonBar, "")
            '    Stream = New FastStringClass
            ''
            ''    GetForm_Index_SetColumns = "" _
            ''        & ButtonBar _
            ''        & AdminUI.EditTableOpen _
            ''        & Stream.Text _
            ''        & AdminUI.EditTableClose _
            ''        & ButtonBar _
            '    '
            '    '
            '    ' Assemble LiveWindowTable
            '    '
            '    Stream.Add( OpenLiveWindowTable)
            '    Stream.Add( vbCrLf & cpCore.main_GetFormStart()
            '    Stream.Add( ButtonBar)
            '    Stream.Add( TitleBar)
            '    Stream.Add( Content)
            '    Stream.Add( ButtonBar)
            '    Stream.Add( "<input type=hidden name=asf VALUE=" & AdminFormIndex_SubFormSetColumns & ">")
            '    Stream.Add( "</form>")
            '    Stream.Add( CloseLiveWindowTable)
            '    '
            '    GetForm_Index_SetColumns = Stream.Text
            Call cpCore.htmlDoc.main_AddPagetitle(Title)
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_Index_SetColumns")
        End Function
        '
        '========================================================================
        '
        '========================================================================
        '
        Private Sub TurnOnLinkAlias(ByVal UseContentWatchLink As Boolean)
            On Error GoTo ErrorTrap  ''Dim th as integer : th = profileLogAdminMethodEnter("TurnOnLinkAlias")
            '
            Dim CS As Integer
            Dim ErrorList As String
            Dim linkAlias As String
            '
            If cpCore.error_IsUserError Then
                Call cpCore.error_AddUserError("Existing pages could not be checked for Link Alias names because there was another error on this page. Correct this error, and turn Link Alias on again to rerun the verification.")
            Else
                CS = cpCore.db.cs_open("Page Content")
                Do While cpCore.db.cs_ok(CS)
                    '
                    ' Add the link alias
                    '
                    linkAlias = cpCore.db.cs_getText(CS, "LinkAlias")
                    If linkAlias <> "" Then
                        '
                        ' Add the link alias
                        '
                        Call cpCore.app_addLinkAlias2(linkAlias, cpCore.db.cs_getInteger(CS, "ID"), "", False, True)
                    Else
                        '
                        ' Add the name
                        '
                        linkAlias = cpCore.db.cs_getText(CS, "name")
                        If linkAlias <> "" Then
                            Call cpCore.app_addLinkAlias2(linkAlias, cpCore.db.cs_getInteger(CS, "ID"), "", False, False)
                        End If
                    End If
                    '
                    Call cpCore.db.cs_goNext(CS)
                Loop
                Call cpCore.db.cs_Close(CS)
                If cpCore.error_IsUserError Then
                    '
                    ' Throw out all the details of what happened, and add one simple error
                    '
                    ErrorList = cpCore.error_GetUserError
                    ErrorList = genericController.vbReplace(ErrorList, UserErrorHeadline, "", 1, 99, vbTextCompare)
                    Call cpCore.error_AddUserError("The following errors occurred while verifying Link Alias entries for your existing pages." & ErrorList)
                    'Call cpCore.htmldoc.main_AddUserError(ErrorList)
                End If
            End If
            '
            '
            Exit Sub
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("TurnOnLinkAlias")
        End Sub
        '
        '========================================================================
        '   Editor features are stored in the \config\EditorFeatures.txt file
        '   This is a crlf delimited list, with each row including:
        '       admin:featurelist
        '       contentmanager:featurelist
        '       public:featurelist
        '========================================================================
        '
        Private Function GetForm_EditConfig() As String
            On Error GoTo ErrorTrap  ''Dim th as integer : th = profileLogAdminMethodEnter("GetForm_EditConfig")
            '
            Dim CS As Integer
            Dim EditorStyleRulesFilename As String
            Dim Pos As Integer
            Dim SrcPtr As Integer
            Dim FeatureDetails() As String
            Dim AllowAdmin As Boolean
            Dim AllowCM As Boolean
            Dim AllowPublic As Boolean
            Dim RowPtr As Integer
            Dim AdminList As String = ""
            Dim CMList As String = ""
            Dim PublicList As String = ""
            Dim TDLeft As String
            Dim TDCenter As String
            Dim Ptr As Integer
            Dim Content As New stringBuilderLegacyController
            Dim Button As String
            Dim Copy As String
            Dim ButtonList As String
            Dim Adminui As New adminUIController(cpCore)
            Dim Caption As String
            Dim Description As String
            Dim StyleSN As Integer
            Dim TBConfig As String
            Dim TBArray() As String
            Dim DefaultFeatures() As String
            Dim FeatureName As String
            Dim FeatureList As String
            Dim Features() As String
            '
            DefaultFeatures = Split(InnovaEditorFeatureList, ",")
            Description = "This tool is used to configure the wysiwyg content editor for different uses. Check the Administrator column if you want administrators to have access to this feature when editing a page. Check the Content Manager column to allow non-admins to have access to this feature. Check the Public column if you want those on the public site to have access to the feature when the editor is used for public forms."
            '
            Button = cpCore.docProperties.getText(RequestNameButton)
            If Button = ButtonCancel Then
                '
                ' Cancel button pressed, return with nothing goes to root form
                '
                'Call cpCore.main_Redirect2(cpCore.app.SiteProperty_AdminURL, "EditConfig, Cancel Button Pressed")
            Else
                '
                ' From here down will return a form
                '
                If Not cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                    '
                    ' Does not have permission
                    '
                    ButtonList = ButtonCancel
                    Content.Add(Adminui.GetFormBodyAdminOnly())
                    Call cpCore.htmlDoc.main_AddPagetitle("Style Editor")
                    GetForm_EditConfig = Adminui.GetBody("Site Styles", ButtonList, "", True, True, Description, "", 0, Content.Text)
                Else
                    '
                    ' OK to see and use this form
                    '
                    If Button = ButtonSave Or Button = ButtonOK Then
                        '
                        ' Save the Previous edits
                        '
                        Call cpCore.siteProperties.setProperty("Editor Background Color", cpCore.docProperties.getText("editorbackgroundcolor"))
                        '
                        For Ptr = 0 To UBound(DefaultFeatures)
                            FeatureName = DefaultFeatures(Ptr)
                            If genericController.vbLCase(FeatureName) = "styleandformatting" Then
                                '
                                ' must always be on or it throws js error (editor bug I guess)
                                '
                                AdminList = AdminList & "," & FeatureName
                                CMList = CMList & "," & FeatureName
                                PublicList = PublicList & "," & FeatureName
                            Else
                                If cpCore.docProperties.getBoolean(FeatureName & ".admin") Then
                                    AdminList = AdminList & "," & FeatureName
                                End If
                                If cpCore.docProperties.getBoolean(FeatureName & ".cm") Then
                                    CMList = CMList & "," & FeatureName
                                End If
                                If cpCore.docProperties.getBoolean(FeatureName & ".public") Then
                                    PublicList = PublicList & "," & FeatureName
                                End If
                            End If
                        Next
                        Call cpCore.privateFiles.saveFile(InnovaEditorFeaturefilename, "admin:" & AdminList & vbCrLf & "contentmanager:" & CMList & vbCrLf & "public:" & PublicList)
                        '
                        ' Clear the editor style rules template cache so next edit gets new background color
                        '
                        EditorStyleRulesFilename = genericController.vbReplace(EditorStyleRulesFilenamePattern, "$templateid$", "0", 1, 99, vbTextCompare)
                        Call cpCore.privateFiles.deleteFile(EditorStyleRulesFilename)
                        '
                        CS = cpCore.db.cs_openCsSql_rev("default", "select id from cctemplates")
                        Do While cpCore.db.cs_ok(CS)
                            EditorStyleRulesFilename = genericController.vbReplace(EditorStyleRulesFilenamePattern, "$templateid$", cpCore.main_cs_get2Text(CS, "ID"), 1, 99, vbTextCompare)
                            Call cpCore.privateFiles.deleteFile(EditorStyleRulesFilename)
                            Call cpCore.db.cs_goNext(CS)
                        Loop
                        Call cpCore.db.cs_Close(CS)

                    End If
                    '
                    If Button = ButtonOK Then
                        '
                        ' exit with blank page
                        '
                    Else
                        '
                        ' Draw the form
                        '
                        FeatureList = cpCore.cdnFiles.readFile(InnovaEditorFeaturefilename)
                        'If FeatureList = "" Then
                        '    FeatureList = cpCore.cluster.localClusterFiles.readFile("ccLib\" & "Config\DefaultEditorConfig.txt")
                        '    Call cpCore.privateFiles.saveFile(InnovaEditorFeaturefilename, FeatureList)
                        'End If
                        If FeatureList = "" Then
                            FeatureList = "admin:" & InnovaEditorFeatureList & vbCrLf & "contentmanager:" & InnovaEditorFeatureList & vbCrLf & "public:" & InnovaEditorPublicFeatureList
                        End If
                        If FeatureList <> "" Then
                            Features = Split(FeatureList, vbCrLf)
                            AdminList = genericController.vbReplace(Features(0), "admin:", "", 1, 99, vbTextCompare)
                            If UBound(Features) > 0 Then
                                CMList = genericController.vbReplace(Features(1), "contentmanager:", "", 1, 99, vbTextCompare)
                                If UBound(Features) > 1 Then
                                    PublicList = genericController.vbReplace(Features(2), "public:", "", 1, 99, vbTextCompare)
                                End If
                            End If
                        End If
                        '
                        Copy = vbCrLf _
                            & "<tr class=""ccAdminListCaption"">" _
                            & "<td align=left style=""width:200;"">Feature</td>" _
                            & "<td align=center style=""width:100;"">Administrators</td>" _
                            & "<td align=center style=""width:100;"">Content&nbsp;Managers</td>" _
                            & "<td align=center style=""width:100;"">Public</td>" _
                            & "</tr>"
                        RowPtr = 0
                        For Ptr = 0 To UBound(DefaultFeatures)
                            FeatureName = DefaultFeatures(Ptr)
                            If genericController.vbLCase(FeatureName) = "styleandformatting" Then
                                '
                                ' hide and force on during process - editor bug I think.
                                '
                            Else
                                TDLeft = genericController.StartTableCell(, , CBool(RowPtr Mod 2), "left")
                                TDCenter = genericController.StartTableCell(, , CBool(RowPtr Mod 2), "center")
                                AllowAdmin = genericController.EncodeBoolean(InStr(1, "," & AdminList & ",", "," & FeatureName & ",", vbTextCompare))
                                AllowCM = genericController.EncodeBoolean(InStr(1, "," & CMList & ",", "," & FeatureName & ",", vbTextCompare))
                                AllowPublic = genericController.EncodeBoolean(InStr(1, "," & PublicList & ",", "," & FeatureName & ",", vbTextCompare))
                                Copy = Copy & vbCrLf _
                                    & "<tr>" _
                                    & TDLeft & FeatureName & "</td>" _
                                    & TDCenter & cpCore.htmlDoc.html_GetFormInputCheckBox2(FeatureName & ".admin", AllowAdmin) & "</td>" _
                                    & TDCenter & cpCore.htmlDoc.html_GetFormInputCheckBox2(FeatureName & ".cm", AllowCM) & "</td>" _
                                    & TDCenter & cpCore.htmlDoc.html_GetFormInputCheckBox2(FeatureName & ".public", AllowPublic) & "</td>" _
                                    & "</tr>"
                                RowPtr = RowPtr + 1
                            End If
                        Next
                        Copy = "" _
                            & vbCrLf & "<div><b>body background style color</b> (default='white')</div>" _
                            & vbCrLf & "<div>" & cpCore.htmlDoc.html_GetFormInputText2("editorbackgroundcolor", cpCore.siteProperties.getText("Editor Background Color", "white")) & "</div>" _
                            & vbCrLf & "<div>&nbsp;</div>" _
                            & vbCrLf & "<div><b>Toolbar features available</b></div>" _
                            & vbCrLf & "<table border=""0"" cellpadding=""4"" cellspacing=""0"" width=""500px"" align=left>" & genericController.kmaIndent(Copy) & vbCrLf & kmaEndTable
                        Copy = vbCrLf & genericController.StartTable(20, 0, 0) & "<tr><td>" & genericController.kmaIndent(Copy) & "</td></tr>" & vbCrLf & kmaEndTable
                        Content.Add(Copy)
                        ButtonList = ButtonCancel & "," & ButtonRefresh & "," & ButtonSave & "," & ButtonOK
                        Content.Add(cpCore.htmlDoc.html_GetFormInputHidden(RequestNameAdminSourceForm, AdminFormEditorConfig))
                        Call cpCore.htmlDoc.main_AddPagetitle("Editor Settings")
                        GetForm_EditConfig = Adminui.GetBody("Editor Configuration", ButtonList, "", True, True, Description, "", 0, Content.Text)
                    End If
                End If
                '
            End If
            Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Call handleLegacyClassError3("GetForm_EditConfig")
            '
        End Function
        '
        '========================================================================
        ' Page Content Settings Page
        '========================================================================
        '
        Private Function GetForm_BuildCollection() As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogAdminMethodEnter( "GetForm_BuildCollection")
            '
            Dim Description As String
            Dim Content As New stringBuilderLegacyController
            Dim Button As String
            Dim Adminui As New adminUIController(cpCore)
            Dim ButtonList As String
            Dim AllowAutoLogin As Boolean
            Dim Copy As String
            '
            Button = cpCore.docProperties.getText(RequestNameButton)
            If Button = ButtonCancel Then
                '
                ' Cancel just exits with no content
                '
                Exit Function
            ElseIf Not cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                '
                ' Not Admin Error
                '
                ButtonList = ButtonCancel
                Content.Add(Adminui.GetFormBodyAdminOnly())
            Else
                Content.Add(Adminui.EditTableOpen)
                '
                ' Set defaults
                '
                AllowAutoLogin = (cpCore.siteProperties.getBoolean("AllowAutoLogin", True))
                '
                ' Process Requests
                '
                Select Case Button
                    Case ButtonSave, ButtonOK
                        '
                        '
                        '
                        AllowAutoLogin = cpCore.docProperties.getBoolean("AllowAutoLogin")
                        '
                        Call cpCore.siteProperties.setProperty("AllowAutoLogin", genericController.encodeText(AllowAutoLogin))
                End Select
                If (Button = ButtonOK) Then
                    '
                    ' Exit on OK or cancel
                    '
                    Exit Function
                End If
                '
                ' List Add-ons to include
                '

                Copy = cpCore.htmlDoc.html_GetFormInputCheckBox2("AllowAutoLogin", AllowAutoLogin)
                Copy = Copy _
            & "<div>When checked, returning users are automatically logged-in, without requiring a username or password. This is very convenient, but creates a high security risk. Each time you login, you will be given the option to not allow Auto-Login from that computer.</div>"
                Call Content.Add(Adminui.GetEditRow(Copy, "Allow Auto Login", "", False, False, ""))
                '
                ' Buttons
                '
                ButtonList = ButtonCancel & "," & ButtonSave & "," & ButtonOK
                '
                ' Close Tables
                '
                Content.Add(Adminui.EditTableClose)
                Content.Add(cpCore.htmlDoc.html_GetFormInputHidden(RequestNameAdminSourceForm, AdminFormBuilderCollection))
            End If
            '
            Description = "Use this tool to modify the site security settings"
            GetForm_BuildCollection = Adminui.GetBody("Security Settings", ButtonList, "", True, True, Description, "", 0, Content.Text)
            Content = Nothing
            '
            '''Dim th as integer: Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Content = Nothing
            Call handleLegacyClassError3("GetForm_BuildCollection")
            '
        End Function
        ''
        ''========================================================================
        ''   Display field in the admin/edit
        ''========================================================================
        ''
        'Private Function GetForm_Edit_RSSFeeds(ContentName As String, ContentID as integer, RecordID as integer, PageLink As String) As String
        '    On Error GoTo ErrorTrap: 'Dim th as integer: th = profileLogAdminMethodEnter("AdminClass.GetForm_Edit_RSSFeeds")
        '    '
        '    Dim DateExpiresText As String
        '    Dim DatePublishText As String
        '    Dim FeedEditLink As String
        '    Dim RSSFeedCID as integer
        '    Dim Caption As String
        '    Dim AttachID as integer
        '    Dim AttachName As String
        '    Dim AttachLink As String
        '    Dim CS as integer
        '    Dim HTMLFieldString As String
        '    ' converted array to dictionary - Dim FieldPointer As Integer
        '    Dim CSPointer as integer
        '    Dim CSFeeds as integer
        '    Dim Cnt as integer
        '    Dim FeedID as integer
        '    Dim s As New fastStringClass
        '    Dim Copy As String
        '    Dim Adminui As New adminUIclass(cpcore)
        '    Dim FeedName As String
        '    Dim DefaultValue As Boolean
        '    Dim ItemID as integer
        '    Dim ItemName As String
        '    Dim ItemDescription As String
        '    Dim ItemLink As String
        '    Dim ItemDateExpires As Date
        '    Dim ItemDatePublish As Date
        '    '
        '    if true then ' 3.3.816" Then
        '        '
        '        ' Get the RSS Items (Name, etc)
        '        '
        '        CS = cpCore.app.csOpen("RSS Feed Items", "(ContentID=" & ContentID & ")and(RecordID=" & RecordID & ")", "ID")
        '        If Not cpCore.app.csv_IsCSOK(CS) Then
        '            '
        '            ' Default Value
        '            '
        '            ItemID = 0
        '            ItemName = ""
        '            ItemDescription = ""
        '            ItemLink = PageLink
        '            ItemDateExpires = Date.MinValue
        '            ItemDatePublish = Date.MinValue
        '        Else
        '            ItemID = cpCore.app.cs_getInteger(CS, "ID")
        '            ItemName = cpCore.db.cs_getText(CS, "Name")
        '            ItemDescription = cpCore.db.cs_getText(CS, "Description")
        '            ItemLink = cpCore.db.cs_getText(CS, "Link")
        '            ItemDateExpires = cpCore.db.cs_getDate(CS, "DateExpires")
        '            ItemDatePublish = cpCore.db.cs_getDate(CS, "DatePublish")
        '        End If
        '        Call cpCore.app.closeCS(CS)
        '        '
        '        ' List out the Feeds, lookup the rules top find a match between items and feeds
        '        '
        '        RSSFeedCID = cpCore.main_GetContentID("RSS Feeds")
        '        CSFeeds = cpCore.app.csOpen("RSS Feeds", , "name")
        '        If cpCore.app.csv_IsCSOK(CSFeeds) Then
        '            Cnt = 0
        '            Do While cpCore.app.csv_IsCSOK(CSFeeds)
        '                FeedID = cpCore.app.cs_getInteger(CSFeeds, "id")
        '                FeedName = cpCore.db.cs_getText(CSFeeds, "name")
        '                '
        '                DefaultValue = False
        '                If ItemID <> 0 Then
        '                    CS = cpCore.app.csOpen("RSS Feed Rules", "(RSSFeedID=" & FeedID & ")AND(RSSFeedItemID=" & ItemID & ")", , , True)
        '                    If cpCore.app.csv_IsCSOK(CS) Then
        '                        DefaultValue = True
        '                    End If
        '                    Call cpCore.app.closeCS(CS)
        '                End If
        '                '
        '                If Cnt = 0 Then
        '                    s.Add( "<tr><td class=""ccAdminEditCaption"">Include in RSS Feed</td>"
        '                Else
        '                    s.Add( "<tr><td class=""ccAdminEditCaption"">&nbsp;</td>"
        '                End If
        '                FeedEditLink = "[<a href=""?af=4&cid=" & RSSFeedCID & "&id=" & FeedID & """>Edit RSS Feed</a>]"
        '                s.Add( "<td class=""ccAdminEditField"">"
        '                    s.Add( "<table border=0 cellpadding=0 cellspacing=0 width=""100%"" ><tr>"
        '                    If editrecord.read_only Then
        '                        s.Add( "<td width=""50%"">" & genericController.encodeText(DefaultValue) & "&nbsp;" & FeedName & "</td>"
        '                    Else
        '                        s.Add( "<td width=""50%"">" & cpCore.main_GetFormInputHidden("RSSFeedWas." & Cnt, DefaultValue) & cpCore.main_GetFormInputHidden("RSSFeedID." & Cnt, FeedID) & cpCore.main_GetFormInputCheckBox2("RSSFeed." & Cnt, DefaultValue) & FeedName & "</td>"
        '                    End If
        '                    s.Add( "<td width=""50%"">" & FeedEditLink & "</td>"
        '                    s.Add( "</tr></table>"
        '                s.Add( "</td></tr>"
        '                Call cpCore.app.nextCSRecord(CSFeeds)
        '                Cnt = Cnt + 1
        '            Loop
        '            If Cnt = 0 Then
        '                s.Add( "<tr><td class=""ccAdminEditCaption"">Include in RSS Feed</td>"
        '            Else
        '                s.Add( "<tr><td class=""ccAdminEditCaption"">&nbsp;</td>"
        '            End If
        '            FeedEditLink = "[<a href=""?af=4&cid=" & RSSFeedCID & """>Add New RSS Feed</a>]&nbsp;[<a href=""?cid=" & RSSFeedCID & """>RSS Feeds</a>]"
        '            s.Add( "<td class=""ccAdminEditField"">"
        '                s.Add( "<table border=0 cellpadding=0 cellspacing=0 width=""100%"" ><tr>"
        '                s.Add( "<td width=""50%"">&nbsp;</td>"
        '                s.Add( "<td width=""50%"">" & FeedEditLink & "</td>"
        '                s.Add( "</tr></table>"
        '            s.Add( "</td></tr>"
        '
        '
        '        End If
        '        Call cpCore.app.closeCS(CSFeeds)
        '        s.Add( cpCore.main_GetFormInputHidden("RSSFeedCnt", Cnt)
        '        '
        '        ' ----- RSS Item fields
        '        '
        '        If ItemDateExpires = Date.MinValue Then
        '            DateExpiresText = ""
        '        Else
        '            DateExpiresText = CStr(ItemDateExpires)
        '        End If
        '        If ItemDatePublish = Date.MinValue Then
        '            DatePublishText = ""
        '        Else
        '            DatePublishText = CStr(ItemDatePublish)
        '        End If
        '        If editrecord.read_only Then
        '            s.Add( "<tr><td class=""ccAdminEditCaption"">Title</td><td class=""ccAdminEditField"">" & ItemName & "</td></tr>"
        '            s.Add( "<tr><td class=""ccAdminEditCaption"">Description</td><td class=""ccAdminEditField"">" & ItemDescription & "</td></tr>"
        '            s.Add( "<tr><td class=""ccAdminEditCaption"">Link</td><td class=""ccAdminEditField"">" & ItemLink & "</td></tr>"
        '            s.Add( "<tr><td class=""ccAdminEditCaption"">Publish</td><td class=""ccAdminEditField"">" & DatePublishText & "</td></tr>"
        '            s.Add( "<tr><td class=""ccAdminEditCaption"">Expire</td><td class=""ccAdminEditField"">" & DateExpiresText & "</td></tr>"
        '        Else
        '            s.Add( "<tr><td class=""ccAdminEditCaption"">Title*</td><td class=""ccAdminEditField"">" & cpCore.main_GetFormInputText2("RSSFeedItemName", ItemName, 1, 60) & "</td></tr>"
        '            s.Add( "<tr><td class=""ccAdminEditCaption"">Description*</td><td class=""ccAdminEditField"">" & cpCore.main_GetFormInputTextExpandable("RSSFeedItemDescription", ItemDescription, 5) & "</td></tr>"
        '            s.Add( "<tr><td class=""ccAdminEditCaption"">Link*</td><td class=""ccAdminEditField"">" & cpCore.main_GetFormInputText2("RSSFeedItemLink", ItemLink, 1, 60) & "</td></tr>"
        '            s.Add( "<tr><td class=""ccAdminEditCaption"">Publish</td><td class=""ccAdminEditField"">" & cpCore.main_GetFormInputDate("RSSFeedItemDatePublish", DatePublishText, 40) & "</td></tr>"
        '            s.Add( "<tr><td class=""ccAdminEditCaption"">Expire</td><td class=""ccAdminEditField"">" & cpCore.main_GetFormInputDate("RSSFeedItemDateExpires", DateExpiresText, 40) & "</td></tr>"
        '        End If
        '        '
        '        ' ----- Add Attachements to Feeds
        '        '
        '        Caption = "Add Podcast Media Link"
        '        Cnt = 0
        '        CS = cpCore.app.csOpen("Attachments", "(ContentID=" & ContentID & ")AND(RecordID=" & RecordID & ")", , , True)
        '        If cpCore.app.csv_IsCSOK(CS) Then
        '            '
        '            ' ----- List all Attachements
        '            '
        '            Cnt = 0
        '            Do While cpCore.app.csv_IsCSOK(CS)
        '
        '                AttachID = cpCore.app.cs_getInteger(CS, "id")
        '                AttachName = cpCore.db.cs_getText(CS, "name")
        '                AttachLink = cpCore.db.cs_getText(CS, "link")
        '                '
        '                s.Add( "<tr><td class=""ccAdminEditCaption"">" & Caption & "</td>"
        '                If Cnt = 0 Then
        '                    Caption = "&nbsp;"
        '                End If
        '                s.Add( "<td class=""ccAdminEditField"">"
        '                    s.Add( "<table border=0 cellpadding=0 cellspacing=0 width=""100%"" ><tr>"
        '                    If editrecord.read_only Then
        '                        s.Add( "<td>" & AttachLink & "</td>"
        '                        's.Add( "<td width=""30%"">Caption " & AttachName & "</td>"
        '                    Else
        '                        s.Add( "<td>" & cpCore.main_GetFormInputText2("AttachLink." & Cnt, AttachLink, 1, 60) & cpCore.main_GetFormInputHidden("AttachLinkID." & Cnt, AttachID) & "</td>"
        '                        's.Add( "<td width=""30%"">Caption " & cpCore.main_GetFormInputText2("AttachCaption." & Cnt, AttachName, 20) & "</td>"
        '                    End If
        '                    s.Add( "</tr></table>"
        '                s.Add( "<td width=""30%"">&nbsp;</td>"
        '                s.Add( "</td></tr>"
        '                Call cpCore.app.nextCSRecord(CS)
        '                Cnt = Cnt + 1
        '            Loop
        '            End If
        '        Call cpCore.app.closeCS(CS)
        '        '
        '        ' ----- Add Attachment link (only allow one for now)
        '        '
        '        If (Cnt = 0) And (Not editrecord.read_only) Then
        '            s.Add( "<tr><td class=""ccAdminEditCaption"">" & Caption & "</td>"
        '            s.Add( "<td class=""ccAdminEditField"">"
        '                s.Add( "<table border=0 cellpadding=0 cellspacing=0 width=""100%"" ><tr>"
        '                s.Add( "<td width=""70%"">" & cpCore.main_GetFormInputText2("AttachLink." & Cnt, AttachLink, 1, 60) & "</td>"
        '                s.Add( "<td width=""30%"">&nbsp;</td>"
        '                s.Add( "</tr></table>"
        '            s.Add( "</td></tr>"
        '            Cnt = Cnt + 1
        '        End If
        '        s.Add( cpCore.main_GetFormInputHidden("RSSAttachCnt", Cnt)
        '        '
        '        ' ----- add the *Required Fields footer
        '        '
        '        Call s.Add("" _
        '            & "<tr><td colspan=2 style=""padding-top:10px;font-size:70%"">" _
        '            & "<div>* Fields marked with an asterisk are required if any RSS Feed is selected.</div>" _
        '            & "</td></tr>")
        '        '
        '        ' ----- close the panel
        '        '
        '        GetForm_Edit_RSSFeeds = AdminUI.GetEditPanel( (Not AllowAdminTabs), "RSS Feeds / Podcasts", "Include in RSS Feeds / Podcasts", AdminUI.EditTableOpen & s.Text & AdminUI.EditTableClose)
        '        EditSectionPanelCount = EditSectionPanelCount + 1
        '        '
        '        s = Nothing
        '    End If
        '    '''Dim th as integer: Exit Function
        '    '
        'ErrorTrap:
        '    s = Nothing
        '    Call HandleClassTrapErrorBubble("GetForm_Edit_RSSFeeds")
        'End Function
        ''
        ''========================================================================
        ''   Load and Save RSS Feeds Tab
        ''========================================================================
        ''
        'Private Sub LoadAndSaveRSSFeeds(ContentName As String, ContentID as integer, RecordID as integer, ItemLink As String)
        '    On Error GoTo ErrorTrap: 'Dim th as integer: th = profileLogAdminMethodEnter("AdminClass.LoadAndSaveRSSFeeds")
        '    '
        '    Dim AttachID as integer
        '    Dim AttachLink As String
        '    Dim CS as integer
        '    Dim Cnt as integer
        '    Dim Ptr as integer
        '    Dim FeedChecked As Boolean
        '    Dim FeedWasChecked As Boolean
        '    Dim FeedID as integer
        '    Dim DateExpires As Date
        '    Dim RecordLink As String
        '    Dim ItemID as integer
        '    Dim ItemName As String
        '    Dim ItemDescription As String
        '    Dim ItemDateExpires As Date
        '    Dim ItemDatePublish As Date
        '    Dim FeedChanged As Boolean
        '    '
        '    ' Process Feeds
        '    '
        '    Cnt = cpCore.main_GetStreamInteger2("RSSFeedCnt")
        '    If Cnt > 0 Then
        '        '
        '        ' Test if any feed checked -- then check Feed Item fields for required
        '        '
        '        ItemName = cpCore.main_GetStreamText2("RSSFeedItemName")
        '        ItemDescription = cpCore.main_GetStreamText2("RSSFeedItemDescription")
        '        ItemLink = cpCore.main_GetStreamText2("RSSFeedItemLink")
        '        ItemDateExpires = cpCore.main_GetStreamDate("RSSFeedItemDateExpires")
        '        ItemDatePublish = cpCore.main_GetStreamDate("RSSFeedItemDatePublish")
        '        For Ptr = 0 To Cnt - 1
        '            FeedChecked = cpCore.main_GetStreamBoolean2("RSSFeed." & Ptr)
        '            If FeedChecked Then
        '                Exit For
        '            End If
        '        Next
        '        If FeedChecked Then
        '            '
        '            ' check required fields
        '            '
        '            If Trim(ItemName) = "" Then
        '                Call cpCore.htmldoc.main_AddUserError("In the RSS/Podcasts tab, a Title is required if any RSS Feed is checked.")
        '            End If
        '            If Trim(ItemDescription) = "" Then
        '                Call cpCore.htmldoc.main_AddUserError("In the RSS/Podcasts tab, a Description is required if any RSS Feed is checked.")
        '            End If
        '            If Trim(ItemLink) = "" Then
        '                Call cpCore.htmldoc.main_AddUserError("In the RSS/Podcasts tab, a Link is required if any RSS Feed is checked.")
        '            End If
        '        End If
        '        If FeedChecked Or (ItemName <> "") Or (ItemDescription <> "") Or (ItemLink <> "") Then
        '            '
        '            '
        '            '
        '            CS = cpCore.app.csOpen("RSS Feed Items", "(ContentID=" & ContentID & ")and(RecordID=" & RecordID & ")", "ID")
        '            If Not cpCore.app.csv_IsCSOK(CS) Then
        '                Call cpCore.app.closeCS(CS)
        '                CS = cpCore.main_InsertCSContent("RSS Feed Items")
        '            End If
        '            If ItemDatePublish = Date.MinValue Then
        '                ItemDatePublish = nt(cpCore.main_PageStartTime.toshortdateString
        '            End If
        '            If cpCore.app.csv_IsCSOK(CS) Then
        '                ItemID = cpCore.app.cs_getInteger(CS, "ID")
        '                Call cpCore.app.SetCS(CS, "ContentID", ContentID)
        '                Call cpCore.app.SetCS(CS, "RecordID", RecordID)
        '                Call cpCore.app.SetCS(CS, "Name", ItemName)
        '                Call cpCore.app.SetCS(CS, "Description", ItemDescription)
        '                Call cpCore.app.SetCS(CS, "Link", ItemLink)
        '                Call cpCore.app.SetCS(CS, "DateExpires", ItemDateExpires)
        '                Call cpCore.app.SetCS(CS, "DatePublish", ItemDatePublish)
        '            End If
        '            Call cpCore.app.closeCS(CS)
        '            FeedChanged = True
        '        End If
        '        '
        '        ' ----- Now process the RSS Feed checkboxes
        '        '
        '        For Ptr = 0 To Cnt - 1
        '            FeedChecked = cpCore.main_GetStreamBoolean2("RSSFeed." & Ptr)
        '            FeedWasChecked = cpCore.main_GetStreamBoolean2("RSSFeedWas." & Ptr)
        '            FeedID = cpCore.main_GetStreamInteger2("RSSFeedID." & Ptr)
        '            If FeedChecked And Not FeedWasChecked Then
        '                '
        '                ' Create rule
        '                '
        '                CS = cpCore.main_InsertCSContent("RSS Feed Rules")
        '                If cpCore.app.csv_IsCSOK(CS) Then
        '                    Call cpCore.app.SetCS(CS, "Name", "RSS Feed for " & EditRecord.Name)
        '                    Call cpCore.app.SetCS(CS, "RSSFeedID", FeedID)
        '                    Call cpCore.app.SetCS(CS, "RSSFeedItemID", ItemID)
        '                End If
        '                Call cpCore.app.closeCS(CS)
        '            ElseIf FeedWasChecked And Not FeedChecked Then
        '                '
        '                ' Delete Rule
        '                '
        '                FeedID = cpCore.main_GetStreamInteger2("RSSFeedID." & Ptr)
        '                Call cpCore.app.DeleteContentRecords("RSS Feed Rules", "(RSSFeedID=" & FeedID & ")and(ItemContentID=" & ContentID & ")and(RSSFeedItemID=" & ItemID & ")")
        '            End If
        '        Next
        '    End If
        '    '
        '    ' Attachments
        '    '
        '    Cnt = cpCore.main_GetStreamInteger2("RSSAttachCnt")
        '    If Cnt > 0 Then
        '        For Ptr = 0 To Cnt - 1
        '            AttachID = cpCore.main_GetStreamInteger2("AttachLinkID." & Ptr)
        '            AttachLink = cpCore.main_GetStreamText2("AttachLink." & Ptr)
        '            If AttachID <> 0 And AttachLink <> "" Then
        '                '
        '                ' Update Attachment
        '                '
        '                CS = cpCore.main_OpenCSContentRecord("Attachments", AttachID)
        '                If cpCore.app.csv_IsCSOK(CS) Then
        '                    Call cpCore.app.SetCS(CS, "Name", "Podcast attachment for " & EditRecord.Name)
        '                    Call cpCore.app.SetCS(CS, "Link", AttachLink)
        '                    Call cpCore.app.SetCS(CS, "ContentID", ContentID)
        '                    Call cpCore.app.SetCS(CS, "RecordID", RecordID)
        '                End If
        '                Call cpCore.app.closeCS(CS)
        '                FeedChanged = True
        '            ElseIf AttachID = 0 And AttachLink <> "" Then
        '                '
        '                ' Create Attachment
        '                '
        '                CS = cpCore.main_InsertCSContent("Attachments")
        '                If cpCore.app.csv_IsCSOK(CS) Then
        '                    Call cpCore.app.SetCS(CS, "Name", "Podcast attachment for " & EditRecord.Name)
        '                    Call cpCore.app.SetCS(CS, "Link", AttachLink)
        '                    Call cpCore.app.SetCS(CS, "AttachContentID", ContentID)
        '                    Call cpCore.app.SetCS(CS, "AttachRecordID", RecordID)
        '                End If
        '                Call cpCore.app.closeCS(CS)
        '                FeedChanged = True
        '            ElseIf AttachID <> 0 And AttachLink = "" Then
        '                '
        '                ' delete attachment
        '                '
        '                Call cpCore.app.DeleteContentRecords("Attachments", "(AttachContentID=" & ContentID & ")and(AttachRecordID=" & RecordID & ")")
        '                FeedChanged = True
        '            End If
        '        Next
        '    End If
        '    '
        '    '
        '    '
        '    If FeedChanged Then
        'Dim Cmd As String
        '        Cmd = getAppPath() & "\ccProcessRSS.exe"
        '        Call Shell(Cmd)
        '    End If
        '
        '    '
        '    '''Dim th as integer: Exit Sub
        '    '
        '    ' ----- Error Trap
        '    '
        'ErrorTrap:
        '    Call HandleClassTrapErrorBubble("LoadAndSaveRSSFeeds")
        '    '
        'End Sub
        '
        '
        '========================================================================
        '
        '========================================================================
        '
        Private Function GetForm_ClearCache() As String
            Dim returnHtml As String = ""
            Try
                Dim Content As New stringBuilderLegacyController
                Dim Button As String
                Dim Adminui As New adminUIController(cpCore)
                Dim Description As String
                Dim ButtonList As String
                '
                Button = cpCore.docProperties.getText(RequestNameButton)
                If Button = ButtonCancel Then
                    '
                    ' Cancel just exits with no content
                    '
                    Exit Function
                ElseIf Not cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                    '
                    ' Not Admin Error
                    '
                    ButtonList = ButtonCancel
                    Content.Add(Adminui.GetFormBodyAdminOnly())
                Else
                    Content.Add(Adminui.EditTableOpen)
                    '
                    ' Set defaults
                    '
                    '
                    ' Process Requests
                    '
                    Select Case Button
                        Case ButtonApply, ButtonOK
                            '
                            ' Clear the cache
                            '
                            Call cpCore.cache.invalidateAll()
                    End Select
                    If (Button = ButtonOK) Then
                        '
                        ' Exit on OK or cancel
                        '
                        Exit Function
                    End If
                    '
                    ' Buttons
                    '
                    ButtonList = ButtonCancel & "," & ButtonApply & "," & ButtonOK
                    '
                    ' Close Tables
                    '
                    Content.Add(Adminui.EditTableClose)
                    Content.Add(cpCore.htmlDoc.html_GetFormInputHidden(RequestNameAdminSourceForm, AdminFormClearCache))
                End If
                '
                Description = "Hit Apply or OK to clear all current content caches"
                returnHtml = Adminui.GetBody("Clear Cache", ButtonList, "", True, True, Description, "", 0, Content.Text)
                Content = Nothing
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return returnHtml
        End Function
        '
        '========================================================================
        ' Tool to enter multiple Meta Keywords
        '========================================================================
        '
        Private Function GetForm_MetaKeywordTool() As String
            On Error GoTo ErrorTrap 'Dim th as integer: th = profileLogAdminMethodEnter( "GetForm_MetaKeywordTool")
            '
            Const LoginMode_None = 1
            Const LoginMode_AutoRecognize = 2
            Const LoginMode_AutoLogin = 3
            '
            Dim LoginMode As Integer
            Dim Help As String
            Dim Content As New stringBuilderLegacyController
            Dim Copy As String
            Dim Button As String
            Dim PageNotFoundPageID As String
            Dim Adminui As New adminUIController(cpCore)
            Dim Description As String
            Dim ButtonList As String
            Dim AllowLinkAlias As Boolean
            'Dim AllowExternalLinksInChildList As Boolean
            Dim LinkForwardAutoInsert As Boolean
            Dim SectionLandingLink As String
            Dim ServerPageDefault As String
            Dim LandingPageID As String
            Dim DocTypeDeclaration As String
            Dim AllowAutoRecognize As Boolean
            Dim KeywordList As String
            '
            Button = cpCore.docProperties.getText(RequestNameButton)
            If Button = ButtonCancel Then
                '
                ' Cancel just exits with no content
                '
                Exit Function
            ElseIf Not cpCore.authContext.isAuthenticatedAdmin(cpCore) Then
                '
                ' Not Admin Error
                '
                ButtonList = ButtonCancel
                Content.Add(Adminui.GetFormBodyAdminOnly())
            Else
                Content.Add(Adminui.EditTableOpen)
                '
                ' Process Requests
                '
                Select Case Button
                    Case ButtonSave, ButtonOK
                        '
                        Dim Keywords() As String
                        Dim Keyword As String
                        Dim Cnt As Integer
                        Dim Ptr As Integer
                        Dim dt As DataTable
                        Dim CS As Integer
                        KeywordList = cpCore.docProperties.getText("KeywordList")
                        If KeywordList <> "" Then
                            KeywordList = genericController.vbReplace(KeywordList, vbCrLf, ",")
                            Keywords = Split(KeywordList, ",")
                            Cnt = UBound(Keywords) + 1
                            For Ptr = 0 To Cnt - 1
                                Keyword = Trim(Keywords(Ptr))
                                If Keyword <> "" Then
                                    'Dim dt As DataTable

                                    dt = cpCore.db.executeSql("select top 1 ID from ccMetaKeywords where name=" & cpCore.db.encodeSQLText(Keyword))
                                    If dt.Rows.Count = 0 Then
                                        CS = cpCore.db.cs_insertRecord("Meta Keywords")
                                        If cpCore.db.cs_ok(CS) Then
                                            Call cpCore.db.cs_set(CS, "name", Keyword)
                                        End If
                                        Call cpCore.db.cs_Close(CS)
                                    End If
                                End If
                            Next
                        End If
                End Select
                If (Button = ButtonOK) Then
                    '
                    ' Exit on OK or cancel
                    '
                    Exit Function
                End If
                '
                ' KeywordList
                '
                Copy = cpCore.htmlDoc.html_GetFormInputTextExpandable("KeywordList", , 10)
                Copy = Copy _
            & "<div>Paste your Meta Keywords into this text box, separated by either commas or enter keys. When you hit Save or OK, Meta Keyword records will be made out of each word. These can then be checked on any content page.</div>"
                Call Content.Add(Adminui.GetEditRow(Copy, "Paste Meta Keywords", "", False, False, ""))
                '
                ' Buttons
                '
                ButtonList = ButtonCancel & "," & ButtonSave & "," & ButtonOK
                '
                ' Close Tables
                '
                Content.Add(Adminui.EditTableClose)
                Content.Add(cpCore.htmlDoc.html_GetFormInputHidden(RequestNameAdminSourceForm, AdminFormSecurityControl))
            End If
            '
            Description = "Use this tool to enter multiple Meta Keywords"
            GetForm_MetaKeywordTool = Adminui.GetBody("Meta Keyword Entry Tool", ButtonList, "", True, True, Description, "", 0, Content.Text)
            Content = Nothing
            '
            '''Dim th as integer: Exit Function
            '
            ' ----- Error Trap
            '
ErrorTrap:
            Content = Nothing
            Call handleLegacyClassError3("GetForm_MetaKeywordTool")
            '
        End Function
        '
        '
        '
        Private Function AllowAdminFieldCheck() As Boolean
            If Not AllowAdminFieldCheck_LocalLoaded Then
                AllowAdminFieldCheck_LocalLoaded = True
                AllowAdminFieldCheck_Local = (cpCore.siteProperties.getBoolean("AllowAdminFieldCheck", True))
            End If
            AllowAdminFieldCheck = AllowAdminFieldCheck_Local
        End Function
        '
        '
        '
        Private Function GetAddonHelp(HelpAddonID As Integer, UsedIDString As String) As String
            Dim addonHelp As String = ""
            Try
                Dim IconFilename As String
                Dim IconWidth As Integer
                Dim IconHeight As Integer
                Dim IconSprites As Integer
                Dim IconIsInline As Boolean
                Dim CS As Integer
                Dim AddonName As String = ""
                Dim AddonHelpCopy As String = ""
                Dim AddonDateAdded As Date
                Dim AddonLastUpdated As Date
                Dim SQL As String
                Dim IncludeHelp As String = ""
                Dim IncludeID As Integer
                Dim IconImg As String = ""
                Dim helpLink As String = ""
                Dim FoundAddon As Boolean
                '
                If genericController.vbInstr(1, "," & UsedIDString & ",", "," & CStr(HelpAddonID) & ",") = 0 Then
                    CS = cpCore.csOpen(cnAddons, HelpAddonID)
                    If cpCore.db.cs_ok(CS) Then
                        FoundAddon = True
                        AddonName = cpCore.db.cs_get(CS, "Name")
                        AddonHelpCopy = cpCore.db.cs_get(CS, "help")
                        AddonDateAdded = cpCore.db.cs_getDate(CS, "dateadded")
                        If cpCore.main_IsContentFieldSupported(cnAddons, "lastupdated") Then
                            AddonLastUpdated = cpCore.db.cs_getDate(CS, "lastupdated")
                        End If
                        If AddonLastUpdated = Date.MinValue Then
                            AddonLastUpdated = AddonDateAdded
                        End If
                        IconFilename = cpCore.db.cs_get(CS, "Iconfilename")
                        IconWidth = cpCore.db.cs_getInteger(CS, "IconWidth")
                        IconHeight = cpCore.db.cs_getInteger(CS, "IconHeight")
                        IconSprites = cpCore.db.cs_getInteger(CS, "IconSprites")
                        IconIsInline = cpCore.db.cs_getBoolean(CS, "IsInline")
                        IconImg = genericController.GetAddonIconImg(cpCore.siteProperties.adminURL, IconWidth, IconHeight, IconSprites, IconIsInline, "", IconFilename, cpCore.serverConfig.appConfig.cdnFilesNetprefix, AddonName, AddonName, "", 0)
                        helpLink = cpCore.db.cs_get(CS, "helpLink")
                    End If
                    Call cpCore.db.cs_Close(CS)
                    '
                    If FoundAddon Then
                        '
                        ' Included Addons
                        '
                        SQL = "select IncludedAddonID from ccAddonIncludeRules where AddonID=" & HelpAddonID
                        CS = cpCore.db.cs_openCsSql_rev("default", SQL)
                        Do While cpCore.db.cs_ok(CS)
                            IncludeID = cpCore.db.cs_getInteger(CS, "IncludedAddonID")
                            IncludeHelp = IncludeHelp & GetAddonHelp(IncludeID, HelpAddonID & "," & CStr(IncludeID))
                            Call cpCore.db.cs_goNext(CS)
                        Loop
                        Call cpCore.db.cs_Close(CS)
                        '
                        If helpLink <> "" Then
                            If AddonHelpCopy <> "" Then
                                AddonHelpCopy = AddonHelpCopy & "<p>For additional help with this add-on, please visit <a href=""" & helpLink & """>" & helpLink & "</a>.</p>"
                            Else
                                AddonHelpCopy = AddonHelpCopy & "<p>For help with this add-on, please visit <a href=""" & helpLink & """>" & helpLink & "</a>.</p>"
                            End If
                        End If
                        If AddonHelpCopy = "" Then
                            AddonHelpCopy = AddonHelpCopy & "<p>Please refer to the help resources available for this collection. More information may also be available in the Contensive online Learning Center <a href=""http://support.contensive.com/Learning-Center"">http://support.contensive.com/Learning-Center</a> or contact Contensive Support support@contensive.com for more information.</p>"
                        End If
                        addonHelp = "" _
                            & "<div class=""ccHelpCon"">" _
                            & "<div class=""title""><div style=""float:right;""><a href=""?addonid=" & HelpAddonID & """>" & IconImg & "</a></div>" & AddonName & " Add-on</div>" _
                            & "<div class=""byline"">" _
                                & "<div>Installed " & AddonDateAdded & "</div>" _
                                & "<div>Last Updated " & AddonLastUpdated & "</div>" _
                            & "</div>" _
                            & "<div class=""body"" style=""clear:both;"">" & AddonHelpCopy & "</div>" _
                            & "</div>"
                        addonHelp = addonHelp & IncludeHelp
                    End If
                End If
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return addonHelp
        End Function
        '
        '
        '
        Private Function GetCollectionHelp(HelpCollectionID As Integer, UsedIDString As String) As String
            Dim returnHelp As String = ""
            Try
                Dim CS As Integer
                Dim Collectionname As String = ""
                Dim CollectionHelpCopy As String = ""
                Dim CollectionHelpLink As String = ""
                Dim CollectionDateAdded As Date
                Dim CollectionLastUpdated As Date
                Dim SQL As String
                Dim IncludeHelp As String = ""
                Dim addonId As Integer
                '
                If genericController.vbInstr(1, "," & UsedIDString & ",", "," & CStr(HelpCollectionID) & ",") = 0 Then
                    CS = cpCore.csOpen("Add-on Collections", HelpCollectionID)
                    If cpCore.db.cs_ok(CS) Then
                        Collectionname = cpCore.db.cs_get(CS, "Name")
                        CollectionHelpCopy = cpCore.db.cs_get(CS, "help")
                        CollectionDateAdded = cpCore.db.cs_getDate(CS, "dateadded")
                        If cpCore.main_IsContentFieldSupported("Add-on Collections", "lastupdated") Then
                            CollectionLastUpdated = cpCore.db.cs_getDate(CS, "lastupdated")
                        End If
                        If cpCore.main_IsContentFieldSupported("Add-on Collections", "helplink") Then
                            CollectionHelpLink = cpCore.db.cs_get(CS, "helplink")
                        End If
                        If CollectionLastUpdated = Date.MinValue Then
                            CollectionLastUpdated = CollectionDateAdded
                        End If
                    End If
                    Call cpCore.db.cs_Close(CS)
                    '
                    ' Add-ons
                    '
                    If True Then ' 4.0.321" Then
                        '$$$$$ cache this
                        CS = cpCore.db.cs_open(cnAddons, "CollectionID=" & HelpCollectionID, "name", , , , , "ID")
                        Do While cpCore.db.cs_ok(CS)
                            IncludeHelp = IncludeHelp & "<div style=""clear:both;"">" & GetAddonHelp(cpCore.db.cs_getInteger(CS, "ID"), "") & "</div>"
                            Call cpCore.db.cs_goNext(CS)
                        Loop
                        Call cpCore.db.cs_Close(CS)
                    Else
                        ' addoncollectionrules deprecated for collectionid
                        SQL = "select AddonID from ccAddonCollectionRules where CollectionID=" & HelpCollectionID
                        CS = cpCore.db.cs_openCsSql_rev("default", SQL)
                        Do While cpCore.db.cs_ok(CS)
                            addonId = cpCore.db.cs_getInteger(CS, "AddonID")
                            If addonId <> 0 Then
                                IncludeHelp = IncludeHelp & "<div style=""clear:both;"">" & GetAddonHelp(addonId, "") & "</div>"
                            End If
                            Call cpCore.db.cs_goNext(CS)
                        Loop
                        Call cpCore.db.cs_Close(CS)
                    End If
                    '
                    If (CollectionHelpLink = "") And (CollectionHelpCopy = "") Then
                        CollectionHelpCopy = "<p>No help information could be found for this collection. Please use the online resources at <a href=""http://support.contensive.com/Learning-Center"">http://support.contensive.com/Learning-Center</a> or contact Contensive Support support@contensive.com by email.</p>"
                    ElseIf CollectionHelpLink <> "" Then
                        CollectionHelpCopy = "" _
                            & "<p>For information about this collection please visit <a href=""" & CollectionHelpLink & """>" & CollectionHelpLink & "</a>.</p>" _
                            & CollectionHelpCopy
                    End If
                    '
                    returnHelp = "" _
                        & "<div class=""ccHelpCon"">" _
                        & "<div class=""title"">" & Collectionname & " Collection</div>" _
                        & "<div class=""byline"">" _
                            & "<div>Installed " & CollectionDateAdded & "</div>" _
                            & "<div>Last Updated " & CollectionLastUpdated & "</div>" _
                        & "</div>" _
                        & "<div class=""body"">" & CollectionHelpCopy & "</div>"
                    If IncludeHelp <> "" Then
                        returnHelp = returnHelp & IncludeHelp
                    End If
                    returnHelp = returnHelp & "</div>"
                End If
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return returnHelp
        End Function
        '
        '
        '
        Private Function GetAddonManager() As String
            Dim addonManager As String = ""
            Try
                Dim AddonStatusOK As Boolean
                Dim AddonMan As addon_AddonMngrSafeClass
                '
                Try
                    addonManager = cpCore.addon.execute_legacy2(0, AddonManagerGuid, "", Contensive.BaseClasses.CPUtilsBaseClass.addonContext.ContextAdmin, "", 0, "", "0", False, -1, "", AddonStatusOK, Nothing)
                Catch ex As Exception
                    Call cpCore.handleExceptionAndContinue(New Exception("Error calling ExecuteAddon with AddonManagerGuid, will attempt Safe Mode Addon Manager. Exception=[" & ex.ToString & "]"))
                    AddonStatusOK = False
                End Try
                If addonManager = "" Then
                    Call cpCore.handleExceptionAndContinue(New Exception("AddonManager returned blank, calling Safe Mode Addon Manager."))
                    AddonStatusOK = False
                End If
                If Not AddonStatusOK Then
                    AddonMan = New addon_AddonMngrSafeClass(cpCore)
                    addonManager = AddonMan.GetForm_SafeModeAddonManager()
                End If
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
            Return addonManager
        End Function
        '
        '
        '
        Private Sub SetIndexSQL(adminContent As cdefModel, editRecord As editRecordClass, ByRef Return_AllowAccess As Boolean, ByRef return_sqlFieldList As String, ByRef return_sqlFrom As String, ByRef return_SQLWhere As String, ByRef return_SQLOrderBy As String, ByRef return_IsLimitedToSubContent As Boolean, ByRef return_ContentAccessLimitMessage As String, ByRef FieldUsedInColumns As Dictionary(Of String, Boolean), ByRef IsLookupFieldValid As Dictionary(Of String, Boolean), ByRef IndexConfig As indexConfigClass, DataSourceName As String, DataSourceType As Integer, RecordTop As Integer, RecordsPerPage As Integer)
            Try
                Dim LookupQuery As String
                Dim ContentName As String
                Dim SortFieldName As String
                '
                Dim LookupPtr As Integer
                Dim lookups() As String
                Dim FindWordName As String
                Dim FindWordValue As String
                Dim FindMatchOption As Integer
                Dim WCount As Integer
                Dim SubContactList As String = ""
                Dim ContentID As Integer
                Dim Pos As Integer
                Dim Cnt As Integer
                Dim ListSplit() As String
                Dim SubContentCnt As Integer
                Dim list As String
                Dim SubQuery As String
                Dim GroupID As Integer
                Dim GroupName As String
                Dim JoinTablename As String
                'Dim FieldName As String
                Dim Ptr As Integer
                Dim IncludedInLeftJoin As Boolean
                Dim SupportWorkflowFields As Boolean
                Dim FieldPtr As Integer
                Dim IncludedInColumns As Boolean
                Dim LookupContentName As String
                ''Dim arrayOfFields() As appServices_metaDataClass.CDefFieldClass
                '
                Return_AllowAccess = True
                '
                ' ----- Populate local vars
                '
                'ReDim FieldUsedInColumns(adminContent.fields.Count)
                'ReDim IsLookupFieldValid(adminContent.fields.Count)
                '
                ' Load IndexConfigs
                '
                IndexConfig = LoadIndexConfig(adminContent)
                Call ProcessIndexConfigRequests(adminContent, editRecord, IndexConfig)
                Call SaveIndexConfig(IndexConfig)
                '
                ' ----- Go through fields and create select and leftjoin sections of sql first
                '
                SupportWorkflowFields = cpCore.workflow.isWorkflowAuthoringCompatible(adminContent.Name) And cpCore.siteProperties.allowWorkflowAuthoring
                '
                ' ----- Workflow Fields
                '
                If SupportWorkflowFields Then
                    return_sqlFieldList = return_sqlFieldList & adminContent.ContentTableName & ".EditSourceID as ID"
                Else
                    return_sqlFieldList = return_sqlFieldList & adminContent.ContentTableName & ".ID"
                End If
                '
                ' ----- From Clause - build joins for Lookup fields in columns, in the findwords, and in sorts
                '
                return_sqlFrom = adminContent.ContentTableName
                'For Each kvp In IndexConfig.Columns
                '    Dim column As indexConfigColumnClass = kvp.Value
                '    If adminContent.fields.ContainsKey(column.Name) Then
                '        Dim field As appServices_metaDataClass.CDefFieldClass = adminContent.fields(column.Name)
                '        asfasdfasdfasdf
                '    End If
                'Next
                For Each keyValuePair As KeyValuePair(Of String, CDefFieldModel) In adminContent.fields
                    Dim field As CDefFieldModel = keyValuePair.Value
                    With field
                        FieldPtr = .id ' quick fix for a replacement for the old fieldPtr (so multiple for loops will always use the same "table"+ptr string
                        IncludedInColumns = False
                        IncludedInLeftJoin = False
                        If Not IsLookupFieldValid.ContainsKey(.nameLc) Then
                            IsLookupFieldValid.Add(.nameLc, False)
                        End If
                        If Not FieldUsedInColumns.ContainsKey(.nameLc) Then
                            FieldUsedInColumns.Add(.nameLc, False)
                        End If
                        '
                        ' test if this field is one of the columns we are displaying
                        '
                        IncludedInColumns = IndexConfig.Columns.ContainsKey(field.nameLc)
                        '
                        ' disallow IncludedInColumns if a non-supported field type
                        '
                        Select Case .fieldTypeId
                            Case FieldTypeIdFileCSS, FieldTypeIdFile, FieldTypeIdFileImage, FieldTypeIdFileJavascript, FieldTypeIdLongText, FieldTypeIdManyToMany, FieldTypeIdRedirect, FieldTypeIdFileTextPrivate, FieldTypeIdFileXML, FieldTypeIdHTML, FieldTypeIdFileHTMLPrivate
                                IncludedInColumns = False
                        End Select
                        'FieldName = genericController.vbLCase(.Name)
                        If (.fieldTypeId = FieldTypeIdMemberSelect) Or ((.fieldTypeId = FieldTypeIdLookup) And (.lookupContentID <> 0)) Then
                            '
                            ' This is a lookup field -- test if IncludedInLeftJoins
                            '
                            JoinTablename = ""
                            If .fieldTypeId = FieldTypeIdMemberSelect Then
                                LookupContentName = "people"
                            Else
                                LookupContentName = cpCore.metaData.getContentNameByID(.lookupContentID)
                            End If
                            If LookupContentName <> "" Then
                                JoinTablename = cpCore.GetContentTablename(LookupContentName)
                            End If
                            IncludedInLeftJoin = IncludedInColumns
                            If (IndexConfig.FindWords.Count > 0) Then
                                '
                                ' test findwords
                                '
                                If IndexConfig.FindWords.ContainsKey(.nameLc) Then
                                    If IndexConfig.FindWords(.nameLc).MatchOption <> FindWordMatchEnum.MatchIgnore Then
                                        IncludedInLeftJoin = True
                                    End If
                                End If
                            End If
                            If (Not IncludedInLeftJoin) And IndexConfig.Sorts.Count > 0 Then
                                '
                                ' test sorts
                                '
                                If IndexConfig.Sorts.ContainsKey(.nameLc.ToLower) Then
                                    IncludedInLeftJoin = True
                                End If
                            End If
                            If IncludedInLeftJoin Then
                                '
                                ' include this lookup field
                                '
                                FieldUsedInColumns.Item(.nameLc) = True
                                If JoinTablename <> "" Then
                                    IsLookupFieldValid(.nameLc) = True
                                    return_sqlFieldList = return_sqlFieldList & ", LookupTable" & FieldPtr & ".Name AS LookupTable" & FieldPtr & "Name"
                                    return_sqlFrom = "(" & return_sqlFrom & " LEFT JOIN " & JoinTablename & " AS LookupTable" & FieldPtr & " ON " & adminContent.ContentTableName & "." & .nameLc & " = LookupTable" & FieldPtr & ".ID)"
                                End If
                                'End If
                            End If
                        End If
                        If IncludedInColumns Then
                            '
                            ' This field is included in the columns, so include it in the select
                            '
                            return_sqlFieldList = return_sqlFieldList & " ," & adminContent.ContentTableName & "." & .nameLc
                            FieldUsedInColumns(.nameLc) = True
                        End If
                    End With
                Next
                '
                ' Sub CDef filter
                '
                With IndexConfig
                    If .SubCDefID > 0 Then
                        ContentName = cpCore.metaData.getContentNameByID(.SubCDefID)
                        return_SQLWhere &= "AND(" & cpCore.metaData.content_getContentControlCriteria(ContentName) & ")"
                    End If
                End With
                '
                ' Return_sqlFrom and Where Clause for Groups filter
                '
                Dim groupTableAlias As String
                Dim sqlRightNow As String
                Dim rightNow As Date
                rightNow = DateTime.Now()
                sqlRightNow = cpCore.db.encodeSQLDate(rightNow)
                If genericController.vbLCase(adminContent.ContentTableName) = genericController.vbLCase("ccMembers") Then
                    'If genericController.vbLCase(AdminContent.ContentTableName) = "ccmembers" Then
                    With IndexConfig
                        If .GroupListCnt > 0 Then
                            For Ptr = 0 To .GroupListCnt - 1
                                GroupName = .GroupList(Ptr)
                                If GroupName <> "" Then
                                    GroupID = cpCore.main_GetRecordID("Groups", GroupName)
                                    If GroupID = 0 And genericController.vbIsNumeric(GroupName) Then
                                        GroupID = genericController.EncodeInteger(GroupName)
                                    End If
                                    groupTableAlias = "GroupFilter" & Ptr
                                    return_SQLWhere &= "AND(" & groupTableAlias & ".GroupID=" & GroupID & ")and((" & groupTableAlias & ".dateExpires is null)or(" & groupTableAlias & ".dateExpires>" & sqlRightNow & "))"
                                    return_sqlFrom = "(" & return_sqlFrom & " INNER JOIN ccMemberRules AS GroupFilter" & Ptr & " ON GroupFilter" & Ptr & ".MemberID=ccMembers.ID)"
                                    'Return_sqlFrom = "(" & Return_sqlFrom & " INNER JOIN ccMemberRules AS GroupFilter" & Ptr & " ON GroupFilter" & Ptr & ".MemberID=ccmembers.ID)"
                                End If
                            Next
                        End If
                    End With
                End If
                '
                ' Add Name into Return_sqlFieldList
                '
                'If Not SQLSelectIncludesName Then
                ' SQLSelectIncludesName is declared, but not initialized
                return_sqlFieldList = return_sqlFieldList & " ," & adminContent.ContentTableName & ".Name"
                'End If
                '
                ' paste sections together and do where clause
                '
                If userHasContentAccess(adminContent.Id) Then
                    '
                    ' This person can see all the records
                    '
                    return_SQLWhere &= "AND(" & cpCore.metaData.content_getContentControlCriteria(adminContent.Name) & ")"
                Else
                    '
                    ' Limit the Query to what they can see
                    '
                    return_IsLimitedToSubContent = True
                    SubQuery = ""
                    list = adminContent.ContentControlCriteria
                    adminContent.Id = adminContent.Id
                    SubContentCnt = 0
                    If list <> "" Then
                        Console.WriteLine("console - adminContent.contentControlCriteria=" & list)
                        Debug.WriteLine("debug - adminContent.contentControlCriteria=" & list)
                        logController.appendLog(cpCore, "appendlog - adminContent.contentControlCriteria=" & list)
                        ListSplit = Split(list, "=")
                        Cnt = UBound(ListSplit) + 1
                        If Cnt > 0 Then
                            For Ptr = 0 To Cnt - 1
                                Pos = genericController.vbInstr(1, ListSplit(Ptr), ")")
                                If Pos > 0 Then
                                    ContentID = genericController.EncodeInteger(Mid(ListSplit(Ptr), 1, Pos - 1))
                                    If ContentID > 0 And (ContentID <> adminContent.Id) And userHasContentAccess(ContentID) Then
                                        SubQuery = SubQuery & "OR(" & adminContent.ContentTableName & ".ContentControlID=" & ContentID & ")"
                                        return_ContentAccessLimitMessage = return_ContentAccessLimitMessage & ", '<a href=""?cid=" & ContentID & """>" & cpCore.metaData.getContentNameByID(ContentID) & "</a>'"
                                        SubContactList &= "," & ContentID
                                        SubContentCnt = SubContentCnt + 1
                                    End If
                                End If
                            Next
                        End If
                    End If
                    If SubQuery = "" Then
                        '
                        ' Person has no access
                        '
                        Return_AllowAccess = False
                        Exit Sub
                    Else
                        return_SQLWhere &= "AND(" & Mid(SubQuery, 3) & ")"
                        return_ContentAccessLimitMessage = "Your access to " & adminContent.Name & " is limited to Sub-content(s) " & Mid(return_ContentAccessLimitMessage, 3)
                    End If
                End If
                '******************
                '
                ' Where Clause: content category
                '
                If IndexConfig.ContentCategoryID <> 0 Then
                    return_SQLWhere &= "AND(" & adminContent.ContentTableName & ".ContentCategoryID=" & IndexConfig.ContentCategoryID & ")"
                End If
                '
                ' Where Clause: Active Only
                '
                If IndexConfig.ActiveOnly Then
                    return_SQLWhere &= "AND(" & adminContent.ContentTableName & ".active<>0)"
                End If
                '
                ' Where Clause: edited by me
                '
                If IndexConfig.LastEditedByMe Then
                    return_SQLWhere &= "AND(" & adminContent.ContentTableName & ".ModifiedBy=" & cpCore.authContext.user.ID & ")"
                End If
                '
                ' Where Clause: edited today
                '
                If IndexConfig.LastEditedToday Then
                    return_SQLWhere &= "AND(" & adminContent.ContentTableName & ".ModifiedDate>=" & cpCore.db.encodeSQLDate(cpCore.app_startTime.Date) & ")"
                End If
                '
                ' Where Clause: edited past week
                '
                If IndexConfig.LastEditedPast7Days Then
                    return_SQLWhere &= "AND(" & adminContent.ContentTableName & ".ModifiedDate>=" & cpCore.db.encodeSQLDate(cpCore.app_startTime.Date.AddDays(-7)) & ")"
                End If
                '
                ' Where Clause: edited past month
                '
                If IndexConfig.LastEditedPast30Days Then
                    return_SQLWhere &= "AND(" & adminContent.ContentTableName & ".ModifiedDate>=" & cpCore.db.encodeSQLDate(cpCore.app_startTime.Date.AddDays(-30)) & ")"
                End If
                '
                ' Where Clause: Workflow
                '
                If SupportWorkflowFields Then
                    '
                    ' Workflow - Either a live record or an unpublished inserted record
                    '
                    return_SQLWhere &= "AND(" & adminContent.ContentTableName & ".EditSourceID is not null)AND(" & adminContent.ContentTableName & ".EditArchive=0)"
                Else
                    '
                    ' no - if restarted without workflow, all edit records are removed
                    ' non-Workflow - Only Live Records (in case workflow has ever been turned on)
                    '
                    '%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
                    'return_SQLWhere &=  "AND((" & AdminContent.ContentTableName & ".EditSourceID is null)or(" & AdminContent.ContentTableName & ".EditSourceID=0))"
                End If
                '
                ' Where Clause: Where Pairs
                '
                For WCount = 0 To 9
                    If WherePair(1, WCount) <> "" Then
                        '
                        ' Verify that the fieldname called out is in this table
                        '
                        If adminContent.fields.Count > 0 Then
                            For Each keyValuePair As KeyValuePair(Of String, CDefFieldModel) In adminContent.fields
                                Dim field As CDefFieldModel = keyValuePair.Value
                                With field
                                    If genericController.vbUCase(.nameLc) = genericController.vbUCase(WherePair(0, WCount)) Then
                                        '
                                        ' found it, add it in the sql
                                        '
                                        return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & WherePair(0, WCount) & "="
                                        If genericController.vbIsNumeric(WherePair(1, WCount)) Then
                                            return_SQLWhere &= WherePair(1, WCount) & ")"
                                        Else
                                            return_SQLWhere &= "'" & WherePair(1, WCount) & "')"
                                        End If
                                        Exit For
                                    End If
                                End With
                            Next
                        End If
                    End If
                Next
                '
                ' Where Clause: findwords
                '
                If IndexConfig.FindWords.Count > 0 Then
                    For Each kvp In IndexConfig.FindWords
                        Dim findword As indexConfigFindWordClass = kvp.Value
                        FindMatchOption = findword.MatchOption
                        If FindMatchOption <> FindWordMatchEnum.MatchIgnore Then
                            FindWordName = genericController.vbLCase(findword.Name)
                            FindWordValue = findword.Value
                            '
                            ' Get FieldType
                            '
                            If adminContent.fields.Count > 0 Then
                                For Each keyValuePair As KeyValuePair(Of String, CDefFieldModel) In adminContent.fields
                                    Dim field As CDefFieldModel = keyValuePair.Value
                                    With field
                                        FieldPtr = .id ' quick fix for a replacement for the old fieldPtr (so multiple for loops will always use the same "table"+ptr string
                                        If genericController.vbLCase(.nameLc) = FindWordName Then
                                            Select Case .fieldTypeId
                                                Case FieldTypeIdAutoIdIncrement, FieldTypeIdInteger
                                                    '
                                                    ' integer
                                                    '
                                                    Dim FindWordValueInteger As Integer = genericController.EncodeInteger(FindWordValue)
                                                    If SupportWorkflowFields And genericController.vbLCase(.nameLc) = "id" Then
                                                        FindWordName = "EditSourceID"
                                                    End If
                                                    Select Case FindMatchOption
                                                        Case FindWordMatchEnum.MatchEmpty
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & " is null)"
                                                        Case FindWordMatchEnum.MatchNotEmpty
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & " is not null)"
                                                        Case FindWordMatchEnum.MatchEquals, FindWordMatchEnum.matchincludes
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & "=" & cpCore.db.encodeSQLNumber(FindWordValueInteger) & ")"
                                                        Case FindWordMatchEnum.MatchGreaterThan
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & ">" & cpCore.db.encodeSQLNumber(FindWordValueInteger) & ")"
                                                        Case FindWordMatchEnum.MatchLessThan
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & "<" & cpCore.db.encodeSQLNumber(FindWordValueInteger) & ")"
                                                    End Select
                                                    Exit For

                                                Case FieldTypeIdCurrency, FieldTypeIdFloat
                                                    '
                                                    ' double
                                                    '
                                                    Dim FindWordValueDouble As Double = genericController.EncodeNumber(FindWordValue)
                                                    Select Case FindMatchOption
                                                        Case FindWordMatchEnum.MatchEmpty
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & " is null)"
                                                        Case FindWordMatchEnum.MatchNotEmpty
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & " is not null)"
                                                        Case FindWordMatchEnum.MatchEquals, FindWordMatchEnum.matchincludes
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & "=" & cpCore.db.encodeSQLNumber(FindWordValueDouble) & ")"
                                                        Case FindWordMatchEnum.MatchGreaterThan
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & ">" & cpCore.db.encodeSQLNumber(FindWordValueDouble) & ")"
                                                        Case FindWordMatchEnum.MatchLessThan
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & "<" & cpCore.db.encodeSQLNumber(FindWordValueDouble) & ")"
                                                    End Select
                                                    Exit For
                                                Case FieldTypeIdFile, FieldTypeIdFileImage
                                                    '
                                                    ' Date
                                                    '
                                                    Select Case FindMatchOption
                                                        Case FindWordMatchEnum.MatchEmpty
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & " is null)"
                                                        Case FindWordMatchEnum.MatchNotEmpty
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & " is not null)"
                                                    End Select
                                                    Exit For
                                                Case FieldTypeIdDate
                                                    '
                                                    ' Date
                                                    '
                                                    Dim findDate As Date = Date.MinValue
                                                    If IsDate(FindWordValue) Then
                                                        findDate = CDate(FindWordValue)
                                                    End If
                                                    Select Case FindMatchOption
                                                        Case FindWordMatchEnum.MatchEmpty
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & " is null)"
                                                        Case FindWordMatchEnum.MatchNotEmpty
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & " is not null)"
                                                        Case FindWordMatchEnum.MatchEquals, FindWordMatchEnum.matchincludes
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & "=" & cpCore.db.encodeSQLDate(findDate) & ")"
                                                        Case FindWordMatchEnum.MatchGreaterThan
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & ">" & cpCore.db.encodeSQLDate(findDate) & ")"
                                                        Case FindWordMatchEnum.MatchLessThan
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & "<" & cpCore.db.encodeSQLDate(findDate) & ")"
                                                    End Select
                                                    Exit For
                                                Case FieldTypeIdLookup, FieldTypeIdMemberSelect
                                                    '
                                                    ' Lookup
                                                    '
                                                    If IsLookupFieldValid(field.nameLc) Then
                                                        '
                                                        ' Content Lookup
                                                        '
                                                        Select Case FindMatchOption
                                                            Case FindWordMatchEnum.MatchEmpty
                                                                return_SQLWhere &= "AND(LookupTable" & FieldPtr & ".ID is null)"
                                                            Case FindWordMatchEnum.MatchNotEmpty
                                                                return_SQLWhere &= "AND(LookupTable" & FieldPtr & ".ID is not null)"
                                                            Case FindWordMatchEnum.MatchEquals
                                                                return_SQLWhere &= "AND(LookupTable" & FieldPtr & ".Name=" & cpCore.db.encodeSQLText(FindWordValue) & ")"
                                                            Case FindWordMatchEnum.matchincludes
                                                                return_SQLWhere &= "AND(LookupTable" & FieldPtr & ".Name LIKE " & cpCore.db.encodeSQLText("%" & FindWordValue & "%") & ")"
                                                        End Select
                                                    ElseIf .lookupList <> "" Then
                                                        '
                                                        ' LookupList
                                                        '
                                                        Select Case FindMatchOption
                                                            Case FindWordMatchEnum.MatchEmpty
                                                                return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & " is null)"
                                                            Case FindWordMatchEnum.MatchNotEmpty
                                                                return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & " is not null)"
                                                            Case FindWordMatchEnum.MatchEquals, FindWordMatchEnum.matchincludes
                                                                lookups = Split(.lookupList, ",")
                                                                LookupQuery = ""
                                                                For LookupPtr = 0 To UBound(lookups)
                                                                    If genericController.vbInstr(1, lookups(LookupPtr), FindWordValue, vbTextCompare) <> 0 Then
                                                                        LookupQuery = LookupQuery & "OR(" & adminContent.ContentTableName & "." & FindWordName & "=" & cpCore.db.encodeSQLNumber(LookupPtr + 1) & ")"
                                                                    End If
                                                                Next
                                                                If LookupQuery <> "" Then
                                                                    return_SQLWhere &= "AND(" & Mid(LookupQuery, 3) & ")"
                                                                End If
                                                        End Select
                                                    End If
                                                    Exit For
                                                Case FieldTypeIdBoolean
                                                    '
                                                    ' Boolean
                                                    '
                                                    Select Case FindMatchOption
                                                        Case FindWordMatchEnum.matchincludes
                                                            If genericController.EncodeBoolean(FindWordValue) Then
                                                                return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & "<>0)"
                                                            Else
                                                                return_SQLWhere &= "AND((" & adminContent.ContentTableName & "." & FindWordName & "=0)or(" & adminContent.ContentTableName & "." & FindWordName & " is null))"
                                                            End If
                                                        Case FindWordMatchEnum.MatchTrue
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & "<>0)"
                                                        Case FindWordMatchEnum.MatchFalse
                                                            return_SQLWhere &= "AND((" & adminContent.ContentTableName & "." & FindWordName & "=0)or(" & adminContent.ContentTableName & "." & FindWordName & " is null))"
                                                    End Select
                                                    Exit For
                                                Case Else
                                                    '
                                                    ' Text (and the rest)
                                                    '
                                                    Select Case FindMatchOption
                                                        Case FindWordMatchEnum.MatchEmpty
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & " is null)"
                                                        Case FindWordMatchEnum.MatchNotEmpty
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & " is not null)"
                                                        Case FindWordMatchEnum.matchincludes
                                                            FindWordValue = cpCore.db.encodeSQLText(FindWordValue)
                                                            FindWordValue = Mid(FindWordValue, 2, Len(FindWordValue) - 2)
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & " LIKE '%" & FindWordValue & "%')"
                                                        Case FindWordMatchEnum.MatchEquals
                                                            return_SQLWhere &= "AND(" & adminContent.ContentTableName & "." & FindWordName & "=" & cpCore.db.encodeSQLText(FindWordValue) & ")"
                                                    End Select
                                                    Exit For
                                            End Select
                                            Exit For
                                        End If
                                    End With
                                Next
                            End If
                        End If
                    Next
                End If
                return_SQLWhere = Mid(return_SQLWhere, 4)
                '
                ' SQL Order by
                '
                return_SQLOrderBy = ""
                Dim orderByDelim As String = " "
                For Each kvp In IndexConfig.Sorts
                    Dim sort As indexConfigSortClass = kvp.Value
                    SortFieldName = genericController.vbLCase(sort.fieldName)
                    '
                    ' Get FieldType
                    '
                    If adminContent.fields.ContainsKey(sort.fieldName) Then
                        With adminContent.fields(sort.fieldName)
                            FieldPtr = .id ' quick fix for a replacement for the old fieldPtr (so multiple for loops will always use the same "table"+ptr string
                            If (.fieldTypeId = FieldTypeIdLookup) And IsLookupFieldValid(sort.fieldName) Then
                                return_SQLOrderBy &= orderByDelim & "LookupTable" & FieldPtr & ".Name"
                            Else
                                return_SQLOrderBy &= orderByDelim & adminContent.ContentTableName & "." & SortFieldName
                            End If
                        End With
                    End If
                    If Not sort.Forward Then
                        return_SQLOrderBy = return_SQLOrderBy & " Desc"
                    End If
                    orderByDelim = ","
                Next
            Catch ex As Exception
                cpCore.handleExceptionAndContinue(ex) : Throw
            End Try
        End Sub
        '
        '==============================================================================================
        '   If this field has no help message, check the field with the same name from it's inherited parent
        '==============================================================================================
        '
        Private Sub getFieldHelpMsgs(ContentID As Integer, FieldName As String, ByRef return_Default As String, ByRef return_Custom As String)
            On Error GoTo ErrorTrap ''Dim th as integer : th = profileLogAdminMethodEnter( "getFieldHelpMsgs")
            '
            Dim SQL As String
            Dim CS As Integer
            Dim Found As Boolean
            Dim ParentID As Integer
            '
            Found = False
            SQL = "select h.HelpDefault,h.HelpCustom from ccfieldhelp h left join ccfields f on f.id=h.fieldid where f.contentid=" & ContentID & " and f.name=" & cpCore.db.encodeSQLText(FieldName)
            CS = cpCore.db.cs_openSql(SQL)
            If cpCore.db.cs_ok(CS) Then
                Found = True
                return_Default = cpCore.db.cs_getText(CS, "helpDefault")
                return_Custom = cpCore.db.cs_getText(CS, "helpCustom")
            End If
            Call cpCore.db.cs_Close(CS)
            '
            If Not Found Then
                ParentID = 0
                SQL = "select parentid from cccontent where id=" & ContentID
                CS = cpCore.db.cs_openSql(SQL)
                If cpCore.db.cs_ok(CS) Then
                    ParentID = cpCore.db.cs_getInteger(CS, "parentid")
                End If
                Call cpCore.db.cs_Close(CS)
                If ParentID <> 0 Then
                    Call getFieldHelpMsgs(ParentID, FieldName, return_Default, return_Custom)
                End If
            End If
            '
            Exit Sub
            '
ErrorTrap:
            Throw (New Exception("unexpected exception"))
        End Sub
        '
        '===========================================================================
        ''' <summary>
        ''' handle legacy errors in this class, v3
        ''' </summary>
        ''' <param name="MethodName"></param>
        ''' <param name="Context"></param>
        ''' <remarks></remarks>
        Private Sub handleLegacyClassError3(ByVal MethodName As String, Optional ByVal Context As String = "")
            '
            Throw (New Exception("error in method [" & MethodName & "], contect [" & Context & "]"))
            '
        End Sub
        '
        '===========================================================================
        ''' <summary>
        ''' handle legacy errors in this class, v2
        ''' </summary>
        ''' <param name="MethodName"></param>
        ''' <param name="Context"></param>
        ''' <remarks></remarks>
        Private Sub handleLegacyClassError2(ByVal MethodName As String, Optional ByVal Context As String = "")
            '
            Throw (New Exception("error in method [" & MethodName & "], Context [" & Context & "]"))
            Err.Clear()
            '
        End Sub
        '
        '===========================================================================
        ''' <summary>
        ''' handle legacy errors in this class, v1
        ''' </summary>
        ''' <param name="MethodName"></param>
        ''' <param name="ErrDescription"></param>
        ''' <remarks></remarks>
        Private Sub handleLegacyClassError(MethodName As String, ErrDescription As String)
            Throw (New Exception("error in method [" & MethodName & "], ErrDescription [" & ErrDescription & "]"))
        End Sub
        'Private Sub pattern1()
        '    Dim admincontent As coreMetaDataClass.CDefClass
        '    For Each keyValuePair As KeyValuePair(Of String, coreMetaDataClass.CDefFieldClass) In admincontent.fields
        '        Dim field As coreMetaDataClass.CDefFieldClass = keyValuePair.Value
        '        '
        '    Next
        'End Sub
        '
        '====================================================================================================
        ' properties
        '====================================================================================================
        '
        ' ----- ccGroupRules storage for list of Content that a group can author
        '
        Private Structure ContentGroupRuleType
            Dim ContentID As Integer
            Dim GroupID As Integer
            Dim AllowAdd As Boolean
            Dim AllowDelete As Boolean
        End Structure
        '
        ' ----- generic id/name dictionary
        '
        Private Structure StorageType
            Dim Id As Integer
            Dim Name As String
        End Structure
        '
        ' ----- Group Rules
        '
        Private Structure GroupRuleType
            Dim GroupID As Integer
            Dim AllowAdd As Boolean
            Dim AllowDelete As Boolean
        End Structure
        '
        ' ----- Used within Admin site to create fancyBox popups
        '
        Private includeFancyBox As Boolean
        Private fancyBoxPtr As Integer
        Private fancyBoxHeadJS As String
        Private ClassInitialized As Boolean        ' if true, the module has been
        Private Const allowSaveBeforeDuplicate = False
        '
        ' ----- To interigate Add-on Collections to check for re-use
        '
        Private Structure DeleteType
            Dim Name As String
            Dim ParentID As Integer
        End Structure
        Private Structure NavigatorType
            Dim Name As String
            Dim menuNameSpace As String
        End Structure
        Private Structure Collection2Type
            Dim AddOnCnt As Integer
            Dim AddonGuid() As String
            Dim AddonName() As String
            Dim MenuCnt As Integer
            Dim Menus() As String
            Dim NavigatorCnt As Integer
            Dim Navigators() As NavigatorType
        End Structure
        Private CollectionCnt As Integer
        Private Collections() As Collection2Type
        '
        ' ----- Target Data Storage
        '
        Private requestedContentId As Integer
        Private requestedRecordId As Integer
        Private AdminContentWorkflowAuthoring As Boolean    ' set if content and site support workflow authoring
        Private BlockEditForm As Boolean                    ' true if there was an error loading the edit record - use to block the edit form
        '
        ' ----- Storage for current EditRecord, loaded in LoadEditRecord
        '
        Public Class editRecordFieldClass
            Public dbValue As Object
            Public value As Object
        End Class
        '
        Public Class editRecordClass
            Public fieldsLc As New Dictionary(Of String, editRecordFieldClass)
            Public id As Integer                            ' ID field of edit record (Record to be edited)
            Public parentID As Integer                      ' ParentID field of edit record (Record to be edited)
            Public nameLc As String                         ' name field of edit record
            Public active As Boolean                        ' active field of the edit record
            Public contentControlId As Integer              ' ContentControlID of the edit record
            Public contentControlId_Name As String          '
            Public menuHeadline As String                   ' Used for Content Watch Link Label if default
            Public modifiedDate As Date                     ' Used for control section display
            Public modifiedByMemberID As Integer            '   =
            Public dateAdded As Date                        '   =
            Public createByMemberId As Integer              '   =
            Public contentCategoryID As Integer
            Public RootPageID As Integer
            Public SetPageNotFoundPageID As Boolean
            Public SetLandingPageID As Boolean

            '
            Public Loaded As Boolean            ' true/false - set true when the field array values are loaded
            Public Saved As Boolean              ' true if edit record was saved during this page
            Public Read_Only As Boolean           ' set if this record can not be edited, for various reasons
            '
            ' From cpCore.main_GetAuthoringStatus
            '
            Public IsDeleted As Boolean          ' true means the edit record has been deleted
            Public IsInserted As Boolean         ' set if Workflow authoring insert
            Public IsModified As Boolean         ' record has been modified since last published
            Public LockModifiedName As String        ' member who first edited the record
            Public LockModifiedDate As Date          ' Date when member modified record
            Public SubmitLock As Boolean         ' set if a submit Lock, even if the current user is admin
            Public SubmittedName As String       ' member who submitted the record
            Public SubmittedDate As Date         ' Date when record was submitted
            Public ApproveLock As Boolean        ' set if an approve Lock
            Public ApprovedName As String        ' member who approved the record
            Public ApprovedDate As Date          ' Date when record was approved
            '
            ' From cpCore.main_GetAuthoringPermissions
            '
            Public AllowInsert As Boolean
            Public AllowCancel As Boolean
            Public AllowSave As Boolean
            Public AllowDelete As Boolean
            Public AllowPublish As Boolean
            Public AllowAbort As Boolean
            Public AllowSubmit As Boolean
            Public AllowApprove As Boolean
            '
            ' From cpCore.main_GetEditLock
            '
            Public EditLock As Boolean           ' set if an edit Lock by anyone else besides the current user
            Public EditLockMemberID As Integer      ' Member who edit locked the record
            Public EditLockMemberName As String  ' Member who edit locked the record
            Public EditLockExpires As Date       ' Time when the edit lock expires

        End Class
        'Private EditRecordValuesObject() As Object      ' Storage for Edit Record values
        'Private EditRecordDbValues() As Object         ' Storage for last values read from Defaults+Db, added b/c file fields need Db value to display
        'Private EditRecord.ID As Integer                    ' ID field of edit record (Record to be edited)
        'Private EditRecord.ParentID As Integer              ' ParentID field of edit record (Record to be edited)
        'Private EditRecord.Name As String                ' name field of edit record
        'Private EditRecord.Active As Boolean             ' active field of the edit record
        'Private EditRecord.ContentID As Integer             ' ContentControlID of the edit record
        'Private EditRecord.ContentName As String         '
        'Private EditRecord.MenuHeadline As String        ' Used for Content Watch Link Label if default
        'Private EditRecord.ModifiedDate As Date          ' Used for control section display
        'Private EditRecord.ModifiedByMemberID As Integer    '   =
        'Private EditRecord.AddedDate As Date             '   =
        'Private EditRecord.AddedByMemberID As Integer       '   =
        'Private EditRecord.ContentCategoryID As Integer
        'Private EditRecordRootPageID As Integer
        'Private EditRecord.SetPageNotFoundPageID As Boolean
        'Private EditRecord.SetLandingPageID As Boolean

        ''
        'Private EditRecord.Loaded As Boolean            ' true/false - set true when the field array values are loaded
        'Private EditRecord.Saved As Boolean              ' true if edit record was saved during this page
        'Private editrecord.read_only As Boolean           ' set if this record can not be edited, for various reasons
        ''
        '' From cpCore.main_GetAuthoringStatus
        ''
        'Private EditRecord.IsDeleted As Boolean          ' true means the edit record has been deleted
        'Private EditRecord.IsInserted As Boolean         ' set if Workflow authoring insert
        'Private EditRecord.IsModified As Boolean         ' record has been modified since last published
        'Private EditRecord.LockModifiedName As String        ' member who first edited the record
        'Private EditRecord.LockModifiedDate As Date          ' Date when member modified record
        'Private EditRecord.SubmitLock As Boolean         ' set if a submit Lock, even if the current user is admin
        'Private EditRecord.SubmittedName As String       ' member who submitted the record
        'Private EditRecordSubmittedDate As Date         ' Date when record was submitted
        'Private EditRecord.ApproveLock As Boolean        ' set if an approve Lock
        'Private EditRecord.ApprovedName As String        ' member who approved the record
        'Private EditRecordApprovedDate As Date          ' Date when record was approved
        ''
        '' From cpCore.main_GetAuthoringPermissions
        ''
        'Private EditRecord.AllowInsert As Boolean
        'Private EditRecord.AllowCancel As Boolean
        'Private EditRecord.AllowSave As Boolean
        'Private EditRecord.AllowDelete As Boolean
        'Private EditRecord.AllowPublish As Boolean
        'Private EditRecord.AllowAbort As Boolean
        'Private EditRecord.AllowSubmit As Boolean
        'Private EditRecord.AllowApprove As Boolean
        ''
        '' From cpCore.main_GetEditLock
        ''
        'Private EditRecord.EditLock As Boolean           ' set if an edit Lock by anyone else besides the current user
        'Private EditRecord.EditLockMemberID As Integer      ' Member who edit locked the record
        'Private EditRecord.EditLockMemberName As String  ' Member who edit locked the record
        'Private EditRecord.EditLockExpires As Date       ' Time when the edit lock expires
        ''
        '
        '=============================================================================
        ' ----- Control Response
        '=============================================================================
        '
        Private AdminButton As String                ' Value returned from a submit button, process into action/form
        Private AdminAction As Integer                 ' The action to be performed before the next form
        Private AdminForm As Integer                   ' The next form to print
        Private AdminSourceForm As Integer             ' The form that submitted that the button to process
        Private WherePair(2, 10) As String                ' for passing where clause values from page to page
        Private WherePairCount As Integer                 ' the current number of WherePairCount in use
        'Private OrderByFieldPointer as integer
        Private Const OrderByFieldPointerDefault = -1
        'Private Direction as integer
        Private RecordTop As Integer
        Private RecordsPerPage As Integer
        Private Const RecordsPerPageDefault = 50
        'Private InputFieldName As String   ' Input FieldName used for DHTMLEdit

        Private MenuDepth As Integer                   ' The number of windows open (below this one)
        Private TitleExtension As String              ' String that adds on to the end of the title
        'Private Findstring(50) As String                ' Value to search for each index column
        '
        ' SpellCheck Features
        '
        Private SpellCheckSupported As Boolean      ' if true, spell checking is supported
        Private SpellCheckRequest As Boolean        ' If true, send the spell check form to the browser
        Private SpellCheckResponse As Boolean       ' if true, the user is sending the spell check back to process
        Private SpellCheckWhiteCharacterList As String
        Private SpellCheckDictionaryFilename As String  ' Full path to user dictionary
        Private SpellCheckIgnoreList As String      ' List of ignore words (used to verify the file is there)
        '
        '=============================================================================
        ' preferences
        '=============================================================================
        '
        Private AdminMenuModeID As Integer         ' Controls the menu mode, set from cpCore.main_MemberAdminMenuModeID
        Private allowAdminTabs As Boolean       ' true uses tab system
        Private fieldEditorPreference As String     ' this is a hidden on the edit form. The popup editor preferences sets this hidden and submits
        '
        '=============================================================================
        '   Content Tracking Editing
        '
        '   These values are read from Edit form response, and are used to populate then
        '   ContentWatch and ContentWatchListRules records.
        '
        '   They are read in before the current record is processed, then processed and
        '   Saved back to ContentWatch and ContentWatchRules after the current record is
        '   processed, so changes to the record can be reflected in the ContentWatch records.
        '   For instance, if the record is marked inactive, the ContentWatchLink is cleared
        '   and all ContentWatchListRules are deleted.
        '
        '=============================================================================
        '
        Private ContentWatchLoaded As Boolean               ' flag set that shows the rest are valid
        '
        Private ContentWatchRecordID As Integer
        Private ContentWatchLink As String
        Private ContentWatchClicks As Integer
        Private ContentWatchLinkLabel As String
        Private ContentWatchExpires As Date
        Private ContentWatchListID() As Integer            ' list of all ContentWatchLists for this Content, read from response, then later saved to Rules
        Private ContentWatchListIDSize As Integer          ' size of ContentWatchListID() array
        Private ContentWatchListIDCount As Integer         ' number of valid entries in ContentWatchListID()
        ''
        ''=============================================================================
        ''   Calendar Event Editing
        ''=============================================================================
        ''
        'Private CalendarEventName As String
        'Private CalendarEventStartDate As Date
        'Private CalendarEventEndDate As Date
        '
        '=============================================================================
        ' Other
        '=============================================================================
        '
        Private ObjectCount As Integer            ' Convert the following objects to this one
        Private ButtonObjectCount As Integer           ' Count of Buttons in use
        Private ImagePreloadCount As Integer           ' Number of images preloaded
        Private ImagePreloads(2, 100) As String       ' names of all gifs already preloaded
        '                       (0,x) = imagename
        '                       (1,x) = ImageObject name for the image
        Private JavaScriptString As String            ' Collected string of Javascript functions to print at end
        Private AdminFormBottom As String   ' the HTML needed to complete the Admin Form after contents
        Private UserAllowContentEdit As Boolean         ' set on load - checked within each edit/index page
        Private UserAllowContentAdd As Boolean
        Private UserAllowContentDelete As Boolean
        Private TabStopCount As Integer                ' used to generate TabStop values
        Private FormInputCount As Integer              ' used to generate labels for form input
        Private EditSectionPanelCount As Integer

        Const OpenLiveWindowTable = "<div ID=""LiveWindowTable"">"
        Const CloseLiveWindowTable = "</div>"
        'Const OpenLiveWindowTable = "<table ID=""LiveWindowTable"" border=0 cellpadding=0 cellspacing=0 width=""100%""><tr><td>"
        'Const CloseLiveWindowTable = "</td></tr></table>"
        '
        'Const adminui.EditTableClose = "<tr>" _
        '        & "<td width=20%><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""1"" ></td>" _
        '        & "<td width=""70%""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""1"" ></td>" _
        '        & "<td width=""10%""><img alt=""space"" src=""/ccLib/images/spacer.gif"" width=""100%"" height=""1"" ></td>" _
        '        & "</tr>" _
        '        & "</table>"
        Const AdminFormErrorOpen = "<table border=""0"" cellpadding=""20"" cellspacing=""0"" width=""100%""><tr><td align=""left"">"
        Const AdminFormErrorClose = "</td></tr></table>"
        '
        ' these were defined different in csv
        '
        'Private Const ContentTypeMember = 1
        'Private Const ContentTypePaths = 2
        'Private Const csv_contenttypeenum.contentTypeEmail = 3
        'Private Const ContentTypeContent = 4
        'Private Const ContentTypeSystem = 5
        'Private Const ContentTypeNormal = 6
        '
        '
        '
        Private Const RequestNameAdminDepth = "ad"
        Private Const RequestNameAdminForm = "af"
        Private Const RequestNameAdminSourceForm = "asf"
        Private Const RequestNameAdminAction = "aa"
        'Private Const RequestNameFieldName = "fn"
        Private Const RequestNameTitleExtension = "tx"
        '
        '
        ''
        ''Private AdminContentCellBackgroundColor As String
        ''
        Public Enum NodeTypeEnum
            NodeTypeEntry = 0
            NodeTypeCollection = 1
            NodeTypeAddon = 2
            NodeTypeContent = 3
        End Enum
        '
        Private Const IndexConfigPrefix = "IndexConfig:"
        '
        Public Enum FindWordMatchEnum
            MatchIgnore = 0
            MatchEmpty = 1
            MatchNotEmpty = 2
            MatchGreaterThan = 3
            MatchLessThan = 4
            matchincludes = 5
            MatchEquals = 6
            MatchTrue = 7
            MatchFalse = 8
        End Enum
        '
        '
        '
        Public Class indexConfigSortClass
            'Dim FieldPtr As Integer
            Public fieldName As String
            Public Forward As Boolean
        End Class
        '
        Public Class indexConfigFindWordClass
            Public Name As String
            Public Value As String
            Public Type As Integer
            Public MatchOption As FindWordMatchEnum
        End Class
        '
        Public Class indexConfigColumnClass
            Public Name As String
            'Public FieldId As Integer
            Public Width As Integer
            Public SortPriority As Integer
            Public SortDirection As Integer
        End Class
        '
        Public Class indexConfigClass
            Public Loaded As Boolean
            Public ContentID As Integer
            Public PageNumber As Integer
            Public RecordsPerPage As Integer
            Public RecordTop As Integer
            Public ContentCategoryID As Integer
            'FindWordList As String
            Public FindWords As New Dictionary(Of String, indexConfigFindWordClass)
            'Public FindWordCnt As Integer
            Public ActiveOnly As Boolean
            Public LastEditedByMe As Boolean
            Public LastEditedToday As Boolean
            Public LastEditedPast7Days As Boolean
            Public LastEditedPast30Days As Boolean
            Public Open As Boolean
            'public SortCnt As Integer
            Public Sorts As New Dictionary(Of String, indexConfigSortClass)
            Public GroupListCnt As Integer
            Public GroupList() As String
            'public ColumnCnt As Integer
            Public Columns As New Dictionary(Of String, indexConfigColumnClass)
            'SubCDefs() as integer
            'SubCDefCnt as integer
            Public SubCDefID As Integer
        End Class
        '
        ' Temp
        '
        Const ToolsActionMenuMove = 1
        Const ToolsActionAddField = 2            ' Add a field to the Index page
        Const ToolsActionRemoveField = 3
        Const ToolsActionMoveFieldRight = 4
        Const ToolsActionMoveFieldLeft = 5
        Const ToolsActionSetAZ = 6
        Const ToolsActionSetZA = 7
        Const ToolsActionExpand = 8
        Const ToolsActionContract = 9
        Const ToolsActionEditMove = 10
        Const ToolsActionRunQuery = 11
        Const ToolsActionDuplicateDataSource = 12
        Const ToolsActionDefineContentFieldFromTableFieldsFromTable = 13
        Const ToolsActionFindAndReplace = 14
        '
        Private AllowAdminFieldCheck_Local As Boolean
        Private AllowAdminFieldCheck_LocalLoaded As Boolean
        '
        Private Const AddonGuidPreferences = "{D9C2D64E-9004-4DBE-806F-60635B9F52C8}"
        '
        '========================================================================
        '
        '========================================================================
        '
        Public Function admin_GetAdminFormBody(Caption As String, ButtonListLeft As String, ButtonListRight As String, AllowAdd As Boolean, AllowDelete As Boolean, Description As String, ContentSummary As String, ContentPadding As Integer, Content As String) As String
            Return New adminUIController(cpCore).GetBody(Caption, ButtonListLeft, ButtonListRight, AllowAdd, AllowDelete, Description, ContentSummary, ContentPadding, Content)
        End Function
    End Class
End Namespace
