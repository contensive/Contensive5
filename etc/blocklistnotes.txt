

addon editing -- add, delete, reorder

?? offtopic - should we have a field type called guid. Create a record and it creates a new guid?
(not needed here)

This replaces
-- content page wysiwyg editor
-- the addon selector in multicolumn design blocks

Works like child pages
-- handle to reorder in the edit banner
-- delete icon in the edit banner
-- add button at the bottom

Architecture
-- ? the system is an addon that is selected for the position, but it doesnt do anything except manage a list in rule records
	page record gets one lookup field called "block list"
	create a field type called block list, and an editor for it that does this
		- admin editor doesnt execute the addons, but lets you order them, etc
		- public editor does the same but executes the addons within dotted container
		- multicolumn addon instance records have a blockList field for each cell
		- pages have one blocklist.
		- architecture
			- a record list 2-column needs to have more that one block list per record - so an instance table is needed
			- blockList table that represents the instance of a block list
			- drop a multicolumn on a page and it autocreates a blockList instance recordds
			- blockListRule table with blockListId, AddonId
			- admin edit a page, the blocklist admin editor sees a 0 and creates a blockList instance (cant edit it until save for now)
			- public page blockList addon also auto creates an instance
	- does this have to be in C50
		- can 50 be wysiwyg implentation
		- it has to be done in the framework because it is a new field type
		- it has to be done in 50 because design blocks are in 50 - if we do it in 51, we need 2 generations of DB (and they are new)
		- try to do it small and isolated, 50 is a basic implementation and 51 will be for real.
	x OR - create an addon called blocklist.
		x - page content just gets an addon list. pick one or pick a blockList.
		x - addon interface would not have a blocklist editor, that would only be public
		

-- ? a json list of addons stored in a text string


